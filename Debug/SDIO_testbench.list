
SDIO_testbench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011484  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a8  08011724  08011724  00021724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080128cc  080128cc  000228cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080128d4  080128d4  000228d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080128d8  080128d8  000228d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f8  20000000  080128dc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008d10  200000f8  080129d4  000300f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20008e08  080129d4  00038e08  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002f8b3  00000000  00000000  00030126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fd5  00000000  00000000  0005f9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001990  00000000  00000000  000649b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001828  00000000  00000000  00066340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c0f9  00000000  00000000  00067b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022b4e  00000000  00000000  000a3c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b75b  00000000  00000000  000c67af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00231f0a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d30  00000000  00000000  00231f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200000f8 	.word	0x200000f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801170c 	.word	0x0801170c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200000fc 	.word	0x200000fc
 80002dc:	0801170c 	.word	0x0801170c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003ce:	f000 b9b9 	b.w	8000744 <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000464:	f000 b96e 	b.w	8000744 <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	468c      	mov	ip, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	f040 8083 	bne.w	8000596 <__udivmoddi4+0x116>
 8000490:	428a      	cmp	r2, r1
 8000492:	4617      	mov	r7, r2
 8000494:	d947      	bls.n	8000526 <__udivmoddi4+0xa6>
 8000496:	fab2 f282 	clz	r2, r2
 800049a:	b142      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049c:	f1c2 0020 	rsb	r0, r2, #32
 80004a0:	fa24 f000 	lsr.w	r0, r4, r0
 80004a4:	4091      	lsls	r1, r2
 80004a6:	4097      	lsls	r7, r2
 80004a8:	ea40 0c01 	orr.w	ip, r0, r1
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbbc f6f8 	udiv	r6, ip, r8
 80004b8:	fa1f fe87 	uxth.w	lr, r7
 80004bc:	fb08 c116 	mls	r1, r8, r6, ip
 80004c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c4:	fb06 f10e 	mul.w	r1, r6, lr
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80004d2:	f080 8119 	bcs.w	8000708 <__udivmoddi4+0x288>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8116 	bls.w	8000708 <__udivmoddi4+0x288>
 80004dc:	3e02      	subs	r6, #2
 80004de:	443b      	add	r3, r7
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f4:	45a6      	cmp	lr, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004fe:	f080 8105 	bcs.w	800070c <__udivmoddi4+0x28c>
 8000502:	45a6      	cmp	lr, r4
 8000504:	f240 8102 	bls.w	800070c <__udivmoddi4+0x28c>
 8000508:	3802      	subs	r0, #2
 800050a:	443c      	add	r4, r7
 800050c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000510:	eba4 040e 	sub.w	r4, r4, lr
 8000514:	2600      	movs	r6, #0
 8000516:	b11d      	cbz	r5, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c5 4300 	strd	r4, r3, [r5]
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	b902      	cbnz	r2, 800052a <__udivmoddi4+0xaa>
 8000528:	deff      	udf	#255	; 0xff
 800052a:	fab2 f282 	clz	r2, r2
 800052e:	2a00      	cmp	r2, #0
 8000530:	d150      	bne.n	80005d4 <__udivmoddi4+0x154>
 8000532:	1bcb      	subs	r3, r1, r7
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	fa1f f887 	uxth.w	r8, r7
 800053c:	2601      	movs	r6, #1
 800053e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000542:	0c21      	lsrs	r1, r4, #16
 8000544:	fb0e 331c 	mls	r3, lr, ip, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb08 f30c 	mul.w	r3, r8, ip
 8000550:	428b      	cmp	r3, r1
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000554:	1879      	adds	r1, r7, r1
 8000556:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800055a:	d202      	bcs.n	8000562 <__udivmoddi4+0xe2>
 800055c:	428b      	cmp	r3, r1
 800055e:	f200 80e9 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 8000562:	4684      	mov	ip, r0
 8000564:	1ac9      	subs	r1, r1, r3
 8000566:	b2a3      	uxth	r3, r4
 8000568:	fbb1 f0fe 	udiv	r0, r1, lr
 800056c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000570:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000574:	fb08 f800 	mul.w	r8, r8, r0
 8000578:	45a0      	cmp	r8, r4
 800057a:	d907      	bls.n	800058c <__udivmoddi4+0x10c>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x10a>
 8000584:	45a0      	cmp	r8, r4
 8000586:	f200 80d9 	bhi.w	800073c <__udivmoddi4+0x2bc>
 800058a:	4618      	mov	r0, r3
 800058c:	eba4 0408 	sub.w	r4, r4, r8
 8000590:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000594:	e7bf      	b.n	8000516 <__udivmoddi4+0x96>
 8000596:	428b      	cmp	r3, r1
 8000598:	d909      	bls.n	80005ae <__udivmoddi4+0x12e>
 800059a:	2d00      	cmp	r5, #0
 800059c:	f000 80b1 	beq.w	8000702 <__udivmoddi4+0x282>
 80005a0:	2600      	movs	r6, #0
 80005a2:	e9c5 0100 	strd	r0, r1, [r5]
 80005a6:	4630      	mov	r0, r6
 80005a8:	4631      	mov	r1, r6
 80005aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ae:	fab3 f683 	clz	r6, r3
 80005b2:	2e00      	cmp	r6, #0
 80005b4:	d14a      	bne.n	800064c <__udivmoddi4+0x1cc>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d302      	bcc.n	80005c0 <__udivmoddi4+0x140>
 80005ba:	4282      	cmp	r2, r0
 80005bc:	f200 80b8 	bhi.w	8000730 <__udivmoddi4+0x2b0>
 80005c0:	1a84      	subs	r4, r0, r2
 80005c2:	eb61 0103 	sbc.w	r1, r1, r3
 80005c6:	2001      	movs	r0, #1
 80005c8:	468c      	mov	ip, r1
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0a8      	beq.n	8000520 <__udivmoddi4+0xa0>
 80005ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80005d2:	e7a5      	b.n	8000520 <__udivmoddi4+0xa0>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f603 	lsr.w	r6, r0, r3
 80005dc:	4097      	lsls	r7, r2
 80005de:	fa01 f002 	lsl.w	r0, r1, r2
 80005e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005e6:	40d9      	lsrs	r1, r3
 80005e8:	4330      	orrs	r0, r6
 80005ea:	0c03      	lsrs	r3, r0, #16
 80005ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80005f0:	fa1f f887 	uxth.w	r8, r7
 80005f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80005f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005fc:	fb06 f108 	mul.w	r1, r6, r8
 8000600:	4299      	cmp	r1, r3
 8000602:	fa04 f402 	lsl.w	r4, r4, r2
 8000606:	d909      	bls.n	800061c <__udivmoddi4+0x19c>
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800060e:	f080 808d 	bcs.w	800072c <__udivmoddi4+0x2ac>
 8000612:	4299      	cmp	r1, r3
 8000614:	f240 808a 	bls.w	800072c <__udivmoddi4+0x2ac>
 8000618:	3e02      	subs	r6, #2
 800061a:	443b      	add	r3, r7
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b281      	uxth	r1, r0
 8000620:	fbb3 f0fe 	udiv	r0, r3, lr
 8000624:	fb0e 3310 	mls	r3, lr, r0, r3
 8000628:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062c:	fb00 f308 	mul.w	r3, r0, r8
 8000630:	428b      	cmp	r3, r1
 8000632:	d907      	bls.n	8000644 <__udivmoddi4+0x1c4>
 8000634:	1879      	adds	r1, r7, r1
 8000636:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800063a:	d273      	bcs.n	8000724 <__udivmoddi4+0x2a4>
 800063c:	428b      	cmp	r3, r1
 800063e:	d971      	bls.n	8000724 <__udivmoddi4+0x2a4>
 8000640:	3802      	subs	r0, #2
 8000642:	4439      	add	r1, r7
 8000644:	1acb      	subs	r3, r1, r3
 8000646:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800064a:	e778      	b.n	800053e <__udivmoddi4+0xbe>
 800064c:	f1c6 0c20 	rsb	ip, r6, #32
 8000650:	fa03 f406 	lsl.w	r4, r3, r6
 8000654:	fa22 f30c 	lsr.w	r3, r2, ip
 8000658:	431c      	orrs	r4, r3
 800065a:	fa20 f70c 	lsr.w	r7, r0, ip
 800065e:	fa01 f306 	lsl.w	r3, r1, r6
 8000662:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000666:	fa21 f10c 	lsr.w	r1, r1, ip
 800066a:	431f      	orrs	r7, r3
 800066c:	0c3b      	lsrs	r3, r7, #16
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fa1f f884 	uxth.w	r8, r4
 8000676:	fb0e 1119 	mls	r1, lr, r9, r1
 800067a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800067e:	fb09 fa08 	mul.w	sl, r9, r8
 8000682:	458a      	cmp	sl, r1
 8000684:	fa02 f206 	lsl.w	r2, r2, r6
 8000688:	fa00 f306 	lsl.w	r3, r0, r6
 800068c:	d908      	bls.n	80006a0 <__udivmoddi4+0x220>
 800068e:	1861      	adds	r1, r4, r1
 8000690:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000694:	d248      	bcs.n	8000728 <__udivmoddi4+0x2a8>
 8000696:	458a      	cmp	sl, r1
 8000698:	d946      	bls.n	8000728 <__udivmoddi4+0x2a8>
 800069a:	f1a9 0902 	sub.w	r9, r9, #2
 800069e:	4421      	add	r1, r4
 80006a0:	eba1 010a 	sub.w	r1, r1, sl
 80006a4:	b2bf      	uxth	r7, r7
 80006a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80006aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80006ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80006b2:	fb00 f808 	mul.w	r8, r0, r8
 80006b6:	45b8      	cmp	r8, r7
 80006b8:	d907      	bls.n	80006ca <__udivmoddi4+0x24a>
 80006ba:	19e7      	adds	r7, r4, r7
 80006bc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006c0:	d22e      	bcs.n	8000720 <__udivmoddi4+0x2a0>
 80006c2:	45b8      	cmp	r8, r7
 80006c4:	d92c      	bls.n	8000720 <__udivmoddi4+0x2a0>
 80006c6:	3802      	subs	r0, #2
 80006c8:	4427      	add	r7, r4
 80006ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006ce:	eba7 0708 	sub.w	r7, r7, r8
 80006d2:	fba0 8902 	umull	r8, r9, r0, r2
 80006d6:	454f      	cmp	r7, r9
 80006d8:	46c6      	mov	lr, r8
 80006da:	4649      	mov	r1, r9
 80006dc:	d31a      	bcc.n	8000714 <__udivmoddi4+0x294>
 80006de:	d017      	beq.n	8000710 <__udivmoddi4+0x290>
 80006e0:	b15d      	cbz	r5, 80006fa <__udivmoddi4+0x27a>
 80006e2:	ebb3 020e 	subs.w	r2, r3, lr
 80006e6:	eb67 0701 	sbc.w	r7, r7, r1
 80006ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80006ee:	40f2      	lsrs	r2, r6
 80006f0:	ea4c 0202 	orr.w	r2, ip, r2
 80006f4:	40f7      	lsrs	r7, r6
 80006f6:	e9c5 2700 	strd	r2, r7, [r5]
 80006fa:	2600      	movs	r6, #0
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	462e      	mov	r6, r5
 8000704:	4628      	mov	r0, r5
 8000706:	e70b      	b.n	8000520 <__udivmoddi4+0xa0>
 8000708:	4606      	mov	r6, r0
 800070a:	e6e9      	b.n	80004e0 <__udivmoddi4+0x60>
 800070c:	4618      	mov	r0, r3
 800070e:	e6fd      	b.n	800050c <__udivmoddi4+0x8c>
 8000710:	4543      	cmp	r3, r8
 8000712:	d2e5      	bcs.n	80006e0 <__udivmoddi4+0x260>
 8000714:	ebb8 0e02 	subs.w	lr, r8, r2
 8000718:	eb69 0104 	sbc.w	r1, r9, r4
 800071c:	3801      	subs	r0, #1
 800071e:	e7df      	b.n	80006e0 <__udivmoddi4+0x260>
 8000720:	4608      	mov	r0, r1
 8000722:	e7d2      	b.n	80006ca <__udivmoddi4+0x24a>
 8000724:	4660      	mov	r0, ip
 8000726:	e78d      	b.n	8000644 <__udivmoddi4+0x1c4>
 8000728:	4681      	mov	r9, r0
 800072a:	e7b9      	b.n	80006a0 <__udivmoddi4+0x220>
 800072c:	4666      	mov	r6, ip
 800072e:	e775      	b.n	800061c <__udivmoddi4+0x19c>
 8000730:	4630      	mov	r0, r6
 8000732:	e74a      	b.n	80005ca <__udivmoddi4+0x14a>
 8000734:	f1ac 0c02 	sub.w	ip, ip, #2
 8000738:	4439      	add	r1, r7
 800073a:	e713      	b.n	8000564 <__udivmoddi4+0xe4>
 800073c:	3802      	subs	r0, #2
 800073e:	443c      	add	r4, r7
 8000740:	e724      	b.n	800058c <__udivmoddi4+0x10c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <print_card_info>:
	free_sectors = free_clusters * fs->csize;

	return free_sectors / 2;
}

void print_card_info(char* volume){
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	//Get the SD card information.
	FRESULT fres;
	DWORD free_clusters, free_sectors, total_sectors;
	FATFS *fs;

	fres = f_getfree(volume, &free_clusters, &fs);
 8000750:	f107 020c 	add.w	r2, r7, #12
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f00e f919 	bl	800e992 <f_getfree>
 8000760:	4603      	mov	r3, r0
 8000762:	77fb      	strb	r3, [r7, #31]
	if (fres != FR_OK) {
 8000764:	7ffb      	ldrb	r3, [r7, #31]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d007      	beq.n	800077a <print_card_info+0x32>
		print("f_getfree error (%i)\r\n", fres);
 800076a:	7ffb      	ldrb	r3, [r7, #31]
 800076c:	4619      	mov	r1, r3
 800076e:	4813      	ldr	r0, [pc, #76]	; (80007bc <print_card_info+0x74>)
 8000770:	f000 fe96 	bl	80014a0 <print>
		while(1){
			flash_error();
 8000774:	f000 feb8 	bl	80014e8 <flash_error>
 8000778:	e7fc      	b.n	8000774 <print_card_info+0x2c>
		}
	}

	//Formula comes from ChaN's documentation
	total_sectors = (fs->n_fatent - 2) * fs->csize;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	3b02      	subs	r3, #2
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	8952      	ldrh	r2, [r2, #10]
 8000784:	fb02 f303 	mul.w	r3, r2, r3
 8000788:	61bb      	str	r3, [r7, #24]
	free_sectors = free_clusters * fs->csize;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	895b      	ldrh	r3, [r3, #10]
 800078e:	461a      	mov	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	fb03 f302 	mul.w	r3, r3, r2
 8000796:	617b      	str	r3, [r7, #20]

	print("Total sectors: %lu\r\n"\
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	69b9      	ldr	r1, [r7, #24]
 800079c:	4808      	ldr	r0, [pc, #32]	; (80007c0 <print_card_info+0x78>)
 800079e:	f000 fe7f 	bl	80014a0 <print>
		  total_sectors,
		  free_sectors
		  );

	//Calculation assumes 512 bytes / sector
	print("SD card stats:\r\n"
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	0859      	lsrs	r1, r3, #1
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	461a      	mov	r2, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <print_card_info+0x7c>)
 80007ae:	f000 fe77 	bl	80014a0 <print>
			"%10lu KiB total drive space.\r\n"
			"%10lu KiB available.\r\n",
			total_sectors / 2, free_sectors / 2);

	return;
 80007b2:	bf00      	nop
}
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	08011724 	.word	0x08011724
 80007c0:	0801173c 	.word	0x0801173c
 80007c4:	08011768 	.word	0x08011768

080007c8 <mount_fs>:





FRESULT mount_fs(FATFS *FatFs, char* path){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]

	//print("Mounting filesystem...\r\n");
	FRESULT fres = f_mount(FatFs, path, 1); //1=mount now
 80007d2:	2201      	movs	r2, #1
 80007d4:	6839      	ldr	r1, [r7, #0]
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f00d f99e 	bl	800db18 <f_mount>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	if (fres != FR_OK) {
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d007      	beq.n	80007f6 <mount_fs+0x2e>
		print("f_mount error (%i)\r\n\n", fres);
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <mount_fs+0x38>)
 80007ec:	f000 fe58 	bl	80014a0 <print>
		while(1){
			flash_error();
 80007f0:	f000 fe7a 	bl	80014e8 <flash_error>
 80007f4:	e7fc      	b.n	80007f0 <mount_fs+0x28>
		}
	} else {
		//print("--> Micro SD card is mounted successfully!\r\n\n");
	}

	return fres;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	080117b0 	.word	0x080117b0

08000804 <unmount_fs>:

FRESULT unmount_fs(){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
	//Unmount the filesystem.
	//print("Unmounting filesystem...\r\n");
	FRESULT fres = f_mount(NULL, "", 1);
 800080a:	2201      	movs	r2, #1
 800080c:	490a      	ldr	r1, [pc, #40]	; (8000838 <unmount_fs+0x34>)
 800080e:	2000      	movs	r0, #0
 8000810:	f00d f982 	bl	800db18 <f_mount>
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
	if (fres == FR_OK) {
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d007      	beq.n	800082e <unmount_fs+0x2a>
		//print("--> The Micro SD card is unmounted!\r\n\n");
	} else if (fres != FR_OK) {
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d004      	beq.n	800082e <unmount_fs+0x2a>
		print("--> The Micro SD was not unmounted!\r\n\n");
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <unmount_fs+0x38>)
 8000826:	f000 fe3b 	bl	80014a0 <print>
		flash_error();
 800082a:	f000 fe5d 	bl	80014e8 <flash_error>
	}

	return fres;
 800082e:	79fb      	ldrb	r3, [r7, #7]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	080117c8 	.word	0x080117c8
 800083c:	080117cc 	.word	0x080117cc

08000840 <recursive_ls>:

//Source: http://elm-chan.org/fsw/ff/doc/readdir.html
FRESULT recursive_ls (
		char* path        /* Start node to be scanned */
)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	; 0x70
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
    FRESULT res;
    DIR dir;
    UINT i;
    static FILINFO fno;

    print("ls %s\r\n", path);
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	482f      	ldr	r0, [pc, #188]	; (8000908 <recursive_ls+0xc8>)
 800084c:	f000 fe28 	bl	80014a0 <print>
    res = f_opendir(&dir, path);                       /* Open the directory */
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	4618      	mov	r0, r3
 8000858:	f00d ff56 	bl	800e708 <f_opendir>
 800085c:	4603      	mov	r3, r0
 800085e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (res == FR_OK) {
 8000862:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000866:	2b00      	cmp	r3, #0
 8000868:	d147      	bne.n	80008fa <recursive_ls+0xba>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4927      	ldr	r1, [pc, #156]	; (800090c <recursive_ls+0xcc>)
 8000870:	4618      	mov	r0, r3
 8000872:	f00e f818 	bl	800e8a6 <f_readdir>
 8000876:	4603      	mov	r3, r0
 8000878:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800087c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000880:	2b00      	cmp	r3, #0
 8000882:	d135      	bne.n	80008f0 <recursive_ls+0xb0>
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <recursive_ls+0xcc>)
 8000886:	7e9b      	ldrb	r3, [r3, #26]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d031      	beq.n	80008f0 <recursive_ls+0xb0>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <recursive_ls+0xcc>)
 800088e:	7b1b      	ldrb	r3, [r3, #12]
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	2b00      	cmp	r3, #0
 8000896:	d01b      	beq.n	80008d0 <recursive_ls+0x90>
                i = strlen(path);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fd21 	bl	80002e0 <strlen>
 800089e:	6638      	str	r0, [r7, #96]	; 0x60
                sprintf(&path[i], "/%s", fno.fname);
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008a4:	4413      	add	r3, r2
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <recursive_ls+0xd0>)
 80008a8:	491a      	ldr	r1, [pc, #104]	; (8000914 <recursive_ls+0xd4>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00e fe0c 	bl	800f4c8 <siprintf>
                res = recursive_ls(path);                    /* Enter the directory */
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ffc5 	bl	8000840 <recursive_ls>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                if (res != FR_OK) break;
 80008bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d114      	bne.n	80008ee <recursive_ls+0xae>
                path[i] = 0;
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008c8:	4413      	add	r3, r2
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	e7cc      	b.n	800086a <recursive_ls+0x2a>
            } else {                                       /* It is a file. */
            	f_stat(path,  &fno);
 80008d0:	490e      	ldr	r1, [pc, #56]	; (800090c <recursive_ls+0xcc>)
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f00e f824 	bl	800e920 <f_stat>
            	print("%s/%s\t%lu B\r\n", path, fno.fname, fno.fsize);
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <recursive_ls+0xcc>)
 80008da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008de:	e9cd 2300 	strd	r2, r3, [sp]
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <recursive_ls+0xd0>)
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <recursive_ls+0xd8>)
 80008e8:	f000 fdda 	bl	80014a0 <print>
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80008ec:	e7bd      	b.n	800086a <recursive_ls+0x2a>
                if (res != FR_OK) break;
 80008ee:	bf00      	nop
            }
        }
        f_closedir(&dir);
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00d ffb0 	bl	800e85a <f_closedir>
    }

    return res;
 80008fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3768      	adds	r7, #104	; 0x68
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	080117f4 	.word	0x080117f4
 800090c:	20000118 	.word	0x20000118
 8000910:	20000132 	.word	0x20000132
 8000914:	080117fc 	.word	0x080117fc
 8000918:	08011824 	.word	0x08011824

0800091c <mkdir>:
    if (fr == FR_OK) fr = f_unlink(path);  /* Delete the empty sub-directory */
    return fr;
}


FRESULT mkdir(char *path){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

	FRESULT fres = f_mkdir(path);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f00e f936 	bl	800eb96 <f_mkdir>
 800092a:	4603      	mov	r3, r0
 800092c:	73fb      	strb	r3, [r7, #15]
	if(fres != FR_OK){
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <mkdir+0x24>
		print("f_mkdir('%s') failed with fres=(%i)\r\n", path, fres);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	461a      	mov	r2, r3
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <mkdir+0x30>)
 800093c:	f000 fdb0 	bl	80014a0 <print>
		//Error_Handler();
	}

	return fres;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	08011878 	.word	0x08011878

08000950 <init_hit_buffers>:

PayloadType_t current_hit_type = PL_INVALID; //Identifier.
PayloadType_t last_hit_type = PL_INVALID;

//Initialize the hit buffers
void init_hit_buffers(){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

	spep = allocate_SPEPacket();
 8000954:	f000 f9ba 	bl	8000ccc <allocate_SPEPacket>
 8000958:	4603      	mov	r3, r0
 800095a:	4a3b      	ldr	r2, [pc, #236]	; (8000a48 <init_hit_buffers+0xf8>)
 800095c:	6013      	str	r3, [r2, #0]
	mpep = allocate_MPEPacket(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f9bc 	bl	8000cdc <allocate_MPEPacket>
 8000964:	4603      	mov	r3, r0
 8000966:	4a39      	ldr	r2, [pc, #228]	; (8000a4c <init_hit_buffers+0xfc>)
 8000968:	6013      	str	r3, [r2, #0]
	wubp = allocate_WUBPacket(0);
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f9d0 	bl	8000d10 <allocate_WUBPacket>
 8000970:	4603      	mov	r3, r0
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <init_hit_buffers+0x100>)
 8000974:	6013      	str	r3, [r2, #0]

	spep->PMT = NUM_PMT-1;
 8000976:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <init_hit_buffers+0xf8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2204      	movs	r2, #4
 800097c:	701a      	strb	r2, [r3, #0]
	mpep->PMT = NUM_PMT-1;
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <init_hit_buffers+0xfc>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2204      	movs	r2, #4
 8000984:	701a      	strb	r2, [r3, #0]
	wubp->PMT = NUM_PMT-1;
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <init_hit_buffers+0x100>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2204      	movs	r2, #4
 800098c:	701a      	strb	r2, [r3, #0]

	spep->trecv = get_system_time()->coarse;
 800098e:	f000 fdc1 	bl	8001514 <get_system_time>
 8000992:	4602      	mov	r2, r0
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <init_hit_buffers+0xf8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	605a      	str	r2, [r3, #4]
	mpep->trecv = get_system_time()->coarse;
 800099c:	f000 fdba 	bl	8001514 <get_system_time>
 80009a0:	4602      	mov	r2, r0
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <init_hit_buffers+0xfc>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	605a      	str	r2, [r3, #4]
	wubp->trecv = get_system_time()->coarse;
 80009aa:	f000 fdb3 	bl	8001514 <get_system_time>
 80009ae:	4602      	mov	r2, r0
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <init_hit_buffers+0x100>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	605a      	str	r2, [r3, #4]

	spep->hit.charge = 0xF;
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <init_hit_buffers+0xf8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	6893      	ldr	r3, [r2, #8]
 80009be:	210f      	movs	r1, #15
 80009c0:	f361 2313 	bfi	r3, r1, #8, #12
 80009c4:	6093      	str	r3, [r2, #8]
	spep->hit.launch_t = 0xF;
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <init_hit_buffers+0xf8>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	899a      	ldrh	r2, [r3, #12]
 80009cc:	f002 0201 	and.w	r2, r2, #1
 80009d0:	f042 021e 	orr.w	r2, r2, #30
 80009d4:	819a      	strh	r2, [r3, #12]
 80009d6:	7b9a      	ldrb	r2, [r3, #14]
 80009d8:	f022 0201 	bic.w	r2, r2, #1
 80009dc:	739a      	strb	r2, [r3, #14]
	spep->hit.subsample_t = 0xF;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <init_hit_buffers+0xf8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	7ada      	ldrb	r2, [r3, #11]
 80009e4:	f002 0203 	and.w	r2, r2, #3
 80009e8:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 80009ec:	72da      	strb	r2, [r3, #11]
 80009ee:	7b1a      	ldrb	r2, [r3, #12]
 80009f0:	f022 0201 	bic.w	r2, r2, #1
 80009f4:	731a      	strb	r2, [r3, #12]
	spep->hit.tdc = 0xF;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <init_hit_buffers+0xf8>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	8953      	ldrh	r3, [r2, #10]
 80009fc:	210f      	movs	r1, #15
 80009fe:	f361 1309 	bfi	r3, r1, #4, #6
 8000a02:	8153      	strh	r3, [r2, #10]
	spep->hit.type = PL_SPE;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <init_hit_buffers+0xf8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2202      	movs	r2, #2
 8000a0a:	721a      	strb	r2, [r3, #8]

	mpep->hit.launch_t = 0xF;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <init_hit_buffers+0xfc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	895a      	ldrh	r2, [r3, #10]
 8000a12:	f002 020f 	and.w	r2, r2, #15
 8000a16:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8000a1a:	815a      	strh	r2, [r3, #10]
 8000a1c:	7b1a      	ldrb	r2, [r3, #12]
 8000a1e:	f022 020f 	bic.w	r2, r2, #15
 8000a22:	731a      	strb	r2, [r3, #12]
	//mpep->hit.nsamples = 0x1;
	mpep->hit.tdc = 0xF;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <init_hit_buffers+0xfc>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	8993      	ldrh	r3, [r2, #12]
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f361 1309 	bfi	r3, r1, #4, #6
 8000a30:	8193      	strh	r3, [r2, #12]
	mpep->hit.type = PL_MPE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <init_hit_buffers+0xfc>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2201      	movs	r2, #1
 8000a38:	721a      	strb	r2, [r3, #8]

	wubp->hits.type = PL_WUBUFF;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <init_hit_buffers+0x100>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2203      	movs	r2, #3
 8000a40:	721a      	strb	r2, [r3, #8]
//	print_SPEPacket(spep);
//	print_MPEPacket(mpep);



}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20002d40 	.word	0x20002d40
 8000a4c:	20002d34 	.word	0x20002d34
 8000a50:	20002d58 	.word	0x20002d58

08000a54 <init_write_heads>:

//Initialize the buffer write heads.
void init_write_heads(){
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_PMT; i++){
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	e012      	b.n	8000a86 <init_write_heads+0x32>
		n_consumed[i] = 0;
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <init_write_heads+0x48>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		write_head[i] = write_buff[i];
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	4413      	add	r3, r2
 8000a72:	025b      	lsls	r3, r3, #9
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <init_write_heads+0x4c>)
 8000a76:	441a      	add	r2, r3
 8000a78:	490a      	ldr	r1, [pc, #40]	; (8000aa4 <init_write_heads+0x50>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_PMT; i++){
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3301      	adds	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	dde9      	ble.n	8000a60 <init_write_heads+0xc>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20002ce8 	.word	0x20002ce8
 8000aa0:	20002d5c 	.word	0x20002d5c
 8000aa4:	200017e0 	.word	0x200017e0

08000aa8 <init_file_handlers>:

//FIXME: Filenames are going to need some work.
void init_file_handlers(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	u32 inittime = get_system_time()->coarse;
 8000aae:	f000 fd31 	bl	8001514 <get_system_time>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < NUM_PMT; i++){
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	e039      	b.n	8000b32 <init_file_handlers+0x8a>
		nhits_inbuff[i] = 0;
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <init_file_handlers+0xa0>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		handler_active[i] = FALSE;
 8000ac8:	4a20      	ldr	r2, [pc, #128]	; (8000b4c <init_file_handlers+0xa4>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
		buffer_full[i] = FALSE;
 8000ad2:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <init_file_handlers+0xa8>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
		sprintf(live_filenames[i], "hitspool/PMT%02d/0x%08X.spool", i, inittime);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	; (8000b54 <init_file_handlers+0xac>)
 8000ae2:	1898      	adds	r0, r3, r2
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	491b      	ldr	r1, [pc, #108]	; (8000b58 <init_file_handlers+0xb0>)
 8000aea:	f00e fced 	bl	800f4c8 <siprintf>

		f_op_res[i] = f_open(&file_handlers[i], live_filenames[i], FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000af4:	fb02 f303 	mul.w	r3, r2, r3
 8000af8:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <init_file_handlers+0xb4>)
 8000afa:	1898      	adds	r0, r3, r2
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <init_file_handlers+0xac>)
 8000b02:	4413      	add	r3, r2
 8000b04:	220b      	movs	r2, #11
 8000b06:	4619      	mov	r1, r3
 8000b08:	f00d f84c 	bl	800dba4 <f_open>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <init_file_handlers+0xb8>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	460a      	mov	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
		print("PMT%02d file opened with fres=(%d)\r\n", i, f_op_res[i]);
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <init_file_handlers+0xb8>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	480f      	ldr	r0, [pc, #60]	; (8000b64 <init_file_handlers+0xbc>)
 8000b28:	f000 fcba 	bl	80014a0 <print>
	for(int i = 0; i < NUM_PMT; i++){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	ddc2      	ble.n	8000abe <init_file_handlers+0x16>
	}
	print("\n");
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <init_file_handlers+0xc0>)
 8000b3a:	f000 fcb1 	bl	80014a0 <print>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20002cfc 	.word	0x20002cfc
 8000b4c:	20002d2c 	.word	0x20002d2c
 8000b50:	20002d38 	.word	0x20002d38
 8000b54:	200027e8 	.word	0x200027e8
 8000b58:	08011964 	.word	0x08011964
 8000b5c:	20001c30 	.word	0x20001c30
 8000b60:	20002d24 	.word	0x20002d24
 8000b64:	08011984 	.word	0x08011984
 8000b68:	080119ac 	.word	0x080119ac

08000b6c <print_IO_handlers>:

void print_IO_handlers(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	print("PMT file handlers:\r\n");
 8000b72:	4827      	ldr	r0, [pc, #156]	; (8000c10 <print_IO_handlers+0xa4>)
 8000b74:	f000 fc94 	bl	80014a0 <print>
	print("------------------\r\n");
 8000b78:	4826      	ldr	r0, [pc, #152]	; (8000c14 <print_IO_handlers+0xa8>)
 8000b7a:	f000 fc91 	bl	80014a0 <print>
	for(int i = 0; i < NUM_PMT; i++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	e028      	b.n	8000bd6 <print_IO_handlers+0x6a>
		print("PMT%02d:\r\n", i);
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4824      	ldr	r0, [pc, #144]	; (8000c18 <print_IO_handlers+0xac>)
 8000b88:	f000 fc8a 	bl	80014a0 <print>
		print("\tbuffer_full:     %s\r\n", buffer_full[i] ? "TRUE" : "FALSE");
 8000b8c:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <print_IO_handlers+0xb0>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <print_IO_handlers+0x30>
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <print_IO_handlers+0xb4>)
 8000b9a:	e000      	b.n	8000b9e <print_IO_handlers+0x32>
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <print_IO_handlers+0xb8>)
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4821      	ldr	r0, [pc, #132]	; (8000c28 <print_IO_handlers+0xbc>)
 8000ba2:	f000 fc7d 	bl	80014a0 <print>
		print("\thandler_active:  %s\r\n", handler_active[i] ? "TRUE" : "FALSE");
 8000ba6:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <print_IO_handlers+0xc0>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <print_IO_handlers+0x4a>
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <print_IO_handlers+0xb4>)
 8000bb4:	e000      	b.n	8000bb8 <print_IO_handlers+0x4c>
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <print_IO_handlers+0xb8>)
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481d      	ldr	r0, [pc, #116]	; (8000c30 <print_IO_handlers+0xc4>)
 8000bbc:	f000 fc70 	bl	80014a0 <print>
		print("\tactive filename: %s\r\n", live_filenames[i]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <print_IO_handlers+0xc8>)
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481b      	ldr	r0, [pc, #108]	; (8000c38 <print_IO_handlers+0xcc>)
 8000bcc:	f000 fc68 	bl	80014a0 <print>
	for(int i = 0; i < NUM_PMT; i++){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	ddd3      	ble.n	8000b84 <print_IO_handlers+0x18>
	}

	print("\nMost recent hit data:\r\n");
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <print_IO_handlers+0xd0>)
 8000bde:	f000 fc5f 	bl	80014a0 <print>
	print("---------------------\r\n");
 8000be2:	4817      	ldr	r0, [pc, #92]	; (8000c40 <print_IO_handlers+0xd4>)
 8000be4:	f000 fc5c 	bl	80014a0 <print>
	print_SPEPacket(spep);
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <print_IO_handlers+0xd8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f8eb 	bl	8000dc8 <print_SPEPacket>
	print_MPEPacket(mpep);
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <print_IO_handlers+0xdc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f936 	bl	8000e68 <print_MPEPacket>
	print_WUBPacket(wubp);
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <print_IO_handlers+0xe0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f977 	bl	8000ef4 <print_WUBPacket>


}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	080119b0 	.word	0x080119b0
 8000c14:	080119c8 	.word	0x080119c8
 8000c18:	080119e0 	.word	0x080119e0
 8000c1c:	20002d38 	.word	0x20002d38
 8000c20:	080119ec 	.word	0x080119ec
 8000c24:	080119f4 	.word	0x080119f4
 8000c28:	080119fc 	.word	0x080119fc
 8000c2c:	20002d2c 	.word	0x20002d2c
 8000c30:	08011a14 	.word	0x08011a14
 8000c34:	200027e8 	.word	0x200027e8
 8000c38:	08011a2c 	.word	0x08011a2c
 8000c3c:	08011a44 	.word	0x08011a44
 8000c40:	08011a60 	.word	0x08011a60
 8000c44:	20002d40 	.word	0x20002d40
 8000c48:	20002d34 	.word	0x20002d34
 8000c4c:	20002d58 	.word	0x20002d58

08000c50 <calc_MPE_hit_size>:
//}



//FIXME: Buffer size.
u16 calc_MPE_hit_size(MPEHit *mpe){
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	return sizeof(MPEHit) + sizeof(u8) * (mpe->nsamples*1.0);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	785a      	ldrb	r2, [r3, #1]
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c70:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000c74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c78:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c7c:	ee17 3a90 	vmov	r3, s15
 8000c80:	b29b      	uxth	r3, r3
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <calc_SPE_hit_size>:

u16 calc_SPE_hit_size(SPEHit *spe){
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	return sizeof(SPEHit);
 8000c96:	2307      	movs	r3, #7
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <calc_WUB_hits_size>:

u16 calc_WUB_hits_size(HitBuffer *wub){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	return sizeof(HitBuffer) + sizeof(u8) * (wub->size);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	785a      	ldrb	r2, [r3, #1]
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	3303      	adds	r3, #3
 8000cbe:	b29b      	uxth	r3, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <allocate_SPEPacket>:


SPEPacket* allocate_SPEPacket(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	return (SPEPacket*)malloc(sizeof(SPEPacket));
 8000cd0:	2010      	movs	r0, #16
 8000cd2:	f00e fb19 	bl	800f308 <malloc>
 8000cd6:	4603      	mov	r3, r0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <allocate_MPEPacket>:

	return spe;
}

//FIXME: factor of 1.5 for ADC 12 bits. Need to fix this.
MPEPacket* allocate_MPEPacket(uint16_t nsamples){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
	MPEPacket* m;
	m = malloc(sizeof(MPEPacket) + sizeof(uint8_t)*nsamples);
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	3310      	adds	r3, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00e fb0c 	bl	800f308 <malloc>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60fb      	str	r3, [r7, #12]
	m->hit.nsamples=nsamples;
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfa:	b299      	uxth	r1, r3
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	6893      	ldr	r3, [r2, #8]
 8000d00:	f361 2313 	bfi	r3, r1, #8, #12
 8000d04:	6093      	str	r3, [r2, #8]
	return m;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <allocate_WUBPacket>:
	m->hit.nsamples = nsamples;
	return  m;
}


WUBPacket* allocate_WUBPacket(uint16_t size){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	80fb      	strh	r3, [r7, #6]
	WUBPacket* w;
	w = malloc(sizeof(WUBPacket) + sizeof(uint8_t)*size);
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	330c      	adds	r3, #12
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00e faf2 	bl	800f308 <malloc>
 8000d24:	4603      	mov	r3, r0
 8000d26:	60fb      	str	r3, [r7, #12]
	w->hits.size=size;
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	b2d1      	uxtb	r1, r2
 8000d34:	2000      	movs	r0, #0
 8000d36:	4301      	orrs	r1, r0
 8000d38:	7259      	strb	r1, [r3, #9]
 8000d3a:	0a12      	lsrs	r2, r2, #8
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	f002 020f 	and.w	r2, r2, #15
 8000d42:	f002 000f 	and.w	r0, r2, #15
 8000d46:	7a9a      	ldrb	r2, [r3, #10]
 8000d48:	f022 020f 	bic.w	r2, r2, #15
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4602      	mov	r2, r0
 8000d50:	430a      	orrs	r2, r1
 8000d52:	729a      	strb	r2, [r3, #10]
	return w;
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <generate_dummy_WUBPacket>:

WUBPacket* generate_dummy_WUBPacket(u8 PMT, u16 size, u8* buffer){
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	603a      	str	r2, [r7, #0]
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	80bb      	strh	r3, [r7, #4]
	WUBPacket* w = allocate_WUBPacket(size);
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ffcd 	bl	8000d10 <allocate_WUBPacket>
 8000d76:	60f8      	str	r0, [r7, #12]
	memcpy(w->hits.data, buffer, size);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	330b      	adds	r3, #11
 8000d7c:	88ba      	ldrh	r2, [r7, #4]
 8000d7e:	6839      	ldr	r1, [r7, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00e fad1 	bl	800f328 <memcpy>
	w->hits.type = PL_WUBUFF;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	721a      	strb	r2, [r3, #8]
	w->PMT = PMT;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	701a      	strb	r2, [r3, #0]
	w->hits.size = size;
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	b2d1      	uxtb	r1, r2
 8000d9e:	2000      	movs	r0, #0
 8000da0:	4301      	orrs	r1, r0
 8000da2:	7259      	strb	r1, [r3, #9]
 8000da4:	0a12      	lsrs	r2, r2, #8
 8000da6:	b292      	uxth	r2, r2
 8000da8:	f002 020f 	and.w	r2, r2, #15
 8000dac:	f002 000f 	and.w	r0, r2, #15
 8000db0:	7a9a      	ldrb	r2, [r3, #10]
 8000db2:	f022 020f 	bic.w	r2, r2, #15
 8000db6:	4611      	mov	r1, r2
 8000db8:	4602      	mov	r2, r0
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	729a      	strb	r2, [r3, #10]
	return  w;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <print_SPEPacket>:


void print_SPEPacket(SPEPacket *p){
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 8000dce:	af06      	add	r7, sp, #24
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	6018      	str	r0, [r3, #0]
			"\t trecv:       0x%8X\r\n"
			"\t launch_t:    0x%8d\r\n"
			"\t tdc:         0x%8d\r\n"
			"\t charge:      0x%8X\r\n"
			"\t subsample_t: 0x%8X\r\n",
			PLNameText[p->hit.type],
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	7a1b      	ldrb	r3, [r3, #8]
 8000dda:	461a      	mov	r2, r3
	sprintf(buffer, "Packet info:\r\n"
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <print_SPEPacket+0x98>)
 8000dde:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
			p->PMT,
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer, "Packet info:\r\n"
 8000de8:	469c      	mov	ip, r3
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
			p->trecv,
			p->hit.launch_t,
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8000dfa:	b29b      	uxth	r3, r3
	sprintf(buffer, "Packet info:\r\n"
 8000dfc:	461d      	mov	r5, r3
			p->hit.tdc,
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	895b      	ldrh	r3, [r3, #10]
 8000e04:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8000e08:	b2db      	uxtb	r3, r3
	sprintf(buffer, "Packet info:\r\n"
 8000e0a:	461e      	mov	r6, r3
			p->hit.charge,
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f3c3 230b 	ubfx	r3, r3, #8, #12
 8000e16:	b29b      	uxth	r3, r3
	sprintf(buffer, "Packet info:\r\n"
 8000e18:	603b      	str	r3, [r7, #0]
			p->hit.subsample_t
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	7ad9      	ldrb	r1, [r3, #11]
 8000e20:	0889      	lsrs	r1, r1, #2
 8000e22:	b2c9      	uxtb	r1, r1
 8000e24:	7b1b      	ldrb	r3, [r3, #12]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	b2db      	uxtb	r3, r3
	sprintf(buffer, "Packet info:\r\n"
 8000e30:	f107 0008 	add.w	r0, r7, #8
 8000e34:	9304      	str	r3, [sp, #16]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	9303      	str	r3, [sp, #12]
 8000e3a:	9602      	str	r6, [sp, #8]
 8000e3c:	9501      	str	r5, [sp, #4]
 8000e3e:	9200      	str	r2, [sp, #0]
 8000e40:	4663      	mov	r3, ip
 8000e42:	4622      	mov	r2, r4
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <print_SPEPacket+0x9c>)
 8000e46:	f00e fb3f 	bl	800f4c8 <siprintf>
			);
	print(buffer);
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fb26 	bl	80014a0 <print>

	return;
 8000e54:	bf00      	nop
}
 8000e56:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000
 8000e64:	08011a78 	.word	0x08011a78

08000e68 <print_MPEPacket>:
	print(buffer);

	return;
}

void print_MPEPacket(MPEPacket *p){
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8000e6e:	af04      	add	r7, sp, #16
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	6018      	str	r0, [r3, #0]
			"\t PMT:         0x%8X\r\n"
			"\t trecv:       0x%8X\r\n"
			"\t launch_t:    0x%8d\r\n"
			"\t tdc:         0x%8d\r\n"
			"\t nsamples:    0x%8X\r\n",
			PLNameText[p->hit.type],
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	7a1b      	ldrb	r3, [r3, #8]
 8000e7a:	461a      	mov	r2, r3
	sprintf(buffer, "Packet info:\r\n"
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <print_MPEPacket+0x84>)
 8000e7e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
			p->PMT,
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer, "Packet info:\r\n"
 8000e88:	461e      	mov	r6, r3
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685a      	ldr	r2, [r3, #4]
			p->trecv,
			p->hit.launch_t,
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	8959      	ldrh	r1, [r3, #10]
 8000e96:	0909      	lsrs	r1, r1, #4
 8000e98:	b289      	uxth	r1, r1
 8000e9a:	7b1b      	ldrb	r3, [r3, #12]
 8000e9c:	f003 030f 	and.w	r3, r3, #15
 8000ea0:	031b      	lsls	r3, r3, #12
 8000ea2:	430b      	orrs	r3, r1
 8000ea4:	b29b      	uxth	r3, r3
	sprintf(buffer, "Packet info:\r\n"
 8000ea6:	4619      	mov	r1, r3
			p->hit.tdc,
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	899b      	ldrh	r3, [r3, #12]
 8000eae:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8000eb2:	b2db      	uxtb	r3, r3
	sprintf(buffer, "Packet info:\r\n"
 8000eb4:	461d      	mov	r5, r3
			p->hit.nsamples
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f3c3 230b 	ubfx	r3, r3, #8, #12
 8000ec0:	b29b      	uxth	r3, r3
	sprintf(buffer, "Packet info:\r\n"
 8000ec2:	f107 0008 	add.w	r0, r7, #8
 8000ec6:	9303      	str	r3, [sp, #12]
 8000ec8:	9502      	str	r5, [sp, #8]
 8000eca:	9101      	str	r1, [sp, #4]
 8000ecc:	9200      	str	r2, [sp, #0]
 8000ece:	4633      	mov	r3, r6
 8000ed0:	4622      	mov	r2, r4
 8000ed2:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <print_MPEPacket+0x88>)
 8000ed4:	f00e faf8 	bl	800f4c8 <siprintf>
			);
	print(buffer);
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fadf 	bl	80014a0 <print>

	return;
 8000ee2:	bf00      	nop
}
 8000ee4:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	08011bf0 	.word	0x08011bf0

08000ef4 <print_WUBPacket>:

void print_WUBPacket(WUBPacket *p){
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8000efa:	af02      	add	r7, sp, #8
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	6018      	str	r0, [r3, #0]
	sprintf(buffer, "Packet info:\r\n"
			"\t Type:        %s\r\n"
			"\t PMT:         0x%8X\r\n"
			"\t trecv:       0x%8X\r\n"
			"\t size:        0x%8d\r\n",
			PLNameText[p->hits.type],
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	7a1b      	ldrb	r3, [r3, #8]
 8000f06:	461a      	mov	r2, r3
	sprintf(buffer, "Packet info:\r\n"
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <print_WUBPacket+0x5c>)
 8000f0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
			p->PMT,
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer, "Packet info:\r\n"
 8000f14:	461c      	mov	r4, r3
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
			p->trecv,
			p->hits.size
 8000f1c:	1d3a      	adds	r2, r7, #4
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	6892      	ldr	r2, [r2, #8]
 8000f22:	f3c2 220b 	ubfx	r2, r2, #8, #12
 8000f26:	b292      	uxth	r2, r2
	sprintf(buffer, "Packet info:\r\n"
 8000f28:	f107 0008 	add.w	r0, r7, #8
 8000f2c:	9201      	str	r2, [sp, #4]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4623      	mov	r3, r4
 8000f32:	460a      	mov	r2, r1
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <print_WUBPacket+0x60>)
 8000f36:	f00e fac7 	bl	800f4c8 <siprintf>
			);
	print(buffer);
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 faae 	bl	80014a0 <print>

	return;
 8000f44:	bf00      	nop
}
 8000f46:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000
 8000f54:	08011c80 	.word	0x08011c80

08000f58 <test_hit_loop>:





u32 test_hit_loop(u32 nhits, uint16_t nsamples){
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	466b      	mov	r3, sp
 8000f66:	461d      	mov	r5, r3
	u8 sample_buf[nsamples];
 8000f68:	887c      	ldrh	r4, [r7, #2]
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	b2a0      	uxth	r0, r4
 8000f72:	f04f 0100 	mov.w	r1, #0
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	00cb      	lsls	r3, r1, #3
 8000f80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f84:	00c2      	lsls	r2, r0, #3
 8000f86:	b2a0      	uxth	r0, r4
 8000f88:	f04f 0100 	mov.w	r1, #0
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	f04f 0300 	mov.w	r3, #0
 8000f94:	00cb      	lsls	r3, r1, #3
 8000f96:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f9a:	00c2      	lsls	r2, r0, #3
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	3307      	adds	r3, #7
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	ebad 0d03 	sub.w	sp, sp, r3
 8000fa8:	466b      	mov	r3, sp
 8000faa:	3300      	adds	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < nsamples;i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	e009      	b.n	8000fc8 <test_hit_loop+0x70>
		sample_buf[i] = i;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	b2d9      	uxtb	r1, r3
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	460a      	mov	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < nsamples;i++)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf1      	blt.n	8000fb4 <test_hit_loop+0x5c>

	print("\n\nEntering data generation loop.\r\n");
 8000fd0:	481c      	ldr	r0, [pc, #112]	; (8001044 <test_hit_loop+0xec>)
 8000fd2:	f000 fa65 	bl	80014a0 <print>
	print("----------------------------\r\n");
 8000fd6:	481c      	ldr	r0, [pc, #112]	; (8001048 <test_hit_loop+0xf0>)
 8000fd8:	f000 fa62 	bl	80014a0 <print>

	int nhits_gen = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
	for(;;){

		if(nhits_gen >= nhits && nhits != 0)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d802      	bhi.n	8000fee <test_hit_loop+0x96>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11a      	bne.n	8001024 <test_hit_loop+0xcc>
			break;

		print("Generating hit %d/%d\r\n", nhits_gen++ +1, nhits);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	617a      	str	r2, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4814      	ldr	r0, [pc, #80]	; (800104c <test_hit_loop+0xf4>)
 8000ffc:	f000 fa50 	bl	80014a0 <print>

//		mpep = generate_dummy_MPEPacket(2, nsamples, sample_buf);
//		current_hit_type = PL_MPE;
//		print_MPEPacket(mpep);

		wubp = generate_dummy_WUBPacket(2, nsamples, sample_buf);
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	4619      	mov	r1, r3
 8001006:	2002      	movs	r0, #2
 8001008:	f7ff fea9 	bl	8000d5e <generate_dummy_WUBPacket>
 800100c:	4603      	mov	r3, r0
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <test_hit_loop+0xf8>)
 8001010:	6013      	str	r3, [r2, #0]
		current_hit_type = PL_WUBUFF;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <test_hit_loop+0xfc>)
 8001014:	2203      	movs	r2, #3
 8001016:	701a      	strb	r2, [r3, #0]

		//print("add_hit_to_buffer()\r\n");
		add_hit_to_buffer();
 8001018:	f000 f952 	bl	80012c0 <add_hit_to_buffer>
		print("----------------------------\r\n");
 800101c:	480a      	ldr	r0, [pc, #40]	; (8001048 <test_hit_loop+0xf0>)
 800101e:	f000 fa3f 	bl	80014a0 <print>
		if(nhits_gen >= nhits && nhits != 0)
 8001022:	e7dd      	b.n	8000fe0 <test_hit_loop+0x88>
			break;
 8001024:	bf00      	nop
	}

	closeout_file_buffers();
 8001026:	f000 f81b 	bl	8001060 <closeout_file_buffers>
	print("Total hits generated: 0x%8lX\r\n"
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <test_hit_loop+0x100>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	6979      	ldr	r1, [r7, #20]
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <test_hit_loop+0x104>)
 8001034:	f000 fa34 	bl	80014a0 <print>
		  "Total bytes written:  0x%8lX\r\n", nhits_gen, total_bytes_written);
	return nhits_gen;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	46ad      	mov	sp, r5
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	08011ce4 	.word	0x08011ce4
 8001048:	08011d08 	.word	0x08011d08
 800104c:	08011d28 	.word	0x08011d28
 8001050:	20002d58 	.word	0x20002d58
 8001054:	20000014 	.word	0x20000014
 8001058:	20000238 	.word	0x20000238
 800105c:	08011d40 	.word	0x08011d40

08001060 <closeout_file_buffers>:

void closeout_file_buffers(){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

	print("\r\nWriting partial buffers.\r\n");
 8001066:	4832      	ldr	r0, [pc, #200]	; (8001130 <closeout_file_buffers+0xd0>)
 8001068:	f000 fa1a 	bl	80014a0 <print>
	print("----------------------------\r\n");
 800106c:	4831      	ldr	r0, [pc, #196]	; (8001134 <closeout_file_buffers+0xd4>)
 800106e:	f000 fa17 	bl	80014a0 <print>
	for(int i = 0; i < NUM_PMT; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e008      	b.n	800108a <closeout_file_buffers+0x2a>
		check_and_write_buffer(i, TRUE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2101      	movs	r1, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f872 	bl	8001168 <check_and_write_buffer>
	for(int i = 0; i < NUM_PMT; i++){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b04      	cmp	r3, #4
 800108e:	ddf3      	ble.n	8001078 <closeout_file_buffers+0x18>
	}
	print("---------------------------\r\n");
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <closeout_file_buffers+0xd8>)
 8001092:	f000 fa05 	bl	80014a0 <print>

	for(int i = 0; i < NUM_PMT; i++){
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	e03e      	b.n	800111a <closeout_file_buffers+0xba>
		nhits_inbuff[i] = 0;
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <closeout_file_buffers+0xdc>)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2100      	movs	r1, #0
 80010a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		write_head[i] = write_buff[i];
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	025b      	lsls	r3, r3, #9
 80010b0:	4a23      	ldr	r2, [pc, #140]	; (8001140 <closeout_file_buffers+0xe0>)
 80010b2:	441a      	add	r2, r3
 80010b4:	4923      	ldr	r1, [pc, #140]	; (8001144 <closeout_file_buffers+0xe4>)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		handler_active[i] = FALSE;
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <closeout_file_buffers+0xe8>)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
		buffer_full[i] = FALSE;
 80010c6:	4a21      	ldr	r2, [pc, #132]	; (800114c <closeout_file_buffers+0xec>)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
		sprintf(live_filenames[i], "nope");
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	4a1e      	ldr	r2, [pc, #120]	; (8001150 <closeout_file_buffers+0xf0>)
 80010d6:	4413      	add	r3, r2
 80010d8:	491e      	ldr	r1, [pc, #120]	; (8001154 <closeout_file_buffers+0xf4>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f00e f9f4 	bl	800f4c8 <siprintf>
		f_op_res[i] = f_close(&file_handlers[i]);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <closeout_file_buffers+0xf8>)
 80010ec:	4413      	add	r3, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00d fae0 	bl	800e6b4 <f_close>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4a18      	ldr	r2, [pc, #96]	; (800115c <closeout_file_buffers+0xfc>)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
		print("PMT%02d file closed with fres=(%d)\r\n", i, f_op_res[i]);
 8001102:	4a16      	ldr	r2, [pc, #88]	; (800115c <closeout_file_buffers+0xfc>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	6839      	ldr	r1, [r7, #0]
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <closeout_file_buffers+0x100>)
 8001110:	f000 f9c6 	bl	80014a0 <print>
	for(int i = 0; i < NUM_PMT; i++){
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b04      	cmp	r3, #4
 800111e:	ddbd      	ble.n	800109c <closeout_file_buffers+0x3c>
	}
	print("\n");
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <closeout_file_buffers+0x104>)
 8001122:	f000 f9bd 	bl	80014a0 <print>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08011d80 	.word	0x08011d80
 8001134:	08011d08 	.word	0x08011d08
 8001138:	08011da0 	.word	0x08011da0
 800113c:	20002cfc 	.word	0x20002cfc
 8001140:	20002d5c 	.word	0x20002d5c
 8001144:	200017e0 	.word	0x200017e0
 8001148:	20002d2c 	.word	0x20002d2c
 800114c:	20002d38 	.word	0x20002d38
 8001150:	200027e8 	.word	0x200027e8
 8001154:	08011dc0 	.word	0x08011dc0
 8001158:	20001c30 	.word	0x20001c30
 800115c:	20002d24 	.word	0x20002d24
 8001160:	08011dc8 	.word	0x08011dc8
 8001164:	080119ac 	.word	0x080119ac

08001168 <check_and_write_buffer>:

u32 check_and_write_buffer(u8 PMT, bool force){
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
	if((n_consumed[PMT] >= TARGET_BLOCKSIZE) || force){
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4a43      	ldr	r2, [pc, #268]	; (8001288 <check_and_write_buffer+0x120>)
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001184:	d202      	bcs.n	800118c <check_and_write_buffer+0x24>
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d074      	beq.n	8001276 <check_and_write_buffer+0x10e>
		//Kick off the file write process.

		print("PMT%02d buffer meets threshold.\r\n"
 800118c:	79f9      	ldrb	r1, [r7, #7]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <check_and_write_buffer+0x120>)
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	461a      	mov	r2, r3
 8001198:	483c      	ldr	r0, [pc, #240]	; (800128c <check_and_write_buffer+0x124>)
 800119a:	f000 f981 	bl	80014a0 <print>
			  "\t n_consumed: 0x%04X\r\n", PMT, n_consumed[PMT]);

		//do some writing things
		buffer_full[PMT] = TRUE;
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <check_and_write_buffer+0x128>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	54d1      	strb	r1, [r2, r3]
		handler_active[PMT] = TRUE;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4a3a      	ldr	r2, [pc, #232]	; (8001294 <check_and_write_buffer+0x12c>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	54d1      	strb	r1, [r2, r3]
		f_op_res[PMT] = f_write(&file_handlers[PMT], write_buff[PMT], n_consumed[PMT], &n_written[PMT]);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a37      	ldr	r2, [pc, #220]	; (8001298 <check_and_write_buffer+0x130>)
 80011ba:	1898      	adds	r0, r3, r2
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	025b      	lsls	r3, r3, #9
 80011c6:	4a35      	ldr	r2, [pc, #212]	; (800129c <check_and_write_buffer+0x134>)
 80011c8:	1899      	adds	r1, r3, r2
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <check_and_write_buffer+0x120>)
 80011ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4c32      	ldr	r4, [pc, #200]	; (80012a0 <check_and_write_buffer+0x138>)
 80011d8:	4423      	add	r3, r4
 80011da:	79fc      	ldrb	r4, [r7, #7]
 80011dc:	f00c ff93 	bl	800e106 <f_write>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <check_and_write_buffer+0x13c>)
 80011e6:	551a      	strb	r2, [r3, r4]

		if(f_op_res[PMT] != FR_OK){
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4a2e      	ldr	r2, [pc, #184]	; (80012a4 <check_and_write_buffer+0x13c>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <check_and_write_buffer+0x9a>
			print("Error writing file %s!\r\n", live_filenames[PMT]);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <check_and_write_buffer+0x140>)
 80011f8:	4413      	add	r3, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	482b      	ldr	r0, [pc, #172]	; (80012ac <check_and_write_buffer+0x144>)
 80011fe:	f000 f94f 	bl	80014a0 <print>
		}

		print("written: now: 0x%04X\ttot: 0x%04X\r\n", n_consumed[PMT], n_written[PMT]);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4a20      	ldr	r2, [pc, #128]	; (8001288 <check_and_write_buffer+0x120>)
 8001206:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <check_and_write_buffer+0x138>)
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	461a      	mov	r2, r3
 8001214:	4826      	ldr	r0, [pc, #152]	; (80012b0 <check_and_write_buffer+0x148>)
 8001216:	f000 f943 	bl	80014a0 <print>
		n_written_tot[PMT] += n_written[PMT];
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <check_and_write_buffer+0x14c>)
 800121e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <check_and_write_buffer+0x138>)
 8001226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	440a      	add	r2, r1
 800122e:	4921      	ldr	r1, [pc, #132]	; (80012b4 <check_and_write_buffer+0x14c>)
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		total_bytes_written += n_written[PMT];
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <check_and_write_buffer+0x138>)
 8001238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <check_and_write_buffer+0x150>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4413      	add	r3, r2
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <check_and_write_buffer+0x150>)
 8001244:	6013      	str	r3, [r2, #0]

		//reset write heads
		n_consumed[PMT] = 0;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <check_and_write_buffer+0x120>)
 800124a:	2100      	movs	r1, #0
 800124c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		write_head[PMT] = write_buff[PMT];
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	79f9      	ldrb	r1, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	025b      	lsls	r3, r3, #9
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <check_and_write_buffer+0x134>)
 800125e:	4413      	add	r3, r2
 8001260:	4a16      	ldr	r2, [pc, #88]	; (80012bc <check_and_write_buffer+0x154>)
 8001262:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		//release the file handler
		buffer_full[PMT] = FALSE;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4a09      	ldr	r2, [pc, #36]	; (8001290 <check_and_write_buffer+0x128>)
 800126a:	2100      	movs	r1, #0
 800126c:	54d1      	strb	r1, [r2, r3]
		handler_active[PMT] = FALSE;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a08      	ldr	r2, [pc, #32]	; (8001294 <check_and_write_buffer+0x12c>)
 8001272:	2100      	movs	r1, #0
 8001274:	54d1      	strb	r1, [r2, r3]
	}

	return n_written[PMT];
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <check_and_write_buffer+0x138>)
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	20002ce8 	.word	0x20002ce8
 800128c:	08011df0 	.word	0x08011df0
 8001290:	20002d38 	.word	0x20002d38
 8001294:	20002d2c 	.word	0x20002d2c
 8001298:	20001c30 	.word	0x20001c30
 800129c:	20002d5c 	.word	0x20002d5c
 80012a0:	20002d10 	.word	0x20002d10
 80012a4:	20002d24 	.word	0x20002d24
 80012a8:	200027e8 	.word	0x200027e8
 80012ac:	08011e28 	.word	0x08011e28
 80012b0:	08011e44 	.word	0x08011e44
 80012b4:	200017f4 	.word	0x200017f4
 80012b8:	20000238 	.word	0x20000238
 80012bc:	200017e0 	.word	0x200017e0

080012c0 <add_hit_to_buffer>:

/*
 * Based on the last hit(s) received, put that data in a buffer.
 */
u32 add_hit_to_buffer(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

	u8 PMT = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
	u16 write_size = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	80bb      	strh	r3, [r7, #4]
	print("Current hit type: %s\r\n", PLNameText[current_hit_type]);
 80012ce:	4b68      	ldr	r3, [pc, #416]	; (8001470 <add_hit_to_buffer+0x1b0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b67      	ldr	r3, [pc, #412]	; (8001474 <add_hit_to_buffer+0x1b4>)
 80012d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012da:	4619      	mov	r1, r3
 80012dc:	4866      	ldr	r0, [pc, #408]	; (8001478 <add_hit_to_buffer+0x1b8>)
 80012de:	f000 f8df 	bl	80014a0 <print>
	switch(current_hit_type){
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <add_hit_to_buffer+0x1b0>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	f200 80ad 	bhi.w	8001448 <add_hit_to_buffer+0x188>
 80012ee:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <add_hit_to_buffer+0x34>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	08001373 	.word	0x08001373
 80012f8:	08001305 	.word	0x08001305
 80012fc:	080013e1 	.word	0x080013e1
 8001300:	0800143f 	.word	0x0800143f
		case PL_SPE:
			write_size = calc_SPE_hit_size(&(spep->hit));
 8001304:	4b5d      	ldr	r3, [pc, #372]	; (800147c <add_hit_to_buffer+0x1bc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3308      	adds	r3, #8
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcbf 	bl	8000c8e <calc_SPE_hit_size>
 8001310:	4603      	mov	r3, r0
 8001312:	80bb      	strh	r3, [r7, #4]
			PMT = spep->PMT;
 8001314:	4b59      	ldr	r3, [pc, #356]	; (800147c <add_hit_to_buffer+0x1bc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
			memcpy(write_buff[PMT], (u8*)&(spep->hit), write_size);
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	4613      	mov	r3, r2
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4413      	add	r3, r2
 8001324:	025b      	lsls	r3, r3, #9
 8001326:	4a56      	ldr	r2, [pc, #344]	; (8001480 <add_hit_to_buffer+0x1c0>)
 8001328:	1898      	adds	r0, r3, r2
 800132a:	4b54      	ldr	r3, [pc, #336]	; (800147c <add_hit_to_buffer+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3308      	adds	r3, #8
 8001330:	88ba      	ldrh	r2, [r7, #4]
 8001332:	4619      	mov	r1, r3
 8001334:	f00d fff8 	bl	800f328 <memcpy>
			write_head[PMT]+=write_size;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4a52      	ldr	r2, [pc, #328]	; (8001484 <add_hit_to_buffer+0x1c4>)
 800133c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001340:	88ba      	ldrh	r2, [r7, #4]
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	440a      	add	r2, r1
 8001346:	494f      	ldr	r1, [pc, #316]	; (8001484 <add_hit_to_buffer+0x1c4>)
 8001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			n_consumed[PMT]+=write_size;
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a4e      	ldr	r2, [pc, #312]	; (8001488 <add_hit_to_buffer+0x1c8>)
 8001350:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001354:	88ba      	ldrh	r2, [r7, #4]
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	440a      	add	r2, r1
 800135a:	494b      	ldr	r1, [pc, #300]	; (8001488 <add_hit_to_buffer+0x1c8>)
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			nhits_inbuff[PMT]++;
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4a4a      	ldr	r2, [pc, #296]	; (800148c <add_hit_to_buffer+0x1cc>)
 8001364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001368:	3201      	adds	r2, #1
 800136a:	4948      	ldr	r1, [pc, #288]	; (800148c <add_hit_to_buffer+0x1cc>)
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8001370:	e06b      	b.n	800144a <add_hit_to_buffer+0x18a>
		case PL_MPE:
			write_size = calc_MPE_hit_size(&(mpep->hit));
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <add_hit_to_buffer+0x1d0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3308      	adds	r3, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc69 	bl	8000c50 <calc_MPE_hit_size>
 800137e:	4603      	mov	r3, r0
 8001380:	80bb      	strh	r3, [r7, #4]
			PMT = mpep->PMT;
 8001382:	4b43      	ldr	r3, [pc, #268]	; (8001490 <add_hit_to_buffer+0x1d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	71fb      	strb	r3, [r7, #7]
			memcpy(write_buff[PMT], (u8*)&(mpep->hit), write_size);
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	025b      	lsls	r3, r3, #9
 8001394:	4a3a      	ldr	r2, [pc, #232]	; (8001480 <add_hit_to_buffer+0x1c0>)
 8001396:	1898      	adds	r0, r3, r2
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <add_hit_to_buffer+0x1d0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3308      	adds	r3, #8
 800139e:	88ba      	ldrh	r2, [r7, #4]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f00d ffc1 	bl	800f328 <memcpy>
			write_head[PMT]+=write_size;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a36      	ldr	r2, [pc, #216]	; (8001484 <add_hit_to_buffer+0x1c4>)
 80013aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	440a      	add	r2, r1
 80013b4:	4933      	ldr	r1, [pc, #204]	; (8001484 <add_hit_to_buffer+0x1c4>)
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			n_consumed[PMT]+=write_size;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <add_hit_to_buffer+0x1c8>)
 80013be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80013c2:	88ba      	ldrh	r2, [r7, #4]
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	440a      	add	r2, r1
 80013c8:	492f      	ldr	r1, [pc, #188]	; (8001488 <add_hit_to_buffer+0x1c8>)
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			nhits_inbuff[PMT]++;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	4a2e      	ldr	r2, [pc, #184]	; (800148c <add_hit_to_buffer+0x1cc>)
 80013d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013d6:	3201      	adds	r2, #1
 80013d8:	492c      	ldr	r1, [pc, #176]	; (800148c <add_hit_to_buffer+0x1cc>)
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80013de:	e034      	b.n	800144a <add_hit_to_buffer+0x18a>
		case PL_WUBUFF:
			write_size = calc_WUB_hits_size(&(wubp->hits));
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <add_hit_to_buffer+0x1d4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3308      	adds	r3, #8
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fc5c 	bl	8000ca4 <calc_WUB_hits_size>
 80013ec:	4603      	mov	r3, r0
 80013ee:	80bb      	strh	r3, [r7, #4]
			PMT = wubp->PMT;
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <add_hit_to_buffer+0x1d4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
			memcpy(write_buff[PMT], (u8*)&(wubp->hits), write_size);
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <add_hit_to_buffer+0x1c0>)
 8001404:	1898      	adds	r0, r3, r2
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <add_hit_to_buffer+0x1d4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3308      	adds	r3, #8
 800140c:	88ba      	ldrh	r2, [r7, #4]
 800140e:	4619      	mov	r1, r3
 8001410:	f00d ff8a 	bl	800f328 <memcpy>
			write_head[PMT]+=write_size;
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <add_hit_to_buffer+0x1c4>)
 8001418:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800141c:	88ba      	ldrh	r2, [r7, #4]
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	440a      	add	r2, r1
 8001422:	4918      	ldr	r1, [pc, #96]	; (8001484 <add_hit_to_buffer+0x1c4>)
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			n_consumed[PMT]+=write_size;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <add_hit_to_buffer+0x1c8>)
 800142c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001430:	88ba      	ldrh	r2, [r7, #4]
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	440a      	add	r2, r1
 8001436:	4914      	ldr	r1, [pc, #80]	; (8001488 <add_hit_to_buffer+0x1c8>)
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//nhits_inbuff[PMT]++;
			break;
 800143c:	e005      	b.n	800144a <add_hit_to_buffer+0x18a>
		case PL_INVALID:
			print("Invalid hit type!\r\n");
 800143e:	4816      	ldr	r0, [pc, #88]	; (8001498 <add_hit_to_buffer+0x1d8>)
 8001440:	f000 f82e 	bl	80014a0 <print>
			return 1;
 8001444:	2301      	movs	r3, #1
 8001446:	e00e      	b.n	8001466 <add_hit_to_buffer+0x1a6>
		default:
			break;
 8001448:	bf00      	nop

	}
	current_hit_type = PL_INVALID;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <add_hit_to_buffer+0x1b0>)
 800144c:	2204      	movs	r2, #4
 800144e:	701a      	strb	r2, [r3, #0]
	print("just wrote 0x%04X bytes to PMT%02d buffer.\r\n", write_size);
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	4619      	mov	r1, r3
 8001454:	4811      	ldr	r0, [pc, #68]	; (800149c <add_hit_to_buffer+0x1dc>)
 8001456:	f000 f823 	bl	80014a0 <print>

	check_and_write_buffer(PMT, FALSE);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe82 	bl	8001168 <check_and_write_buffer>

	return FR_OK;
 8001464:	2300      	movs	r3, #0

}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000014 	.word	0x20000014
 8001474:	20000000 	.word	0x20000000
 8001478:	08011e68 	.word	0x08011e68
 800147c:	20002d40 	.word	0x20002d40
 8001480:	20002d5c 	.word	0x20002d5c
 8001484:	200017e0 	.word	0x200017e0
 8001488:	20002ce8 	.word	0x20002ce8
 800148c:	20002cfc 	.word	0x20002cfc
 8001490:	20002d34 	.word	0x20002d34
 8001494:	20002d58 	.word	0x20002d58
 8001498:	08011e80 	.word	0x08011e80
 800149c:	08011e94 	.word	0x08011e94

080014a0 <print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print(const char *fmt, ...) {
 80014a0:	b40f      	push	{r0, r1, r2, r3}
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	480a      	ldr	r0, [pc, #40]	; (80014e0 <print+0x40>)
 80014b8:	f00e fa88 	bl	800f9cc <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), -1);
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <print+0x40>)
 80014be:	f7fe ff0f 	bl	80002e0 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ca:	4905      	ldr	r1, [pc, #20]	; (80014e0 <print+0x40>)
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <print+0x44>)
 80014ce:	f006 fe31 	bl	8008134 <HAL_UART_Transmit>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014dc:	b004      	add	sp, #16
 80014de:	4770      	bx	lr
 80014e0:	20000244 	.word	0x20000244
 80014e4:	200087a8 	.word	0x200087a8

080014e8 <flash_error>:

void flash_error() {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80014ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <flash_error+0x28>)
 80014f2:	f001 fb84 	bl	8002bfe <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 80014f6:	200a      	movs	r0, #10
 80014f8:	f001 f860 	bl	80025bc <HAL_Delay>
	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80014fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <flash_error+0x28>)
 8001502:	f001 fb7c 	bl	8002bfe <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001506:	2064      	movs	r0, #100	; 0x64
 8001508:	f001 f858 	bl	80025bc <HAL_Delay>

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	58020400 	.word	0x58020400

08001514 <get_system_time>:

SystemTime* get_system_time() {
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	/*
	 * Dummy system time generator.
	 *
	 */

	(&s)->coarse = sys_seconds;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <get_system_time+0x2c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a09      	ldr	r2, [pc, #36]	; (8001544 <get_system_time+0x30>)
 800151e:	6013      	str	r3, [r2, #0]
	(&s)->fine = (__HAL_TIM_GET_COUNTER(&htim5) / 1000);
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <get_system_time+0x34>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <get_system_time+0x38>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <get_system_time+0x30>)
 8001532:	809a      	strh	r2, [r3, #4]
	return &s;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <get_system_time+0x30>)

}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	20000018 	.word	0x20000018
 8001544:	2000023c 	.word	0x2000023c
 8001548:	200088b4 	.word	0x200088b4
 800154c:	10624dd3 	.word	0x10624dd3

08001550 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b0bd      	sub	sp, #244	; 0xf4
 8001554:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001556:	f000 ff9f 	bl	8002498 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800155a:	f000 f971 	bl	8001840 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800155e:	f000 fb51 	bl	8001c04 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001562:	f000 fb03 	bl	8001b6c <MX_USART3_UART_Init>
	MX_SDMMC1_SD_Init();
 8001566:	f000 f9e5 	bl	8001934 <MX_SDMMC1_SD_Init>
	MX_TIM2_Init();
 800156a:	f000 fa13 	bl	8001994 <MX_TIM2_Init>
	MX_FATFS_Init();
 800156e:	f008 fc11 	bl	8009d94 <MX_FATFS_Init>
	MX_TIM5_Init();
 8001572:	f000 faab 	bl	8001acc <MX_TIM5_Init>
	MX_TIM4_Init();
 8001576:	f000 fa5b 	bl	8001a30 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	//Start timers.
	HAL_TIM_Base_Start(&htim2); //1 MHz; 32 bit
 800157a:	4899      	ldr	r0, [pc, #612]	; (80017e0 <main+0x290>)
 800157c:	f006 f898 	bl	80076b0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5); //1 MHz; 32 bit
 8001580:	4898      	ldr	r0, [pc, #608]	; (80017e4 <main+0x294>)
 8001582:	f006 f8fd 	bl	8007780 <HAL_TIM_Base_Start_IT>

	u16 nsamples = 300;
 8001586:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800158a:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	u8 sample_buf[nsamples];
 800158e:	f8b7 40e2 	ldrh.w	r4, [r7, #226]	; 0xe2
 8001592:	4623      	mov	r3, r4
 8001594:	3b01      	subs	r3, #1
 8001596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800159a:	b2a0      	uxth	r0, r4
 800159c:	f04f 0100 	mov.w	r1, #0
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	00cb      	lsls	r3, r1, #3
 80015aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015ae:	00c2      	lsls	r2, r0, #3
 80015b0:	b2a0      	uxth	r0, r4
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	00cb      	lsls	r3, r1, #3
 80015c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015c4:	00c2      	lsls	r2, r0, #3
 80015c6:	4623      	mov	r3, r4
 80015c8:	3307      	adds	r3, #7
 80015ca:	08db      	lsrs	r3, r3, #3
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	ebad 0d03 	sub.w	sp, sp, r3
 80015d2:	466b      	mov	r3, sp
 80015d4:	3300      	adds	r3, #0
 80015d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	for (int i = 0; i < nsamples; i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80015e0:	e00e      	b.n	8001600 <main+0xb0>
		sample_buf[i] = i;
 80015e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015e6:	b2d9      	uxtb	r1, r3
 80015e8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80015ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015f0:	4413      	add	r3, r2
 80015f2:	460a      	mov	r2, r1
 80015f4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < nsamples; i++)
 80015f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015fa:	3301      	adds	r3, #1
 80015fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001600:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8001604:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001608:	429a      	cmp	r2, r3
 800160a:	dbea      	blt.n	80015e2 <main+0x92>

	print("\r\n---- SDMMC Interface Testbench ----\r\n");
 800160c:	4876      	ldr	r0, [pc, #472]	; (80017e8 <main+0x298>)
 800160e:	f7ff ff47 	bl	80014a0 <print>
	print("-----------------------------------\r\n\n");
 8001612:	4876      	ldr	r0, [pc, #472]	; (80017ec <main+0x29c>)
 8001614:	f7ff ff44 	bl	80014a0 <print>

	for (int i = 0; i < 10; i++) {
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800161e:	e01a      	b.n	8001656 <main+0x106>

		HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	4873      	ldr	r0, [pc, #460]	; (80017f0 <main+0x2a0>)
 8001624:	f001 faeb 	bl	8002bfe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001628:	2064      	movs	r0, #100	; 0x64
 800162a:	f000 ffc7 	bl	80025bc <HAL_Delay>
		HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 800162e:	2101      	movs	r1, #1
 8001630:	486f      	ldr	r0, [pc, #444]	; (80017f0 <main+0x2a0>)
 8001632:	f001 fae4 	bl	8002bfe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001636:	2064      	movs	r0, #100	; 0x64
 8001638:	f000 ffc0 	bl	80025bc <HAL_Delay>
		HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001640:	486b      	ldr	r0, [pc, #428]	; (80017f0 <main+0x2a0>)
 8001642:	f001 fadc 	bl	8002bfe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001646:	2064      	movs	r0, #100	; 0x64
 8001648:	f000 ffb8 	bl	80025bc <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 800164c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001650:	3301      	adds	r3, #1
 8001652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001656:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800165a:	2b09      	cmp	r3, #9
 800165c:	dde0      	ble.n	8001620 <main+0xd0>

	}
	HAL_Delay(500);
 800165e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001662:	f000 ffab 	bl	80025bc <HAL_Delay>

	FIL *fil = malloc(sizeof(FIL));		       //File handle
 8001666:	f44f 7016 	mov.w	r0, #600	; 0x258
 800166a:	f00d fe4d 	bl	800f308 <malloc>
 800166e:	4603      	mov	r3, r0
 8001670:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	FILINFO *finfo = malloc(sizeof(FILINFO));  //File information hanle
 8001674:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001678:	f00d fe46 	bl	800f308 <malloc>
 800167c:	4603      	mov	r3, r0
 800167e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	FRESULT fres = FR_OK;   				   //Result after operati ons
 8001682:	2300      	movs	r3, #0
 8001684:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	FATFS *fs = malloc(sizeof(FATFS)); 	   //Filesystem handle
 8001688:	f44f 7012 	mov.w	r0, #584	; 0x248
 800168c:	f00d fe3c 	bl	800f308 <malloc>
 8001690:	4603      	mov	r3, r0
 8001692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	UNUSED(fres);

	char filename_buffer[200];

	//Mount the filesystem.
	print("Mounting filesystem.\r\n");
 8001696:	4857      	ldr	r0, [pc, #348]	; (80017f4 <main+0x2a4>)
 8001698:	f7ff ff02 	bl	80014a0 <print>
	sprintf(filename_buffer, "/");
 800169c:	463b      	mov	r3, r7
 800169e:	4956      	ldr	r1, [pc, #344]	; (80017f8 <main+0x2a8>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00d ff11 	bl	800f4c8 <siprintf>
	fres = mount_fs(fs, filename_buffer);
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80016ae:	f7ff f88b 	bl	80007c8 <mount_fs>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if (fres != FR_OK)
 80016b8:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <main+0x174>
		Error_Handler();
 80016c0:	f000 fbb6 	bl	8001e30 <Error_Handler>
	//	fres = f_stat("/test.img", finfo);
	//	print("%s\t%lu", finfo->fname, finfo->fsize);
	//	return;

	//Display device info.
	print("\r\nDevice stats:\r\n");
 80016c4:	484d      	ldr	r0, [pc, #308]	; (80017fc <main+0x2ac>)
 80016c6:	f7ff feeb 	bl	80014a0 <print>
	print("--------------------\r\n");
 80016ca:	484d      	ldr	r0, [pc, #308]	; (8001800 <main+0x2b0>)
 80016cc:	f7ff fee8 	bl	80014a0 <print>
	print_card_info(filename_buffer);
 80016d0:	463b      	mov	r3, r7
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f838 	bl	8000748 <print_card_info>

	//recursive_ls(filename_buffer);

	sprintf(filename_buffer, "/hitspool");
 80016d8:	463b      	mov	r3, r7
 80016da:	494a      	ldr	r1, [pc, #296]	; (8001804 <main+0x2b4>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f00d fef3 	bl	800f4c8 <siprintf>
	if (mkdir(filename_buffer) == FR_EXIST) {
 80016e2:	463b      	mov	r3, r7
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f919 	bl	800091c <mkdir>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d104      	bne.n	80016fa <main+0x1aa>
		print("Directory '%s' already exists, but that's fine.\r\n",
 80016f0:	463b      	mov	r3, r7
 80016f2:	4619      	mov	r1, r3
 80016f4:	4844      	ldr	r0, [pc, #272]	; (8001808 <main+0x2b8>)
 80016f6:	f7ff fed3 	bl	80014a0 <print>
				filename_buffer);
	}

	print("Generating PMT subdirectories.\r\n");
 80016fa:	4844      	ldr	r0, [pc, #272]	; (800180c <main+0x2bc>)
 80016fc:	f7ff fed0 	bl	80014a0 <print>

	for (int i = 0; i < NUM_PMT; i++) {
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001706:	e02d      	b.n	8001764 <main+0x214>
		sprintf(filename_buffer, "/hitspool/PMT%02d", i);
 8001708:	463b      	mov	r3, r7
 800170a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800170e:	4940      	ldr	r1, [pc, #256]	; (8001810 <main+0x2c0>)
 8001710:	4618      	mov	r0, r3
 8001712:	f00d fed9 	bl	800f4c8 <siprintf>
		print("mkdir('%s')\r\n", filename_buffer);
 8001716:	463b      	mov	r3, r7
 8001718:	4619      	mov	r1, r3
 800171a:	483e      	ldr	r0, [pc, #248]	; (8001814 <main+0x2c4>)
 800171c:	f7ff fec0 	bl	80014a0 <print>

		fres = f_mkdir(filename_buffer);
 8001720:	463b      	mov	r3, r7
 8001722:	4618      	mov	r0, r3
 8001724:	f00d fa37 	bl	800eb96 <f_mkdir>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		if (fres == FR_EXIST) {
 800172e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001732:	2b08      	cmp	r3, #8
 8001734:	d105      	bne.n	8001742 <main+0x1f2>
			print("Directory '%s' already exists, but that's fine.\r\n",
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4833      	ldr	r0, [pc, #204]	; (8001808 <main+0x2b8>)
 800173c:	f7ff feb0 	bl	80014a0 <print>
 8001740:	e00b      	b.n	800175a <main+0x20a>
					filename_buffer);
		} else if (fres != FR_OK) {
 8001742:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <main+0x20a>
			print("mkdir failed with code %d\r\n", fres);
 800174a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800174e:	4619      	mov	r1, r3
 8001750:	4831      	ldr	r0, [pc, #196]	; (8001818 <main+0x2c8>)
 8001752:	f7ff fea5 	bl	80014a0 <print>
			Error_Handler();
 8001756:	f000 fb6b 	bl	8001e30 <Error_Handler>
	for (int i = 0; i < NUM_PMT; i++) {
 800175a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800175e:	3301      	adds	r3, #1
 8001760:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001764:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001768:	2b04      	cmp	r3, #4
 800176a:	ddcd      	ble.n	8001708 <main+0x1b8>

		//recursive_ls(filename_buffer);

	}

	sprintf(filename_buffer, "/hitspool");
 800176c:	463b      	mov	r3, r7
 800176e:	4925      	ldr	r1, [pc, #148]	; (8001804 <main+0x2b4>)
 8001770:	4618      	mov	r0, r3
 8001772:	f00d fea9 	bl	800f4c8 <siprintf>
	recursive_ls(filename_buffer);
 8001776:	463b      	mov	r3, r7
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f861 	bl	8000840 <recursive_ls>

	print("\r\n\n");
 800177e:	4827      	ldr	r0, [pc, #156]	; (800181c <main+0x2cc>)
 8001780:	f7ff fe8e 	bl	80014a0 <print>
	print("\r\n---- Streamer Testbench ----\r\n");
 8001784:	4826      	ldr	r0, [pc, #152]	; (8001820 <main+0x2d0>)
 8001786:	f7ff fe8b 	bl	80014a0 <print>
	print("-----------------------------------\r\n\n");
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <main+0x29c>)
 800178c:	f7ff fe88 	bl	80014a0 <print>

	print("\r\n\n");
 8001790:	4822      	ldr	r0, [pc, #136]	; (800181c <main+0x2cc>)
 8001792:	f7ff fe85 	bl	80014a0 <print>
	print("Initializing hit buffers, write heads, file handlers.\r\n\n");
 8001796:	4823      	ldr	r0, [pc, #140]	; (8001824 <main+0x2d4>)
 8001798:	f7ff fe82 	bl	80014a0 <print>
	init_write_heads();
 800179c:	f7ff f95a 	bl	8000a54 <init_write_heads>
	print("Write heads done.\r\n");
 80017a0:	4821      	ldr	r0, [pc, #132]	; (8001828 <main+0x2d8>)
 80017a2:	f7ff fe7d 	bl	80014a0 <print>
	init_file_handlers();
 80017a6:	f7ff f97f 	bl	8000aa8 <init_file_handlers>
	print("File handlers done.\r\n");
 80017aa:	4820      	ldr	r0, [pc, #128]	; (800182c <main+0x2dc>)
 80017ac:	f7ff fe78 	bl	80014a0 <print>
	init_hit_buffers();
 80017b0:	f7ff f8ce 	bl	8000950 <init_hit_buffers>
	print("Hit buffers done.\r\n");
 80017b4:	481e      	ldr	r0, [pc, #120]	; (8001830 <main+0x2e0>)
 80017b6:	f7ff fe73 	bl	80014a0 <print>

	print_IO_handlers();
 80017ba:	f7ff f9d7 	bl	8000b6c <print_IO_handlers>

	print("Entering data generation loop.\r\n");
 80017be:	481d      	ldr	r0, [pc, #116]	; (8001834 <main+0x2e4>)
 80017c0:	f7ff fe6e 	bl	80014a0 <print>
	test_hit_loop(0, 10);
 80017c4:	210a      	movs	r1, #10
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff fbc6 	bl	8000f58 <test_hit_loop>
//		HAL_Delay(100);
//	}
//
//

	unmount_fs();
 80017cc:	f7ff f81a 	bl	8000804 <unmount_fs>
	print("\r\n-------\r\n");
 80017d0:	4819      	ldr	r0, [pc, #100]	; (8001838 <main+0x2e8>)
 80017d2:	f7ff fe65 	bl	80014a0 <print>
	print("Done.\r\n");
 80017d6:	4819      	ldr	r0, [pc, #100]	; (800183c <main+0x2ec>)
 80017d8:	f7ff fe62 	bl	80014a0 <print>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80017dc:	e7fe      	b.n	80017dc <main+0x28c>
 80017de:	bf00      	nop
 80017e0:	20008900 	.word	0x20008900
 80017e4:	200088b4 	.word	0x200088b4
 80017e8:	08011ec4 	.word	0x08011ec4
 80017ec:	08011eec 	.word	0x08011eec
 80017f0:	58020400 	.word	0x58020400
 80017f4:	08011f14 	.word	0x08011f14
 80017f8:	08011f2c 	.word	0x08011f2c
 80017fc:	08011f30 	.word	0x08011f30
 8001800:	08011f44 	.word	0x08011f44
 8001804:	08011f5c 	.word	0x08011f5c
 8001808:	08011f68 	.word	0x08011f68
 800180c:	08011f9c 	.word	0x08011f9c
 8001810:	08011fc0 	.word	0x08011fc0
 8001814:	08011fd4 	.word	0x08011fd4
 8001818:	08011fe4 	.word	0x08011fe4
 800181c:	08012000 	.word	0x08012000
 8001820:	08012004 	.word	0x08012004
 8001824:	08012028 	.word	0x08012028
 8001828:	08012064 	.word	0x08012064
 800182c:	08012078 	.word	0x08012078
 8001830:	08012090 	.word	0x08012090
 8001834:	080120a4 	.word	0x080120a4
 8001838:	080120c8 	.word	0x080120c8
 800183c:	080120d4 	.word	0x080120d4

08001840 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b09c      	sub	sp, #112	; 0x70
 8001844:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184a:	224c      	movs	r2, #76	; 0x4c
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f00d fd78 	bl	800f344 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2220      	movs	r2, #32
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f00d fd72 	bl	800f344 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001860:	2002      	movs	r0, #2
 8001862:	f001 f9e7 	bl	8002c34 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b30      	ldr	r3, [pc, #192]	; (800192c <SystemClock_Config+0xec>)
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	4a2f      	ldr	r2, [pc, #188]	; (800192c <SystemClock_Config+0xec>)
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001876:	4b2d      	ldr	r3, [pc, #180]	; (800192c <SystemClock_Config+0xec>)
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <SystemClock_Config+0xf0>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <SystemClock_Config+0xf0>)
 8001886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <SystemClock_Config+0xf0>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001898:	bf00      	nop
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <SystemClock_Config+0xf0>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018a6:	d1f8      	bne.n	800189a <SystemClock_Config+0x5a>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b2:	2302      	movs	r3, #2
 80018b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b6:	2302      	movs	r3, #2
 80018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 25;
 80018be:	2319      	movs	r3, #25
 80018c0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80018c6:	2308      	movs	r3, #8
 80018c8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80018ce:	230c      	movs	r3, #12
 80018d0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 f9e2 	bl	8002ca8 <HAL_RCC_OscConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0xae>
		Error_Handler();
 80018ea:	f000 faa1 	bl	8001e30 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018ee:	233f      	movs	r3, #63	; 0x3f
 80018f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f2:	2303      	movs	r3, #3
 80018f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2101      	movs	r1, #1
 8001912:	4618      	mov	r0, r3
 8001914:	f001 fdd8 	bl	80034c8 <HAL_RCC_ClockConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0xe2>
		Error_Handler();
 800191e:	f000 fa87 	bl	8001e30 <Error_Handler>
	}
}
 8001922:	bf00      	nop
 8001924:	3770      	adds	r7, #112	; 0x70
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	58000400 	.word	0x58000400
 8001930:	58024800 	.word	0x58024800

08001934 <MX_SDMMC1_SD_Init>:
/**
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void) {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SDMMC1_Init 0 */
	__HAL_RCC_SDMMC1_CLK_ENABLE();
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_SDMMC1_SD_Init+0x54>)
 800193c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <MX_SDMMC1_SD_Init+0x54>)
 8001942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001946:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_SDMMC1_SD_Init+0x54>)
 800194c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_SDMMC1_SD_Init+0x58>)
 800195a:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <MX_SDMMC1_SD_Init+0x5c>)
 800195c:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_SDMMC1_SD_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_SDMMC1_SD_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_SDMMC1_SD_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_SDMMC1_SD_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 5;
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <MX_SDMMC1_SD_Init+0x58>)
 8001978:	2205      	movs	r2, #5
 800197a:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	58024400 	.word	0x58024400
 800198c:	20008838 	.word	0x20008838
 8001990:	52007000 	.word	0x52007000

08001994 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100 - 1;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019bc:	2263      	movs	r2, #99	; 0x63
 80019be:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019cc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019dc:	f005 fe10 	bl	8007600 <HAL_TIM_Base_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x56>
		Error_Handler();
 80019e6:	f000 fa23 	bl	8001e30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ee:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_TIM2_Init+0x98>)
 80019f8:	f006 f852 	bl	8007aa0 <HAL_TIM_ConfigClockSource>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x72>
		Error_Handler();
 8001a02:	f000 fa15 	bl	8001e30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <MX_TIM2_Init+0x98>)
 8001a14:	f006 fa98 	bl	8007f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001a1e:	f000 fa07 	bl	8001e30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20008900 	.word	0x20008900

08001a30 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001a50:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <MX_TIM4_Init+0x98>)
 8001a52:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 100 - 1;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001a56:	2263      	movs	r2, #99	; 0x63
 8001a58:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a66:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001a74:	4813      	ldr	r0, [pc, #76]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001a76:	f005 fdc3 	bl	8007600 <HAL_TIM_Base_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM4_Init+0x54>
		Error_Handler();
 8001a80:	f000 f9d6 	bl	8001e30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001a92:	f006 f805 	bl	8007aa0 <HAL_TIM_ConfigClockSource>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM4_Init+0x70>
		Error_Handler();
 8001a9c:	f000 f9c8 	bl	8001e30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_TIM4_Init+0x94>)
 8001aae:	f006 fa4b 	bl	8007f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM4_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001ab8:	f000 f9ba 	bl	8001e30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000875c 	.word	0x2000875c
 8001ac8:	40000800 	.word	0x40000800

08001acc <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ad2:	f107 0310 	add.w	r3, r7, #16
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <MX_TIM5_Init+0x98>)
 8001aee:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 100 - 1;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001af2:	2263      	movs	r2, #99	; 0x63
 8001af4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 1000000 - 1;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001afe:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <MX_TIM5_Init+0x9c>)
 8001b00:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8001b0e:	4814      	ldr	r0, [pc, #80]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001b10:	f005 fd76 	bl	8007600 <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM5_Init+0x52>
		Error_Handler();
 8001b1a:	f000 f989 	bl	8001e30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480d      	ldr	r0, [pc, #52]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001b2c:	f005 ffb8 	bl	8007aa0 <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM5_Init+0x6e>
		Error_Handler();
 8001b36:	f000 f97b 	bl	8001e30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <MX_TIM5_Init+0x94>)
 8001b48:	f006 f9fe 	bl	8007f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM5_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001b52:	f000 f96d 	bl	8001e30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200088b4 	.word	0x200088b4
 8001b64:	40000c00 	.word	0x40000c00
 8001b68:	000f423f 	.word	0x000f423f

08001b6c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001b70:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <MX_USART3_UART_Init+0x94>)
 8001b74:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001bb4:	4811      	ldr	r0, [pc, #68]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bb6:	f006 fa6d 	bl	8008094 <HAL_UART_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8001bc0:	f000 f936 	bl	8001e30 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bc8:	f007 fa50 	bl	800906c <HAL_UARTEx_SetTxFifoThreshold>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001bd2:	f000 f92d 	bl	8001e30 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bda:	f007 fa85 	bl	80090e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001be4:	f000 f924 	bl	8001e30 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <MX_USART3_UART_Init+0x90>)
 8001bea:	f007 fa06 	bl	8008ffa <HAL_UARTEx_DisableFifoMode>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8001bf4:	f000 f91c 	bl	8001e30 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200087a8 	.word	0x200087a8
 8001c00:	40004800 	.word	0x40004800

08001c04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	4a7d      	ldr	r2, [pc, #500]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2a:	4b7b      	ldr	r3, [pc, #492]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c38:	4b77      	ldr	r3, [pc, #476]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	4a76      	ldr	r2, [pc, #472]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c48:	4b73      	ldr	r3, [pc, #460]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b70      	ldr	r3, [pc, #448]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	4a6e      	ldr	r2, [pc, #440]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c66:	4b6c      	ldr	r3, [pc, #432]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7a:	4a67      	ldr	r2, [pc, #412]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c84:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c98:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001cb0:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb6:	4a58      	ldr	r2, [pc, #352]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc0:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <MX_GPIO_Init+0x214>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f244 0181 	movw	r1, #16513	; 0x4081
 8001cd4:	4851      	ldr	r0, [pc, #324]	; (8001e1c <MX_GPIO_Init+0x218>)
 8001cd6:	f000 ff79 	bl	8002bcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2140      	movs	r1, #64	; 0x40
 8001cde:	4850      	ldr	r0, [pc, #320]	; (8001e20 <MX_GPIO_Init+0x21c>)
 8001ce0:	f000 ff74 	bl	8002bcc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cea:	4b4e      	ldr	r3, [pc, #312]	; (8001e24 <MX_GPIO_Init+0x220>)
 8001cec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	484b      	ldr	r0, [pc, #300]	; (8001e28 <MX_GPIO_Init+0x224>)
 8001cfa:	f000 fd9f 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001cfe:	2332      	movs	r3, #50	; 0x32
 8001d00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d0e:	230b      	movs	r3, #11
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	4843      	ldr	r0, [pc, #268]	; (8001e28 <MX_GPIO_Init+0x224>)
 8001d1a:	f000 fd8f 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001d1e:	2386      	movs	r3, #134	; 0x86
 8001d20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d2e:	230b      	movs	r3, #11
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	483c      	ldr	r0, [pc, #240]	; (8001e2c <MX_GPIO_Init+0x228>)
 8001d3a:	f000 fd7f 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001d3e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001d42:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4831      	ldr	r0, [pc, #196]	; (8001e1c <MX_GPIO_Init+0x218>)
 8001d58:	f000 fd70 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d6e:	230b      	movs	r3, #11
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d72:	f107 031c 	add.w	r3, r7, #28
 8001d76:	4619      	mov	r1, r3
 8001d78:	4828      	ldr	r0, [pc, #160]	; (8001e1c <MX_GPIO_Init+0x218>)
 8001d7a:	f000 fd5f 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d7e:	2340      	movs	r3, #64	; 0x40
 8001d80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	4619      	mov	r1, r3
 8001d94:	4822      	ldr	r0, [pc, #136]	; (8001e20 <MX_GPIO_Init+0x21c>)
 8001d96:	f000 fd51 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	481c      	ldr	r0, [pc, #112]	; (8001e20 <MX_GPIO_Init+0x21c>)
 8001dae:	f000 fd45 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8001db2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001db6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001dc4:	230a      	movs	r3, #10
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4817      	ldr	r0, [pc, #92]	; (8001e2c <MX_GPIO_Init+0x228>)
 8001dd0:	f000 fd34 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_Detect_Pin */
	GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dd8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4619      	mov	r1, r3
 8001de8:	480f      	ldr	r0, [pc, #60]	; (8001e28 <MX_GPIO_Init+0x224>)
 8001dea:	f000 fd27 	bl	800283c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8001dee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001df2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e00:	230b      	movs	r3, #11
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_GPIO_Init+0x21c>)
 8001e0c:	f000 fd16 	bl	800283c <HAL_GPIO_Init>

}
 8001e10:	bf00      	nop
 8001e12:	3730      	adds	r7, #48	; 0x30
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58020400 	.word	0x58020400
 8001e20:	58021800 	.word	0x58021800
 8001e24:	11110000 	.word	0x11110000
 8001e28:	58020800 	.word	0x58020800
 8001e2c:	58020000 	.word	0x58020000

08001e30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		flash_error();
 8001e38:	f7ff fb56 	bl	80014e8 <flash_error>
 8001e3c:	e7fc      	b.n	8001e38 <Error_Handler+0x8>
	...

08001e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_MspInit+0x30>)
 8001e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e4c:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_MspInit+0x30>)
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_MspInit+0x30>)
 8001e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	58024400 	.word	0x58024400

08001e74 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0ba      	sub	sp, #232	; 0xe8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	22bc      	movs	r2, #188	; 0xbc
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00d fa55 	bl	800f344 <memset>
  if(hsd->Instance==SDMMC1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a37      	ldr	r2, [pc, #220]	; (8001f7c <HAL_SD_MspInit+0x108>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d166      	bne.n	8001f72 <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001ea4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fe94 	bl	8003be0 <HAL_RCCEx_PeriphCLKConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8001ebe:	f7ff ffb7 	bl	8001e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001ec4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ec8:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001ed2:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001ed4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	4a26      	ldr	r2, [pc, #152]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001f06:	f043 0308 	orr.w	r3, r3, #8
 8001f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_SD_MspInit+0x10c>)
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001f1c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001f36:	230c      	movs	r3, #12
 8001f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4810      	ldr	r0, [pc, #64]	; (8001f84 <HAL_SD_MspInit+0x110>)
 8001f44:	f000 fc7a 	bl	800283c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f48:	2304      	movs	r3, #4
 8001f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001f60:	230c      	movs	r3, #12
 8001f62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4806      	ldr	r0, [pc, #24]	; (8001f88 <HAL_SD_MspInit+0x114>)
 8001f6e:	f000 fc65 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	37e8      	adds	r7, #232	; 0xe8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	52007000 	.word	0x52007000
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58020800 	.word	0x58020800
 8001f88:	58020c00 	.word	0x58020c00

08001f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d10f      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8001fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fa4:	4a20      	ldr	r2, [pc, #128]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8001fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fbc:	e030      	b.n	8002020 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM4)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_TIM_Base_MspInit+0xa0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d10f      	bne.n	8001fe8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8001fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8001fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
}
 8001fe6:	e01b      	b.n	8002020 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM5)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_TIM_Base_MspInit+0xa4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d116      	bne.n	8002020 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8001ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_TIM_Base_MspInit+0x9c>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2101      	movs	r1, #1
 8002014:	2032      	movs	r0, #50	; 0x32
 8002016:	f000 fbdc 	bl	80027d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800201a:	2032      	movs	r0, #50	; 0x32
 800201c:	f000 fbf3 	bl	8002806 <HAL_NVIC_EnableIRQ>
}
 8002020:	bf00      	nop
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	58024400 	.word	0x58024400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00

08002034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0b8      	sub	sp, #224	; 0xe0
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	22bc      	movs	r2, #188	; 0xbc
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f00d f975 	bl	800f344 <memset>
  if(huart->Instance==USART3)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <HAL_UART_MspInit+0xc0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d142      	bne.n	80020ea <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002064:	2302      	movs	r3, #2
 8002066:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	4618      	mov	r0, r3
 8002074:	f001 fdb4 	bl	8003be0 <HAL_RCCEx_PeriphCLKConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800207e:	f7ff fed7 	bl	8001e30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_UART_MspInit+0xc4>)
 8002084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_UART_MspInit+0xc4>)
 800208a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_UART_MspInit+0xc4>)
 8002094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_UART_MspInit+0xc4>)
 80020a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a6:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <HAL_UART_MspInit+0xc4>)
 80020a8:	f043 0308 	orr.w	r3, r3, #8
 80020ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_UART_MspInit+0xc4>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020d8:	2307      	movs	r3, #7
 80020da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020de:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020e2:	4619      	mov	r1, r3
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <HAL_UART_MspInit+0xc8>)
 80020e6:	f000 fba9 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	37e0      	adds	r7, #224	; 0xe0
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40004800 	.word	0x40004800
 80020f8:	58024400 	.word	0x58024400
 80020fc:	58020c00 	.word	0x58020c00

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <NMI_Handler+0x4>

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f000 fa16 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <TIM5_IRQHandler+0x10>)
 800215a:	f005 fb81 	bl	8007860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200088b4 	.word	0x200088b4

08002168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]



  if(htim->Instance == TIM5){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d108      	bne.n	800218c <HAL_TIM_PeriodElapsedCallback+0x24>
	  sys_seconds += 1;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002182:	6013      	str	r3, [r2, #0]
//			 fres = open_file(livefile, filename, FA_CREATE_ALWAYS);
//
//
//		 }
//
		 HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002188:	f000 fd39 	bl	8002bfe <HAL_GPIO_TogglePin>
//	 }


  }

}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40000c00 	.word	0x40000c00
 8002198:	20000018 	.word	0x20000018
 800219c:	58020400 	.word	0x58020400

080021a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	return 1;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_kill>:

int _kill(int pid, int sig)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021ba:	f00c ff67 	bl	800f08c <__errno>
 80021be:	4603      	mov	r3, r0
 80021c0:	2216      	movs	r2, #22
 80021c2:	601a      	str	r2, [r3, #0]
	return -1;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_exit>:

void _exit (int status)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ffe7 	bl	80021b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021e2:	e7fe      	b.n	80021e2 <_exit+0x12>

080021e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e00a      	b.n	800220c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021f6:	f3af 8000 	nop.w
 80021fa:	4601      	mov	r1, r0
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	60ba      	str	r2, [r7, #8]
 8002202:	b2ca      	uxtb	r2, r1
 8002204:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	dbf0      	blt.n	80021f6 <_read+0x12>
	}

return len;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e009      	b.n	8002244 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	60ba      	str	r2, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf1      	blt.n	8002230 <_write+0x12>
	}
	return len;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_close>:

int _close(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
	return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227e:	605a      	str	r2, [r3, #4]
	return 0;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <_isatty>:

int _isatty(int file)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	return 1;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f00c fecc 	bl	800f08c <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20020000 	.word	0x20020000
 8002320:	00000400 	.word	0x00000400
 8002324:	20000348 	.word	0x20000348
 8002328:	20008e08 	.word	0x20008e08

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002330:	4b39      	ldr	r3, [pc, #228]	; (8002418 <SystemInit+0xec>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	4a38      	ldr	r2, [pc, #224]	; (8002418 <SystemInit+0xec>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <SystemInit+0xf0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	2b06      	cmp	r3, #6
 800234a:	d807      	bhi.n	800235c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <SystemInit+0xf0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 030f 	bic.w	r3, r3, #15
 8002354:	4a31      	ldr	r2, [pc, #196]	; (800241c <SystemInit+0xf0>)
 8002356:	f043 0307 	orr.w	r3, r3, #7
 800235a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <SystemInit+0xf4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2f      	ldr	r2, [pc, #188]	; (8002420 <SystemInit+0xf4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <SystemInit+0xf4>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <SystemInit+0xf4>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	492b      	ldr	r1, [pc, #172]	; (8002420 <SystemInit+0xf4>)
 8002374:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <SystemInit+0xf8>)
 8002376:	4013      	ands	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <SystemInit+0xf0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002386:	4b25      	ldr	r3, [pc, #148]	; (800241c <SystemInit+0xf0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 030f 	bic.w	r3, r3, #15
 800238e:	4a23      	ldr	r2, [pc, #140]	; (800241c <SystemInit+0xf0>)
 8002390:	f043 0307 	orr.w	r3, r3, #7
 8002394:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <SystemInit+0xf4>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <SystemInit+0xf4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <SystemInit+0xf4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <SystemInit+0xf4>)
 80023aa:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <SystemInit+0xfc>)
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <SystemInit+0xf4>)
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <SystemInit+0x100>)
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <SystemInit+0xf4>)
 80023b6:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <SystemInit+0x104>)
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <SystemInit+0xf4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <SystemInit+0xf4>)
 80023c2:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <SystemInit+0x104>)
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <SystemInit+0xf4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <SystemInit+0xf4>)
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <SystemInit+0x104>)
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <SystemInit+0xf4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <SystemInit+0xf4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a10      	ldr	r2, [pc, #64]	; (8002420 <SystemInit+0xf4>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <SystemInit+0xf4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023ea:	4b12      	ldr	r3, [pc, #72]	; (8002434 <SystemInit+0x108>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <SystemInit+0x10c>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f6:	d202      	bcs.n	80023fe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <SystemInit+0x110>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <SystemInit+0x114>)
 8002400:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002404:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SystemInit+0xec>)
 8002408:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00
 800241c:	52002000 	.word	0x52002000
 8002420:	58024400 	.word	0x58024400
 8002424:	eaf6ed7f 	.word	0xeaf6ed7f
 8002428:	02020200 	.word	0x02020200
 800242c:	01ff0000 	.word	0x01ff0000
 8002430:	01010280 	.word	0x01010280
 8002434:	5c001000 	.word	0x5c001000
 8002438:	ffff0000 	.word	0xffff0000
 800243c:	51008108 	.word	0x51008108
 8002440:	52004000 	.word	0x52004000

08002444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002448:	f7ff ff70 	bl	800232c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800244e:	490d      	ldr	r1, [pc, #52]	; (8002484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002454:	e002      	b.n	800245c <LoopCopyDataInit>

08002456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245a:	3304      	adds	r3, #4

0800245c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800245c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002460:	d3f9      	bcc.n	8002456 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002464:	4c0a      	ldr	r4, [pc, #40]	; (8002490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002468:	e001      	b.n	800246e <LoopFillZerobss>

0800246a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800246c:	3204      	adds	r2, #4

0800246e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002470:	d3fb      	bcc.n	800246a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002472:	f00c fe11 	bl	800f098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002476:	f7ff f86b 	bl	8001550 <main>
  bx  lr
 800247a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800247c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002484:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002488:	080128dc 	.word	0x080128dc
  ldr r2, =_sbss
 800248c:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002490:	20008e08 	.word	0x20008e08

08002494 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC3_IRQHandler>
	...

08002498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800249e:	2003      	movs	r0, #3
 80024a0:	f000 f98c 	bl	80027bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024a4:	f001 f9c6 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_Init+0x68>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	4913      	ldr	r1, [pc, #76]	; (8002504 <HAL_Init+0x6c>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_Init+0x68>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_Init+0x6c>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_Init+0x70>)
 80024da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_Init+0x74>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 f814 	bl	8002510 <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e002      	b.n	80024f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024f2:	f7ff fca5 	bl	8001e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	58024400 	.word	0x58024400
 8002504:	0801213c 	.word	0x0801213c
 8002508:	20000024 	.word	0x20000024
 800250c:	20000020 	.word	0x20000020

08002510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_InitTick+0x60>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e021      	b.n	8002568 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_InitTick+0x64>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_InitTick+0x60>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f971 	bl	8002822 <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d80a      	bhi.n	8002566 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002558:	f000 f93b 	bl	80027d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800255c:	4a06      	ldr	r2, [pc, #24]	; (8002578 <HAL_InitTick+0x68>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2000002c 	.word	0x2000002c
 8002574:	20000020 	.word	0x20000020
 8002578:	20000028 	.word	0x20000028

0800257c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x20>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x24>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_IncTick+0x24>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	2000002c 	.word	0x2000002c
 80025a0:	2000894c 	.word	0x2000894c

080025a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_GetTick+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	2000894c 	.word	0x2000894c

080025bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff ffee 	bl	80025a4 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d4:	d005      	beq.n	80025e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_Delay+0x44>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e2:	bf00      	nop
 80025e4:	f7ff ffde 	bl	80025a4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d8f7      	bhi.n	80025e4 <HAL_Delay+0x28>
  {
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000002c 	.word	0x2000002c

08002604 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetREVID+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0c1b      	lsrs	r3, r3, #16
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	5c001000 	.word	0x5c001000

0800261c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <__NVIC_SetPriorityGrouping+0x40>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	4313      	orrs	r3, r2
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x40>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00
 8002660:	05fa0000 	.word	0x05fa0000

08002664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <__NVIC_GetPriorityGrouping+0x18>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	0a1b      	lsrs	r3, r3, #8
 800266e:	f003 0307 	and.w	r3, r3, #7
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800268a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db0b      	blt.n	80026aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	f003 021f 	and.w	r2, r3, #31
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <__NVIC_EnableIRQ+0x38>)
 800269a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2001      	movs	r0, #1
 80026a2:	fa00 f202 	lsl.w	r2, r0, r2
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d301      	bcc.n	800278e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278a:	2301      	movs	r3, #1
 800278c:	e00f      	b.n	80027ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <SysTick_Config+0x40>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002796:	210f      	movs	r1, #15
 8002798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800279c:	f7ff ff8e 	bl	80026bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SysTick_Config+0x40>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a6:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <SysTick_Config+0x40>)
 80027a8:	2207      	movs	r2, #7
 80027aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff29 	bl	800261c <__NVIC_SetPriorityGrouping>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff40 	bl	8002664 <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff90 	bl	8002710 <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5f 	bl	80026bc <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff33 	bl	8002680 <__NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ffa4 	bl	8002778 <SysTick_Config>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800284a:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <HAL_GPIO_Init+0x234>)
 800284c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800284e:	e194      	b.n	8002b7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2101      	movs	r1, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8186 	beq.w	8002b74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d00b      	beq.n	8002888 <HAL_GPIO_Init+0x4c>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d007      	beq.n	8002888 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800287c:	2b11      	cmp	r3, #17
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b12      	cmp	r3, #18
 8002886:	d130      	bne.n	80028ea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028be:	2201      	movs	r2, #1
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 0201 	and.w	r2, r3, #1
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0xee>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b12      	cmp	r3, #18
 8002928:	d123      	bne.n	8002972 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	08da      	lsrs	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3208      	adds	r2, #8
 800296c:	69b9      	ldr	r1, [r7, #24]
 800296e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0203 	and.w	r2, r3, #3
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80e0 	beq.w	8002b74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b4:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <HAL_GPIO_Init+0x238>)
 80029b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029ba:	4a2e      	ldr	r2, [pc, #184]	; (8002a74 <HAL_GPIO_Init+0x238>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_GPIO_Init+0x238>)
 80029c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d2:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <HAL_GPIO_Init+0x23c>)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <HAL_GPIO_Init+0x240>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d052      	beq.n	8002aa4 <HAL_GPIO_Init+0x268>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <HAL_GPIO_Init+0x244>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_GPIO_Init+0x22e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <HAL_GPIO_Init+0x248>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02b      	beq.n	8002a66 <HAL_GPIO_Init+0x22a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_GPIO_Init+0x24c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d025      	beq.n	8002a62 <HAL_GPIO_Init+0x226>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_GPIO_Init+0x250>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01f      	beq.n	8002a5e <HAL_GPIO_Init+0x222>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_GPIO_Init+0x254>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_Init+0x21e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_GPIO_Init+0x258>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x21a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <HAL_GPIO_Init+0x25c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x216>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_GPIO_Init+0x260>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x212>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_GPIO_Init+0x264>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x20e>
 8002a46:	2309      	movs	r3, #9
 8002a48:	e02d      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	e02b      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	e029      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e027      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a56:	2306      	movs	r3, #6
 8002a58:	e025      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	e023      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e021      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e01f      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e01d      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e01b      	b.n	8002aa6 <HAL_GPIO_Init+0x26a>
 8002a6e:	bf00      	nop
 8002a70:	58000080 	.word	0x58000080
 8002a74:	58024400 	.word	0x58024400
 8002a78:	58000400 	.word	0x58000400
 8002a7c:	58020000 	.word	0x58020000
 8002a80:	58020400 	.word	0x58020400
 8002a84:	58020800 	.word	0x58020800
 8002a88:	58020c00 	.word	0x58020c00
 8002a8c:	58021000 	.word	0x58021000
 8002a90:	58021400 	.word	0x58021400
 8002a94:	58021800 	.word	0x58021800
 8002a98:	58021c00 	.word	0x58021c00
 8002a9c:	58022000 	.word	0x58022000
 8002aa0:	58022400 	.word	0x58022400
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	f002 0203 	and.w	r2, r2, #3
 8002aac:	0092      	lsls	r2, r2, #2
 8002aae:	4093      	lsls	r3, r2
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab6:	4938      	ldr	r1, [pc, #224]	; (8002b98 <HAL_GPIO_Init+0x35c>)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	089b      	lsrs	r3, r3, #2
 8002abc:	3302      	adds	r3, #2
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	3301      	adds	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f47f ae63 	bne.w	8002850 <HAL_GPIO_Init+0x14>
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	3724      	adds	r7, #36	; 0x24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	58000400 	.word	0x58000400

08002b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e001      	b.n	8002bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bdc:	787b      	ldrb	r3, [r7, #1]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be2:	887a      	ldrh	r2, [r7, #2]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002be8:	e003      	b.n	8002bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bea:	887b      	ldrh	r3, [r7, #2]
 8002bec:	041a      	lsls	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	619a      	str	r2, [r3, #24]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4013      	ands	r3, r2
 8002c16:	041a      	lsls	r2, r3, #16
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	400b      	ands	r3, r1
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	619a      	str	r2, [r3, #24]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d00a      	beq.n	8002c5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d001      	beq.n	8002c5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e01f      	b.n	8002c9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e01d      	b.n	8002c9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	490f      	ldr	r1, [pc, #60]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c6e:	f7ff fc99 	bl	80025a4 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c74:	e009      	b.n	8002c8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c76:	f7ff fc95 	bl	80025a4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c84:	d901      	bls.n	8002c8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e007      	b.n	8002c9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	d1ee      	bne.n	8002c76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	58024800 	.word	0x58024800

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e3ff      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8087 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc8:	4b99      	ldr	r3, [pc, #612]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cd2:	4b97      	ldr	r3, [pc, #604]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d007      	beq.n	8002cee <HAL_RCC_OscConfig+0x46>
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2b18      	cmp	r3, #24
 8002ce2:	d110      	bne.n	8002d06 <HAL_RCC_OscConfig+0x5e>
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d10b      	bne.n	8002d06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cee:	4b90      	ldr	r3, [pc, #576]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d06c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x12c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d168      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e3d9      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x76>
 8002d10:	4b87      	ldr	r3, [pc, #540]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a86      	ldr	r2, [pc, #536]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e02e      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a81      	ldr	r2, [pc, #516]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b7f      	ldr	r3, [pc, #508]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a7e      	ldr	r2, [pc, #504]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e01d      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0xbc>
 8002d4a:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a78      	ldr	r2, [pc, #480]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d64:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a71      	ldr	r2, [pc, #452]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a6e      	ldr	r2, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7ff fc0e 	bl	80025a4 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7ff fc0a 	bl	80025a4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e38d      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d9e:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe4>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7ff fbfa 	bl	80025a4 <HAL_GetTick>
 8002db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db4:	f7ff fbf6 	bl	80025a4 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e379      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dc6:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x10c>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80ae 	beq.w	8002f40 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de4:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dee:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_RCC_OscConfig+0x162>
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2b18      	cmp	r3, #24
 8002dfe:	d13a      	bne.n	8002e76 <HAL_RCC_OscConfig+0x1ce>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d135      	bne.n	8002e76 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e0a:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RCC_OscConfig+0x17a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e34b      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	f7ff fbef 	bl	8002604 <HAL_GetREVID>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d817      	bhi.n	8002e60 <HAL_RCC_OscConfig+0x1b8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d108      	bne.n	8002e4a <HAL_RCC_OscConfig+0x1a2>
 8002e38:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e40:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e46:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e48:	e07a      	b.n	8002f40 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	031b      	lsls	r3, r3, #12
 8002e58:	4935      	ldr	r1, [pc, #212]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e5e:	e06f      	b.n	8002f40 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	4930      	ldr	r1, [pc, #192]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e74:	e064      	b.n	8002f40 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d045      	beq.n	8002f0a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e7e:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 0219 	bic.w	r2, r3, #25
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4929      	ldr	r1, [pc, #164]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7ff fb88 	bl	80025a4 <HAL_GetTick>
 8002e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e98:	f7ff fb84 	bl	80025a4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e307      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eaa:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	f7ff fba5 	bl	8002604 <HAL_GetREVID>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d817      	bhi.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	d108      	bne.n	8002ede <HAL_RCC_OscConfig+0x236>
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eda:	6053      	str	r3, [r2, #4]
 8002edc:	e030      	b.n	8002f40 <HAL_RCC_OscConfig+0x298>
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	031b      	lsls	r3, r3, #12
 8002eec:	4910      	ldr	r1, [pc, #64]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
 8002ef2:	e025      	b.n	8002f40 <HAL_RCC_OscConfig+0x298>
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	490b      	ldr	r1, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
 8002f08:	e01a      	b.n	8002f40 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <HAL_RCC_OscConfig+0x288>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7ff fb45 	bl	80025a4 <HAL_GetTick>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7ff fb41 	bl	80025a4 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d903      	bls.n	8002f34 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e2c4      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
 8002f30:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f34:	4ba4      	ldr	r3, [pc, #656]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ee      	bne.n	8002f1e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a9 	beq.w	80030a0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	4b9e      	ldr	r3, [pc, #632]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f58:	4b9b      	ldr	r3, [pc, #620]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d007      	beq.n	8002f74 <HAL_RCC_OscConfig+0x2cc>
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b18      	cmp	r3, #24
 8002f68:	d13a      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x338>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d135      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f74:	4b94      	ldr	r3, [pc, #592]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2e4>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e296      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f8c:	f7ff fb3a 	bl	8002604 <HAL_GetREVID>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d817      	bhi.n	8002fca <HAL_RCC_OscConfig+0x322>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d108      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x30c>
 8002fa2:	4b89      	ldr	r3, [pc, #548]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002faa:	4a87      	ldr	r2, [pc, #540]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fb0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fb2:	e075      	b.n	80030a0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fb4:	4b84      	ldr	r3, [pc, #528]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	069b      	lsls	r3, r3, #26
 8002fc2:	4981      	ldr	r1, [pc, #516]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fc8:	e06a      	b.n	80030a0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fca:	4b7f      	ldr	r3, [pc, #508]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	497b      	ldr	r1, [pc, #492]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fde:	e05f      	b.n	80030a0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d042      	beq.n	800306e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fe8:	4b77      	ldr	r3, [pc, #476]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a76      	ldr	r2, [pc, #472]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8002fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7ff fad6 	bl	80025a4 <HAL_GetTick>
 8002ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ffc:	f7ff fad2 	bl	80025a4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e255      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800300e:	4b6e      	ldr	r3, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800301a:	f7ff faf3 	bl	8002604 <HAL_GetREVID>
 800301e:	4603      	mov	r3, r0
 8003020:	f241 0203 	movw	r2, #4099	; 0x1003
 8003024:	4293      	cmp	r3, r2
 8003026:	d817      	bhi.n	8003058 <HAL_RCC_OscConfig+0x3b0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2b20      	cmp	r3, #32
 800302e:	d108      	bne.n	8003042 <HAL_RCC_OscConfig+0x39a>
 8003030:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003038:	4a63      	ldr	r2, [pc, #396]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 800303a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800303e:	6053      	str	r3, [r2, #4]
 8003040:	e02e      	b.n	80030a0 <HAL_RCC_OscConfig+0x3f8>
 8003042:	4b61      	ldr	r3, [pc, #388]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	069b      	lsls	r3, r3, #26
 8003050:	495d      	ldr	r1, [pc, #372]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
 8003056:	e023      	b.n	80030a0 <HAL_RCC_OscConfig+0x3f8>
 8003058:	4b5b      	ldr	r3, [pc, #364]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	4958      	ldr	r1, [pc, #352]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003068:	4313      	orrs	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
 800306c:	e018      	b.n	80030a0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800306e:	4b56      	ldr	r3, [pc, #344]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a55      	ldr	r2, [pc, #340]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7ff fa93 	bl	80025a4 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003082:	f7ff fa8f 	bl	80025a4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e212      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003094:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d036      	beq.n	800311a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d019      	beq.n	80030e8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b4:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 80030b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b8:	4a43      	ldr	r2, [pc, #268]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7ff fa70 	bl	80025a4 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c8:	f7ff fa6c 	bl	80025a4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1ef      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030da:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x420>
 80030e6:	e018      	b.n	800311a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b37      	ldr	r3, [pc, #220]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	4a36      	ldr	r2, [pc, #216]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7ff fa56 	bl	80025a4 <HAL_GetTick>
 80030f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fc:	f7ff fa52 	bl	80025a4 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e1d5      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800310e:	4b2e      	ldr	r3, [pc, #184]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d036      	beq.n	8003194 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d019      	beq.n	8003162 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003138:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800313a:	f7ff fa33 	bl	80025a4 <HAL_GetTick>
 800313e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003142:	f7ff fa2f 	bl	80025a4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e1b2      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003154:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x49a>
 8003160:	e018      	b.n	8003194 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 8003168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800316c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800316e:	f7ff fa19 	bl	80025a4 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003176:	f7ff fa15 	bl	80025a4 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e198      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_RCC_OscConfig+0x520>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8085 	beq.w	80032ac <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_RCC_OscConfig+0x524>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_RCC_OscConfig+0x524>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ae:	f7ff f9f9 	bl	80025a4 <HAL_GetTick>
 80031b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031b4:	e00c      	b.n	80031d0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7ff f9f5 	bl	80025a4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	; 0x64
 80031c2:	d905      	bls.n	80031d0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e178      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
 80031c8:	58024400 	.word	0x58024400
 80031cc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031d0:	4b96      	ldr	r3, [pc, #600]	; (800342c <HAL_RCC_OscConfig+0x784>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ec      	beq.n	80031b6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x54a>
 80031e4:	4b92      	ldr	r3, [pc, #584]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a91      	ldr	r2, [pc, #580]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	e02d      	b.n	800324e <HAL_RCC_OscConfig+0x5a6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x56c>
 80031fa:	4b8d      	ldr	r3, [pc, #564]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a8c      	ldr	r2, [pc, #560]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
 8003206:	4b8a      	ldr	r3, [pc, #552]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a89      	ldr	r2, [pc, #548]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
 8003212:	e01c      	b.n	800324e <HAL_RCC_OscConfig+0x5a6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b05      	cmp	r3, #5
 800321a:	d10c      	bne.n	8003236 <HAL_RCC_OscConfig+0x58e>
 800321c:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a83      	ldr	r2, [pc, #524]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
 8003228:	4b81      	ldr	r3, [pc, #516]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a80      	ldr	r2, [pc, #512]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
 8003234:	e00b      	b.n	800324e <HAL_RCC_OscConfig+0x5a6>
 8003236:	4b7e      	ldr	r3, [pc, #504]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a7d      	ldr	r2, [pc, #500]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	4b7b      	ldr	r3, [pc, #492]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a7a      	ldr	r2, [pc, #488]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d015      	beq.n	8003282 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7ff f9a5 	bl	80025a4 <HAL_GetTick>
 800325a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7ff f9a1 	bl	80025a4 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e122      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003274:	4b6e      	ldr	r3, [pc, #440]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ee      	beq.n	800325e <HAL_RCC_OscConfig+0x5b6>
 8003280:	e014      	b.n	80032ac <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7ff f98f 	bl	80025a4 <HAL_GetTick>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7ff f98b 	bl	80025a4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e10c      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032a0:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ee      	bne.n	800328a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8101 	beq.w	80034b8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032b6:	4b5e      	ldr	r3, [pc, #376]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032be:	2b18      	cmp	r3, #24
 80032c0:	f000 80bc 	beq.w	800343c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	f040 8095 	bne.w	80033f8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	4b58      	ldr	r3, [pc, #352]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a57      	ldr	r2, [pc, #348]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80032d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7ff f963 	bl	80025a4 <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e2:	f7ff f95f 	bl	80025a4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0e2      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032f4:	4b4e      	ldr	r3, [pc, #312]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003300:	4b4b      	ldr	r3, [pc, #300]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003302:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003304:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_RCC_OscConfig+0x78c>)
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003310:	0112      	lsls	r2, r2, #4
 8003312:	430a      	orrs	r2, r1
 8003314:	4946      	ldr	r1, [pc, #280]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003316:	4313      	orrs	r3, r2
 8003318:	628b      	str	r3, [r1, #40]	; 0x28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	3b01      	subs	r3, #1
 8003320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	3b01      	subs	r3, #1
 800332a:	025b      	lsls	r3, r3, #9
 800332c:	b29b      	uxth	r3, r3
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	3b01      	subs	r3, #1
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	3b01      	subs	r3, #1
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800334a:	4939      	ldr	r1, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800334c:	4313      	orrs	r3, r2
 800334e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003350:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4a36      	ldr	r2, [pc, #216]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800335e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003360:	4b35      	ldr	r3, [pc, #212]	; (8003438 <HAL_RCC_OscConfig+0x790>)
 8003362:	4013      	ands	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003368:	00d2      	lsls	r2, r2, #3
 800336a:	4931      	ldr	r1, [pc, #196]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800336c:	4313      	orrs	r3, r2
 800336e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003370:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	f023 020c 	bic.w	r2, r3, #12
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	492c      	ldr	r1, [pc, #176]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800337e:	4313      	orrs	r3, r2
 8003380:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003382:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f023 0202 	bic.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	4928      	ldr	r1, [pc, #160]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003390:	4313      	orrs	r3, r2
 8003392:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003394:	4b26      	ldr	r3, [pc, #152]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4a25      	ldr	r2, [pc, #148]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	4a22      	ldr	r2, [pc, #136]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80033ac:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80033b8:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033c4:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7ff f8e8 	bl	80025a4 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7ff f8e4 	bl	80025a4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e067      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x730>
 80033f6:	e05f      	b.n	80034b8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7ff f8ce 	bl	80025a4 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7ff f8ca 	bl	80025a4 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04d      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <HAL_RCC_OscConfig+0x788>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x764>
 800342a:	e045      	b.n	80034b8 <HAL_RCC_OscConfig+0x810>
 800342c:	58024800 	.word	0x58024800
 8003430:	58024400 	.word	0x58024400
 8003434:	fffffc0c 	.word	0xfffffc0c
 8003438:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x81c>)
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_OscConfig+0x81c>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b01      	cmp	r3, #1
 800344e:	d031      	beq.n	80034b4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0203 	and.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d12a      	bne.n	80034b4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d122      	bne.n	80034b4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d11a      	bne.n	80034b4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	0a5b      	lsrs	r3, r3, #9
 8003482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d111      	bne.n	80034b4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	0c1b      	lsrs	r3, r3, #16
 8003494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d108      	bne.n	80034b4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	0e1b      	lsrs	r3, r3, #24
 80034a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3730      	adds	r7, #48	; 0x30
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	58024400 	.word	0x58024400

080034c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e19c      	b.n	8003816 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034dc:	4b8a      	ldr	r3, [pc, #552]	; (8003708 <HAL_RCC_ClockConfig+0x240>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d910      	bls.n	800350c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b87      	ldr	r3, [pc, #540]	; (8003708 <HAL_RCC_ClockConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 020f 	bic.w	r2, r3, #15
 80034f2:	4985      	ldr	r1, [pc, #532]	; (8003708 <HAL_RCC_ClockConfig+0x240>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b83      	ldr	r3, [pc, #524]	; (8003708 <HAL_RCC_ClockConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e184      	b.n	8003816 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	4b7b      	ldr	r3, [pc, #492]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003524:	429a      	cmp	r2, r3
 8003526:	d908      	bls.n	800353a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003528:	4b78      	ldr	r3, [pc, #480]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	4975      	ldr	r1, [pc, #468]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 8003536:	4313      	orrs	r3, r2
 8003538:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d010      	beq.n	8003568 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	4b70      	ldr	r3, [pc, #448]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003552:	429a      	cmp	r2, r3
 8003554:	d908      	bls.n	8003568 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003556:	4b6d      	ldr	r3, [pc, #436]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	496a      	ldr	r1, [pc, #424]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 8003564:	4313      	orrs	r3, r2
 8003566:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003580:	429a      	cmp	r2, r3
 8003582:	d908      	bls.n	8003596 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003584:	4b61      	ldr	r3, [pc, #388]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	495e      	ldr	r1, [pc, #376]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 8003592:	4313      	orrs	r3, r2
 8003594:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d908      	bls.n	80035c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80035b2:	4b56      	ldr	r3, [pc, #344]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4953      	ldr	r1, [pc, #332]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d010      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	429a      	cmp	r2, r3
 80035de:	d908      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e0:	4b4a      	ldr	r3, [pc, #296]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f023 020f 	bic.w	r2, r3, #15
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4947      	ldr	r1, [pc, #284]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d055      	beq.n	80036aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035fe:	4b43      	ldr	r3, [pc, #268]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4940      	ldr	r1, [pc, #256]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800360c:	4313      	orrs	r3, r2
 800360e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d107      	bne.n	8003628 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003618:	4b3c      	ldr	r3, [pc, #240]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d121      	bne.n	8003668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0f6      	b.n	8003816 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d107      	bne.n	8003640 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003630:	4b36      	ldr	r3, [pc, #216]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d115      	bne.n	8003668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0ea      	b.n	8003816 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d107      	bne.n	8003658 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0de      	b.n	8003816 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0d6      	b.n	8003816 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003668:	4b28      	ldr	r3, [pc, #160]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f023 0207 	bic.w	r2, r3, #7
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4925      	ldr	r1, [pc, #148]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 8003676:	4313      	orrs	r3, r2
 8003678:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fe ff93 	bl	80025a4 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003680:	e00a      	b.n	8003698 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003682:	f7fe ff8f 	bl	80025a4 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e0be      	b.n	8003816 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003698:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d1eb      	bne.n	8003682 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d010      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d208      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f023 020f 	bic.w	r2, r3, #15
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	490e      	ldr	r1, [pc, #56]	; (800370c <HAL_RCC_ClockConfig+0x244>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_ClockConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d214      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <HAL_RCC_ClockConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 020f 	bic.w	r2, r3, #15
 80036ee:	4906      	ldr	r1, [pc, #24]	; (8003708 <HAL_RCC_ClockConfig+0x240>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <HAL_RCC_ClockConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e086      	b.n	8003816 <HAL_RCC_ClockConfig+0x34e>
 8003708:	52002000 	.word	0x52002000
 800370c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003728:	429a      	cmp	r2, r3
 800372a:	d208      	bcs.n	800373e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800372c:	4b3c      	ldr	r3, [pc, #240]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	4939      	ldr	r1, [pc, #228]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 800373a:	4313      	orrs	r3, r2
 800373c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	4b34      	ldr	r3, [pc, #208]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003756:	429a      	cmp	r2, r3
 8003758:	d208      	bcs.n	800376c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800375a:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	492e      	ldr	r1, [pc, #184]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 8003768:	4313      	orrs	r3, r2
 800376a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003784:	429a      	cmp	r2, r3
 8003786:	d208      	bcs.n	800379a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4922      	ldr	r1, [pc, #136]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 8003796:	4313      	orrs	r3, r2
 8003798:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d208      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4917      	ldr	r1, [pc, #92]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037c8:	f000 f834 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	4912      	ldr	r1, [pc, #72]	; (8003824 <HAL_RCC_ClockConfig+0x35c>)
 80037da:	5ccb      	ldrb	r3, [r1, r3]
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
 80037e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCC_ClockConfig+0x358>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <HAL_RCC_ClockConfig+0x35c>)
 80037f0:	5cd3      	ldrb	r3, [r2, r3]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <HAL_RCC_ClockConfig+0x360>)
 80037fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x364>)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_RCC_ClockConfig+0x368>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fe80 	bl	8002510 <HAL_InitTick>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	58024400 	.word	0x58024400
 8003824:	0801213c 	.word	0x0801213c
 8003828:	20000024 	.word	0x20000024
 800382c:	20000020 	.word	0x20000020
 8003830:	20000028 	.word	0x20000028

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383a:	4bb3      	ldr	r3, [pc, #716]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003842:	2b18      	cmp	r3, #24
 8003844:	f200 8155 	bhi.w	8003af2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003848:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_RCC_GetSysClockFreq+0x1c>)
 800384a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384e:	bf00      	nop
 8003850:	080038b5 	.word	0x080038b5
 8003854:	08003af3 	.word	0x08003af3
 8003858:	08003af3 	.word	0x08003af3
 800385c:	08003af3 	.word	0x08003af3
 8003860:	08003af3 	.word	0x08003af3
 8003864:	08003af3 	.word	0x08003af3
 8003868:	08003af3 	.word	0x08003af3
 800386c:	08003af3 	.word	0x08003af3
 8003870:	080038db 	.word	0x080038db
 8003874:	08003af3 	.word	0x08003af3
 8003878:	08003af3 	.word	0x08003af3
 800387c:	08003af3 	.word	0x08003af3
 8003880:	08003af3 	.word	0x08003af3
 8003884:	08003af3 	.word	0x08003af3
 8003888:	08003af3 	.word	0x08003af3
 800388c:	08003af3 	.word	0x08003af3
 8003890:	080038e1 	.word	0x080038e1
 8003894:	08003af3 	.word	0x08003af3
 8003898:	08003af3 	.word	0x08003af3
 800389c:	08003af3 	.word	0x08003af3
 80038a0:	08003af3 	.word	0x08003af3
 80038a4:	08003af3 	.word	0x08003af3
 80038a8:	08003af3 	.word	0x08003af3
 80038ac:	08003af3 	.word	0x08003af3
 80038b0:	080038e7 	.word	0x080038e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b4:	4b94      	ldr	r3, [pc, #592]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038c0:	4b91      	ldr	r3, [pc, #580]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	08db      	lsrs	r3, r3, #3
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	4a90      	ldr	r2, [pc, #576]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80038d2:	e111      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038d4:	4b8d      	ldr	r3, [pc, #564]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038d6:	61bb      	str	r3, [r7, #24]
    break;
 80038d8:	e10e      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80038da:	4b8d      	ldr	r3, [pc, #564]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038dc:	61bb      	str	r3, [r7, #24]
    break;
 80038de:	e10b      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80038e0:	4b8c      	ldr	r3, [pc, #560]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038e2:	61bb      	str	r3, [r7, #24]
    break;
 80038e4:	e108      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80038f0:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038fc:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003906:	4b80      	ldr	r3, [pc, #512]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	08db      	lsrs	r3, r3, #3
 800390c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80e1 	beq.w	8003aec <HAL_RCC_GetSysClockFreq+0x2b8>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b02      	cmp	r3, #2
 800392e:	f000 8083 	beq.w	8003a38 <HAL_RCC_GetSysClockFreq+0x204>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b02      	cmp	r3, #2
 8003936:	f200 80a1 	bhi.w	8003a7c <HAL_RCC_GetSysClockFreq+0x248>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x114>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d056      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003946:	e099      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003948:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02d      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003954:	4b6c      	ldr	r3, [pc, #432]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	08db      	lsrs	r3, r3, #3
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	4a6b      	ldr	r2, [pc, #428]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
 8003964:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397e:	4b62      	ldr	r3, [pc, #392]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003992:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800399a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80039ae:	e087      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b1c <HAL_RCC_GetSysClockFreq+0x2e8>
 80039be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c2:	4b51      	ldr	r3, [pc, #324]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039f2:	e065      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a06:	4b40      	ldr	r3, [pc, #256]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a36:	e043      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4a:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a7a:	e021      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003abe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	0a5b      	lsrs	r3, r3, #9
 8003ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aca:	3301      	adds	r3, #1
 8003acc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae4:	ee17 3a90 	vmov	r3, s15
 8003ae8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003aea:	e005      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
    break;
 8003af0:	e002      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003af4:	61bb      	str	r3, [r7, #24]
    break;
 8003af6:	bf00      	nop
  }

  return sysclockfreq;
 8003af8:	69bb      	ldr	r3, [r7, #24]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3724      	adds	r7, #36	; 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	03d09000 	.word	0x03d09000
 8003b10:	003d0900 	.word	0x003d0900
 8003b14:	007a1200 	.word	0x007a1200
 8003b18:	46000000 	.word	0x46000000
 8003b1c:	4c742400 	.word	0x4c742400
 8003b20:	4a742400 	.word	0x4a742400
 8003b24:	4af42400 	.word	0x4af42400

08003b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b2e:	f7ff fe81 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	490f      	ldr	r1, [pc, #60]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x54>)
 8003b40:	5ccb      	ldrb	r3, [r1, r3]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x54>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	4a07      	ldr	r2, [pc, #28]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b66:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	0801213c 	.word	0x0801213c
 8003b80:	20000024 	.word	0x20000024
 8003b84:	20000020 	.word	0x20000020

08003b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b8c:	f7ff ffcc 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	0801213c 	.word	0x0801213c

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bb8:	f7ff ffb6 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4904      	ldr	r1, [pc, #16]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	0801213c 	.word	0x0801213c

08003be0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003be8:	2300      	movs	r3, #0
 8003bea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bec:	2300      	movs	r3, #0
 8003bee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d03f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c04:	d02a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c0a:	d824      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c10:	d018      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c16:	d81e      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c20:	d007      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c22:	e018      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c24:	4bab      	ldr	r3, [pc, #684]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	4aaa      	ldr	r2, [pc, #680]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c30:	e015      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2102      	movs	r1, #2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 fff3 	bl	8005c24 <RCCEx_PLL2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c42:	e00c      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3324      	adds	r3, #36	; 0x24
 8003c48:	2102      	movs	r1, #2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 f89c 	bl	8005d88 <RCCEx_PLL3_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c54:	e003      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c64:	4b9b      	ldr	r3, [pc, #620]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c70:	4998      	ldr	r1, [pc, #608]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	650b      	str	r3, [r1, #80]	; 0x50
 8003c76:	e001      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d03d      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d826      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003cad 	.word	0x08003cad
 8003c9c:	08003cbb 	.word	0x08003cbb
 8003ca0:	08003ccd 	.word	0x08003ccd
 8003ca4:	08003ce5 	.word	0x08003ce5
 8003ca8:	08003ce5 	.word	0x08003ce5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cac:	4b89      	ldr	r3, [pc, #548]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	4a88      	ldr	r2, [pc, #544]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 ffaf 	bl	8005c24 <RCCEx_PLL2_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cca:	e00c      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3324      	adds	r3, #36	; 0x24
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f002 f858 	bl	8005d88 <RCCEx_PLL3_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cdc:	e003      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cec:	4b79      	ldr	r3, [pc, #484]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	f023 0207 	bic.w	r2, r3, #7
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	4976      	ldr	r1, [pc, #472]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	650b      	str	r3, [r1, #80]	; 0x50
 8003cfe:	e001      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d042      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d18:	d02b      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d825      	bhi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d20:	2bc0      	cmp	r3, #192	; 0xc0
 8003d22:	d028      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d24:	2bc0      	cmp	r3, #192	; 0xc0
 8003d26:	d821      	bhi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d28:	2b80      	cmp	r3, #128	; 0x80
 8003d2a:	d016      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003d2c:	2b80      	cmp	r3, #128	; 0x80
 8003d2e:	d81d      	bhi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003d34:	2b40      	cmp	r3, #64	; 0x40
 8003d36:	d007      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003d38:	e018      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3a:	4b66      	ldr	r3, [pc, #408]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4a65      	ldr	r2, [pc, #404]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d46:	e017      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 ff68 	bl	8005c24 <RCCEx_PLL2_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d58:	e00e      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3324      	adds	r3, #36	; 0x24
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f002 f811 	bl	8005d88 <RCCEx_PLL3_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d6a:	e005      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d70:	e002      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003d7e:	4b55      	ldr	r3, [pc, #340]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	4952      	ldr	r1, [pc, #328]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	650b      	str	r3, [r1, #80]	; 0x50
 8003d90:	e001      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d049      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dac:	d030      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003db2:	d82a      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003db4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003db8:	d02c      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003dba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003dbe:	d824      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc4:	d018      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dca:	d81e      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd4:	d007      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003dd6:	e018      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd8:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a3d      	ldr	r2, [pc, #244]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003de4:	e017      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 ff19 	bl	8005c24 <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003df6:	e00e      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3324      	adds	r3, #36	; 0x24
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 ffc2 	bl	8005d88 <RCCEx_PLL3_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e08:	e005      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e2a:	492a      	ldr	r1, [pc, #168]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	658b      	str	r3, [r1, #88]	; 0x58
 8003e30:	e001      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d04c      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e4c:	d030      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003e4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e52:	d82a      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e58:	d02c      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003e5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e5e:	d824      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e64:	d018      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e6a:	d81e      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e74:	d007      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003e76:	e018      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e78:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e84:	e017      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 fec9 	bl	8005c24 <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e96:	e00e      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3324      	adds	r3, #36	; 0x24
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 ff72 	bl	8005d88 <RCCEx_PLL3_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ea8:	e005      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
      break;
 8003eae:	e002      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10d      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eca:	4902      	ldr	r1, [pc, #8]	; (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	658b      	str	r3, [r1, #88]	; 0x58
 8003ed0:	e004      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003ed2:	bf00      	nop
 8003ed4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d032      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eec:	2b30      	cmp	r3, #48	; 0x30
 8003eee:	d01c      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ef0:	2b30      	cmp	r3, #48	; 0x30
 8003ef2:	d817      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d00c      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d813      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d016      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d10f      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f04:	4baf      	ldr	r3, [pc, #700]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4aae      	ldr	r2, [pc, #696]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f10:	e00e      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2102      	movs	r1, #2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fe83 	bl	8005c24 <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f22:	e005      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	75fb      	strb	r3, [r7, #23]
      break;
 8003f28:	e002      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f36:	4ba3      	ldr	r3, [pc, #652]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f42:	49a0      	ldr	r1, [pc, #640]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f48:	e001      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d047      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f62:	d030      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f68:	d82a      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003f6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f6e:	d02c      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003f70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f74:	d824      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7a:	d018      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f80:	d81e      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8a:	d007      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003f8c:	e018      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	4a8c      	ldr	r2, [pc, #560]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003f9a:	e017      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 fe3e 	bl	8005c24 <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fac:	e00e      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3324      	adds	r3, #36	; 0x24
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 fee7 	bl	8005d88 <RCCEx_PLL3_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fbe:	e005      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003fd2:	4b7c      	ldr	r3, [pc, #496]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	4979      	ldr	r1, [pc, #484]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	650b      	str	r3, [r1, #80]	; 0x50
 8003fe4:	e001      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d049      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffe:	d02e      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004004:	d828      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004006:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800400a:	d02a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800400c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004010:	d822      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004012:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004016:	d026      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004018:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800401c:	d81c      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800401e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004022:	d010      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004028:	d816      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01d      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004032:	d111      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2101      	movs	r1, #1
 800403a:	4618      	mov	r0, r3
 800403c:	f001 fdf2 	bl	8005c24 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004044:	e012      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2101      	movs	r1, #1
 800404c:	4618      	mov	r0, r3
 800404e:	f001 fe9b 	bl	8005d88 <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004056:	e009      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800405e:	bf00      	nop
 8004060:	e004      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800406a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004072:	4b54      	ldr	r3, [pc, #336]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407e:	4951      	ldr	r1, [pc, #324]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	650b      	str	r3, [r1, #80]	; 0x50
 8004084:	e001      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d04b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800409c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a0:	d02e      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80040a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a6:	d828      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d02a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80040ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b2:	d822      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b8:	d026      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80040ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040be:	d81c      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c4:	d010      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80040c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ca:	d816      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01d      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80040d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040d4:	d111      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fda1 	bl	8005c24 <RCCEx_PLL2_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040e6:	e012      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3324      	adds	r3, #36	; 0x24
 80040ec:	2101      	movs	r1, #1
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fe4a 	bl	8005d88 <RCCEx_PLL3_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040f8:	e009      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
      break;
 80040fe:	e006      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004100:	bf00      	nop
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800410c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004122:	4928      	ldr	r1, [pc, #160]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	658b      	str	r3, [r1, #88]	; 0x58
 8004128:	e001      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d02f      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004142:	d00e      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004148:	d814      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d015      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800414e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004152:	d10f      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800415a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004160:	e00c      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	2101      	movs	r1, #1
 8004168:	4618      	mov	r0, r3
 800416a:	f001 fd5b 	bl	8005c24 <RCCEx_PLL2_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004172:	e003      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	75fb      	strb	r3, [r7, #23]
      break;
 8004178:	e000      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800417a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004186:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418e:	490d      	ldr	r1, [pc, #52]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	650b      	str	r3, [r1, #80]	; 0x50
 8004194:	e001      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d033      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d81c      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80041ae:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	080041ef 	.word	0x080041ef
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041d7 	.word	0x080041d7
 80041c0:	080041ef 	.word	0x080041ef
 80041c4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c8:	4bb8      	ldr	r3, [pc, #736]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	4ab7      	ldr	r2, [pc, #732]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041d4:	e00c      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	2102      	movs	r1, #2
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fd21 	bl	8005c24 <RCCEx_PLL2_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
      break;
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80041ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041f6:	4bad      	ldr	r3, [pc, #692]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	49aa      	ldr	r1, [pc, #680]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004208:	e001      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8086 	beq.w	8004328 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800421c:	4ba4      	ldr	r3, [pc, #656]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4aa3      	ldr	r2, [pc, #652]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004228:	f7fe f9bc 	bl	80025a4 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800422e:	e009      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004230:	f7fe f9b8 	bl	80025a4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d902      	bls.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	75fb      	strb	r3, [r7, #23]
        break;
 8004242:	e005      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004244:	4b9a      	ldr	r3, [pc, #616]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ef      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d166      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004256:	4b95      	ldr	r3, [pc, #596]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004260:	4053      	eors	r3, r2
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d013      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800426a:	4b90      	ldr	r3, [pc, #576]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004272:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004274:	4b8d      	ldr	r3, [pc, #564]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a8c      	ldr	r2, [pc, #560]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800427a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004280:	4b8a      	ldr	r3, [pc, #552]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a89      	ldr	r2, [pc, #548]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800428c:	4a87      	ldr	r2, [pc, #540]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429c:	d115      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fe f981 	bl	80025a4 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a4:	e00b      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fe f97d 	bl	80025a4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d902      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	75fb      	strb	r3, [r7, #23]
            break;
 80042bc:	e005      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042be:	4b7b      	ldr	r3, [pc, #492]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ed      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d126      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042de:	d10d      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80042e0:	4b72      	ldr	r3, [pc, #456]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042ee:	0919      	lsrs	r1, r3, #4
 80042f0:	4b70      	ldr	r3, [pc, #448]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80042f2:	400b      	ands	r3, r1
 80042f4:	496d      	ldr	r1, [pc, #436]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	610b      	str	r3, [r1, #16]
 80042fa:	e005      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80042fc:	4b6b      	ldr	r3, [pc, #428]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4a6a      	ldr	r2, [pc, #424]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004302:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004306:	6113      	str	r3, [r2, #16]
 8004308:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800430a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004316:	4965      	ldr	r1, [pc, #404]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	670b      	str	r3, [r1, #112]	; 0x70
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	75bb      	strb	r3, [r7, #22]
 8004322:	e001      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d07e      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004338:	2b28      	cmp	r3, #40	; 0x28
 800433a:	d867      	bhi.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800433c:	a201      	add	r2, pc, #4	; (adr r2, 8004344 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004413 	.word	0x08004413
 8004348:	0800440d 	.word	0x0800440d
 800434c:	0800440d 	.word	0x0800440d
 8004350:	0800440d 	.word	0x0800440d
 8004354:	0800440d 	.word	0x0800440d
 8004358:	0800440d 	.word	0x0800440d
 800435c:	0800440d 	.word	0x0800440d
 8004360:	0800440d 	.word	0x0800440d
 8004364:	080043e9 	.word	0x080043e9
 8004368:	0800440d 	.word	0x0800440d
 800436c:	0800440d 	.word	0x0800440d
 8004370:	0800440d 	.word	0x0800440d
 8004374:	0800440d 	.word	0x0800440d
 8004378:	0800440d 	.word	0x0800440d
 800437c:	0800440d 	.word	0x0800440d
 8004380:	0800440d 	.word	0x0800440d
 8004384:	080043fb 	.word	0x080043fb
 8004388:	0800440d 	.word	0x0800440d
 800438c:	0800440d 	.word	0x0800440d
 8004390:	0800440d 	.word	0x0800440d
 8004394:	0800440d 	.word	0x0800440d
 8004398:	0800440d 	.word	0x0800440d
 800439c:	0800440d 	.word	0x0800440d
 80043a0:	0800440d 	.word	0x0800440d
 80043a4:	08004413 	.word	0x08004413
 80043a8:	0800440d 	.word	0x0800440d
 80043ac:	0800440d 	.word	0x0800440d
 80043b0:	0800440d 	.word	0x0800440d
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	0800440d 	.word	0x0800440d
 80043c0:	0800440d 	.word	0x0800440d
 80043c4:	08004413 	.word	0x08004413
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	0800440d 	.word	0x0800440d
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800440d 	.word	0x0800440d
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004413 	.word	0x08004413
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	2101      	movs	r1, #1
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 fc18 	bl	8005c24 <RCCEx_PLL2_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80043f8:	e00c      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3324      	adds	r3, #36	; 0x24
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f001 fcc1 	bl	8005d88 <RCCEx_PLL3_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800440a:	e003      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	75fb      	strb	r3, [r7, #23]
      break;
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004426:	4921      	ldr	r1, [pc, #132]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	654b      	str	r3, [r1, #84]	; 0x54
 800442c:	e001      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d03e      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004442:	2b05      	cmp	r3, #5
 8004444:	d820      	bhi.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	0800448f 	.word	0x0800448f
 8004450:	08004465 	.word	0x08004465
 8004454:	08004477 	.word	0x08004477
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800448f 	.word	0x0800448f
 8004460:	0800448f 	.word	0x0800448f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f001 fbda 	bl	8005c24 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004474:	e00c      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3324      	adds	r3, #36	; 0x24
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f001 fc83 	bl	8005d88 <RCCEx_PLL3_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004486:	e003      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	75fb      	strb	r3, [r7, #23]
      break;
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800448e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d110      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	f023 0207 	bic.w	r2, r3, #7
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a2:	4902      	ldr	r1, [pc, #8]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	654b      	str	r3, [r1, #84]	; 0x54
 80044a8:	e008      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	58024800 	.word	0x58024800
 80044b4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d039      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d820      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	0800451b 	.word	0x0800451b
 80044dc:	080044f1 	.word	0x080044f1
 80044e0:	08004503 	.word	0x08004503
 80044e4:	0800451b 	.word	0x0800451b
 80044e8:	0800451b 	.word	0x0800451b
 80044ec:	0800451b 	.word	0x0800451b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 fb94 	bl	8005c24 <RCCEx_PLL2_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004500:	e00c      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3324      	adds	r3, #36	; 0x24
 8004506:	2101      	movs	r1, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f001 fc3d 	bl	8005d88 <RCCEx_PLL3_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004512:	e003      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
      break;
 8004518:	e000      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800451a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004522:	4bb7      	ldr	r3, [pc, #732]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	f023 0207 	bic.w	r2, r3, #7
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004530:	49b3      	ldr	r1, [pc, #716]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004532:	4313      	orrs	r3, r2
 8004534:	658b      	str	r3, [r1, #88]	; 0x58
 8004536:	e001      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d04b      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004552:	d02e      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004558:	d828      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d02a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004564:	d822      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004566:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800456a:	d026      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800456c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004570:	d81c      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004576:	d010      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457c:	d816      	bhi.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01d      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004582:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004586:	d111      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fb48 	bl	8005c24 <RCCEx_PLL2_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004598:	e012      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3324      	adds	r3, #36	; 0x24
 800459e:	2102      	movs	r1, #2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f001 fbf1 	bl	8005d88 <RCCEx_PLL3_Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045aa:	e009      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	75fb      	strb	r3, [r7, #23]
      break;
 80045b0:	e006      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045b2:	bf00      	nop
 80045b4:	e004      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045b6:	bf00      	nop
 80045b8:	e002      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80045be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045c6:	4b8e      	ldr	r3, [pc, #568]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d4:	498a      	ldr	r1, [pc, #552]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	654b      	str	r3, [r1, #84]	; 0x54
 80045da:	e001      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
 80045de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d04b      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045f6:	d02e      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80045f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045fc:	d828      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004602:	d02a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004608:	d822      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800460a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800460e:	d026      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004614:	d81c      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461a:	d010      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800461c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004620:	d816      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01d      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462a:	d111      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	2100      	movs	r1, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f001 faf6 	bl	8005c24 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800463c:	e012      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3324      	adds	r3, #36	; 0x24
 8004642:	2102      	movs	r1, #2
 8004644:	4618      	mov	r0, r3
 8004646:	f001 fb9f 	bl	8005d88 <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800464e:	e009      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
      break;
 8004654:	e006      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004656:	bf00      	nop
 8004658:	e004      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004678:	4961      	ldr	r1, [pc, #388]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800467a:	4313      	orrs	r3, r2
 800467c:	658b      	str	r3, [r1, #88]	; 0x58
 800467e:	e001      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468c:	2b00      	cmp	r3, #0
 800468e:	d04b      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004696:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800469a:	d02e      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800469c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046a0:	d828      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a6:	d02a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80046a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ac:	d822      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046b2:	d026      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80046b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046b8:	d81c      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046be:	d010      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80046c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c4:	d816      	bhi.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01d      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80046ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ce:	d111      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 faa4 	bl	8005c24 <RCCEx_PLL2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046e0:	e012      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3324      	adds	r3, #36	; 0x24
 80046e6:	2102      	movs	r1, #2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 fb4d 	bl	8005d88 <RCCEx_PLL3_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046f2:	e009      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
      break;
 80046f8:	e006      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80046fa:	bf00      	nop
 80046fc:	e004      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800470e:	4b3c      	ldr	r3, [pc, #240]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800471c:	4938      	ldr	r1, [pc, #224]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800471e:	4313      	orrs	r3, r2
 8004720:	658b      	str	r3, [r1, #88]	; 0x58
 8004722:	e001      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473e:	d10a      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f001 fb1e 	bl	8005d88 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004764:	4926      	ldr	r1, [pc, #152]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004766:	4313      	orrs	r3, r2
 8004768:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d10a      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3324      	adds	r3, #36	; 0x24
 8004786:	2102      	movs	r1, #2
 8004788:	4618      	mov	r0, r3
 800478a:	f001 fafd 	bl	8005d88 <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a6:	4916      	ldr	r1, [pc, #88]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d036      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c2:	d01f      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80047c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c8:	d817      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80047ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d2:	d009      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80047d4:	e011      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 fa21 	bl	8005c24 <RCCEx_PLL2_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047e6:	e00e      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3324      	adds	r3, #36	; 0x24
 80047ec:	2102      	movs	r1, #2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 faca 	bl	8005d88 <RCCEx_PLL3_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047f8:	e005      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	75fb      	strb	r3, [r7, #23]
      break;
 80047fe:	e002      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004800:	58024400 	.word	0x58024400
      break;
 8004804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800480c:	4b93      	ldr	r3, [pc, #588]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800481a:	4990      	ldr	r1, [pc, #576]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	658b      	str	r3, [r1, #88]	; 0x58
 8004820:	e001      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d033      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004838:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800483c:	d01c      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800483e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004842:	d816      	bhi.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004848:	d003      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800484a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800484e:	d007      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004850:	e00f      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004852:	4b82      	ldr	r3, [pc, #520]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4a81      	ldr	r2, [pc, #516]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800485e:	e00c      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3324      	adds	r3, #36	; 0x24
 8004864:	2101      	movs	r1, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f001 fa8e 	bl	8005d88 <RCCEx_PLL3_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
      break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004880:	4b76      	ldr	r3, [pc, #472]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488e:	4973      	ldr	r1, [pc, #460]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004890:	4313      	orrs	r3, r2
 8004892:	654b      	str	r3, [r1, #84]	; 0x54
 8004894:	e001      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d029      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b2:	d007      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80048b4:	e00f      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b6:	4b69      	ldr	r3, [pc, #420]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	4a68      	ldr	r2, [pc, #416]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048c2:	e00b      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3304      	adds	r3, #4
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 f9aa 	bl	8005c24 <RCCEx_PLL2_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048d4:	e002      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      break;
 80048da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048e2:	4b5e      	ldr	r3, [pc, #376]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	495b      	ldr	r1, [pc, #364]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048f4:	e001      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3324      	adds	r3, #36	; 0x24
 800490a:	2102      	movs	r1, #2
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fa3b 	bl	8005d88 <RCCEx_PLL3_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d030      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004930:	d017      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004936:	d811      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800493c:	d013      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800493e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004942:	d80b      	bhi.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d010      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800494c:	d106      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494e:	4b43      	ldr	r3, [pc, #268]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4a42      	ldr	r2, [pc, #264]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004958:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800495a:	e007      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	e004      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004962:	bf00      	nop
 8004964:	e002      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004966:	bf00      	nop
 8004968:	e000      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800496a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004972:	4b3a      	ldr	r3, [pc, #232]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004976:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497e:	4937      	ldr	r1, [pc, #220]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	654b      	str	r3, [r1, #84]	; 0x54
 8004984:	e001      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004996:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	492e      	ldr	r1, [pc, #184]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049b4:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049c2:	4926      	ldr	r1, [pc, #152]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049d4:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e0:	491e      	ldr	r1, [pc, #120]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049f2:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80049f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049fc:	6113      	str	r3, [r2, #16]
 80049fe:	4b17      	ldr	r3, [pc, #92]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a08:	4914      	ldr	r1, [pc, #80]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da08      	bge.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a16:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	490e      	ldr	r1, [pc, #56]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	4906      	ldr	r1, [pc, #24]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004a48:	7dbb      	ldrb	r3, [r7, #22]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	58024400 	.word	0x58024400

08004a60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b090      	sub	sp, #64	; 0x40
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6e:	f040 8095 	bne.w	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004a72:	4bae      	ldr	r3, [pc, #696]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	f200 8088 	bhi.w	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004a84:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004aa1 	.word	0x08004aa1
 8004a90:	08004ac9 	.word	0x08004ac9
 8004a94:	08004af1 	.word	0x08004af1
 8004a98:	08004b8d 	.word	0x08004b8d
 8004a9c:	08004b19 	.word	0x08004b19

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004aa0:	4ba2      	ldr	r3, [pc, #648]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004aac:	d108      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 ff64 	bl	8005980 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004abc:	f000 bc95 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac4:	f000 bc91 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ac8:	4b98      	ldr	r3, [pc, #608]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad4:	d108      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ad6:	f107 0318 	add.w	r3, r7, #24
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fca8 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ae4:	f000 bc81 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aec:	f000 bc7d 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004af0:	4b8e      	ldr	r3, [pc, #568]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afc:	d108      	bne.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004afe:	f107 030c 	add.w	r3, r7, #12
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fde8 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b0c:	f000 bc6d 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b14:	f000 bc69 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b18:	4b84      	ldr	r3, [pc, #528]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b22:	4b82      	ldr	r3, [pc, #520]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b34:	4b7d      	ldr	r3, [pc, #500]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	08db      	lsrs	r3, r3, #3
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	4a7c      	ldr	r2, [pc, #496]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b46:	e01f      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b48:	4b78      	ldr	r3, [pc, #480]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b54:	d106      	bne.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b5c:	d102      	bne.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b5e:	4b75      	ldr	r3, [pc, #468]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b62:	e011      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b64:	4b71      	ldr	r3, [pc, #452]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b70:	d106      	bne.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b78:	d102      	bne.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b7a:	4b6f      	ldr	r3, [pc, #444]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b84:	f000 bc31 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b88:	f000 bc2f 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b8c:	4b6b      	ldr	r3, [pc, #428]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b90:	f000 bc2b 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b98:	f000 bc27 	b.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba2:	f040 8095 	bne.w	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004baa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb6:	d04d      	beq.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbe:	f200 8084 	bhi.w	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc6:	d07d      	beq.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	2bc0      	cmp	r3, #192	; 0xc0
 8004bcc:	d87d      	bhi.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	2b80      	cmp	r3, #128	; 0x80
 8004bd2:	d02d      	beq.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	2b80      	cmp	r3, #128	; 0x80
 8004bd8:	d877      	bhi.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d012      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004be6:	e070      	b.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004be8:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fec0 	bl	8005980 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c04:	e3f1      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c0a:	e3ee      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c0c:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c18:	d107      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c1a:	f107 0318 	add.w	r3, r7, #24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fc06 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c28:	e3df      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c2e:	e3dc      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c30:	4b3e      	ldr	r3, [pc, #248]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fd48 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c4c:	e3cd      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c52:	e3ca      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c54:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c5c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c5e:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c70:	4b2e      	ldr	r3, [pc, #184]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	4a2d      	ldr	r2, [pc, #180]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c82:	e01e      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c9a:	4b26      	ldr	r3, [pc, #152]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9e:	e010      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ca0:	4b22      	ldr	r3, [pc, #136]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cac:	d106      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb4:	d102      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cba:	e002      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004cc0:	e393      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004cc2:	e392      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cc8:	e38f      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cce:	e38c      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd6:	f040 80a7 	bne.w	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cea:	d05f      	beq.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cf2:	f200 8096 	bhi.w	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004cfc:	f000 808e 	beq.w	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d06:	f200 808c 	bhi.w	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d10:	d03a      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d18:	f200 8083 	bhi.w	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d28:	d01c      	beq.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004d2a:	e07a      	b.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	03d09000 	.word	0x03d09000
 8004d34:	003d0900 	.word	0x003d0900
 8004d38:	007a1200 	.word	0x007a1200
 8004d3c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d40:	4baa      	ldr	r3, [pc, #680]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fe14 	bl	8005980 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d5c:	e345      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d62:	e342      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d64:	4ba1      	ldr	r3, [pc, #644]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d70:	d107      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d72:	f107 0318 	add.w	r3, r7, #24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fb5a 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d80:	e333      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d86:	e330      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d88:	4b98      	ldr	r3, [pc, #608]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d94:	d107      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d96:	f107 030c 	add.w	r3, r7, #12
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fc9c 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004da4:	e321      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004daa:	e31e      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004dac:	4b8f      	ldr	r3, [pc, #572]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004db6:	4b8d      	ldr	r3, [pc, #564]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dc8:	4b88      	ldr	r3, [pc, #544]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	08db      	lsrs	r3, r3, #3
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	4a87      	ldr	r2, [pc, #540]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dda:	e01e      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ddc:	4b83      	ldr	r3, [pc, #524]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de8:	d106      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8004dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df0:	d102      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004df2:	4b80      	ldr	r3, [pc, #512]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df6:	e010      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004df8:	4b7c      	ldr	r3, [pc, #496]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e04:	d106      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0c:	d102      	bne.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e0e:	4b7a      	ldr	r3, [pc, #488]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e12:	e002      	b.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e18:	e2e7      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004e1a:	e2e6      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e1c:	4b77      	ldr	r3, [pc, #476]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e20:	e2e3      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e26:	e2e0      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e2e:	f040 809c 	bne.w	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004e32:	4b6e      	ldr	r3, [pc, #440]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e42:	d054      	beq.n	8004eee <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e4a:	f200 808b 	bhi.w	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e54:	f000 8083 	beq.w	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e5e:	f200 8081 	bhi.w	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e68:	d02f      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e70:	d878      	bhi.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7e:	d012      	beq.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004e80:	e070      	b.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e82:	4b5a      	ldr	r3, [pc, #360]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fd73 	bl	8005980 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e9e:	e2a4      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea4:	e2a1      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ea6:	4b51      	ldr	r3, [pc, #324]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eb4:	f107 0318 	add.w	r3, r7, #24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fab9 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004ec2:	e292      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec8:	e28f      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eca:	4b48      	ldr	r3, [pc, #288]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ed8:	f107 030c 	add.w	r3, r7, #12
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fbfb 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ee6:	e280      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eec:	e27d      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004eee:	4b3f      	ldr	r3, [pc, #252]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ef6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ef8:	4b3c      	ldr	r3, [pc, #240]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d10c      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f0a:	4b38      	ldr	r3, [pc, #224]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	08db      	lsrs	r3, r3, #3
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	4a36      	ldr	r2, [pc, #216]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1c:	e01e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f1e:	4b33      	ldr	r3, [pc, #204]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f2a:	d106      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f32:	d102      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004f34:	4b2f      	ldr	r3, [pc, #188]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f38:	e010      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f3a:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f46:	d106      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4e:	d102      	bne.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004f50:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f54:	e002      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004f5a:	e246      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004f5c:	e245      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f5e:	4b27      	ldr	r3, [pc, #156]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f62:	e242      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f68:	e23f      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f70:	f040 80a8 	bne.w	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004f74:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004f7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f84:	d060      	beq.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f8c:	f200 8097 	bhi.w	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f96:	f000 808f 	beq.w	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fa0:	f200 808d 	bhi.w	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004faa:	d03b      	beq.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb2:	f200 8084 	bhi.w	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc2:	d01d      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004fc4:	e07b      	b.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fcd1 	bl	8005980 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fe2:	e202      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe8:	e1ff      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004fea:	bf00      	nop
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	03d09000 	.word	0x03d09000
 8004ff4:	003d0900 	.word	0x003d0900
 8004ff8:	007a1200 	.word	0x007a1200
 8004ffc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005000:	4ba3      	ldr	r3, [pc, #652]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800500c:	d107      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800500e:	f107 0318 	add.w	r3, r7, #24
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fa0c 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800501c:	e1e5      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005022:	e1e2      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005024:	4b9a      	ldr	r3, [pc, #616]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005030:	d107      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fb4e 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005040:	e1d3      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005046:	e1d0      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005048:	4b91      	ldr	r3, [pc, #580]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800504a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005050:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005052:	4b8f      	ldr	r3, [pc, #572]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d10c      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005064:	4b8a      	ldr	r3, [pc, #552]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	08db      	lsrs	r3, r3, #3
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	4a89      	ldr	r2, [pc, #548]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005076:	e01e      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005078:	4b85      	ldr	r3, [pc, #532]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005084:	d106      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800508c:	d102      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800508e:	4b82      	ldr	r3, [pc, #520]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005092:	e010      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005094:	4b7e      	ldr	r3, [pc, #504]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a0:	d106      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a8:	d102      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050aa:	4b7c      	ldr	r3, [pc, #496]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ae:	e002      	b.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80050b4:	e199      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80050b6:	e198      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80050b8:	4b79      	ldr	r3, [pc, #484]	; (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050bc:	e195      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050c2:	e192      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050ca:	d173      	bne.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80050cc:	4b70      	ldr	r3, [pc, #448]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80050ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050dc:	d02f      	beq.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050e4:	d863      	bhi.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f2:	d012      	beq.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80050f4:	e05b      	b.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050f6:	4b66      	ldr	r3, [pc, #408]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005102:	d107      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005104:	f107 0318 	add.w	r3, r7, #24
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f991 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005112:	e16a      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005118:	e167      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800511a:	4b5d      	ldr	r3, [pc, #372]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005126:	d107      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fad3 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005136:	e158      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800513c:	e155      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800513e:	4b54      	ldr	r3, [pc, #336]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005146:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005148:	4b51      	ldr	r3, [pc, #324]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d10c      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800515a:	4b4d      	ldr	r3, [pc, #308]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	08db      	lsrs	r3, r3, #3
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	4a4b      	ldr	r2, [pc, #300]	; (8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005166:	fa22 f303 	lsr.w	r3, r2, r3
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800516c:	e01e      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800516e:	4b48      	ldr	r3, [pc, #288]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517a:	d106      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800517c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005182:	d102      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005184:	4b44      	ldr	r3, [pc, #272]	; (8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005188:	e010      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800518a:	4b41      	ldr	r3, [pc, #260]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005196:	d106      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519e:	d102      	bne.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80051a0:	4b3e      	ldr	r3, [pc, #248]	; (800529c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a4:	e002      	b.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80051aa:	e11e      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80051ac:	e11d      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051b2:	e11a      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ba:	d133      	bne.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80051bc:	4b34      	ldr	r3, [pc, #208]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d2:	d012      	beq.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80051d4:	e023      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051d6:	4b2e      	ldr	r3, [pc, #184]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051e2:	d107      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fbc9 	bl	8005980 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051f2:	e0fa      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f8:	e0f7      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051fa:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005206:	d107      	bne.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005208:	f107 0318 	add.w	r3, r7, #24
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f90f 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005216:	e0e8      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800521c:	e0e5      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005222:	e0e2      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800522a:	f040 808f 	bne.w	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800522e:	4b18      	ldr	r3, [pc, #96]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800523e:	d075      	beq.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005246:	d87e      	bhi.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d060      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005256:	d876      	bhi.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800525e:	d045      	beq.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005266:	d86e      	bhi.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800526e:	d02b      	beq.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005276:	d866      	bhi.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005284:	d00e      	beq.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005286:	e05e      	b.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005288:	f000 f8bc 	bl	8005404 <HAL_RCCEx_GetD3PCLK1Freq>
 800528c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800528e:	e0ac      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8005290:	58024400 	.word	0x58024400
 8005294:	03d09000 	.word	0x03d09000
 8005298:	003d0900 	.word	0x003d0900
 800529c:	007a1200 	.word	0x007a1200
 80052a0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052a4:	4b53      	ldr	r3, [pc, #332]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b0:	d107      	bne.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052b2:	f107 0318 	add.w	r3, r7, #24
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f8ba 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052c0:	e093      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c6:	e090      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052c8:	4b4a      	ldr	r3, [pc, #296]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d4:	d107      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052d6:	f107 030c 	add.w	r3, r7, #12
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f9fc 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052e4:	e081      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ea:	e07e      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052ec:	4b41      	ldr	r3, [pc, #260]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d109      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052f8:	4b3e      	ldr	r3, [pc, #248]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	08db      	lsrs	r3, r3, #3
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	4a3d      	ldr	r2, [pc, #244]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800530a:	e06e      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005310:	e06b      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005312:	4b38      	ldr	r3, [pc, #224]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531e:	d102      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005320:	4b36      	ldr	r3, [pc, #216]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005324:	e061      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800532a:	e05e      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800532c:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005338:	d102      	bne.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800533a:	4b31      	ldr	r3, [pc, #196]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800533c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800533e:	e054      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005344:	e051      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800534a:	e04e      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005352:	d148      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005354:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005358:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800535c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d02a      	beq.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800536c:	d838      	bhi.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537a:	d00d      	beq.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800537c:	e030      	b.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800537e:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538a:	d102      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800538c:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005390:	e02b      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005396:	e028      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a4:	d107      	bne.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fae8 	bl	8005980 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80053b4:	e019      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053ba:	e016      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053bc:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c8:	d107      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ca:	f107 0318 	add.w	r3, r7, #24
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f82e 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80053d8:	e007      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053de:	e004      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053e4:	e001      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3740      	adds	r7, #64	; 0x40
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	58024400 	.word	0x58024400
 80053f8:	03d09000 	.word	0x03d09000
 80053fc:	003d0900 	.word	0x003d0900
 8005400:	007a1200 	.word	0x007a1200

08005404 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005408:	f7fe fb8e 	bl	8003b28 <HAL_RCC_GetHCLKFreq>
 800540c:	4602      	mov	r2, r0
 800540e:	4b06      	ldr	r3, [pc, #24]	; (8005428 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	4904      	ldr	r1, [pc, #16]	; (800542c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800541a:	5ccb      	ldrb	r3, [r1, r3]
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	58024400 	.word	0x58024400
 800542c:	0801213c 	.word	0x0801213c

08005430 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005438:	4ba1      	ldr	r3, [pc, #644]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005442:	4b9f      	ldr	r3, [pc, #636]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	0b1b      	lsrs	r3, r3, #12
 8005448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800544c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800544e:	4b9c      	ldr	r3, [pc, #624]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800545a:	4b99      	ldr	r3, [pc, #612]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	08db      	lsrs	r3, r3, #3
 8005460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8111 	beq.w	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b02      	cmp	r3, #2
 8005482:	f000 8083 	beq.w	800558c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b02      	cmp	r3, #2
 800548a:	f200 80a1 	bhi.w	80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d056      	beq.n	8005548 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800549a:	e099      	b.n	80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800549c:	4b88      	ldr	r3, [pc, #544]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d02d      	beq.n	8005504 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054a8:	4b85      	ldr	r3, [pc, #532]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	08db      	lsrs	r3, r3, #3
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	4a84      	ldr	r2, [pc, #528]	; (80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
 80054b8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d2:	4b7b      	ldr	r3, [pc, #492]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005502:	e087      	b.n	8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005516:	4b6a      	ldr	r3, [pc, #424]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005526:	ed97 6a03 	vldr	s12, [r7, #12]
 800552a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800552e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005546:	e065      	b.n	8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005552:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555a:	4b59      	ldr	r3, [pc, #356]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556a:	ed97 6a03 	vldr	s12, [r7, #12]
 800556e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800557e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800558a:	e043      	b.n	8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005596:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800559a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559e:	4b48      	ldr	r3, [pc, #288]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ce:	e021      	b.n	8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e2:	4b37      	ldr	r3, [pc, #220]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005612:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005614:	4b2a      	ldr	r3, [pc, #168]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	0a5b      	lsrs	r3, r3, #9
 800561a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561e:	ee07 3a90 	vmov	s15, r3
 8005622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800562a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800562e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800563a:	ee17 2a90 	vmov	r2, s15
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005642:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564c:	ee07 3a90 	vmov	s15, r3
 8005650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800565c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005668:	ee17 2a90 	vmov	r2, s15
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005670:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	0e1b      	lsrs	r3, r3, #24
 8005676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800568a:	edd7 6a07 	vldr	s13, [r7, #28]
 800568e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005696:	ee17 2a90 	vmov	r2, s15
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800569e:	e008      	b.n	80056b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	609a      	str	r2, [r3, #8]
}
 80056b2:	bf00      	nop
 80056b4:	3724      	adds	r7, #36	; 0x24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	58024400 	.word	0x58024400
 80056c4:	03d09000 	.word	0x03d09000
 80056c8:	46000000 	.word	0x46000000
 80056cc:	4c742400 	.word	0x4c742400
 80056d0:	4a742400 	.word	0x4a742400
 80056d4:	4af42400 	.word	0x4af42400

080056d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056e0:	4ba1      	ldr	r3, [pc, #644]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80056ea:	4b9f      	ldr	r3, [pc, #636]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	0d1b      	lsrs	r3, r3, #20
 80056f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80056f6:	4b9c      	ldr	r3, [pc, #624]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	0a1b      	lsrs	r3, r3, #8
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005702:	4b99      	ldr	r3, [pc, #612]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	08db      	lsrs	r3, r3, #3
 8005708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8111 	beq.w	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b02      	cmp	r3, #2
 800572a:	f000 8083 	beq.w	8005834 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b02      	cmp	r3, #2
 8005732:	f200 80a1 	bhi.w	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d056      	beq.n	80057f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005742:	e099      	b.n	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005744:	4b88      	ldr	r3, [pc, #544]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d02d      	beq.n	80057ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005750:	4b85      	ldr	r3, [pc, #532]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	08db      	lsrs	r3, r3, #3
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	4a84      	ldr	r2, [pc, #528]	; (800596c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b7b      	ldr	r3, [pc, #492]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a03 	vldr	s12, [r7, #12]
 800578e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057aa:	e087      	b.n	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057be:	4b6a      	ldr	r3, [pc, #424]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80057d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ee:	e065      	b.n	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005802:	4b59      	ldr	r3, [pc, #356]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005812:	ed97 6a03 	vldr	s12, [r7, #12]
 8005816:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800581a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005832:	e043      	b.n	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800597c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b48      	ldr	r3, [pc, #288]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a03 	vldr	s12, [r7, #12]
 800585a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005876:	e021      	b.n	80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b37      	ldr	r3, [pc, #220]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a03 	vldr	s12, [r7, #12]
 800589e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80058bc:	4b2a      	ldr	r3, [pc, #168]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	0a5b      	lsrs	r3, r3, #9
 80058c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058e2:	ee17 2a90 	vmov	r2, s15
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80058ea:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005904:	edd7 6a07 	vldr	s13, [r7, #28]
 8005908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005910:	ee17 2a90 	vmov	r2, s15
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005918:	4b13      	ldr	r3, [pc, #76]	; (8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	0e1b      	lsrs	r3, r3, #24
 800591e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800592e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005932:	edd7 6a07 	vldr	s13, [r7, #28]
 8005936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800593e:	ee17 2a90 	vmov	r2, s15
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005946:	e008      	b.n	800595a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
}
 800595a:	bf00      	nop
 800595c:	3724      	adds	r7, #36	; 0x24
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	03d09000 	.word	0x03d09000
 8005970:	46000000 	.word	0x46000000
 8005974:	4c742400 	.word	0x4c742400
 8005978:	4a742400 	.word	0x4a742400
 800597c:	4af42400 	.word	0x4af42400

08005980 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005980:	b480      	push	{r7}
 8005982:	b089      	sub	sp, #36	; 0x24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005988:	4ba0      	ldr	r3, [pc, #640]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005992:	4b9e      	ldr	r3, [pc, #632]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800599c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800599e:	4b9b      	ldr	r3, [pc, #620]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80059a8:	4b98      	ldr	r3, [pc, #608]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ac:	08db      	lsrs	r3, r3, #3
 80059ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	fb02 f303 	mul.w	r3, r2, r3
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8111 	beq.w	8005bee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	f000 8083 	beq.w	8005ada <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	f200 80a1 	bhi.w	8005b1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d056      	beq.n	8005a96 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80059e8:	e099      	b.n	8005b1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ea:	4b88      	ldr	r3, [pc, #544]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d02d      	beq.n	8005a52 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059f6:	4b85      	ldr	r3, [pc, #532]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	08db      	lsrs	r3, r3, #3
 80059fc:	f003 0303 	and.w	r3, r3, #3
 8005a00:	4a83      	ldr	r2, [pc, #524]	; (8005c10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005a02:	fa22 f303 	lsr.w	r3, r2, r3
 8005a06:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	ee07 3a90 	vmov	s15, r3
 8005a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a20:	4b7a      	ldr	r3, [pc, #488]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a34:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005c14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005a50:	e087      	b.n	8005b62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	ee07 3a90 	vmov	s15, r3
 8005a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005c18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a64:	4b69      	ldr	r3, [pc, #420]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6c:	ee07 3a90 	vmov	s15, r3
 8005a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a74:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a78:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005c14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a94:	e065      	b.n	8005b62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005c1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aa8:	4b58      	ldr	r3, [pc, #352]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab0:	ee07 3a90 	vmov	s15, r3
 8005ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ab8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005abc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005c14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ad8:	e043      	b.n	8005b62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005c20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aec:	4b47      	ldr	r3, [pc, #284]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af4:	ee07 3a90 	vmov	s15, r3
 8005af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b00:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005c14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b1c:	e021      	b.n	8005b62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b28:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005c18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b30:	4b36      	ldr	r3, [pc, #216]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b38:	ee07 3a90 	vmov	s15, r3
 8005b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b44:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005c14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b60:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005b62:	4b2a      	ldr	r3, [pc, #168]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	0a5b      	lsrs	r3, r3, #9
 8005b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b88:	ee17 2a90 	vmov	r2, s15
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005b90:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb6:	ee17 2a90 	vmov	r2, s15
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005bbe:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	0e1b      	lsrs	r3, r3, #24
 8005bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be4:	ee17 2a90 	vmov	r2, s15
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005bec:	e008      	b.n	8005c00 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	3724      	adds	r7, #36	; 0x24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	58024400 	.word	0x58024400
 8005c10:	03d09000 	.word	0x03d09000
 8005c14:	46000000 	.word	0x46000000
 8005c18:	4c742400 	.word	0x4c742400
 8005c1c:	4a742400 	.word	0x4a742400
 8005c20:	4af42400 	.word	0x4af42400

08005c24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c32:	4b53      	ldr	r3, [pc, #332]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d101      	bne.n	8005c42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e099      	b.n	8005d76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c42:	4b4f      	ldr	r3, [pc, #316]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a4e      	ldr	r2, [pc, #312]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c4e:	f7fc fca9 	bl	80025a4 <HAL_GetTick>
 8005c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c54:	e008      	b.n	8005c68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c56:	f7fc fca5 	bl	80025a4 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e086      	b.n	8005d76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c68:	4b45      	ldr	r3, [pc, #276]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1f0      	bne.n	8005c56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005c74:	4b42      	ldr	r3, [pc, #264]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	031b      	lsls	r3, r3, #12
 8005c82:	493f      	ldr	r1, [pc, #252]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	628b      	str	r3, [r1, #40]	; 0x28
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	025b      	lsls	r3, r3, #9
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	061b      	lsls	r3, r3, #24
 8005cb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cb8:	4931      	ldr	r1, [pc, #196]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cbe:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	492d      	ldr	r1, [pc, #180]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005cd0:	4b2b      	ldr	r3, [pc, #172]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	f023 0220 	bic.w	r2, r3, #32
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	4928      	ldr	r1, [pc, #160]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005ce2:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005ce8:	f023 0310 	bic.w	r3, r3, #16
 8005cec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf2:	4b24      	ldr	r3, [pc, #144]	; (8005d84 <RCCEx_PLL2_Config+0x160>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	69d2      	ldr	r2, [r2, #28]
 8005cfa:	00d2      	lsls	r2, r2, #3
 8005cfc:	4920      	ldr	r1, [pc, #128]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d02:	4b1f      	ldr	r3, [pc, #124]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d08:	f043 0310 	orr.w	r3, r3, #16
 8005d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d14:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a19      	ldr	r2, [pc, #100]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d20:	e00f      	b.n	8005d42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d106      	bne.n	8005d36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d28:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	4a14      	ldr	r2, [pc, #80]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d34:	e005      	b.n	8005d42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	4a11      	ldr	r2, [pc, #68]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d42:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a0e      	ldr	r2, [pc, #56]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d4e:	f7fc fc29 	bl	80025a4 <HAL_GetTick>
 8005d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d54:	e008      	b.n	8005d68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005d56:	f7fc fc25 	bl	80025a4 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e006      	b.n	8005d76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <RCCEx_PLL2_Config+0x15c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
 8005d84:	ffff0007 	.word	0xffff0007

08005d88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d96:	4b53      	ldr	r3, [pc, #332]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d101      	bne.n	8005da6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e099      	b.n	8005eda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005da6:	4b4f      	ldr	r3, [pc, #316]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4e      	ldr	r2, [pc, #312]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db2:	f7fc fbf7 	bl	80025a4 <HAL_GetTick>
 8005db6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005db8:	e008      	b.n	8005dcc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dba:	f7fc fbf3 	bl	80025a4 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e086      	b.n	8005eda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dcc:	4b45      	ldr	r3, [pc, #276]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f0      	bne.n	8005dba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005dd8:	4b42      	ldr	r3, [pc, #264]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	051b      	lsls	r3, r3, #20
 8005de6:	493f      	ldr	r1, [pc, #252]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	628b      	str	r3, [r1, #40]	; 0x28
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	025b      	lsls	r3, r3, #9
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	061b      	lsls	r3, r3, #24
 8005e18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e1c:	4931      	ldr	r1, [pc, #196]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e22:	4b30      	ldr	r3, [pc, #192]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	492d      	ldr	r1, [pc, #180]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e34:	4b2b      	ldr	r3, [pc, #172]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	4928      	ldr	r1, [pc, #160]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e52:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e56:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <RCCEx_PLL3_Config+0x160>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	69d2      	ldr	r2, [r2, #28]
 8005e5e:	00d2      	lsls	r2, r2, #3
 8005e60:	4920      	ldr	r1, [pc, #128]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e66:	4b1f      	ldr	r3, [pc, #124]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005e78:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e84:	e00f      	b.n	8005ea6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d106      	bne.n	8005e9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e8c:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	4a14      	ldr	r2, [pc, #80]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e98:	e005      	b.n	8005ea6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	4a11      	ldr	r2, [pc, #68]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb2:	f7fc fb77 	bl	80025a4 <HAL_GetTick>
 8005eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005eb8:	e008      	b.n	8005ecc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005eba:	f7fc fb73 	bl	80025a4 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e006      	b.n	8005eda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <RCCEx_PLL3_Config+0x15c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	ffff0007 	.word	0xffff0007

08005eec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08a      	sub	sp, #40	; 0x28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e075      	b.n	8005fea <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d105      	bne.n	8005f16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fb ffaf 	bl	8001e74 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f868 	bl	8005ff4 <HAL_SD_InitCard>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e05d      	b.n	8005fea <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005f2e:	f107 0308 	add.w	r3, r7, #8
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fdad 	bl	8006a94 <HAL_SD_GetCardStatus>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e052      	b.n	8005fea <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005f44:	7e3b      	ldrb	r3, [r7, #24]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005f4a:	7e7b      	ldrb	r3, [r7, #25]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10a      	bne.n	8005f6e <HAL_SD_Init+0x82>
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <HAL_SD_Init+0x78>
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d004      	beq.n	8005f6e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8005f6c:	e00b      	b.n	8005f86 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d104      	bne.n	8005f80 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f7c:	659a      	str	r2, [r3, #88]	; 0x58
 8005f7e:	e002      	b.n	8005f86 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fe63 	bl	8006c58 <HAL_SD_ConfigWideBusOperation>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e026      	b.n	8005fea <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005f9c:	f7fc fb02 	bl	80025a4 <HAL_GetTick>
 8005fa0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005fa2:	e011      	b.n	8005fc8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005fa4:	f7fc fafe 	bl	80025a4 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb2:	d109      	bne.n	8005fc8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e010      	b.n	8005fea <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 ff55 	bl	8006e78 <HAL_SD_GetCardState>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d1e7      	bne.n	8005fa4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3728      	adds	r7, #40	; 0x28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b08d      	sub	sp, #52	; 0x34
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006000:	2300      	movs	r3, #0
 8006002:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800600c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006010:	f7fe fd26 	bl	8004a60 <HAL_RCCEx_GetPeriphCLKFreq>
 8006014:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800602a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e06a      	b.n	8006106 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	4a36      	ldr	r2, [pc, #216]	; (8006110 <HAL_SD_InitCard+0x11c>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	091b      	lsrs	r3, r3, #4
 800603c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681c      	ldr	r4, [r3, #0]
 8006042:	466a      	mov	r2, sp
 8006044:	f107 0318 	add.w	r3, r7, #24
 8006048:	e893 0003 	ldmia.w	r3, {r0, r1}
 800604c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006050:	f107 030c 	add.w	r3, r7, #12
 8006054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006056:	4620      	mov	r0, r4
 8006058:	f003 f8d2 	bl	8009200 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f003 f915 	bl	8009290 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006072:	4a28      	ldr	r2, [pc, #160]	; (8006114 <HAL_SD_InitCard+0x120>)
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	fbb2 f3f3 	udiv	r3, r2, r3
 800607a:	3301      	adds	r3, #1
 800607c:	4618      	mov	r0, r3
 800607e:	f7fc fa9d 	bl	80025bc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 ffd4 	bl	8007030 <SD_PowerON>
 8006088:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e02e      	b.n	8006106 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 ff05 	bl	8006eb8 <SD_InitCard>
 80060ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e01b      	b.n	8006106 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060d6:	4618      	mov	r0, r3
 80060d8:	f003 f970 	bl	80093bc <SDMMC_CmdBlockLength>
 80060dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00f      	beq.n	8006104 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a0b      	ldr	r2, [pc, #44]	; (8006118 <HAL_SD_InitCard+0x124>)
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	372c      	adds	r7, #44	; 0x2c
 800610a:	46bd      	mov	sp, r7
 800610c:	bd90      	pop	{r4, r7, pc}
 800610e:	bf00      	nop
 8006110:	014f8b59 	.word	0x014f8b59
 8006114:	00012110 	.word	0x00012110
 8006118:	1fe00fff 	.word	0x1fe00fff

0800611c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b092      	sub	sp, #72	; 0x48
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800612a:	f7fc fa3b 	bl	80025a4 <HAL_GetTick>
 800612e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d107      	bne.n	800614e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006142:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e167      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	f040 815a 	bne.w	8006410 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	441a      	add	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	429a      	cmp	r2, r3
 800616e:	d907      	bls.n	8006180 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006174:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e14e      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2203      	movs	r2, #3
 8006184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2200      	movs	r2, #0
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	2b01      	cmp	r3, #1
 8006196:	d002      	beq.n	800619e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	025b      	lsls	r3, r3, #9
 800619c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800619e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061a2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	025b      	lsls	r3, r3, #9
 80061a8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061aa:	2390      	movs	r3, #144	; 0x90
 80061ac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80061ae:	2302      	movs	r3, #2
 80061b0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f107 0214 	add.w	r2, r7, #20
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f003 f8cd 	bl	8009364 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d90a      	bls.n	80061f6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2202      	movs	r2, #2
 80061e4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061ec:	4618      	mov	r0, r3
 80061ee:	f003 f92b 	bl	8009448 <SDMMC_CmdReadMultiBlock>
 80061f2:	6478      	str	r0, [r7, #68]	; 0x44
 80061f4:	e009      	b.n	800620a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006202:	4618      	mov	r0, r3
 8006204:	f003 f8fd 	bl	8009402 <SDMMC_CmdReadSingleBlock>
 8006208:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800620a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620c:	2b00      	cmp	r3, #0
 800620e:	d012      	beq.n	8006236 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a84      	ldr	r2, [pc, #528]	; (8006428 <HAL_SD_ReadBlocks+0x30c>)
 8006216:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800621c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800621e:	431a      	orrs	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0f3      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800623a:	e058      	b.n	80062ee <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d033      	beq.n	80062b2 <HAL_SD_ReadBlocks+0x196>
 800624a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624c:	2b1f      	cmp	r3, #31
 800624e:	d930      	bls.n	80062b2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006250:	2300      	movs	r3, #0
 8006252:	643b      	str	r3, [r7, #64]	; 0x40
 8006254:	e027      	b.n	80062a6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f002 fffa 	bl	8009254 <SDMMC_ReadFIFO>
 8006260:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	b2da      	uxtb	r2, r3
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	3301      	adds	r3, #1
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	0a1b      	lsrs	r3, r3, #8
 8006274:	b2da      	uxtb	r2, r3
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	3301      	adds	r3, #1
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	0c1b      	lsrs	r3, r3, #16
 8006284:	b2da      	uxtb	r2, r3
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628c:	3301      	adds	r3, #1
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	0e1b      	lsrs	r3, r3, #24
 8006294:	b2da      	uxtb	r2, r3
 8006296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006298:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800629a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629c:	3301      	adds	r3, #1
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 80062a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a2:	3301      	adds	r3, #1
 80062a4:	643b      	str	r3, [r7, #64]	; 0x40
 80062a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a8:	2b07      	cmp	r3, #7
 80062aa:	d9d4      	bls.n	8006256 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	3b20      	subs	r3, #32
 80062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80062b2:	f7fc f977 	bl	80025a4 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062be:	429a      	cmp	r2, r3
 80062c0:	d902      	bls.n	80062c8 <HAL_SD_ReadBlocks+0x1ac>
 80062c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d112      	bne.n	80062ee <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a56      	ldr	r2, [pc, #344]	; (8006428 <HAL_SD_ReadBlocks+0x30c>)
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e097      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d09f      	beq.n	800623c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800630a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d022      	beq.n	8006360 <HAL_SD_ReadBlocks+0x244>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d91f      	bls.n	8006360 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	2b03      	cmp	r3, #3
 8006326:	d01b      	beq.n	8006360 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4618      	mov	r0, r3
 800632e:	f003 f8f5 	bl	800951c <SDMMC_CmdStopTransfer>
 8006332:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006336:	2b00      	cmp	r3, #0
 8006338:	d012      	beq.n	8006360 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3a      	ldr	r2, [pc, #232]	; (8006428 <HAL_SD_ReadBlocks+0x30c>)
 8006340:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006348:	431a      	orrs	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e05e      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d012      	beq.n	8006394 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a2d      	ldr	r2, [pc, #180]	; (8006428 <HAL_SD_ReadBlocks+0x30c>)
 8006374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	f043 0208 	orr.w	r2, r3, #8
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e044      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d012      	beq.n	80063c8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a20      	ldr	r2, [pc, #128]	; (8006428 <HAL_SD_ReadBlocks+0x30c>)
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	f043 0202 	orr.w	r2, r3, #2
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e02a      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d012      	beq.n	80063fc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a13      	ldr	r2, [pc, #76]	; (8006428 <HAL_SD_ReadBlocks+0x30c>)
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e010      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0a      	ldr	r2, [pc, #40]	; (800642c <HAL_SD_ReadBlocks+0x310>)
 8006402:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	e006      	b.n	800641e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006414:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	3748      	adds	r7, #72	; 0x48
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	1fe00fff 	.word	0x1fe00fff
 800642c:	18000f3a 	.word	0x18000f3a

08006430 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b092      	sub	sp, #72	; 0x48
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800643e:	f7fc f8b1 	bl	80025a4 <HAL_GetTick>
 8006442:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d107      	bne.n	8006462 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006456:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e16b      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b01      	cmp	r3, #1
 800646c:	f040 815e 	bne.w	800672c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	441a      	add	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	429a      	cmp	r2, r3
 8006482:	d907      	bls.n	8006494 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e152      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2203      	movs	r2, #3
 8006498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2200      	movs	r2, #0
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d002      	beq.n	80064b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80064ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ae:	025b      	lsls	r3, r3, #9
 80064b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	025b      	lsls	r3, r3, #9
 80064bc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80064be:	2390      	movs	r3, #144	; 0x90
 80064c0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80064c2:	2300      	movs	r3, #0
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f107 0218 	add.w	r2, r7, #24
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f002 ff43 	bl	8009364 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ec:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d90a      	bls.n	800650a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006500:	4618      	mov	r0, r3
 8006502:	f002 ffe7 	bl	80094d4 <SDMMC_CmdWriteMultiBlock>
 8006506:	6478      	str	r0, [r7, #68]	; 0x44
 8006508:	e009      	b.n	800651e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2210      	movs	r2, #16
 800650e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006516:	4618      	mov	r0, r3
 8006518:	f002 ffb9 	bl	800948e <SDMMC_CmdWriteSingleBlock>
 800651c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800651e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006520:	2b00      	cmp	r3, #0
 8006522:	d012      	beq.n	800654a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a86      	ldr	r2, [pc, #536]	; (8006744 <HAL_SD_WriteBlocks+0x314>)
 800652a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006532:	431a      	orrs	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0f7      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800654e:	e05c      	b.n	800660a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d037      	beq.n	80065ce <HAL_SD_WriteBlocks+0x19e>
 800655e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006560:	2b1f      	cmp	r3, #31
 8006562:	d934      	bls.n	80065ce <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006564:	2300      	movs	r3, #0
 8006566:	643b      	str	r3, [r7, #64]	; 0x40
 8006568:	e02b      	b.n	80065c2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006572:	3301      	adds	r3, #1
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	021a      	lsls	r2, r3, #8
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006584:	3301      	adds	r3, #1
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	041a      	lsls	r2, r3, #16
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	3301      	adds	r3, #1
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800659a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	061a      	lsls	r2, r3, #24
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a8:	3301      	adds	r3, #1
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f107 0214 	add.w	r2, r7, #20
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f002 fe59 	bl	800926e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80065bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065be:	3301      	adds	r3, #1
 80065c0:	643b      	str	r3, [r7, #64]	; 0x40
 80065c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c4:	2b07      	cmp	r3, #7
 80065c6:	d9d0      	bls.n	800656a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80065c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ca:	3b20      	subs	r3, #32
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80065ce:	f7fb ffe9 	bl	80025a4 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065da:	429a      	cmp	r2, r3
 80065dc:	d902      	bls.n	80065e4 <HAL_SD_WriteBlocks+0x1b4>
 80065de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d112      	bne.n	800660a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a56      	ldr	r2, [pc, #344]	; (8006744 <HAL_SD_WriteBlocks+0x314>)
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f2:	431a      	orrs	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e097      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006614:	2b00      	cmp	r3, #0
 8006616:	d09b      	beq.n	8006550 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006626:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	2b00      	cmp	r3, #0
 8006634:	d022      	beq.n	800667c <HAL_SD_WriteBlocks+0x24c>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d91f      	bls.n	800667c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	2b03      	cmp	r3, #3
 8006642:	d01b      	beq.n	800667c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f002 ff67 	bl	800951c <SDMMC_CmdStopTransfer>
 800664e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006652:	2b00      	cmp	r3, #0
 8006654:	d012      	beq.n	800667c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a3a      	ldr	r2, [pc, #232]	; (8006744 <HAL_SD_WriteBlocks+0x314>)
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006664:	431a      	orrs	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e05e      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d012      	beq.n	80066b0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2d      	ldr	r2, [pc, #180]	; (8006744 <HAL_SD_WriteBlocks+0x314>)
 8006690:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006696:	f043 0208 	orr.w	r2, r3, #8
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e044      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d012      	beq.n	80066e4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a20      	ldr	r2, [pc, #128]	; (8006744 <HAL_SD_WriteBlocks+0x314>)
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	f043 0202 	orr.w	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e02a      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d012      	beq.n	8006718 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a13      	ldr	r2, [pc, #76]	; (8006744 <HAL_SD_WriteBlocks+0x314>)
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	f043 0210 	orr.w	r2, r3, #16
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e010      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <HAL_SD_WriteBlocks+0x318>)
 800671e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	e006      	b.n	800673a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	3748      	adds	r7, #72	; 0x48
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	1fe00fff 	.word	0x1fe00fff
 8006748:	18000f3a 	.word	0x18000f3a

0800674c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	0f9b      	lsrs	r3, r3, #30
 800675c:	b2da      	uxtb	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006766:	0e9b      	lsrs	r3, r3, #26
 8006768:	b2db      	uxtb	r3, r3
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	b2da      	uxtb	r2, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006778:	0e1b      	lsrs	r3, r3, #24
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678a:	0c1b      	lsrs	r3, r3, #16
 800678c:	b2da      	uxtb	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	b2da      	uxtb	r2, r3
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ac:	0d1b      	lsrs	r3, r3, #20
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ca:	0bdb      	lsrs	r3, r3, #15
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067dc:	0b9b      	lsrs	r3, r3, #14
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ee:	0b5b      	lsrs	r3, r3, #13
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006800:	0b1b      	lsrs	r3, r3, #12
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2200      	movs	r2, #0
 8006812:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d163      	bne.n	80068e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006820:	009a      	lsls	r2, r3, #2
 8006822:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006826:	4013      	ands	r3, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800682c:	0f92      	lsrs	r2, r2, #30
 800682e:	431a      	orrs	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006838:	0edb      	lsrs	r3, r3, #27
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	b2da      	uxtb	r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800684a:	0e1b      	lsrs	r3, r3, #24
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	b2da      	uxtb	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800685c:	0d5b      	lsrs	r3, r3, #21
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	b2da      	uxtb	r2, r3
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686e:	0c9b      	lsrs	r3, r3, #18
 8006870:	b2db      	uxtb	r3, r3
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	b2da      	uxtb	r2, r3
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006880:	0bdb      	lsrs	r3, r3, #15
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	b2da      	uxtb	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	7e1b      	ldrb	r3, [r3, #24]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	3302      	adds	r3, #2
 80068a4:	2201      	movs	r2, #1
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068ae:	fb02 f203 	mul.w	r2, r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	7a1b      	ldrb	r3, [r3, #8]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	2201      	movs	r2, #1
 80068c2:	409a      	lsls	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80068d0:	0a52      	lsrs	r2, r2, #9
 80068d2:	fb02 f203 	mul.w	r2, r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e0:	655a      	str	r2, [r3, #84]	; 0x54
 80068e2:	e031      	b.n	8006948 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d11d      	bne.n	8006928 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f0:	041b      	lsls	r3, r3, #16
 80068f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	431a      	orrs	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	3301      	adds	r3, #1
 8006908:	029a      	lsls	r2, r3, #10
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
 8006926:	e00f      	b.n	8006948 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a58      	ldr	r2, [pc, #352]	; (8006a90 <HAL_SD_GetCardCSD+0x344>)
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e09d      	b.n	8006a84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800694c:	0b9b      	lsrs	r3, r3, #14
 800694e:	b2db      	uxtb	r3, r3
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	b2da      	uxtb	r2, r3
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695e:	09db      	lsrs	r3, r3, #7
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006966:	b2da      	uxtb	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006976:	b2da      	uxtb	r2, r3
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006980:	0fdb      	lsrs	r3, r3, #31
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698c:	0f5b      	lsrs	r3, r3, #29
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	b2da      	uxtb	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800699e:	0e9b      	lsrs	r3, r3, #26
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b0:	0d9b      	lsrs	r3, r3, #22
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c2:	0d5b      	lsrs	r3, r3, #21
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f2:	0bdb      	lsrs	r3, r3, #15
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a06:	0b9b      	lsrs	r3, r3, #14
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a1a:	0b5b      	lsrs	r3, r3, #13
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a2e:	0b1b      	lsrs	r3, r3, #12
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a42:	0a9b      	lsrs	r3, r3, #10
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a56:	0a1b      	lsrs	r3, r3, #8
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a6a:	085b      	lsrs	r3, r3, #1
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	1fe00fff 	.word	0x1fe00fff

08006a94 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b094      	sub	sp, #80	; 0x50
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006aa4:	f107 0308 	add.w	r3, r7, #8
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fb4a 	bl	8007144 <SD_SendSDStatus>
 8006ab0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d011      	beq.n	8006adc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a4f      	ldr	r2, [pc, #316]	; (8006bfc <HAL_SD_GetCardStatus+0x168>)
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006ada:	e070      	b.n	8006bbe <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	099b      	lsrs	r3, r3, #6
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	0e1b      	lsrs	r3, r3, #24
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	061a      	lsls	r2, r3, #24
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b22:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	0a1b      	lsrs	r3, r3, #8
 8006b28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b2c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	0e1b      	lsrs	r3, r3, #24
 8006b32:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	0a1b      	lsrs	r3, r3, #8
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	0d1b      	lsrs	r3, r3, #20
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	0a9b      	lsrs	r3, r3, #10
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	091b      	lsrs	r3, r3, #4
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	0e1b      	lsrs	r3, r3, #24
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f002 fbf8 	bl	80093bc <SDMMC_CmdBlockLength>
 8006bcc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a08      	ldr	r2, [pc, #32]	; (8006bfc <HAL_SD_GetCardStatus+0x168>)
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006bf0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3750      	adds	r7, #80	; 0x50
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	1fe00fff 	.word	0x1fe00fff

08006c00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c58:	b590      	push	{r4, r7, lr}
 8006c5a:	b08d      	sub	sp, #52	; 0x34
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d02e      	beq.n	8006cd6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d106      	bne.n	8006c8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8006c8c:	e029      	b.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c94:	d10a      	bne.n	8006cac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fb4c 	bl	8007334 <SD_WideBus_Enable>
 8006c9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8006caa:	e01a      	b.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fb89 	bl	80073ca <SD_WideBus_Disable>
 8006cb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8006cc6:	e00c      	b.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ccc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	635a      	str	r2, [r3, #52]	; 0x34
 8006cd4:	e005      	b.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a5e      	ldr	r2, [pc, #376]	; (8006e68 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cf8:	e094      	b.n	8006e24 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006cfa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006cfe:	f7fd feaf 	bl	8004a60 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d02:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 8083 	beq.w	8006e12 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695a      	ldr	r2, [r3, #20]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4950      	ldr	r1, [pc, #320]	; (8006e6c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d2a:	fba1 1303 	umull	r1, r3, r1, r3
 8006d2e:	0e1b      	lsrs	r3, r3, #24
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d303      	bcc.n	8006d3c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e05a      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d44:	d103      	bne.n	8006d4e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	e051      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d56:	d126      	bne.n	8006da6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10e      	bne.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4a43      	ldr	r2, [pc, #268]	; (8006e70 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d906      	bls.n	8006d76 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4a40      	ldr	r2, [pc, #256]	; (8006e6c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d70:	0e5b      	lsrs	r3, r3, #25
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	e03d      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	e039      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8a:	4a39      	ldr	r2, [pc, #228]	; (8006e70 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d906      	bls.n	8006d9e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	4a36      	ldr	r2, [pc, #216]	; (8006e6c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d94:	fba2 2303 	umull	r2, r3, r2, r3
 8006d98:	0e5b      	lsrs	r3, r3, #25
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	e029      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	e025      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10e      	bne.n	8006dcc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4a30      	ldr	r2, [pc, #192]	; (8006e74 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d906      	bls.n	8006dc4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006dba:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbe:	0e1b      	lsrs	r3, r3, #24
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	e016      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	e012      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	4a26      	ldr	r2, [pc, #152]	; (8006e74 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d906      	bls.n	8006dec <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4a22      	ldr	r2, [pc, #136]	; (8006e6c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	0e1b      	lsrs	r3, r3, #24
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e002      	b.n	8006df2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681c      	ldr	r4, [r3, #0]
 8006df6:	466a      	mov	r2, sp
 8006df8:	f107 0314 	add.w	r3, r7, #20
 8006dfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006e00:	e882 0003 	stmia.w	r2, {r0, r1}
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f002 f9f8 	bl	8009200 <SDMMC_Init>
 8006e10:	e008      	b.n	8006e24 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f002 fac5 	bl	80093bc <SDMMC_CmdBlockLength>
 8006e32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00c      	beq.n	8006e54 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	372c      	adds	r7, #44	; 0x2c
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd90      	pop	{r4, r7, pc}
 8006e68:	1fe00fff 	.word	0x1fe00fff
 8006e6c:	55e63b89 	.word	0x55e63b89
 8006e70:	02faf080 	.word	0x02faf080
 8006e74:	017d7840 	.word	0x017d7840

08006e78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e84:	f107 030c 	add.w	r3, r7, #12
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fa2a 	bl	80072e4 <SD_SendStatus>
 8006e90:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	0a5b      	lsrs	r3, r3, #9
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006eae:	693b      	ldr	r3, [r7, #16]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b090      	sub	sp, #64	; 0x40
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f002 f9f2 	bl	80092b2 <SDMMC_GetPowerState>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ed4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ed8:	e0a5      	b.n	8007026 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d02e      	beq.n	8006f40 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f002 fc3d 	bl	8009766 <SDMMC_CmdSendCID>
 8006eec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <SD_InitCard+0x40>
    {
      return errorstate;
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef6:	e096      	b.n	8007026 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f002 fa1d 	bl	800933e <SDMMC_GetResponse>
 8006f04:	4602      	mov	r2, r0
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2104      	movs	r1, #4
 8006f10:	4618      	mov	r0, r3
 8006f12:	f002 fa14 	bl	800933e <SDMMC_GetResponse>
 8006f16:	4602      	mov	r2, r0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2108      	movs	r1, #8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f002 fa0b 	bl	800933e <SDMMC_GetResponse>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	210c      	movs	r1, #12
 8006f34:	4618      	mov	r0, r3
 8006f36:	f002 fa02 	bl	800933e <SDMMC_GetResponse>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d00d      	beq.n	8006f64 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f107 020e 	add.w	r2, r7, #14
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f002 fc46 	bl	80097e4 <SDMMC_CmdSetRelAdd>
 8006f58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <SD_InitCard+0xac>
    {
      return errorstate;
 8006f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f62:	e060      	b.n	8007026 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d036      	beq.n	8006fda <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f6c:	89fb      	ldrh	r3, [r7, #14]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7c:	041b      	lsls	r3, r3, #16
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4610      	mov	r0, r2
 8006f82:	f002 fc0f 	bl	80097a4 <SDMMC_CmdSendCSD>
 8006f86:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <SD_InitCard+0xda>
    {
      return errorstate;
 8006f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f90:	e049      	b.n	8007026 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f002 f9d0 	bl	800933e <SDMMC_GetResponse>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2104      	movs	r1, #4
 8006faa:	4618      	mov	r0, r3
 8006fac:	f002 f9c7 	bl	800933e <SDMMC_GetResponse>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2108      	movs	r1, #8
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 f9be 	bl	800933e <SDMMC_GetResponse>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	210c      	movs	r1, #12
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f002 f9b5 	bl	800933e <SDMMC_GetResponse>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2104      	movs	r1, #4
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f002 f9ac 	bl	800933e <SDMMC_GetResponse>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	0d1a      	lsrs	r2, r3, #20
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006fee:	f107 0310 	add.w	r3, r7, #16
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fba9 	bl	800674c <HAL_SD_GetCardCSD>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007004:	e00f      	b.n	8007026 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	041b      	lsls	r3, r3, #16
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f002 fabe 	bl	8009594 <SDMMC_CmdSelDesel>
 8007018:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800701a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <SD_InitCard+0x16c>
  {
    return errorstate;
 8007020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007022:	e000      	b.n	8007026 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3740      	adds	r7, #64	; 0x40
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	f002 fac6 	bl	80095da <SDMMC_CmdGoIdleState>
 800704e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	e06e      	b.n	8007138 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f002 fad9 	bl	8009616 <SDMMC_CmdOperCond>
 8007064:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f002 faaf 	bl	80095da <SDMMC_CmdGoIdleState>
 800707c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	e057      	b.n	8007138 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007092:	2b01      	cmp	r3, #1
 8007094:	d137      	bne.n	8007106 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2100      	movs	r1, #0
 800709c:	4618      	mov	r0, r3
 800709e:	f002 fada 	bl	8009656 <SDMMC_CmdAppCommand>
 80070a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d02d      	beq.n	8007106 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070ae:	e043      	b.n	8007138 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2100      	movs	r1, #0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f002 facd 	bl	8009656 <SDMMC_CmdAppCommand>
 80070bc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	e037      	b.n	8007138 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	491c      	ldr	r1, [pc, #112]	; (8007140 <SD_PowerON+0x110>)
 80070ce:	4618      	mov	r0, r3
 80070d0:	f002 fae4 	bl	800969c <SDMMC_CmdAppOperCommand>
 80070d4:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070e0:	e02a      	b.n	8007138 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f002 f928 	bl	800933e <SDMMC_GetResponse>
 80070ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	0fdb      	lsrs	r3, r3, #31
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <SD_PowerON+0xcc>
 80070f8:	2301      	movs	r3, #1
 80070fa:	e000      	b.n	80070fe <SD_PowerON+0xce>
 80070fc:	2300      	movs	r3, #0
 80070fe:	613b      	str	r3, [r7, #16]

    count++;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	3301      	adds	r3, #1
 8007104:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800710c:	4293      	cmp	r3, r2
 800710e:	d802      	bhi.n	8007116 <SD_PowerON+0xe6>
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0cc      	beq.n	80070b0 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800711c:	4293      	cmp	r3, r2
 800711e:	d902      	bls.n	8007126 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007124:	e008      	b.n	8007138 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	c1100000 	.word	0xc1100000

08007144 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08c      	sub	sp, #48	; 0x30
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800714e:	f7fb fa29 	bl	80025a4 <HAL_GetTick>
 8007152:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f002 f8ed 	bl	800933e <SDMMC_GetResponse>
 8007164:	4603      	mov	r3, r0
 8007166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800716e:	d102      	bne.n	8007176 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007170:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007174:	e0b0      	b.n	80072d8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2140      	movs	r1, #64	; 0x40
 800717c:	4618      	mov	r0, r3
 800717e:	f002 f91d 	bl	80093bc <SDMMC_CmdBlockLength>
 8007182:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	e0a0      	b.n	80072d8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f002 fa57 	bl	8009656 <SDMMC_CmdAppCommand>
 80071a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	e08d      	b.n	80072d8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071c0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80071c2:	2340      	movs	r3, #64	; 0x40
 80071c4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80071c6:	2360      	movs	r3, #96	; 0x60
 80071c8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80071ca:	2302      	movs	r3, #2
 80071cc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80071d2:	2301      	movs	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f107 0208 	add.w	r2, r7, #8
 80071de:	4611      	mov	r1, r2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f002 f8bf 	bl	8009364 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f002 fb3f 	bl	800986e <SDMMC_CmdStatusRegister>
 80071f0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d02b      	beq.n	8007250 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	e069      	b.n	80072d8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d013      	beq.n	800723a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007212:	2300      	movs	r3, #0
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007216:	e00d      	b.n	8007234 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f002 f819 	bl	8009254 <SDMMC_ReadFIFO>
 8007222:	4602      	mov	r2, r0
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	601a      	str	r2, [r3, #0]
        pData++;
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	3304      	adds	r3, #4
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	3301      	adds	r3, #1
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	2b07      	cmp	r3, #7
 8007238:	d9ee      	bls.n	8007218 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800723a:	f7fb f9b3 	bl	80025a4 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007248:	d102      	bne.n	8007250 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800724a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800724e:	e043      	b.n	80072d8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007256:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0d2      	beq.n	8007204 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800726c:	2308      	movs	r3, #8
 800726e:	e033      	b.n	80072d8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	e02a      	b.n	80072d8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007288:	f003 0320 	and.w	r3, r3, #32
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007290:	2320      	movs	r3, #32
 8007292:	e021      	b.n	80072d8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f001 ffdb 	bl	8009254 <SDMMC_ReadFIFO>
 800729e:	4602      	mov	r2, r0
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	601a      	str	r2, [r3, #0]
    pData++;
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	3304      	adds	r3, #4
 80072a8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80072aa:	f7fb f97b 	bl	80025a4 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072b8:	d102      	bne.n	80072c0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80072ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072be:	e00b      	b.n	80072d8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e2      	bne.n	8007294 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a03      	ldr	r2, [pc, #12]	; (80072e0 <SD_SendSDStatus+0x19c>)
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3730      	adds	r7, #48	; 0x30
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	18000f3a 	.word	0x18000f3a

080072e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072f8:	e018      	b.n	800732c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007302:	041b      	lsls	r3, r3, #16
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f002 fa8e 	bl	8009828 <SDMMC_CmdSendStatus>
 800730c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	e009      	b.n	800732c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f002 f80d 	bl	800933e <SDMMC_GetResponse>
 8007324:	4602      	mov	r2, r0
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2100      	movs	r1, #0
 800734a:	4618      	mov	r0, r3
 800734c:	f001 fff7 	bl	800933e <SDMMC_GetResponse>
 8007350:	4603      	mov	r3, r0
 8007352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800735a:	d102      	bne.n	8007362 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800735c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007360:	e02f      	b.n	80073c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007362:	f107 030c 	add.w	r3, r7, #12
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f879 	bl	8007460 <SD_FindSCR>
 800736e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	e023      	b.n	80073c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01c      	beq.n	80073be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f002 f960 	bl	8009656 <SDMMC_CmdAppCommand>
 8007396:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	e00f      	b.n	80073c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2102      	movs	r1, #2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f002 f997 	bl	80096dc <SDMMC_CmdBusWidth>
 80073ae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	e003      	b.n	80073c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e001      	b.n	80073c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	2300      	movs	r3, #0
 80073d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 ffac 	bl	800933e <SDMMC_GetResponse>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073f0:	d102      	bne.n	80073f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073f6:	e02f      	b.n	8007458 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073f8:	f107 030c 	add.w	r3, r7, #12
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f82e 	bl	8007460 <SD_FindSCR>
 8007404:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	e023      	b.n	8007458 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01c      	beq.n	8007454 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	041b      	lsls	r3, r3, #16
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f002 f915 	bl	8009656 <SDMMC_CmdAppCommand>
 800742c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	e00f      	b.n	8007458 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f002 f94c 	bl	80096dc <SDMMC_CmdBusWidth>
 8007444:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	e003      	b.n	8007458 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007450:	2300      	movs	r3, #0
 8007452:	e001      	b.n	8007458 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007454:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	; 0x38
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800746a:	f7fb f89b 	bl	80025a4 <HAL_GetTick>
 800746e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007474:	2300      	movs	r3, #0
 8007476:	60bb      	str	r3, [r7, #8]
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2108      	movs	r1, #8
 8007486:	4618      	mov	r0, r3
 8007488:	f001 ff98 	bl	80093bc <SDMMC_CmdBlockLength>
 800748c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	e0ad      	b.n	80075f4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f002 f8d6 	bl	8009656 <SDMMC_CmdAppCommand>
 80074aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	e09e      	b.n	80075f4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80074b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80074bc:	2308      	movs	r3, #8
 80074be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80074c0:	2330      	movs	r3, #48	; 0x30
 80074c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80074c4:	2302      	movs	r3, #2
 80074c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f107 0210 	add.w	r2, r7, #16
 80074d8:	4611      	mov	r1, r2
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 ff42 	bl	8009364 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f002 f91c 	bl	8009722 <SDMMC_CmdSendSCR>
 80074ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d027      	beq.n	8007542 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	e07e      	b.n	80075f4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d113      	bne.n	800752c <SD_FindSCR+0xcc>
 8007504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007506:	2b00      	cmp	r3, #0
 8007508:	d110      	bne.n	800752c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f001 fea0 	bl	8009254 <SDMMC_ReadFIFO>
 8007514:	4603      	mov	r3, r0
 8007516:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4618      	mov	r0, r3
 800751e:	f001 fe99 	bl	8009254 <SDMMC_ReadFIFO>
 8007522:	4603      	mov	r3, r0
 8007524:	60fb      	str	r3, [r7, #12]
      index++;
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	3301      	adds	r3, #1
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800752c:	f7fb f83a 	bl	80025a4 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800753a:	d102      	bne.n	8007542 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800753c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007540:	e058      	b.n	80075f4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007548:	f240 532a 	movw	r3, #1322	; 0x52a
 800754c:	4013      	ands	r3, r2
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0d1      	beq.n	80074f6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2208      	movs	r2, #8
 8007566:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007568:	2308      	movs	r3, #8
 800756a:	e043      	b.n	80075f4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2202      	movs	r2, #2
 8007580:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007582:	2302      	movs	r3, #2
 8007584:	e036      	b.n	80075f4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2220      	movs	r2, #32
 800759a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800759c:	2320      	movs	r3, #32
 800759e:	e029      	b.n	80075f4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a15      	ldr	r2, [pc, #84]	; (80075fc <SD_FindSCR+0x19c>)
 80075a6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	061a      	lsls	r2, r3, #24
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	021b      	lsls	r3, r3, #8
 80075b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	0a1b      	lsrs	r3, r3, #8
 80075ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80075be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	0e1b      	lsrs	r3, r3, #24
 80075c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80075c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c8:	601a      	str	r2, [r3, #0]
    scr++;
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	3304      	adds	r3, #4
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	061a      	lsls	r2, r3, #24
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	0a1b      	lsrs	r3, r3, #8
 80075e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	0e1b      	lsrs	r3, r3, #24
 80075ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3738      	adds	r7, #56	; 0x38
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	18000f3a 	.word	0x18000f3a

08007600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e049      	b.n	80076a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fa fcb0 	bl	8001f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f000 fb4a 	bl	8007cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d001      	beq.n	80076c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e047      	b.n	8007758 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <HAL_TIM_Base_Start+0xb4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d01d      	beq.n	8007716 <HAL_TIM_Base_Start+0x66>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d018      	beq.n	8007716 <HAL_TIM_Base_Start+0x66>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1f      	ldr	r2, [pc, #124]	; (8007768 <HAL_TIM_Base_Start+0xb8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d013      	beq.n	8007716 <HAL_TIM_Base_Start+0x66>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1e      	ldr	r2, [pc, #120]	; (800776c <HAL_TIM_Base_Start+0xbc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00e      	beq.n	8007716 <HAL_TIM_Base_Start+0x66>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1c      	ldr	r2, [pc, #112]	; (8007770 <HAL_TIM_Base_Start+0xc0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d009      	beq.n	8007716 <HAL_TIM_Base_Start+0x66>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1b      	ldr	r2, [pc, #108]	; (8007774 <HAL_TIM_Base_Start+0xc4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d004      	beq.n	8007716 <HAL_TIM_Base_Start+0x66>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a19      	ldr	r2, [pc, #100]	; (8007778 <HAL_TIM_Base_Start+0xc8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d115      	bne.n	8007742 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	4b17      	ldr	r3, [pc, #92]	; (800777c <HAL_TIM_Base_Start+0xcc>)
 800771e:	4013      	ands	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b06      	cmp	r3, #6
 8007726:	d015      	beq.n	8007754 <HAL_TIM_Base_Start+0xa4>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772e:	d011      	beq.n	8007754 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007740:	e008      	b.n	8007754 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0201 	orr.w	r2, r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e000      	b.n	8007756 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007754:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	40010000 	.word	0x40010000
 8007768:	40000400 	.word	0x40000400
 800776c:	40000800 	.word	0x40000800
 8007770:	40000c00 	.word	0x40000c00
 8007774:	40010400 	.word	0x40010400
 8007778:	40001800 	.word	0x40001800
 800777c:	00010007 	.word	0x00010007

08007780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d001      	beq.n	8007798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e04f      	b.n	8007838 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a23      	ldr	r2, [pc, #140]	; (8007844 <HAL_TIM_Base_Start_IT+0xc4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d01d      	beq.n	80077f6 <HAL_TIM_Base_Start_IT+0x76>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d018      	beq.n	80077f6 <HAL_TIM_Base_Start_IT+0x76>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a1f      	ldr	r2, [pc, #124]	; (8007848 <HAL_TIM_Base_Start_IT+0xc8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d013      	beq.n	80077f6 <HAL_TIM_Base_Start_IT+0x76>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1e      	ldr	r2, [pc, #120]	; (800784c <HAL_TIM_Base_Start_IT+0xcc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00e      	beq.n	80077f6 <HAL_TIM_Base_Start_IT+0x76>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1c      	ldr	r2, [pc, #112]	; (8007850 <HAL_TIM_Base_Start_IT+0xd0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d009      	beq.n	80077f6 <HAL_TIM_Base_Start_IT+0x76>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a1b      	ldr	r2, [pc, #108]	; (8007854 <HAL_TIM_Base_Start_IT+0xd4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d004      	beq.n	80077f6 <HAL_TIM_Base_Start_IT+0x76>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a19      	ldr	r2, [pc, #100]	; (8007858 <HAL_TIM_Base_Start_IT+0xd8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d115      	bne.n	8007822 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	4b17      	ldr	r3, [pc, #92]	; (800785c <HAL_TIM_Base_Start_IT+0xdc>)
 80077fe:	4013      	ands	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b06      	cmp	r3, #6
 8007806:	d015      	beq.n	8007834 <HAL_TIM_Base_Start_IT+0xb4>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780e:	d011      	beq.n	8007834 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007820:	e008      	b.n	8007834 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	e000      	b.n	8007836 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007834:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40010000 	.word	0x40010000
 8007848:	40000400 	.word	0x40000400
 800784c:	40000800 	.word	0x40000800
 8007850:	40000c00 	.word	0x40000c00
 8007854:	40010400 	.word	0x40010400
 8007858:	40001800 	.word	0x40001800
 800785c:	00010007 	.word	0x00010007

08007860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d122      	bne.n	80078bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b02      	cmp	r3, #2
 8007882:	d11b      	bne.n	80078bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0202 	mvn.w	r2, #2
 800788c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9fa 	bl	8007c9c <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f9ec 	bl	8007c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f9fd 	bl	8007cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d122      	bne.n	8007910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d11b      	bne.n	8007910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0204 	mvn.w	r2, #4
 80078e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9d0 	bl	8007c9c <HAL_TIM_IC_CaptureCallback>
 80078fc:	e005      	b.n	800790a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f9c2 	bl	8007c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f9d3 	bl	8007cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b08      	cmp	r3, #8
 800791c:	d122      	bne.n	8007964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b08      	cmp	r3, #8
 800792a:	d11b      	bne.n	8007964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0208 	mvn.w	r2, #8
 8007934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f9a6 	bl	8007c9c <HAL_TIM_IC_CaptureCallback>
 8007950:	e005      	b.n	800795e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f998 	bl	8007c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f9a9 	bl	8007cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b10      	cmp	r3, #16
 8007970:	d122      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b10      	cmp	r3, #16
 800797e:	d11b      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0210 	mvn.w	r2, #16
 8007988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2208      	movs	r2, #8
 800798e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f97c 	bl	8007c9c <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f96e 	bl	8007c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f97f 	bl	8007cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d10e      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0201 	mvn.w	r2, #1
 80079dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fa fbc2 	bl	8002168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d10e      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fc:	2b80      	cmp	r3, #128	; 0x80
 80079fe:	d107      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fb2e 	bl	800806c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	d10e      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d107      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fb21 	bl	8008080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d10e      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d107      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f92d 	bl	8007cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d10e      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d107      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f06f 0220 	mvn.w	r2, #32
 8007a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fae1 	bl	8008058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_TIM_ConfigClockSource+0x18>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e0db      	b.n	8007c70 <HAL_TIM_ConfigClockSource+0x1d0>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4b69      	ldr	r3, [pc, #420]	; (8007c78 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ade:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a63      	ldr	r2, [pc, #396]	; (8007c7c <HAL_TIM_ConfigClockSource+0x1dc>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	f000 80a9 	beq.w	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
 8007af4:	4a61      	ldr	r2, [pc, #388]	; (8007c7c <HAL_TIM_ConfigClockSource+0x1dc>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	f200 80ae 	bhi.w	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007afc:	4a60      	ldr	r2, [pc, #384]	; (8007c80 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	f000 80a1 	beq.w	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b04:	4a5e      	ldr	r2, [pc, #376]	; (8007c80 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	f200 80a6 	bhi.w	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b0c:	4a5d      	ldr	r2, [pc, #372]	; (8007c84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	f000 8099 	beq.w	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b14:	4a5b      	ldr	r2, [pc, #364]	; (8007c84 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	f200 809e 	bhi.w	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b20:	f000 8091 	beq.w	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b28:	f200 8096 	bhi.w	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b30:	f000 8089 	beq.w	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b38:	f200 808e 	bhi.w	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b40:	d03e      	beq.n	8007bc0 <HAL_TIM_ConfigClockSource+0x120>
 8007b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b46:	f200 8087 	bhi.w	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4e:	f000 8085 	beq.w	8007c5c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b56:	d87f      	bhi.n	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b58:	2b70      	cmp	r3, #112	; 0x70
 8007b5a:	d01a      	beq.n	8007b92 <HAL_TIM_ConfigClockSource+0xf2>
 8007b5c:	2b70      	cmp	r3, #112	; 0x70
 8007b5e:	d87b      	bhi.n	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b60:	2b60      	cmp	r3, #96	; 0x60
 8007b62:	d050      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x166>
 8007b64:	2b60      	cmp	r3, #96	; 0x60
 8007b66:	d877      	bhi.n	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b68:	2b50      	cmp	r3, #80	; 0x50
 8007b6a:	d03c      	beq.n	8007be6 <HAL_TIM_ConfigClockSource+0x146>
 8007b6c:	2b50      	cmp	r3, #80	; 0x50
 8007b6e:	d873      	bhi.n	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b70:	2b40      	cmp	r3, #64	; 0x40
 8007b72:	d058      	beq.n	8007c26 <HAL_TIM_ConfigClockSource+0x186>
 8007b74:	2b40      	cmp	r3, #64	; 0x40
 8007b76:	d86f      	bhi.n	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b78:	2b30      	cmp	r3, #48	; 0x30
 8007b7a:	d064      	beq.n	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b7c:	2b30      	cmp	r3, #48	; 0x30
 8007b7e:	d86b      	bhi.n	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b80:	2b20      	cmp	r3, #32
 8007b82:	d060      	beq.n	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d867      	bhi.n	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d05c      	beq.n	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d05a      	beq.n	8007c46 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007b90:	e062      	b.n	8007c58 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	6899      	ldr	r1, [r3, #8]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f000 f9b1 	bl	8007f08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	609a      	str	r2, [r3, #8]
      break;
 8007bbe:	e04e      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	6899      	ldr	r1, [r3, #8]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f000 f99a 	bl	8007f08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007be2:	609a      	str	r2, [r3, #8]
      break;
 8007be4:	e03b      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	6859      	ldr	r1, [r3, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f000 f90a 	bl	8007e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2150      	movs	r1, #80	; 0x50
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f964 	bl	8007ecc <TIM_ITRx_SetConfig>
      break;
 8007c04:	e02b      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	6859      	ldr	r1, [r3, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	461a      	mov	r2, r3
 8007c14:	f000 f929 	bl	8007e6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2160      	movs	r1, #96	; 0x60
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 f954 	bl	8007ecc <TIM_ITRx_SetConfig>
      break;
 8007c24:	e01b      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6859      	ldr	r1, [r3, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	461a      	mov	r2, r3
 8007c34:	f000 f8ea 	bl	8007e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2140      	movs	r1, #64	; 0x40
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f944 	bl	8007ecc <TIM_ITRx_SetConfig>
      break;
 8007c44:	e00b      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f000 f93b 	bl	8007ecc <TIM_ITRx_SetConfig>
        break;
 8007c56:	e002      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007c58:	bf00      	nop
 8007c5a:	e000      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007c5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	ffceff88 	.word	0xffceff88
 8007c7c:	00100040 	.word	0x00100040
 8007c80:	00100030 	.word	0x00100030
 8007c84:	00100020 	.word	0x00100020

08007c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a40      	ldr	r2, [pc, #256]	; (8007dec <TIM_Base_SetConfig+0x114>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d013      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf6:	d00f      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a3d      	ldr	r2, [pc, #244]	; (8007df0 <TIM_Base_SetConfig+0x118>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a3c      	ldr	r2, [pc, #240]	; (8007df4 <TIM_Base_SetConfig+0x11c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a3b      	ldr	r2, [pc, #236]	; (8007df8 <TIM_Base_SetConfig+0x120>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a3a      	ldr	r2, [pc, #232]	; (8007dfc <TIM_Base_SetConfig+0x124>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d108      	bne.n	8007d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a2f      	ldr	r2, [pc, #188]	; (8007dec <TIM_Base_SetConfig+0x114>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d01f      	beq.n	8007d72 <TIM_Base_SetConfig+0x9a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d38:	d01b      	beq.n	8007d72 <TIM_Base_SetConfig+0x9a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a2c      	ldr	r2, [pc, #176]	; (8007df0 <TIM_Base_SetConfig+0x118>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d017      	beq.n	8007d72 <TIM_Base_SetConfig+0x9a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a2b      	ldr	r2, [pc, #172]	; (8007df4 <TIM_Base_SetConfig+0x11c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <TIM_Base_SetConfig+0x9a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a2a      	ldr	r2, [pc, #168]	; (8007df8 <TIM_Base_SetConfig+0x120>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00f      	beq.n	8007d72 <TIM_Base_SetConfig+0x9a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a29      	ldr	r2, [pc, #164]	; (8007dfc <TIM_Base_SetConfig+0x124>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00b      	beq.n	8007d72 <TIM_Base_SetConfig+0x9a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a28      	ldr	r2, [pc, #160]	; (8007e00 <TIM_Base_SetConfig+0x128>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d007      	beq.n	8007d72 <TIM_Base_SetConfig+0x9a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a27      	ldr	r2, [pc, #156]	; (8007e04 <TIM_Base_SetConfig+0x12c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d003      	beq.n	8007d72 <TIM_Base_SetConfig+0x9a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a26      	ldr	r2, [pc, #152]	; (8007e08 <TIM_Base_SetConfig+0x130>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d108      	bne.n	8007d84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a10      	ldr	r2, [pc, #64]	; (8007dec <TIM_Base_SetConfig+0x114>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00f      	beq.n	8007dd0 <TIM_Base_SetConfig+0xf8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a12      	ldr	r2, [pc, #72]	; (8007dfc <TIM_Base_SetConfig+0x124>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00b      	beq.n	8007dd0 <TIM_Base_SetConfig+0xf8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a11      	ldr	r2, [pc, #68]	; (8007e00 <TIM_Base_SetConfig+0x128>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d007      	beq.n	8007dd0 <TIM_Base_SetConfig+0xf8>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a10      	ldr	r2, [pc, #64]	; (8007e04 <TIM_Base_SetConfig+0x12c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_Base_SetConfig+0xf8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a0f      	ldr	r2, [pc, #60]	; (8007e08 <TIM_Base_SetConfig+0x130>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d103      	bne.n	8007dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	615a      	str	r2, [r3, #20]
}
 8007dde:	bf00      	nop
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40010400 	.word	0x40010400
 8007e00:	40014000 	.word	0x40014000
 8007e04:	40014400 	.word	0x40014400
 8007e08:	40014800 	.word	0x40014800

08007e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0201 	bic.w	r2, r3, #1
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f023 030a 	bic.w	r3, r3, #10
 8007e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b087      	sub	sp, #28
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	f023 0210 	bic.w	r2, r3, #16
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	031b      	lsls	r3, r3, #12
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	621a      	str	r2, [r3, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <TIM_ITRx_SetConfig+0x38>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	f043 0307 	orr.w	r3, r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	609a      	str	r2, [r3, #8]
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	ffcfff8f 	.word	0xffcfff8f

08007f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	021a      	lsls	r2, r3, #8
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	609a      	str	r2, [r3, #8]
}
 8007f3c:	bf00      	nop
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d101      	bne.n	8007f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f5c:	2302      	movs	r3, #2
 8007f5e:	e068      	b.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a2e      	ldr	r2, [pc, #184]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a2d      	ldr	r2, [pc, #180]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d108      	bne.n	8007fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1e      	ldr	r2, [pc, #120]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01d      	beq.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd2:	d018      	beq.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1b      	ldr	r2, [pc, #108]	; (8008048 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d013      	beq.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a1a      	ldr	r2, [pc, #104]	; (800804c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00e      	beq.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a18      	ldr	r2, [pc, #96]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d009      	beq.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a13      	ldr	r2, [pc, #76]	; (8008044 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d004      	beq.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a14      	ldr	r2, [pc, #80]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d10c      	bne.n	8008020 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800800c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	4313      	orrs	r3, r2
 8008016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	40010000 	.word	0x40010000
 8008044:	40010400 	.word	0x40010400
 8008048:	40000400 	.word	0x40000400
 800804c:	40000800 	.word	0x40000800
 8008050:	40000c00 	.word	0x40000c00
 8008054:	40001800 	.word	0x40001800

08008058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e042      	b.n	800812c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7f9 ffbb 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2224      	movs	r2, #36	; 0x24
 80080c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0201 	bic.w	r2, r2, #1
 80080d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f8c2 	bl	8008260 <UART_SetConfig>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e022      	b.n	800812c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fe16 	bl	8008d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fe9d 	bl	8008e64 <UART_CheckIdleState>
 800812a:	4603      	mov	r3, r0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800814a:	2b20      	cmp	r3, #32
 800814c:	f040 8083 	bne.w	8008256 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HAL_UART_Transmit+0x28>
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e07b      	b.n	8008258 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_UART_Transmit+0x3a>
 800816a:	2302      	movs	r3, #2
 800816c:	e074      	b.n	8008258 <HAL_UART_Transmit+0x124>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2221      	movs	r2, #33	; 0x21
 8008182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008186:	f7fa fa0d 	bl	80025a4 <HAL_GetTick>
 800818a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a4:	d108      	bne.n	80081b8 <HAL_UART_Transmit+0x84>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	61bb      	str	r3, [r7, #24]
 80081b6:	e003      	b.n	80081c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80081c8:	e02c      	b.n	8008224 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2200      	movs	r2, #0
 80081d2:	2180      	movs	r1, #128	; 0x80
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 fe90 	bl	8008efa <UART_WaitOnFlagUntilTimeout>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e039      	b.n	8008258 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	3302      	adds	r3, #2
 80081fe:	61bb      	str	r3, [r7, #24]
 8008200:	e007      	b.n	8008212 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	781a      	ldrb	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	3301      	adds	r3, #1
 8008210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008218:	b29b      	uxth	r3, r3
 800821a:	3b01      	subs	r3, #1
 800821c:	b29a      	uxth	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1cc      	bne.n	80081ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2200      	movs	r2, #0
 8008238:	2140      	movs	r1, #64	; 0x40
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 fe5d 	bl	8008efa <UART_WaitOnFlagUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e006      	b.n	8008258 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2220      	movs	r2, #32
 800824e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	e000      	b.n	8008258 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008256:	2302      	movs	r3, #2
  }
}
 8008258:	4618      	mov	r0, r3
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008260:	b5b0      	push	{r4, r5, r7, lr}
 8008262:	b08e      	sub	sp, #56	; 0x38
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	431a      	orrs	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	4313      	orrs	r3, r2
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	4bbf      	ldr	r3, [pc, #764]	; (800858c <UART_SetConfig+0x32c>)
 800828e:	4013      	ands	r3, r2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008296:	430b      	orrs	r3, r1
 8008298:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4ab5      	ldr	r2, [pc, #724]	; (8008590 <UART_SetConfig+0x330>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082c6:	4313      	orrs	r3, r2
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	4bb0      	ldr	r3, [pc, #704]	; (8008594 <UART_SetConfig+0x334>)
 80082d2:	4013      	ands	r3, r2
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6812      	ldr	r2, [r2, #0]
 80082d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082da:	430b      	orrs	r3, r1
 80082dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	f023 010f 	bic.w	r1, r3, #15
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4aa7      	ldr	r2, [pc, #668]	; (8008598 <UART_SetConfig+0x338>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d176      	bne.n	80083ec <UART_SetConfig+0x18c>
 80082fe:	4ba7      	ldr	r3, [pc, #668]	; (800859c <UART_SetConfig+0x33c>)
 8008300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008306:	2b28      	cmp	r3, #40	; 0x28
 8008308:	d86c      	bhi.n	80083e4 <UART_SetConfig+0x184>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <UART_SetConfig+0xb0>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	080083b5 	.word	0x080083b5
 8008314:	080083e5 	.word	0x080083e5
 8008318:	080083e5 	.word	0x080083e5
 800831c:	080083e5 	.word	0x080083e5
 8008320:	080083e5 	.word	0x080083e5
 8008324:	080083e5 	.word	0x080083e5
 8008328:	080083e5 	.word	0x080083e5
 800832c:	080083e5 	.word	0x080083e5
 8008330:	080083bd 	.word	0x080083bd
 8008334:	080083e5 	.word	0x080083e5
 8008338:	080083e5 	.word	0x080083e5
 800833c:	080083e5 	.word	0x080083e5
 8008340:	080083e5 	.word	0x080083e5
 8008344:	080083e5 	.word	0x080083e5
 8008348:	080083e5 	.word	0x080083e5
 800834c:	080083e5 	.word	0x080083e5
 8008350:	080083c5 	.word	0x080083c5
 8008354:	080083e5 	.word	0x080083e5
 8008358:	080083e5 	.word	0x080083e5
 800835c:	080083e5 	.word	0x080083e5
 8008360:	080083e5 	.word	0x080083e5
 8008364:	080083e5 	.word	0x080083e5
 8008368:	080083e5 	.word	0x080083e5
 800836c:	080083e5 	.word	0x080083e5
 8008370:	080083cd 	.word	0x080083cd
 8008374:	080083e5 	.word	0x080083e5
 8008378:	080083e5 	.word	0x080083e5
 800837c:	080083e5 	.word	0x080083e5
 8008380:	080083e5 	.word	0x080083e5
 8008384:	080083e5 	.word	0x080083e5
 8008388:	080083e5 	.word	0x080083e5
 800838c:	080083e5 	.word	0x080083e5
 8008390:	080083d5 	.word	0x080083d5
 8008394:	080083e5 	.word	0x080083e5
 8008398:	080083e5 	.word	0x080083e5
 800839c:	080083e5 	.word	0x080083e5
 80083a0:	080083e5 	.word	0x080083e5
 80083a4:	080083e5 	.word	0x080083e5
 80083a8:	080083e5 	.word	0x080083e5
 80083ac:	080083e5 	.word	0x080083e5
 80083b0:	080083dd 	.word	0x080083dd
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ba:	e222      	b.n	8008802 <UART_SetConfig+0x5a2>
 80083bc:	2304      	movs	r3, #4
 80083be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083c2:	e21e      	b.n	8008802 <UART_SetConfig+0x5a2>
 80083c4:	2308      	movs	r3, #8
 80083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ca:	e21a      	b.n	8008802 <UART_SetConfig+0x5a2>
 80083cc:	2310      	movs	r3, #16
 80083ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083d2:	e216      	b.n	8008802 <UART_SetConfig+0x5a2>
 80083d4:	2320      	movs	r3, #32
 80083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083da:	e212      	b.n	8008802 <UART_SetConfig+0x5a2>
 80083dc:	2340      	movs	r3, #64	; 0x40
 80083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e2:	e20e      	b.n	8008802 <UART_SetConfig+0x5a2>
 80083e4:	2380      	movs	r3, #128	; 0x80
 80083e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ea:	e20a      	b.n	8008802 <UART_SetConfig+0x5a2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a6b      	ldr	r2, [pc, #428]	; (80085a0 <UART_SetConfig+0x340>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d130      	bne.n	8008458 <UART_SetConfig+0x1f8>
 80083f6:	4b69      	ldr	r3, [pc, #420]	; (800859c <UART_SetConfig+0x33c>)
 80083f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fa:	f003 0307 	and.w	r3, r3, #7
 80083fe:	2b05      	cmp	r3, #5
 8008400:	d826      	bhi.n	8008450 <UART_SetConfig+0x1f0>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <UART_SetConfig+0x1a8>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008421 	.word	0x08008421
 800840c:	08008429 	.word	0x08008429
 8008410:	08008431 	.word	0x08008431
 8008414:	08008439 	.word	0x08008439
 8008418:	08008441 	.word	0x08008441
 800841c:	08008449 	.word	0x08008449
 8008420:	2300      	movs	r3, #0
 8008422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008426:	e1ec      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008428:	2304      	movs	r3, #4
 800842a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842e:	e1e8      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008430:	2308      	movs	r3, #8
 8008432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008436:	e1e4      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008438:	2310      	movs	r3, #16
 800843a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800843e:	e1e0      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008440:	2320      	movs	r3, #32
 8008442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008446:	e1dc      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008448:	2340      	movs	r3, #64	; 0x40
 800844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844e:	e1d8      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008450:	2380      	movs	r3, #128	; 0x80
 8008452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008456:	e1d4      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a51      	ldr	r2, [pc, #324]	; (80085a4 <UART_SetConfig+0x344>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d130      	bne.n	80084c4 <UART_SetConfig+0x264>
 8008462:	4b4e      	ldr	r3, [pc, #312]	; (800859c <UART_SetConfig+0x33c>)
 8008464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	2b05      	cmp	r3, #5
 800846c:	d826      	bhi.n	80084bc <UART_SetConfig+0x25c>
 800846e:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <UART_SetConfig+0x214>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	0800848d 	.word	0x0800848d
 8008478:	08008495 	.word	0x08008495
 800847c:	0800849d 	.word	0x0800849d
 8008480:	080084a5 	.word	0x080084a5
 8008484:	080084ad 	.word	0x080084ad
 8008488:	080084b5 	.word	0x080084b5
 800848c:	2300      	movs	r3, #0
 800848e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008492:	e1b6      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008494:	2304      	movs	r3, #4
 8008496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800849a:	e1b2      	b.n	8008802 <UART_SetConfig+0x5a2>
 800849c:	2308      	movs	r3, #8
 800849e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084a2:	e1ae      	b.n	8008802 <UART_SetConfig+0x5a2>
 80084a4:	2310      	movs	r3, #16
 80084a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084aa:	e1aa      	b.n	8008802 <UART_SetConfig+0x5a2>
 80084ac:	2320      	movs	r3, #32
 80084ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084b2:	e1a6      	b.n	8008802 <UART_SetConfig+0x5a2>
 80084b4:	2340      	movs	r3, #64	; 0x40
 80084b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ba:	e1a2      	b.n	8008802 <UART_SetConfig+0x5a2>
 80084bc:	2380      	movs	r3, #128	; 0x80
 80084be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084c2:	e19e      	b.n	8008802 <UART_SetConfig+0x5a2>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a37      	ldr	r2, [pc, #220]	; (80085a8 <UART_SetConfig+0x348>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d130      	bne.n	8008530 <UART_SetConfig+0x2d0>
 80084ce:	4b33      	ldr	r3, [pc, #204]	; (800859c <UART_SetConfig+0x33c>)
 80084d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b05      	cmp	r3, #5
 80084d8:	d826      	bhi.n	8008528 <UART_SetConfig+0x2c8>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <UART_SetConfig+0x280>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	080084f9 	.word	0x080084f9
 80084e4:	08008501 	.word	0x08008501
 80084e8:	08008509 	.word	0x08008509
 80084ec:	08008511 	.word	0x08008511
 80084f0:	08008519 	.word	0x08008519
 80084f4:	08008521 	.word	0x08008521
 80084f8:	2300      	movs	r3, #0
 80084fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084fe:	e180      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008500:	2304      	movs	r3, #4
 8008502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008506:	e17c      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008508:	2308      	movs	r3, #8
 800850a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800850e:	e178      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008510:	2310      	movs	r3, #16
 8008512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008516:	e174      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008518:	2320      	movs	r3, #32
 800851a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800851e:	e170      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008520:	2340      	movs	r3, #64	; 0x40
 8008522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008526:	e16c      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008528:	2380      	movs	r3, #128	; 0x80
 800852a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800852e:	e168      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a1d      	ldr	r2, [pc, #116]	; (80085ac <UART_SetConfig+0x34c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d142      	bne.n	80085c0 <UART_SetConfig+0x360>
 800853a:	4b18      	ldr	r3, [pc, #96]	; (800859c <UART_SetConfig+0x33c>)
 800853c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	2b05      	cmp	r3, #5
 8008544:	d838      	bhi.n	80085b8 <UART_SetConfig+0x358>
 8008546:	a201      	add	r2, pc, #4	; (adr r2, 800854c <UART_SetConfig+0x2ec>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	08008565 	.word	0x08008565
 8008550:	0800856d 	.word	0x0800856d
 8008554:	08008575 	.word	0x08008575
 8008558:	0800857d 	.word	0x0800857d
 800855c:	08008585 	.word	0x08008585
 8008560:	080085b1 	.word	0x080085b1
 8008564:	2300      	movs	r3, #0
 8008566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856a:	e14a      	b.n	8008802 <UART_SetConfig+0x5a2>
 800856c:	2304      	movs	r3, #4
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e146      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008574:	2308      	movs	r3, #8
 8008576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857a:	e142      	b.n	8008802 <UART_SetConfig+0x5a2>
 800857c:	2310      	movs	r3, #16
 800857e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008582:	e13e      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008584:	2320      	movs	r3, #32
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800858a:	e13a      	b.n	8008802 <UART_SetConfig+0x5a2>
 800858c:	cfff69f3 	.word	0xcfff69f3
 8008590:	58000c00 	.word	0x58000c00
 8008594:	11fff4ff 	.word	0x11fff4ff
 8008598:	40011000 	.word	0x40011000
 800859c:	58024400 	.word	0x58024400
 80085a0:	40004400 	.word	0x40004400
 80085a4:	40004800 	.word	0x40004800
 80085a8:	40004c00 	.word	0x40004c00
 80085ac:	40005000 	.word	0x40005000
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085b6:	e124      	b.n	8008802 <UART_SetConfig+0x5a2>
 80085b8:	2380      	movs	r3, #128	; 0x80
 80085ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085be:	e120      	b.n	8008802 <UART_SetConfig+0x5a2>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4acc      	ldr	r2, [pc, #816]	; (80088f8 <UART_SetConfig+0x698>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d176      	bne.n	80086b8 <UART_SetConfig+0x458>
 80085ca:	4bcc      	ldr	r3, [pc, #816]	; (80088fc <UART_SetConfig+0x69c>)
 80085cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085d2:	2b28      	cmp	r3, #40	; 0x28
 80085d4:	d86c      	bhi.n	80086b0 <UART_SetConfig+0x450>
 80085d6:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <UART_SetConfig+0x37c>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	08008681 	.word	0x08008681
 80085e0:	080086b1 	.word	0x080086b1
 80085e4:	080086b1 	.word	0x080086b1
 80085e8:	080086b1 	.word	0x080086b1
 80085ec:	080086b1 	.word	0x080086b1
 80085f0:	080086b1 	.word	0x080086b1
 80085f4:	080086b1 	.word	0x080086b1
 80085f8:	080086b1 	.word	0x080086b1
 80085fc:	08008689 	.word	0x08008689
 8008600:	080086b1 	.word	0x080086b1
 8008604:	080086b1 	.word	0x080086b1
 8008608:	080086b1 	.word	0x080086b1
 800860c:	080086b1 	.word	0x080086b1
 8008610:	080086b1 	.word	0x080086b1
 8008614:	080086b1 	.word	0x080086b1
 8008618:	080086b1 	.word	0x080086b1
 800861c:	08008691 	.word	0x08008691
 8008620:	080086b1 	.word	0x080086b1
 8008624:	080086b1 	.word	0x080086b1
 8008628:	080086b1 	.word	0x080086b1
 800862c:	080086b1 	.word	0x080086b1
 8008630:	080086b1 	.word	0x080086b1
 8008634:	080086b1 	.word	0x080086b1
 8008638:	080086b1 	.word	0x080086b1
 800863c:	08008699 	.word	0x08008699
 8008640:	080086b1 	.word	0x080086b1
 8008644:	080086b1 	.word	0x080086b1
 8008648:	080086b1 	.word	0x080086b1
 800864c:	080086b1 	.word	0x080086b1
 8008650:	080086b1 	.word	0x080086b1
 8008654:	080086b1 	.word	0x080086b1
 8008658:	080086b1 	.word	0x080086b1
 800865c:	080086a1 	.word	0x080086a1
 8008660:	080086b1 	.word	0x080086b1
 8008664:	080086b1 	.word	0x080086b1
 8008668:	080086b1 	.word	0x080086b1
 800866c:	080086b1 	.word	0x080086b1
 8008670:	080086b1 	.word	0x080086b1
 8008674:	080086b1 	.word	0x080086b1
 8008678:	080086b1 	.word	0x080086b1
 800867c:	080086a9 	.word	0x080086a9
 8008680:	2301      	movs	r3, #1
 8008682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008686:	e0bc      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008688:	2304      	movs	r3, #4
 800868a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800868e:	e0b8      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008690:	2308      	movs	r3, #8
 8008692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008696:	e0b4      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008698:	2310      	movs	r3, #16
 800869a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800869e:	e0b0      	b.n	8008802 <UART_SetConfig+0x5a2>
 80086a0:	2320      	movs	r3, #32
 80086a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086a6:	e0ac      	b.n	8008802 <UART_SetConfig+0x5a2>
 80086a8:	2340      	movs	r3, #64	; 0x40
 80086aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ae:	e0a8      	b.n	8008802 <UART_SetConfig+0x5a2>
 80086b0:	2380      	movs	r3, #128	; 0x80
 80086b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086b6:	e0a4      	b.n	8008802 <UART_SetConfig+0x5a2>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a90      	ldr	r2, [pc, #576]	; (8008900 <UART_SetConfig+0x6a0>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d130      	bne.n	8008724 <UART_SetConfig+0x4c4>
 80086c2:	4b8e      	ldr	r3, [pc, #568]	; (80088fc <UART_SetConfig+0x69c>)
 80086c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b05      	cmp	r3, #5
 80086cc:	d826      	bhi.n	800871c <UART_SetConfig+0x4bc>
 80086ce:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <UART_SetConfig+0x474>)
 80086d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d4:	080086ed 	.word	0x080086ed
 80086d8:	080086f5 	.word	0x080086f5
 80086dc:	080086fd 	.word	0x080086fd
 80086e0:	08008705 	.word	0x08008705
 80086e4:	0800870d 	.word	0x0800870d
 80086e8:	08008715 	.word	0x08008715
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086f2:	e086      	b.n	8008802 <UART_SetConfig+0x5a2>
 80086f4:	2304      	movs	r3, #4
 80086f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086fa:	e082      	b.n	8008802 <UART_SetConfig+0x5a2>
 80086fc:	2308      	movs	r3, #8
 80086fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008702:	e07e      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008704:	2310      	movs	r3, #16
 8008706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800870a:	e07a      	b.n	8008802 <UART_SetConfig+0x5a2>
 800870c:	2320      	movs	r3, #32
 800870e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008712:	e076      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008714:	2340      	movs	r3, #64	; 0x40
 8008716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871a:	e072      	b.n	8008802 <UART_SetConfig+0x5a2>
 800871c:	2380      	movs	r3, #128	; 0x80
 800871e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008722:	e06e      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a76      	ldr	r2, [pc, #472]	; (8008904 <UART_SetConfig+0x6a4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d130      	bne.n	8008790 <UART_SetConfig+0x530>
 800872e:	4b73      	ldr	r3, [pc, #460]	; (80088fc <UART_SetConfig+0x69c>)
 8008730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	2b05      	cmp	r3, #5
 8008738:	d826      	bhi.n	8008788 <UART_SetConfig+0x528>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <UART_SetConfig+0x4e0>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008759 	.word	0x08008759
 8008744:	08008761 	.word	0x08008761
 8008748:	08008769 	.word	0x08008769
 800874c:	08008771 	.word	0x08008771
 8008750:	08008779 	.word	0x08008779
 8008754:	08008781 	.word	0x08008781
 8008758:	2300      	movs	r3, #0
 800875a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800875e:	e050      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008760:	2304      	movs	r3, #4
 8008762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008766:	e04c      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008768:	2308      	movs	r3, #8
 800876a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876e:	e048      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008770:	2310      	movs	r3, #16
 8008772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008776:	e044      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008778:	2320      	movs	r3, #32
 800877a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877e:	e040      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008780:	2340      	movs	r3, #64	; 0x40
 8008782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008786:	e03c      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008788:	2380      	movs	r3, #128	; 0x80
 800878a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878e:	e038      	b.n	8008802 <UART_SetConfig+0x5a2>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a5c      	ldr	r2, [pc, #368]	; (8008908 <UART_SetConfig+0x6a8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d130      	bne.n	80087fc <UART_SetConfig+0x59c>
 800879a:	4b58      	ldr	r3, [pc, #352]	; (80088fc <UART_SetConfig+0x69c>)
 800879c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879e:	f003 0307 	and.w	r3, r3, #7
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	d826      	bhi.n	80087f4 <UART_SetConfig+0x594>
 80087a6:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <UART_SetConfig+0x54c>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	080087c5 	.word	0x080087c5
 80087b0:	080087cd 	.word	0x080087cd
 80087b4:	080087d5 	.word	0x080087d5
 80087b8:	080087dd 	.word	0x080087dd
 80087bc:	080087e5 	.word	0x080087e5
 80087c0:	080087ed 	.word	0x080087ed
 80087c4:	2302      	movs	r3, #2
 80087c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ca:	e01a      	b.n	8008802 <UART_SetConfig+0x5a2>
 80087cc:	2304      	movs	r3, #4
 80087ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087d2:	e016      	b.n	8008802 <UART_SetConfig+0x5a2>
 80087d4:	2308      	movs	r3, #8
 80087d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087da:	e012      	b.n	8008802 <UART_SetConfig+0x5a2>
 80087dc:	2310      	movs	r3, #16
 80087de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087e2:	e00e      	b.n	8008802 <UART_SetConfig+0x5a2>
 80087e4:	2320      	movs	r3, #32
 80087e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ea:	e00a      	b.n	8008802 <UART_SetConfig+0x5a2>
 80087ec:	2340      	movs	r3, #64	; 0x40
 80087ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087f2:	e006      	b.n	8008802 <UART_SetConfig+0x5a2>
 80087f4:	2380      	movs	r3, #128	; 0x80
 80087f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087fa:	e002      	b.n	8008802 <UART_SetConfig+0x5a2>
 80087fc:	2380      	movs	r3, #128	; 0x80
 80087fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a40      	ldr	r2, [pc, #256]	; (8008908 <UART_SetConfig+0x6a8>)
 8008808:	4293      	cmp	r3, r2
 800880a:	f040 80ef 	bne.w	80089ec <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800880e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008812:	2b20      	cmp	r3, #32
 8008814:	dc46      	bgt.n	80088a4 <UART_SetConfig+0x644>
 8008816:	2b02      	cmp	r3, #2
 8008818:	f2c0 8081 	blt.w	800891e <UART_SetConfig+0x6be>
 800881c:	3b02      	subs	r3, #2
 800881e:	2b1e      	cmp	r3, #30
 8008820:	d87d      	bhi.n	800891e <UART_SetConfig+0x6be>
 8008822:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0x5c8>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	080088ab 	.word	0x080088ab
 800882c:	0800891f 	.word	0x0800891f
 8008830:	080088b3 	.word	0x080088b3
 8008834:	0800891f 	.word	0x0800891f
 8008838:	0800891f 	.word	0x0800891f
 800883c:	0800891f 	.word	0x0800891f
 8008840:	080088c3 	.word	0x080088c3
 8008844:	0800891f 	.word	0x0800891f
 8008848:	0800891f 	.word	0x0800891f
 800884c:	0800891f 	.word	0x0800891f
 8008850:	0800891f 	.word	0x0800891f
 8008854:	0800891f 	.word	0x0800891f
 8008858:	0800891f 	.word	0x0800891f
 800885c:	0800891f 	.word	0x0800891f
 8008860:	080088d3 	.word	0x080088d3
 8008864:	0800891f 	.word	0x0800891f
 8008868:	0800891f 	.word	0x0800891f
 800886c:	0800891f 	.word	0x0800891f
 8008870:	0800891f 	.word	0x0800891f
 8008874:	0800891f 	.word	0x0800891f
 8008878:	0800891f 	.word	0x0800891f
 800887c:	0800891f 	.word	0x0800891f
 8008880:	0800891f 	.word	0x0800891f
 8008884:	0800891f 	.word	0x0800891f
 8008888:	0800891f 	.word	0x0800891f
 800888c:	0800891f 	.word	0x0800891f
 8008890:	0800891f 	.word	0x0800891f
 8008894:	0800891f 	.word	0x0800891f
 8008898:	0800891f 	.word	0x0800891f
 800889c:	0800891f 	.word	0x0800891f
 80088a0:	08008911 	.word	0x08008911
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	d036      	beq.n	8008916 <UART_SetConfig+0x6b6>
 80088a8:	e039      	b.n	800891e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088aa:	f7fc fdab 	bl	8005404 <HAL_RCCEx_GetD3PCLK1Freq>
 80088ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80088b0:	e03b      	b.n	800892a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b2:	f107 0314 	add.w	r3, r7, #20
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fc fdba 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088c0:	e033      	b.n	800892a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088c2:	f107 0308 	add.w	r3, r7, #8
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fc ff06 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088d0:	e02b      	b.n	800892a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088d2:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <UART_SetConfig+0x69c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088de:	4b07      	ldr	r3, [pc, #28]	; (80088fc <UART_SetConfig+0x69c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	08db      	lsrs	r3, r3, #3
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	4a08      	ldr	r2, [pc, #32]	; (800890c <UART_SetConfig+0x6ac>)
 80088ea:	fa22 f303 	lsr.w	r3, r2, r3
 80088ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088f0:	e01b      	b.n	800892a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80088f2:	4b06      	ldr	r3, [pc, #24]	; (800890c <UART_SetConfig+0x6ac>)
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088f6:	e018      	b.n	800892a <UART_SetConfig+0x6ca>
 80088f8:	40011400 	.word	0x40011400
 80088fc:	58024400 	.word	0x58024400
 8008900:	40007800 	.word	0x40007800
 8008904:	40007c00 	.word	0x40007c00
 8008908:	58000c00 	.word	0x58000c00
 800890c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008910:	4bc4      	ldr	r3, [pc, #784]	; (8008c24 <UART_SetConfig+0x9c4>)
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008914:	e009      	b.n	800892a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800891a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800891c:	e005      	b.n	800892a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008928:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 81da 	beq.w	8008ce6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	4abc      	ldr	r2, [pc, #752]	; (8008c28 <UART_SetConfig+0x9c8>)
 8008938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800893c:	461a      	mov	r2, r3
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	fbb3 f3f2 	udiv	r3, r3, r2
 8008944:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	4613      	mov	r3, r2
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	4413      	add	r3, r2
 8008950:	6a3a      	ldr	r2, [r7, #32]
 8008952:	429a      	cmp	r2, r3
 8008954:	d305      	bcc.n	8008962 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	429a      	cmp	r2, r3
 8008960:	d903      	bls.n	800896a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008968:	e1bd      	b.n	8008ce6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	4618      	mov	r0, r3
 800896e:	f04f 0100 	mov.w	r1, #0
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	4aac      	ldr	r2, [pc, #688]	; (8008c28 <UART_SetConfig+0x9c8>)
 8008978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800897c:	b29a      	uxth	r2, r3
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	f7f7 fd65 	bl	8000450 <__aeabi_uldivmod>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4610      	mov	r0, r2
 800898c:	4619      	mov	r1, r3
 800898e:	f04f 0200 	mov.w	r2, #0
 8008992:	f04f 0300 	mov.w	r3, #0
 8008996:	020b      	lsls	r3, r1, #8
 8008998:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800899c:	0202      	lsls	r2, r0, #8
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	6849      	ldr	r1, [r1, #4]
 80089a2:	0849      	lsrs	r1, r1, #1
 80089a4:	4608      	mov	r0, r1
 80089a6:	f04f 0100 	mov.w	r1, #0
 80089aa:	1814      	adds	r4, r2, r0
 80089ac:	eb43 0501 	adc.w	r5, r3, r1
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	461a      	mov	r2, r3
 80089b6:	f04f 0300 	mov.w	r3, #0
 80089ba:	4620      	mov	r0, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	f7f7 fd47 	bl	8000450 <__aeabi_uldivmod>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4613      	mov	r3, r2
 80089c8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d0:	d308      	bcc.n	80089e4 <UART_SetConfig+0x784>
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d8:	d204      	bcs.n	80089e4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089e0:	60da      	str	r2, [r3, #12]
 80089e2:	e180      	b.n	8008ce6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80089ea:	e17c      	b.n	8008ce6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f4:	f040 80bf 	bne.w	8008b76 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80089f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	dc49      	bgt.n	8008a94 <UART_SetConfig+0x834>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	db7c      	blt.n	8008afe <UART_SetConfig+0x89e>
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	d87a      	bhi.n	8008afe <UART_SetConfig+0x89e>
 8008a08:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <UART_SetConfig+0x7b0>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a9b 	.word	0x08008a9b
 8008a14:	08008aa3 	.word	0x08008aa3
 8008a18:	08008aff 	.word	0x08008aff
 8008a1c:	08008aff 	.word	0x08008aff
 8008a20:	08008aab 	.word	0x08008aab
 8008a24:	08008aff 	.word	0x08008aff
 8008a28:	08008aff 	.word	0x08008aff
 8008a2c:	08008aff 	.word	0x08008aff
 8008a30:	08008abb 	.word	0x08008abb
 8008a34:	08008aff 	.word	0x08008aff
 8008a38:	08008aff 	.word	0x08008aff
 8008a3c:	08008aff 	.word	0x08008aff
 8008a40:	08008aff 	.word	0x08008aff
 8008a44:	08008aff 	.word	0x08008aff
 8008a48:	08008aff 	.word	0x08008aff
 8008a4c:	08008aff 	.word	0x08008aff
 8008a50:	08008acb 	.word	0x08008acb
 8008a54:	08008aff 	.word	0x08008aff
 8008a58:	08008aff 	.word	0x08008aff
 8008a5c:	08008aff 	.word	0x08008aff
 8008a60:	08008aff 	.word	0x08008aff
 8008a64:	08008aff 	.word	0x08008aff
 8008a68:	08008aff 	.word	0x08008aff
 8008a6c:	08008aff 	.word	0x08008aff
 8008a70:	08008aff 	.word	0x08008aff
 8008a74:	08008aff 	.word	0x08008aff
 8008a78:	08008aff 	.word	0x08008aff
 8008a7c:	08008aff 	.word	0x08008aff
 8008a80:	08008aff 	.word	0x08008aff
 8008a84:	08008aff 	.word	0x08008aff
 8008a88:	08008aff 	.word	0x08008aff
 8008a8c:	08008aff 	.word	0x08008aff
 8008a90:	08008af1 	.word	0x08008af1
 8008a94:	2b40      	cmp	r3, #64	; 0x40
 8008a96:	d02e      	beq.n	8008af6 <UART_SetConfig+0x896>
 8008a98:	e031      	b.n	8008afe <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a9a:	f7fb f875 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8008a9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008aa0:	e033      	b.n	8008b0a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aa2:	f7fb f887 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8008aa6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008aa8:	e02f      	b.n	8008b0a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aaa:	f107 0314 	add.w	r3, r7, #20
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fc fcbe 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ab8:	e027      	b.n	8008b0a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fc fe0a 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ac8:	e01f      	b.n	8008b0a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aca:	4b58      	ldr	r3, [pc, #352]	; (8008c2c <UART_SetConfig+0x9cc>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d009      	beq.n	8008aea <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ad6:	4b55      	ldr	r3, [pc, #340]	; (8008c2c <UART_SetConfig+0x9cc>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	08db      	lsrs	r3, r3, #3
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	4a53      	ldr	r2, [pc, #332]	; (8008c30 <UART_SetConfig+0x9d0>)
 8008ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ae8:	e00f      	b.n	8008b0a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008aea:	4b51      	ldr	r3, [pc, #324]	; (8008c30 <UART_SetConfig+0x9d0>)
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aee:	e00c      	b.n	8008b0a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008af0:	4b4c      	ldr	r3, [pc, #304]	; (8008c24 <UART_SetConfig+0x9c4>)
 8008af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008af4:	e009      	b.n	8008b0a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008afc:	e005      	b.n	8008b0a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008b08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 80ea 	beq.w	8008ce6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b16:	4a44      	ldr	r2, [pc, #272]	; (8008c28 <UART_SetConfig+0x9c8>)
 8008b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b24:	005a      	lsls	r2, r3, #1
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	441a      	add	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	2b0f      	cmp	r3, #15
 8008b3e:	d916      	bls.n	8008b6e <UART_SetConfig+0x90e>
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b46:	d212      	bcs.n	8008b6e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	f023 030f 	bic.w	r3, r3, #15
 8008b50:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	085b      	lsrs	r3, r3, #1
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b60:	4313      	orrs	r3, r2
 8008b62:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008b6a:	60da      	str	r2, [r3, #12]
 8008b6c:	e0bb      	b.n	8008ce6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008b74:	e0b7      	b.n	8008ce6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	dc4a      	bgt.n	8008c14 <UART_SetConfig+0x9b4>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f2c0 8086 	blt.w	8008c90 <UART_SetConfig+0xa30>
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	f200 8083 	bhi.w	8008c90 <UART_SetConfig+0xa30>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <UART_SetConfig+0x930>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008c1b 	.word	0x08008c1b
 8008b94:	08008c35 	.word	0x08008c35
 8008b98:	08008c91 	.word	0x08008c91
 8008b9c:	08008c91 	.word	0x08008c91
 8008ba0:	08008c3d 	.word	0x08008c3d
 8008ba4:	08008c91 	.word	0x08008c91
 8008ba8:	08008c91 	.word	0x08008c91
 8008bac:	08008c91 	.word	0x08008c91
 8008bb0:	08008c4d 	.word	0x08008c4d
 8008bb4:	08008c91 	.word	0x08008c91
 8008bb8:	08008c91 	.word	0x08008c91
 8008bbc:	08008c91 	.word	0x08008c91
 8008bc0:	08008c91 	.word	0x08008c91
 8008bc4:	08008c91 	.word	0x08008c91
 8008bc8:	08008c91 	.word	0x08008c91
 8008bcc:	08008c91 	.word	0x08008c91
 8008bd0:	08008c5d 	.word	0x08008c5d
 8008bd4:	08008c91 	.word	0x08008c91
 8008bd8:	08008c91 	.word	0x08008c91
 8008bdc:	08008c91 	.word	0x08008c91
 8008be0:	08008c91 	.word	0x08008c91
 8008be4:	08008c91 	.word	0x08008c91
 8008be8:	08008c91 	.word	0x08008c91
 8008bec:	08008c91 	.word	0x08008c91
 8008bf0:	08008c91 	.word	0x08008c91
 8008bf4:	08008c91 	.word	0x08008c91
 8008bf8:	08008c91 	.word	0x08008c91
 8008bfc:	08008c91 	.word	0x08008c91
 8008c00:	08008c91 	.word	0x08008c91
 8008c04:	08008c91 	.word	0x08008c91
 8008c08:	08008c91 	.word	0x08008c91
 8008c0c:	08008c91 	.word	0x08008c91
 8008c10:	08008c83 	.word	0x08008c83
 8008c14:	2b40      	cmp	r3, #64	; 0x40
 8008c16:	d037      	beq.n	8008c88 <UART_SetConfig+0xa28>
 8008c18:	e03a      	b.n	8008c90 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c1a:	f7fa ffb5 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8008c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c20:	e03c      	b.n	8008c9c <UART_SetConfig+0xa3c>
 8008c22:	bf00      	nop
 8008c24:	003d0900 	.word	0x003d0900
 8008c28:	0801214c 	.word	0x0801214c
 8008c2c:	58024400 	.word	0x58024400
 8008c30:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c34:	f7fa ffbe 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8008c38:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c3a:	e02f      	b.n	8008c9c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fc fbf5 	bl	8005430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c4a:	e027      	b.n	8008c9c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c4c:	f107 0308 	add.w	r3, r7, #8
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fc fd41 	bl	80056d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c5a:	e01f      	b.n	8008c9c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c5c:	4b2c      	ldr	r3, [pc, #176]	; (8008d10 <UART_SetConfig+0xab0>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0320 	and.w	r3, r3, #32
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d009      	beq.n	8008c7c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c68:	4b29      	ldr	r3, [pc, #164]	; (8008d10 <UART_SetConfig+0xab0>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	08db      	lsrs	r3, r3, #3
 8008c6e:	f003 0303 	and.w	r3, r3, #3
 8008c72:	4a28      	ldr	r2, [pc, #160]	; (8008d14 <UART_SetConfig+0xab4>)
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
 8008c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c7a:	e00f      	b.n	8008c9c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008c7c:	4b25      	ldr	r3, [pc, #148]	; (8008d14 <UART_SetConfig+0xab4>)
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c80:	e00c      	b.n	8008c9c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c82:	4b25      	ldr	r3, [pc, #148]	; (8008d18 <UART_SetConfig+0xab8>)
 8008c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c86:	e009      	b.n	8008c9c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c8e:	e005      	b.n	8008c9c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d021      	beq.n	8008ce6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <UART_SetConfig+0xabc>)
 8008ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	085b      	lsrs	r3, r3, #1
 8008cba:	441a      	add	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	2b0f      	cmp	r3, #15
 8008ccc:	d908      	bls.n	8008ce0 <UART_SetConfig+0xa80>
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cd4:	d204      	bcs.n	8008ce0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cdc:	60da      	str	r2, [r3, #12]
 8008cde:	e002      	b.n	8008ce6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3738      	adds	r7, #56	; 0x38
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	58024400 	.word	0x58024400
 8008d14:	03d09000 	.word	0x03d09000
 8008d18:	003d0900 	.word	0x003d0900
 8008d1c:	0801214c 	.word	0x0801214c

08008d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00a      	beq.n	8008d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00a      	beq.n	8008d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	f003 0308 	and.w	r3, r3, #8
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00a      	beq.n	8008dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d01a      	beq.n	8008e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1e:	d10a      	bne.n	8008e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	605a      	str	r2, [r3, #4]
  }
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af02      	add	r7, sp, #8
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e74:	f7f9 fb96 	bl	80025a4 <HAL_GetTick>
 8008e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d10e      	bne.n	8008ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f82f 	bl	8008efa <UART_WaitOnFlagUntilTimeout>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e025      	b.n	8008ef2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d10e      	bne.n	8008ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f819 	bl	8008efa <UART_WaitOnFlagUntilTimeout>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e00f      	b.n	8008ef2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	603b      	str	r3, [r7, #0]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f0a:	e062      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f12:	d05e      	beq.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f14:	f7f9 fb46 	bl	80025a4 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d302      	bcc.n	8008f2a <UART_WaitOnFlagUntilTimeout+0x30>
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d11d      	bne.n	8008f66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f38:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689a      	ldr	r2, [r3, #8]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 0201 	bic.w	r2, r2, #1
 8008f48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2220      	movs	r2, #32
 8008f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e045      	b.n	8008ff2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0304 	and.w	r3, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d02e      	beq.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f82:	d126      	bne.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f022 0201 	bic.w	r2, r2, #1
 8008fac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e00f      	b.n	8008ff2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69da      	ldr	r2, [r3, #28]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	bf0c      	ite	eq
 8008fe2:	2301      	moveq	r3, #1
 8008fe4:	2300      	movne	r3, #0
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d08d      	beq.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_UARTEx_DisableFifoMode+0x16>
 800900c:	2302      	movs	r3, #2
 800900e:	e027      	b.n	8009060 <HAL_UARTEx_DisableFifoMode+0x66>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2224      	movs	r2, #36	; 0x24
 800901c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0201 	bic.w	r2, r2, #1
 8009036:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800903e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009080:	2302      	movs	r3, #2
 8009082:	e02d      	b.n	80090e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2224      	movs	r2, #36	; 0x24
 8009090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0201 	bic.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f84f 	bl	8009164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e02d      	b.n	800915c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2224      	movs	r2, #36	; 0x24
 800910c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f811 	bl	8009164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009170:	2b00      	cmp	r3, #0
 8009172:	d108      	bne.n	8009186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009184:	e031      	b.n	80091ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009186:	2310      	movs	r3, #16
 8009188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800918a:	2310      	movs	r3, #16
 800918c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	0e5b      	lsrs	r3, r3, #25
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 0307 	and.w	r3, r3, #7
 800919c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	0f5b      	lsrs	r3, r3, #29
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0307 	and.w	r3, r3, #7
 80091ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	7b3a      	ldrb	r2, [r7, #12]
 80091b2:	4911      	ldr	r1, [pc, #68]	; (80091f8 <UARTEx_SetNbDataToProcess+0x94>)
 80091b4:	5c8a      	ldrb	r2, [r1, r2]
 80091b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091ba:	7b3a      	ldrb	r2, [r7, #12]
 80091bc:	490f      	ldr	r1, [pc, #60]	; (80091fc <UARTEx_SetNbDataToProcess+0x98>)
 80091be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	7b7a      	ldrb	r2, [r7, #13]
 80091d0:	4909      	ldr	r1, [pc, #36]	; (80091f8 <UARTEx_SetNbDataToProcess+0x94>)
 80091d2:	5c8a      	ldrb	r2, [r1, r2]
 80091d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091d8:	7b7a      	ldrb	r2, [r7, #13]
 80091da:	4908      	ldr	r1, [pc, #32]	; (80091fc <UARTEx_SetNbDataToProcess+0x98>)
 80091dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091de:	fb93 f3f2 	sdiv	r3, r3, r2
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80091ea:	bf00      	nop
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	08012164 	.word	0x08012164
 80091fc:	0801216c 	.word	0x0801216c

08009200 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009200:	b084      	sub	sp, #16
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	f107 001c 	add.w	r0, r7, #28
 800920e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009216:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009218:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800921a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800921e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009222:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009226:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	4b07      	ldr	r3, [pc, #28]	; (8009250 <SDMMC_Init+0x50>)
 8009234:	4013      	ands	r3, r2
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	b004      	add	sp, #16
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	ffc02c00 	.word	0xffc02c00

08009254 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f043 0203 	orr.w	r2, r3, #3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b083      	sub	sp, #12
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0303 	and.w	r3, r3, #3
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
	...

080092d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80092ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80092f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80092fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68da      	ldr	r2, [r3, #12]
 8009306:	4b06      	ldr	r3, [pc, #24]	; (8009320 <SDMMC_SendCommand+0x50>)
 8009308:	4013      	ands	r3, r2
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	431a      	orrs	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	fffee0c0 	.word	0xfffee0c0

08009324 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	b2db      	uxtb	r3, r3
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800933e:	b480      	push	{r7}
 8009340:	b085      	sub	sp, #20
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3314      	adds	r3, #20
 800934c:	461a      	mov	r2, r3
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	4413      	add	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800938a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009390:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009396:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	431a      	orrs	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0

}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80093ca:	2310      	movs	r3, #16
 80093cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093d4:	2300      	movs	r3, #0
 80093d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093de:	f107 0308 	add.w	r3, r7, #8
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff ff73 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80093ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ee:	2110      	movs	r1, #16
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa5f 	bl	80098b4 <SDMMC_GetCmdResp1>
 80093f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093f8:	69fb      	ldr	r3, [r7, #28]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b088      	sub	sp, #32
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009410:	2311      	movs	r3, #17
 8009412:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800941a:	2300      	movs	r3, #0
 800941c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800941e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009422:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009424:	f107 0308 	add.w	r3, r7, #8
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff ff50 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009430:	f241 3288 	movw	r2, #5000	; 0x1388
 8009434:	2111      	movs	r1, #17
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa3c 	bl	80098b4 <SDMMC_GetCmdResp1>
 800943c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800943e:	69fb      	ldr	r3, [r7, #28]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3720      	adds	r7, #32
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009456:	2312      	movs	r3, #18
 8009458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800945a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800945e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009460:	2300      	movs	r3, #0
 8009462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009468:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800946a:	f107 0308 	add.w	r3, r7, #8
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff ff2d 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009476:	f241 3288 	movw	r2, #5000	; 0x1388
 800947a:	2112      	movs	r1, #18
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa19 	bl	80098b4 <SDMMC_GetCmdResp1>
 8009482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009484:	69fb      	ldr	r3, [r7, #28]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3720      	adds	r7, #32
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b088      	sub	sp, #32
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800949c:	2318      	movs	r3, #24
 800949e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094b0:	f107 0308 	add.w	r3, r7, #8
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7ff ff0a 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80094bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c0:	2118      	movs	r1, #24
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f9f6 	bl	80098b4 <SDMMC_GetCmdResp1>
 80094c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ca:	69fb      	ldr	r3, [r7, #28]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3720      	adds	r7, #32
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80094e2:	2319      	movs	r3, #25
 80094e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094ec:	2300      	movs	r3, #0
 80094ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094f6:	f107 0308 	add.w	r3, r7, #8
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7ff fee7 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009502:	f241 3288 	movw	r2, #5000	; 0x1388
 8009506:	2119      	movs	r1, #25
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f9d3 	bl	80098b4 <SDMMC_GetCmdResp1>
 800950e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009510:	69fb      	ldr	r3, [r7, #28]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3720      	adds	r7, #32
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009528:	230c      	movs	r3, #12
 800952a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800952c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009532:	2300      	movs	r3, #0
 8009534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800953a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009554:	f107 0308 	add.w	r3, r7, #8
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff feb8 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009560:	4a0b      	ldr	r2, [pc, #44]	; (8009590 <SDMMC_CmdStopTransfer+0x74>)
 8009562:	210c      	movs	r1, #12
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f9a5 	bl	80098b4 <SDMMC_GetCmdResp1>
 800956a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800957e:	d101      	bne.n	8009584 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009580:	2300      	movs	r3, #0
 8009582:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009584:	69fb      	ldr	r3, [r7, #28]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3720      	adds	r7, #32
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	05f5e100 	.word	0x05f5e100

08009594 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80095a2:	2307      	movs	r3, #7
 80095a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095b6:	f107 0308 	add.w	r3, r7, #8
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fe87 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80095c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c6:	2107      	movs	r1, #7
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f973 	bl	80098b4 <SDMMC_GetCmdResp1>
 80095ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095d0:	69fb      	ldr	r3, [r7, #28]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b088      	sub	sp, #32
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80095ea:	2300      	movs	r3, #0
 80095ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095ee:	2300      	movs	r3, #0
 80095f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fe66 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fb97 	bl	8009d38 <SDMMC_GetCmdError>
 800960a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800960c:	69fb      	ldr	r3, [r7, #28]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3720      	adds	r7, #32
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b088      	sub	sp, #32
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800961e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009624:	2308      	movs	r3, #8
 8009626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800962c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009636:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009638:	f107 0308 	add.w	r3, r7, #8
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff fe46 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fb29 	bl	8009c9c <SDMMC_GetCmdResp7>
 800964a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800964c:	69fb      	ldr	r3, [r7, #28]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3720      	adds	r7, #32
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b088      	sub	sp, #32
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009664:	2337      	movs	r3, #55	; 0x37
 8009666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800966c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009678:	f107 0308 	add.w	r3, r7, #8
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff fe26 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009684:	f241 3288 	movw	r2, #5000	; 0x1388
 8009688:	2137      	movs	r1, #55	; 0x37
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f912 	bl	80098b4 <SDMMC_GetCmdResp1>
 8009690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009692:	69fb      	ldr	r3, [r7, #28]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3720      	adds	r7, #32
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80096aa:	2329      	movs	r3, #41	; 0x29
 80096ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff fe03 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa2e 	bl	8009b2c <SDMMC_GetCmdResp3>
 80096d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096d2:	69fb      	ldr	r3, [r7, #28]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3720      	adds	r7, #32
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80096ea:	2306      	movs	r3, #6
 80096ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096f4:	2300      	movs	r3, #0
 80096f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096fe:	f107 0308 	add.w	r3, r7, #8
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff fde3 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800970a:	f241 3288 	movw	r2, #5000	; 0x1388
 800970e:	2106      	movs	r1, #6
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f8cf 	bl	80098b4 <SDMMC_GetCmdResp1>
 8009716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009718:	69fb      	ldr	r3, [r7, #28]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b088      	sub	sp, #32
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800972e:	2333      	movs	r3, #51	; 0x33
 8009730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800973c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009742:	f107 0308 	add.w	r3, r7, #8
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff fdc1 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800974e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009752:	2133      	movs	r1, #51	; 0x33
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f8ad 	bl	80098b4 <SDMMC_GetCmdResp1>
 800975a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800975c:	69fb      	ldr	r3, [r7, #28]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3720      	adds	r7, #32
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b088      	sub	sp, #32
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009772:	2302      	movs	r3, #2
 8009774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009776:	f44f 7340 	mov.w	r3, #768	; 0x300
 800977a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800977c:	2300      	movs	r3, #0
 800977e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009786:	f107 0308 	add.w	r3, r7, #8
 800978a:	4619      	mov	r1, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff fd9f 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f980 	bl	8009a98 <SDMMC_GetCmdResp2>
 8009798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800979a:	69fb      	ldr	r3, [r7, #28]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3720      	adds	r7, #32
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80097b2:	2309      	movs	r3, #9
 80097b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80097b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80097ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097bc:	2300      	movs	r3, #0
 80097be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097c6:	f107 0308 	add.w	r3, r7, #8
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7ff fd7f 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f960 	bl	8009a98 <SDMMC_GetCmdResp2>
 80097d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097da:	69fb      	ldr	r3, [r7, #28]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3720      	adds	r7, #32
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80097f2:	2303      	movs	r3, #3
 80097f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097fc:	2300      	movs	r3, #0
 80097fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009806:	f107 0308 	add.w	r3, r7, #8
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff fd5f 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	2103      	movs	r1, #3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f9c8 	bl	8009bac <SDMMC_GetCmdResp6>
 800981c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800981e:	69fb      	ldr	r3, [r7, #28]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009836:	230d      	movs	r3, #13
 8009838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800983a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800983e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009840:	2300      	movs	r3, #0
 8009842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009848:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800984a:	f107 0308 	add.w	r3, r7, #8
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff fd3d 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009856:	f241 3288 	movw	r2, #5000	; 0x1388
 800985a:	210d      	movs	r1, #13
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f829 	bl	80098b4 <SDMMC_GetCmdResp1>
 8009862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009864:	69fb      	ldr	r3, [r7, #28]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3720      	adds	r7, #32
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b088      	sub	sp, #32
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800987a:	230d      	movs	r3, #13
 800987c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800987e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009884:	2300      	movs	r3, #0
 8009886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800988c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800988e:	f107 0308 	add.w	r3, r7, #8
 8009892:	4619      	mov	r1, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff fd1b 	bl	80092d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800989a:	f241 3288 	movw	r2, #5000	; 0x1388
 800989e:	210d      	movs	r1, #13
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f807 	bl	80098b4 <SDMMC_GetCmdResp1>
 80098a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098a8:	69fb      	ldr	r3, [r7, #28]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3720      	adds	r7, #32
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	460b      	mov	r3, r1
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80098c2:	4b70      	ldr	r3, [pc, #448]	; (8009a84 <SDMMC_GetCmdResp1+0x1d0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a70      	ldr	r2, [pc, #448]	; (8009a88 <SDMMC_GetCmdResp1+0x1d4>)
 80098c8:	fba2 2303 	umull	r2, r3, r2, r3
 80098cc:	0a5a      	lsrs	r2, r3, #9
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	fb02 f303 	mul.w	r3, r2, r3
 80098d4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	1e5a      	subs	r2, r3, #1
 80098da:	61fa      	str	r2, [r7, #28]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098e4:	e0c9      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ea:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	4b67      	ldr	r3, [pc, #412]	; (8009a8c <SDMMC_GetCmdResp1+0x1d8>)
 80098f0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0ef      	beq.n	80098d6 <SDMMC_GetCmdResp1+0x22>
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1ea      	bne.n	80098d6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009904:	f003 0304 	and.w	r3, r3, #4
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2204      	movs	r2, #4
 8009910:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009912:	2304      	movs	r3, #4
 8009914:	e0b1      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d004      	beq.n	800992c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2201      	movs	r2, #1
 8009926:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009928:	2301      	movs	r3, #1
 800992a:	e0a6      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4a58      	ldr	r2, [pc, #352]	; (8009a90 <SDMMC_GetCmdResp1+0x1dc>)
 8009930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f7ff fcf6 	bl	8009324 <SDMMC_GetCommandResponse>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	7afb      	ldrb	r3, [r7, #11]
 800993e:	4293      	cmp	r3, r2
 8009940:	d001      	beq.n	8009946 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009942:	2301      	movs	r3, #1
 8009944:	e099      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009946:	2100      	movs	r1, #0
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f7ff fcf8 	bl	800933e <SDMMC_GetResponse>
 800994e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	4b50      	ldr	r3, [pc, #320]	; (8009a94 <SDMMC_GetCmdResp1+0x1e0>)
 8009954:	4013      	ands	r3, r2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800995a:	2300      	movs	r3, #0
 800995c:	e08d      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	da02      	bge.n	800996a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009968:	e087      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	e080      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009982:	2380      	movs	r3, #128	; 0x80
 8009984:	e079      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009994:	e071      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80099a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099a4:	e069      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80099b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b4:	e061      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80099c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099c4:	e059      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80099d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099d4:	e051      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80099e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099e4:	e049      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80099f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099f4:	e041      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a04:	e039      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a14:	e031      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009a20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a24:	e029      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a34:	e021      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a44:	e019      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009a50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009a54:	e011      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009a60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a64:	e009      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f003 0308 	and.w	r3, r3, #8
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009a70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009a74:	e001      	b.n	8009a7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3720      	adds	r7, #32
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	20000020 	.word	0x20000020
 8009a88:	10624dd3 	.word	0x10624dd3
 8009a8c:	00200045 	.word	0x00200045
 8009a90:	002000c5 	.word	0x002000c5
 8009a94:	fdffe008 	.word	0xfdffe008

08009a98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009aa0:	4b1f      	ldr	r3, [pc, #124]	; (8009b20 <SDMMC_GetCmdResp2+0x88>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a1f      	ldr	r2, [pc, #124]	; (8009b24 <SDMMC_GetCmdResp2+0x8c>)
 8009aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aaa:	0a5b      	lsrs	r3, r3, #9
 8009aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab0:	fb02 f303 	mul.w	r3, r2, r3
 8009ab4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	1e5a      	subs	r2, r3, #1
 8009aba:	60fa      	str	r2, [r7, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d102      	bne.n	8009ac6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ac4:	e026      	b.n	8009b14 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0ef      	beq.n	8009ab6 <SDMMC_GetCmdResp2+0x1e>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1ea      	bne.n	8009ab6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2204      	movs	r2, #4
 8009af0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009af2:	2304      	movs	r3, #4
 8009af4:	e00e      	b.n	8009b14 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d004      	beq.n	8009b0c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e003      	b.n	8009b14 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a06      	ldr	r2, [pc, #24]	; (8009b28 <SDMMC_GetCmdResp2+0x90>)
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	20000020 	.word	0x20000020
 8009b24:	10624dd3 	.word	0x10624dd3
 8009b28:	002000c5 	.word	0x002000c5

08009b2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009b34:	4b1a      	ldr	r3, [pc, #104]	; (8009ba0 <SDMMC_GetCmdResp3+0x74>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a1a      	ldr	r2, [pc, #104]	; (8009ba4 <SDMMC_GetCmdResp3+0x78>)
 8009b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3e:	0a5b      	lsrs	r3, r3, #9
 8009b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b44:	fb02 f303 	mul.w	r3, r2, r3
 8009b48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	1e5a      	subs	r2, r3, #1
 8009b4e:	60fa      	str	r2, [r7, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b58:	e01b      	b.n	8009b92 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0ef      	beq.n	8009b4a <SDMMC_GetCmdResp3+0x1e>
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1ea      	bne.n	8009b4a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d004      	beq.n	8009b8a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2204      	movs	r2, #4
 8009b84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b86:	2304      	movs	r3, #4
 8009b88:	e003      	b.n	8009b92 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a06      	ldr	r2, [pc, #24]	; (8009ba8 <SDMMC_GetCmdResp3+0x7c>)
 8009b8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	20000020 	.word	0x20000020
 8009ba4:	10624dd3 	.word	0x10624dd3
 8009ba8:	002000c5 	.word	0x002000c5

08009bac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009bba:	4b35      	ldr	r3, [pc, #212]	; (8009c90 <SDMMC_GetCmdResp6+0xe4>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a35      	ldr	r2, [pc, #212]	; (8009c94 <SDMMC_GetCmdResp6+0xe8>)
 8009bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc4:	0a5b      	lsrs	r3, r3, #9
 8009bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bca:	fb02 f303 	mul.w	r3, r2, r3
 8009bce:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	1e5a      	subs	r2, r3, #1
 8009bd4:	61fa      	str	r2, [r7, #28]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bde:	e052      	b.n	8009c86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0ef      	beq.n	8009bd0 <SDMMC_GetCmdResp6+0x24>
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1ea      	bne.n	8009bd0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d004      	beq.n	8009c10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2204      	movs	r2, #4
 8009c0a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c0c:	2304      	movs	r3, #4
 8009c0e:	e03a      	b.n	8009c86 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d004      	beq.n	8009c26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e02f      	b.n	8009c86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff fb7c 	bl	8009324 <SDMMC_GetCommandResponse>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	7afb      	ldrb	r3, [r7, #11]
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d001      	beq.n	8009c3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e025      	b.n	8009c86 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4a16      	ldr	r2, [pc, #88]	; (8009c98 <SDMMC_GetCmdResp6+0xec>)
 8009c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009c40:	2100      	movs	r1, #0
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff fb7b 	bl	800933e <SDMMC_GetResponse>
 8009c48:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d106      	bne.n	8009c62 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	0c1b      	lsrs	r3, r3, #16
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e011      	b.n	8009c86 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c70:	e009      	b.n	8009c86 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c80:	e001      	b.n	8009c86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3720      	adds	r7, #32
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000020 	.word	0x20000020
 8009c94:	10624dd3 	.word	0x10624dd3
 8009c98:	002000c5 	.word	0x002000c5

08009c9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ca4:	4b22      	ldr	r3, [pc, #136]	; (8009d30 <SDMMC_GetCmdResp7+0x94>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a22      	ldr	r2, [pc, #136]	; (8009d34 <SDMMC_GetCmdResp7+0x98>)
 8009caa:	fba2 2303 	umull	r2, r3, r2, r3
 8009cae:	0a5b      	lsrs	r3, r3, #9
 8009cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb4:	fb02 f303 	mul.w	r3, r2, r3
 8009cb8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	1e5a      	subs	r2, r3, #1
 8009cbe:	60fa      	str	r2, [r7, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cc8:	e02c      	b.n	8009d24 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0ef      	beq.n	8009cba <SDMMC_GetCmdResp7+0x1e>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1ea      	bne.n	8009cba <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2204      	movs	r2, #4
 8009cf4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cf6:	2304      	movs	r3, #4
 8009cf8:	e014      	b.n	8009d24 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d004      	beq.n	8009d10 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e009      	b.n	8009d24 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2240      	movs	r2, #64	; 0x40
 8009d20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d22:	2300      	movs	r3, #0

}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	20000020 	.word	0x20000020
 8009d34:	10624dd3 	.word	0x10624dd3

08009d38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009d40:	4b11      	ldr	r3, [pc, #68]	; (8009d88 <SDMMC_GetCmdError+0x50>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a11      	ldr	r2, [pc, #68]	; (8009d8c <SDMMC_GetCmdError+0x54>)
 8009d46:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4a:	0a5b      	lsrs	r3, r3, #9
 8009d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d50:	fb02 f303 	mul.w	r3, r2, r3
 8009d54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	1e5a      	subs	r2, r3, #1
 8009d5a:	60fa      	str	r2, [r7, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d64:	e009      	b.n	8009d7a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0f1      	beq.n	8009d56 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a06      	ldr	r2, [pc, #24]	; (8009d90 <SDMMC_GetCmdError+0x58>)
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3714      	adds	r7, #20
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	20000020 	.word	0x20000020
 8009d8c:	10624dd3 	.word	0x10624dd3
 8009d90:	002000c5 	.word	0x002000c5

08009d94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
#include <time.h>
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009d98:	4904      	ldr	r1, [pc, #16]	; (8009dac <MX_FATFS_Init+0x18>)
 8009d9a:	4805      	ldr	r0, [pc, #20]	; (8009db0 <MX_FATFS_Init+0x1c>)
 8009d9c:	f005 f8a0 	bl	800eee0 <FATFS_LinkDriver>
 8009da0:	4603      	mov	r3, r0
 8009da2:	461a      	mov	r2, r3
 8009da4:	4b03      	ldr	r3, [pc, #12]	; (8009db4 <MX_FATFS_Init+0x20>)
 8009da6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009da8:	bf00      	nop
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20008954 	.word	0x20008954
 8009db0:	08012174 	.word	0x08012174
 8009db4:	20008950 	.word	0x20008950

08009db8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
    time_t t = HAL_GetTick() / 1000;
 8009dbe:	f7f8 fbf1 	bl	80025a4 <HAL_GetTick>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	4a15      	ldr	r2, [pc, #84]	; (8009e1c <get_fattime+0x64>)
 8009dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dca:	099b      	lsrs	r3, r3, #6
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	e9c7 2300 	strd	r2, r3, [r7]
    struct tm *stm = localtime(&t);
 8009dd6:	463b      	mov	r3, r7
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f005 f981 	bl	800f0e0 <localtime>
 8009dde:	60f8      	str	r0, [r7, #12]

    return (DWORD)(stm->tm_year - 80) << 25 |
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	3b50      	subs	r3, #80	; 0x50
 8009de6:	065a      	lsls	r2, r3, #25
           (DWORD)(stm->tm_mon + 1) << 21 |
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	3301      	adds	r3, #1
 8009dee:	055b      	lsls	r3, r3, #21
    return (DWORD)(stm->tm_year - 80) << 25 |
 8009df0:	431a      	orrs	r2, r3
           (DWORD)stm->tm_mday << 16 |
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	041b      	lsls	r3, r3, #16
           (DWORD)(stm->tm_mon + 1) << 21 |
 8009df8:	431a      	orrs	r2, r3
           (DWORD)stm->tm_hour << 11 |
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	02db      	lsls	r3, r3, #11
           (DWORD)stm->tm_mday << 16 |
 8009e00:	431a      	orrs	r2, r3
           (DWORD)stm->tm_min << 5 |
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	015b      	lsls	r3, r3, #5
           (DWORD)stm->tm_hour << 11 |
 8009e08:	431a      	orrs	r2, r3
           (DWORD)stm->tm_sec >> 1;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	085b      	lsrs	r3, r3, #1
           (DWORD)stm->tm_min << 5 |
 8009e10:	4313      	orrs	r3, r2
  /* USER CODE END get_fattime */
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	10624dd3 	.word	0x10624dd3

08009e20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009e2a:	f000 f86b 	bl	8009f04 <BSP_SD_IsDetected>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d001      	beq.n	8009e38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009e34:	2302      	movs	r3, #2
 8009e36:	e005      	b.n	8009e44 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009e38:	4804      	ldr	r0, [pc, #16]	; (8009e4c <BSP_SD_Init+0x2c>)
 8009e3a:	f7fc f857 	bl	8005eec <HAL_SD_Init>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009e42:	79fb      	ldrb	r3, [r7, #7]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20008838 	.word	0x20008838

08009e50 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af02      	add	r7, sp, #8
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	68f9      	ldr	r1, [r7, #12]
 8009e6c:	4806      	ldr	r0, [pc, #24]	; (8009e88 <BSP_SD_ReadBlocks+0x38>)
 8009e6e:	f7fc f955 	bl	800611c <HAL_SD_ReadBlocks>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20008838 	.word	0x20008838

08009e8c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	4806      	ldr	r0, [pc, #24]	; (8009ec4 <BSP_SD_WriteBlocks+0x38>)
 8009eaa:	f7fc fac1 	bl	8006430 <HAL_SD_WriteBlocks>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20008838 	.word	0x20008838

08009ec8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009ecc:	4805      	ldr	r0, [pc, #20]	; (8009ee4 <BSP_SD_GetCardState+0x1c>)
 8009ece:	f7fc ffd3 	bl	8006e78 <HAL_SD_GetCardState>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	bf14      	ite	ne
 8009ed8:	2301      	movne	r3, #1
 8009eda:	2300      	moveq	r3, #0
 8009edc:	b2db      	uxtb	r3, r3
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20008838 	.word	0x20008838

08009ee8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	4803      	ldr	r0, [pc, #12]	; (8009f00 <BSP_SD_GetCardInfo+0x18>)
 8009ef4:	f7fc fe84 	bl	8006c00 <HAL_SD_GetCardInfo>
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20008838 	.word	0x20008838

08009f04 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009f0e:	f000 f80b 	bl	8009f28 <BSP_PlatformIsDetected>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	b2db      	uxtb	r3, r3
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f36:	4810      	ldr	r0, [pc, #64]	; (8009f78 <BSP_PlatformIsDetected+0x50>)
 8009f38:	f7f8 fe30 	bl	8002b9c <HAL_GPIO_ReadPin>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009f42:	2300      	movs	r3, #0
 8009f44:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    //Stupid that the code is duplicated here but the code generator keps overwriting my fix.
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8009f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f4a:	480b      	ldr	r0, [pc, #44]	; (8009f78 <BSP_PlatformIsDetected+0x50>)
 8009f4c:	f7f8 fe26 	bl	8002b9c <HAL_GPIO_ReadPin>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d001      	beq.n	8009f5a <BSP_PlatformIsDetected+0x32>
    {
        status = SD_NOT_PRESENT;
 8009f56:	2300      	movs	r3, #0
 8009f58:	71fb      	strb	r3, [r7, #7]
    }
    return (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET) ? SD_PRESENT : SD_NOT_PRESENT;
 8009f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f5e:	4806      	ldr	r0, [pc, #24]	; (8009f78 <BSP_PlatformIsDetected+0x50>)
 8009f60:	f7f8 fe1c 	bl	8002b9c <HAL_GPIO_ReadPin>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	bf0c      	ite	eq
 8009f6a:	2301      	moveq	r3, #1
 8009f6c:	2300      	movne	r3, #0
 8009f6e:	b2db      	uxtb	r3, r3
    /* USER CODE END 1 */
    return status;
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	58020800 	.word	0x58020800

08009f7c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009f86:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <SD_CheckStatus+0x38>)
 8009f88:	2201      	movs	r2, #1
 8009f8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009f8c:	f7ff ff9c 	bl	8009ec8 <BSP_SD_GetCardState>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d107      	bne.n	8009fa6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009f96:	4b07      	ldr	r3, [pc, #28]	; (8009fb4 <SD_CheckStatus+0x38>)
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	f023 0301 	bic.w	r3, r3, #1
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	4b04      	ldr	r3, [pc, #16]	; (8009fb4 <SD_CheckStatus+0x38>)
 8009fa4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009fa6:	4b03      	ldr	r3, [pc, #12]	; (8009fb4 <SD_CheckStatus+0x38>)
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	b2db      	uxtb	r3, r3
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	2000002d 	.word	0x2000002d

08009fb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009fc2:	4b0b      	ldr	r3, [pc, #44]	; (8009ff0 <SD_initialize+0x38>)
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009fc8:	f7ff ff2a 	bl	8009e20 <BSP_SD_Init>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d107      	bne.n	8009fe2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff ffd1 	bl	8009f7c <SD_CheckStatus>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	461a      	mov	r2, r3
 8009fde:	4b04      	ldr	r3, [pc, #16]	; (8009ff0 <SD_initialize+0x38>)
 8009fe0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009fe2:	4b03      	ldr	r3, [pc, #12]	; (8009ff0 <SD_initialize+0x38>)
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	b2db      	uxtb	r3, r3
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	2000002d 	.word	0x2000002d

08009ff4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff ffbb 	bl	8009f7c <SD_CheckStatus>
 800a006:	4603      	mov	r3, r0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	603b      	str	r3, [r7, #0]
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	68b8      	ldr	r0, [r7, #8]
 800a02e:	f7ff ff0f 	bl	8009e50 <BSP_SD_ReadBlocks>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d107      	bne.n	800a048 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a038:	bf00      	nop
 800a03a:	f7ff ff45 	bl	8009ec8 <BSP_SD_GetCardState>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1fa      	bne.n	800a03a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a048:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b086      	sub	sp, #24
 800a056:	af00      	add	r7, sp, #0
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	68b8      	ldr	r0, [r7, #8]
 800a070:	f7ff ff0c 	bl	8009e8c <BSP_SD_WriteBlocks>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d107      	bne.n	800a08a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a07a:	bf00      	nop
 800a07c:	f7ff ff24 	bl	8009ec8 <BSP_SD_GetCardState>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1fa      	bne.n	800a07c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08c      	sub	sp, #48	; 0x30
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	603a      	str	r2, [r7, #0]
 800a09e:	71fb      	strb	r3, [r7, #7]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a0aa:	4b25      	ldr	r3, [pc, #148]	; (800a140 <SD_ioctl+0xac>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f003 0301 	and.w	r3, r3, #1
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <SD_ioctl+0x28>
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e03c      	b.n	800a136 <SD_ioctl+0xa2>

  switch (cmd)
 800a0bc:	79bb      	ldrb	r3, [r7, #6]
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d834      	bhi.n	800a12c <SD_ioctl+0x98>
 800a0c2:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <SD_ioctl+0x34>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0d9 	.word	0x0800a0d9
 800a0cc:	0800a0e1 	.word	0x0800a0e1
 800a0d0:	0800a0f9 	.word	0x0800a0f9
 800a0d4:	0800a113 	.word	0x0800a113
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0de:	e028      	b.n	800a132 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0e0:	f107 0308 	add.w	r3, r7, #8
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff feff 	bl	8009ee8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a0ea:	6a3a      	ldr	r2, [r7, #32]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a0f6:	e01c      	b.n	800a132 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a0f8:	f107 0308 	add.w	r3, r7, #8
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff fef3 	bl	8009ee8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	b29a      	uxth	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a110:	e00f      	b.n	800a132 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a112:	f107 0308 	add.w	r3, r7, #8
 800a116:	4618      	mov	r0, r3
 800a118:	f7ff fee6 	bl	8009ee8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	0a5a      	lsrs	r2, r3, #9
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a12a:	e002      	b.n	800a132 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a12c:	2304      	movs	r3, #4
 800a12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a136:	4618      	mov	r0, r3
 800a138:	3730      	adds	r7, #48	; 0x30
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	2000002d 	.word	0x2000002d

0800a144 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a14e:	79fb      	ldrb	r3, [r7, #7]
 800a150:	4a08      	ldr	r2, [pc, #32]	; (800a174 <disk_status+0x30>)
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	79fa      	ldrb	r2, [r7, #7]
 800a15c:	4905      	ldr	r1, [pc, #20]	; (800a174 <disk_status+0x30>)
 800a15e:	440a      	add	r2, r1
 800a160:	7a12      	ldrb	r2, [r2, #8]
 800a162:	4610      	mov	r0, r2
 800a164:	4798      	blx	r3
 800a166:	4603      	mov	r3, r0
 800a168:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	200017a4 	.word	0x200017a4

0800a178 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a186:	79fb      	ldrb	r3, [r7, #7]
 800a188:	4a0d      	ldr	r2, [pc, #52]	; (800a1c0 <disk_initialize+0x48>)
 800a18a:	5cd3      	ldrb	r3, [r2, r3]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d111      	bne.n	800a1b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	4a0b      	ldr	r2, [pc, #44]	; (800a1c0 <disk_initialize+0x48>)
 800a194:	2101      	movs	r1, #1
 800a196:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a198:	79fb      	ldrb	r3, [r7, #7]
 800a19a:	4a09      	ldr	r2, [pc, #36]	; (800a1c0 <disk_initialize+0x48>)
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	79fa      	ldrb	r2, [r7, #7]
 800a1a6:	4906      	ldr	r1, [pc, #24]	; (800a1c0 <disk_initialize+0x48>)
 800a1a8:	440a      	add	r2, r1
 800a1aa:	7a12      	ldrb	r2, [r2, #8]
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	200017a4 	.word	0x200017a4

0800a1c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a1c4:	b590      	push	{r4, r7, lr}
 800a1c6:	b087      	sub	sp, #28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	4a0a      	ldr	r2, [pc, #40]	; (800a200 <disk_read+0x3c>)
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	689c      	ldr	r4, [r3, #8]
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	4a07      	ldr	r2, [pc, #28]	; (800a200 <disk_read+0x3c>)
 800a1e4:	4413      	add	r3, r2
 800a1e6:	7a18      	ldrb	r0, [r3, #8]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	47a0      	blx	r4
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	371c      	adds	r7, #28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd90      	pop	{r4, r7, pc}
 800a1fe:	bf00      	nop
 800a200:	200017a4 	.word	0x200017a4

0800a204 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	4603      	mov	r3, r0
 800a212:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	4a0a      	ldr	r2, [pc, #40]	; (800a240 <disk_write+0x3c>)
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	68dc      	ldr	r4, [r3, #12]
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4a07      	ldr	r2, [pc, #28]	; (800a240 <disk_write+0x3c>)
 800a224:	4413      	add	r3, r2
 800a226:	7a18      	ldrb	r0, [r3, #8]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	68b9      	ldr	r1, [r7, #8]
 800a22e:	47a0      	blx	r4
 800a230:	4603      	mov	r3, r0
 800a232:	75fb      	strb	r3, [r7, #23]
  return res;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
}
 800a236:	4618      	mov	r0, r3
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd90      	pop	{r4, r7, pc}
 800a23e:	bf00      	nop
 800a240:	200017a4 	.word	0x200017a4

0800a244 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4603      	mov	r3, r0
 800a24c:	603a      	str	r2, [r7, #0]
 800a24e:	71fb      	strb	r3, [r7, #7]
 800a250:	460b      	mov	r3, r1
 800a252:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	4a09      	ldr	r2, [pc, #36]	; (800a27c <disk_ioctl+0x38>)
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	79fa      	ldrb	r2, [r7, #7]
 800a262:	4906      	ldr	r1, [pc, #24]	; (800a27c <disk_ioctl+0x38>)
 800a264:	440a      	add	r2, r1
 800a266:	7a10      	ldrb	r0, [r2, #8]
 800a268:	79b9      	ldrb	r1, [r7, #6]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	4798      	blx	r3
 800a26e:	4603      	mov	r3, r0
 800a270:	73fb      	strb	r3, [r7, #15]
  return res;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	200017a4 	.word	0x200017a4

0800a280 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3301      	adds	r3, #1
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a290:	89fb      	ldrh	r3, [r7, #14]
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	b21a      	sxth	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	b21b      	sxth	r3, r3
 800a29c:	4313      	orrs	r3, r2
 800a29e:	b21b      	sxth	r3, r3
 800a2a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a2a2:	89fb      	ldrh	r3, [r7, #14]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3303      	adds	r3, #3
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	3202      	adds	r2, #2
 800a2c8:	7812      	ldrb	r2, [r2, #0]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	3201      	adds	r2, #1
 800a2d6:	7812      	ldrb	r2, [r2, #0]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	021b      	lsls	r3, r3, #8
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	7812      	ldrb	r2, [r2, #0]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
	return rv;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a2f6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a2fa:	b08d      	sub	sp, #52	; 0x34
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	3307      	adds	r3, #7
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	b2da      	uxtb	r2, r3
 800a308:	f04f 0300 	mov.w	r3, #0
 800a30c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 800a310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a314:	f04f 0000 	mov.w	r0, #0
 800a318:	f04f 0100 	mov.w	r1, #0
 800a31c:	0219      	lsls	r1, r3, #8
 800a31e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a322:	0210      	lsls	r0, r2, #8
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	3306      	adds	r3, #6
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	f04f 0300 	mov.w	r3, #0
 800a330:	ea40 0402 	orr.w	r4, r0, r2
 800a334:	ea41 0503 	orr.w	r5, r1, r3
 800a338:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 800a33c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a340:	f04f 0000 	mov.w	r0, #0
 800a344:	f04f 0100 	mov.w	r1, #0
 800a348:	0219      	lsls	r1, r3, #8
 800a34a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a34e:	0210      	lsls	r0, r2, #8
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	3305      	adds	r3, #5
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	ea40 0802 	orr.w	r8, r0, r2
 800a360:	ea41 0903 	orr.w	r9, r1, r3
 800a364:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 800a368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a36c:	f04f 0000 	mov.w	r0, #0
 800a370:	f04f 0100 	mov.w	r1, #0
 800a374:	0219      	lsls	r1, r3, #8
 800a376:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a37a:	0210      	lsls	r0, r2, #8
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	3304      	adds	r3, #4
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	b2da      	uxtb	r2, r3
 800a384:	f04f 0300 	mov.w	r3, #0
 800a388:	ea40 0402 	orr.w	r4, r0, r2
 800a38c:	61bc      	str	r4, [r7, #24]
 800a38e:	430b      	orrs	r3, r1
 800a390:	61fb      	str	r3, [r7, #28]
 800a392:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a396:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 800a39a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a39e:	f04f 0200 	mov.w	r2, #0
 800a3a2:	f04f 0300 	mov.w	r3, #0
 800a3a6:	020b      	lsls	r3, r1, #8
 800a3a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3ac:	0202      	lsls	r2, r0, #8
 800a3ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3b0:	3103      	adds	r1, #3
 800a3b2:	7809      	ldrb	r1, [r1, #0]
 800a3b4:	b2c8      	uxtb	r0, r1
 800a3b6:	f04f 0100 	mov.w	r1, #0
 800a3ba:	ea42 0400 	orr.w	r4, r2, r0
 800a3be:	613c      	str	r4, [r7, #16]
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	617b      	str	r3, [r7, #20]
 800a3c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a3c8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 800a3cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a3d0:	f04f 0200 	mov.w	r2, #0
 800a3d4:	f04f 0300 	mov.w	r3, #0
 800a3d8:	020b      	lsls	r3, r1, #8
 800a3da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3de:	0202      	lsls	r2, r0, #8
 800a3e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3e2:	3102      	adds	r1, #2
 800a3e4:	7809      	ldrb	r1, [r1, #0]
 800a3e6:	b2c8      	uxtb	r0, r1
 800a3e8:	f04f 0100 	mov.w	r1, #0
 800a3ec:	ea42 0400 	orr.w	r4, r2, r0
 800a3f0:	60bc      	str	r4, [r7, #8]
 800a3f2:	430b      	orrs	r3, r1
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a3fa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 800a3fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a402:	f04f 0200 	mov.w	r2, #0
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	020b      	lsls	r3, r1, #8
 800a40c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a410:	0202      	lsls	r2, r0, #8
 800a412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a414:	3101      	adds	r1, #1
 800a416:	7809      	ldrb	r1, [r1, #0]
 800a418:	b2c8      	uxtb	r0, r1
 800a41a:	f04f 0100 	mov.w	r1, #0
 800a41e:	ea42 0400 	orr.w	r4, r2, r0
 800a422:	603c      	str	r4, [r7, #0]
 800a424:	430b      	orrs	r3, r1
 800a426:	607b      	str	r3, [r7, #4]
 800a428:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a42c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 800a430:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a434:	f04f 0200 	mov.w	r2, #0
 800a438:	f04f 0300 	mov.w	r3, #0
 800a43c:	020b      	lsls	r3, r1, #8
 800a43e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a442:	0202      	lsls	r2, r0, #8
 800a444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a446:	7809      	ldrb	r1, [r1, #0]
 800a448:	b2c8      	uxtb	r0, r1
 800a44a:	f04f 0100 	mov.w	r1, #0
 800a44e:	ea42 0a00 	orr.w	sl, r2, r0
 800a452:	ea43 0b01 	orr.w	fp, r3, r1
 800a456:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 800a45a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800a45e:	4610      	mov	r0, r2
 800a460:	4619      	mov	r1, r3
 800a462:	3734      	adds	r7, #52	; 0x34
 800a464:	46bd      	mov	sp, r7
 800a466:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a46a:	4770      	bx	lr

0800a46c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	607a      	str	r2, [r7, #4]
 800a47e:	887a      	ldrh	r2, [r7, #2]
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	887b      	ldrh	r3, [r7, #2]
 800a486:	0a1b      	lsrs	r3, r3, #8
 800a488:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	887a      	ldrh	r2, [r7, #2]
 800a492:	b2d2      	uxtb	r2, r2
 800a494:	701a      	strb	r2, [r3, #0]
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	607a      	str	r2, [r7, #4]
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	b2d2      	uxtb	r2, r2
 800a4b6:	701a      	strb	r2, [r3, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	0a1b      	lsrs	r3, r3, #8
 800a4bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	701a      	strb	r2, [r3, #0]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	0a1b      	lsrs	r3, r3, #8
 800a4ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	607a      	str	r2, [r7, #4]
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	b2d2      	uxtb	r2, r2
 800a4da:	701a      	strb	r2, [r3, #0]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	0a1b      	lsrs	r3, r3, #8
 800a4e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	1c5a      	adds	r2, r3, #1
 800a4e6:	607a      	str	r2, [r7, #4]
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	60f8      	str	r0, [r7, #12]
 800a502:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	60fa      	str	r2, [r7, #12]
 800a50c:	783a      	ldrb	r2, [r7, #0]
 800a50e:	701a      	strb	r2, [r3, #0]
 800a510:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a514:	f04f 0200 	mov.w	r2, #0
 800a518:	f04f 0300 	mov.w	r3, #0
 800a51c:	0a02      	lsrs	r2, r0, #8
 800a51e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a522:	0a0b      	lsrs	r3, r1, #8
 800a524:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	60fa      	str	r2, [r7, #12]
 800a52e:	783a      	ldrb	r2, [r7, #0]
 800a530:	701a      	strb	r2, [r3, #0]
 800a532:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a536:	f04f 0200 	mov.w	r2, #0
 800a53a:	f04f 0300 	mov.w	r3, #0
 800a53e:	0a02      	lsrs	r2, r0, #8
 800a540:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a544:	0a0b      	lsrs	r3, r1, #8
 800a546:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	60fa      	str	r2, [r7, #12]
 800a550:	783a      	ldrb	r2, [r7, #0]
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	0a02      	lsrs	r2, r0, #8
 800a562:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a566:	0a0b      	lsrs	r3, r1, #8
 800a568:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	1c5a      	adds	r2, r3, #1
 800a570:	60fa      	str	r2, [r7, #12]
 800a572:	783a      	ldrb	r2, [r7, #0]
 800a574:	701a      	strb	r2, [r3, #0]
 800a576:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	f04f 0300 	mov.w	r3, #0
 800a582:	0a02      	lsrs	r2, r0, #8
 800a584:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a588:	0a0b      	lsrs	r3, r1, #8
 800a58a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	60fa      	str	r2, [r7, #12]
 800a594:	783a      	ldrb	r2, [r7, #0]
 800a596:	701a      	strb	r2, [r3, #0]
 800a598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	0a02      	lsrs	r2, r0, #8
 800a5a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a5aa:	0a0b      	lsrs	r3, r1, #8
 800a5ac:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	1c5a      	adds	r2, r3, #1
 800a5b4:	60fa      	str	r2, [r7, #12]
 800a5b6:	783a      	ldrb	r2, [r7, #0]
 800a5b8:	701a      	strb	r2, [r3, #0]
 800a5ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5be:	f04f 0200 	mov.w	r2, #0
 800a5c2:	f04f 0300 	mov.w	r3, #0
 800a5c6:	0a02      	lsrs	r2, r0, #8
 800a5c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a5cc:	0a0b      	lsrs	r3, r1, #8
 800a5ce:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	60fa      	str	r2, [r7, #12]
 800a5d8:	783a      	ldrb	r2, [r7, #0]
 800a5da:	701a      	strb	r2, [r3, #0]
 800a5dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5e0:	f04f 0200 	mov.w	r2, #0
 800a5e4:	f04f 0300 	mov.w	r3, #0
 800a5e8:	0a02      	lsrs	r2, r0, #8
 800a5ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a5ee:	0a0b      	lsrs	r3, r1, #8
 800a5f0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	60fa      	str	r2, [r7, #12]
 800a5fa:	783a      	ldrb	r2, [r7, #0]
 800a5fc:	701a      	strb	r2, [r3, #0]
}
 800a5fe:	bf00      	nop
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a60a:	b480      	push	{r7}
 800a60c:	b087      	sub	sp, #28
 800a60e:	af00      	add	r7, sp, #0
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00d      	beq.n	800a640 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	1c53      	adds	r3, r2, #1
 800a628:	613b      	str	r3, [r7, #16]
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	1c59      	adds	r1, r3, #1
 800a62e:	6179      	str	r1, [r7, #20]
 800a630:	7812      	ldrb	r2, [r2, #0]
 800a632:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3b01      	subs	r3, #1
 800a638:	607b      	str	r3, [r7, #4]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1f1      	bne.n	800a624 <mem_cpy+0x1a>
	}
}
 800a640:	bf00      	nop
 800a642:	371c      	adds	r7, #28
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	617a      	str	r2, [r7, #20]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	b2d2      	uxtb	r2, r2
 800a666:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	607b      	str	r3, [r7, #4]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1f3      	bne.n	800a65c <mem_set+0x10>
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a682:	b480      	push	{r7}
 800a684:	b089      	sub	sp, #36	; 0x24
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	61fa      	str	r2, [r7, #28]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	61ba      	str	r2, [r7, #24]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	1acb      	subs	r3, r1, r3
 800a6ae:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3b01      	subs	r3, #1
 800a6b4:	607b      	str	r3, [r7, #4]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <mem_cmp+0x40>
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0eb      	beq.n	800a69a <mem_cmp+0x18>

	return r;
 800a6c2:	697b      	ldr	r3, [r7, #20]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3724      	adds	r7, #36	; 0x24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a6da:	e002      	b.n	800a6e2 <chk_chr+0x12>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	607b      	str	r3, [r7, #4]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d005      	beq.n	800a6f6 <chk_chr+0x26>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d1f2      	bne.n	800a6dc <chk_chr+0xc>
	return *str;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
	...

0800a708 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a712:	2300      	movs	r3, #0
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	60fb      	str	r3, [r7, #12]
 800a71a:	e029      	b.n	800a770 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a71c:	4a27      	ldr	r2, [pc, #156]	; (800a7bc <chk_lock+0xb4>)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	011b      	lsls	r3, r3, #4
 800a722:	4413      	add	r3, r2
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d01d      	beq.n	800a766 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a72a:	4a24      	ldr	r2, [pc, #144]	; (800a7bc <chk_lock+0xb4>)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	011b      	lsls	r3, r3, #4
 800a730:	4413      	add	r3, r2
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d116      	bne.n	800a76a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a73c:	4a1f      	ldr	r2, [pc, #124]	; (800a7bc <chk_lock+0xb4>)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	011b      	lsls	r3, r3, #4
 800a742:	4413      	add	r3, r2
 800a744:	3304      	adds	r3, #4
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d10c      	bne.n	800a76a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a750:	4a1a      	ldr	r2, [pc, #104]	; (800a7bc <chk_lock+0xb4>)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	011b      	lsls	r3, r3, #4
 800a756:	4413      	add	r3, r2
 800a758:	3308      	adds	r3, #8
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800a760:	429a      	cmp	r2, r3
 800a762:	d102      	bne.n	800a76a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a764:	e007      	b.n	800a776 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a766:	2301      	movs	r3, #1
 800a768:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3301      	adds	r3, #1
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2bfe      	cmp	r3, #254	; 0xfe
 800a774:	d9d2      	bls.n	800a71c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2bff      	cmp	r3, #255	; 0xff
 800a77a:	d109      	bne.n	800a790 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d102      	bne.n	800a788 <chk_lock+0x80>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b02      	cmp	r3, #2
 800a786:	d101      	bne.n	800a78c <chk_lock+0x84>
 800a788:	2300      	movs	r3, #0
 800a78a:	e010      	b.n	800a7ae <chk_lock+0xa6>
 800a78c:	2312      	movs	r3, #18
 800a78e:	e00e      	b.n	800a7ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d108      	bne.n	800a7a8 <chk_lock+0xa0>
 800a796:	4a09      	ldr	r2, [pc, #36]	; (800a7bc <chk_lock+0xb4>)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	4413      	add	r3, r2
 800a79e:	330c      	adds	r3, #12
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7a6:	d101      	bne.n	800a7ac <chk_lock+0xa4>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	e000      	b.n	800a7ae <chk_lock+0xa6>
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20000354 	.word	0x20000354

0800a7c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	607b      	str	r3, [r7, #4]
 800a7ca:	e002      	b.n	800a7d2 <enq_lock+0x12>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2bfe      	cmp	r3, #254	; 0xfe
 800a7d6:	d806      	bhi.n	800a7e6 <enq_lock+0x26>
 800a7d8:	4a09      	ldr	r2, [pc, #36]	; (800a800 <enq_lock+0x40>)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	011b      	lsls	r3, r3, #4
 800a7de:	4413      	add	r3, r2
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1f2      	bne.n	800a7cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2bff      	cmp	r3, #255	; 0xff
 800a7ea:	bf14      	ite	ne
 800a7ec:	2301      	movne	r3, #1
 800a7ee:	2300      	moveq	r3, #0
 800a7f0:	b2db      	uxtb	r3, r3
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	20000354 	.word	0x20000354

0800a804 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	e01f      	b.n	800a854 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a814:	4a41      	ldr	r2, [pc, #260]	; (800a91c <inc_lock+0x118>)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	011b      	lsls	r3, r3, #4
 800a81a:	4413      	add	r3, r2
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d113      	bne.n	800a84e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a826:	4a3d      	ldr	r2, [pc, #244]	; (800a91c <inc_lock+0x118>)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	011b      	lsls	r3, r3, #4
 800a82c:	4413      	add	r3, r2
 800a82e:	3304      	adds	r3, #4
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a836:	429a      	cmp	r2, r3
 800a838:	d109      	bne.n	800a84e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a83a:	4a38      	ldr	r2, [pc, #224]	; (800a91c <inc_lock+0x118>)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	011b      	lsls	r3, r3, #4
 800a840:	4413      	add	r3, r2
 800a842:	3308      	adds	r3, #8
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d006      	beq.n	800a85c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3301      	adds	r3, #1
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2bfe      	cmp	r3, #254	; 0xfe
 800a858:	d9dc      	bls.n	800a814 <inc_lock+0x10>
 800a85a:	e000      	b.n	800a85e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a85c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2bff      	cmp	r3, #255	; 0xff
 800a862:	d132      	bne.n	800a8ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a864:	2300      	movs	r3, #0
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	e002      	b.n	800a870 <inc_lock+0x6c>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2bfe      	cmp	r3, #254	; 0xfe
 800a874:	d806      	bhi.n	800a884 <inc_lock+0x80>
 800a876:	4a29      	ldr	r2, [pc, #164]	; (800a91c <inc_lock+0x118>)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	011b      	lsls	r3, r3, #4
 800a87c:	4413      	add	r3, r2
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1f2      	bne.n	800a86a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2bff      	cmp	r3, #255	; 0xff
 800a888:	d101      	bne.n	800a88e <inc_lock+0x8a>
 800a88a:	2300      	movs	r3, #0
 800a88c:	e040      	b.n	800a910 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	4922      	ldr	r1, [pc, #136]	; (800a91c <inc_lock+0x118>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	440b      	add	r3, r1
 800a89a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	491e      	ldr	r1, [pc, #120]	; (800a91c <inc_lock+0x118>)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	011b      	lsls	r3, r3, #4
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8b0:	491a      	ldr	r1, [pc, #104]	; (800a91c <inc_lock+0x118>)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	011b      	lsls	r3, r3, #4
 800a8b6:	440b      	add	r3, r1
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a8bc:	4a17      	ldr	r2, [pc, #92]	; (800a91c <inc_lock+0x118>)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	011b      	lsls	r3, r3, #4
 800a8c2:	4413      	add	r3, r2
 800a8c4:	330c      	adds	r3, #12
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d009      	beq.n	800a8e4 <inc_lock+0xe0>
 800a8d0:	4a12      	ldr	r2, [pc, #72]	; (800a91c <inc_lock+0x118>)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	011b      	lsls	r3, r3, #4
 800a8d6:	4413      	add	r3, r2
 800a8d8:	330c      	adds	r3, #12
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <inc_lock+0xe0>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e015      	b.n	800a910 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d108      	bne.n	800a8fc <inc_lock+0xf8>
 800a8ea:	4a0c      	ldr	r2, [pc, #48]	; (800a91c <inc_lock+0x118>)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	011b      	lsls	r3, r3, #4
 800a8f0:	4413      	add	r3, r2
 800a8f2:	330c      	adds	r3, #12
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	e001      	b.n	800a900 <inc_lock+0xfc>
 800a8fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a900:	4906      	ldr	r1, [pc, #24]	; (800a91c <inc_lock+0x118>)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	011b      	lsls	r3, r3, #4
 800a906:	440b      	add	r3, r1
 800a908:	330c      	adds	r3, #12
 800a90a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3301      	adds	r3, #1
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	20000354 	.word	0x20000354

0800a920 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	607b      	str	r3, [r7, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2bfe      	cmp	r3, #254	; 0xfe
 800a932:	d825      	bhi.n	800a980 <dec_lock+0x60>
		n = Files[i].ctr;
 800a934:	4a17      	ldr	r2, [pc, #92]	; (800a994 <dec_lock+0x74>)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	011b      	lsls	r3, r3, #4
 800a93a:	4413      	add	r3, r2
 800a93c:	330c      	adds	r3, #12
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a942:	89fb      	ldrh	r3, [r7, #14]
 800a944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a948:	d101      	bne.n	800a94e <dec_lock+0x2e>
 800a94a:	2300      	movs	r3, #0
 800a94c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a94e:	89fb      	ldrh	r3, [r7, #14]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <dec_lock+0x3a>
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	3b01      	subs	r3, #1
 800a958:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a95a:	4a0e      	ldr	r2, [pc, #56]	; (800a994 <dec_lock+0x74>)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	011b      	lsls	r3, r3, #4
 800a960:	4413      	add	r3, r2
 800a962:	330c      	adds	r3, #12
 800a964:	89fa      	ldrh	r2, [r7, #14]
 800a966:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a968:	89fb      	ldrh	r3, [r7, #14]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d105      	bne.n	800a97a <dec_lock+0x5a>
 800a96e:	4a09      	ldr	r2, [pc, #36]	; (800a994 <dec_lock+0x74>)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	4413      	add	r3, r2
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	737b      	strb	r3, [r7, #13]
 800a97e:	e001      	b.n	800a984 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a980:	2302      	movs	r3, #2
 800a982:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a984:	7b7b      	ldrb	r3, [r7, #13]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	20000354 	.word	0x20000354

0800a998 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e010      	b.n	800a9c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9a6:	4a0d      	ldr	r2, [pc, #52]	; (800a9dc <clear_lock+0x44>)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	011b      	lsls	r3, r3, #4
 800a9ac:	4413      	add	r3, r2
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d105      	bne.n	800a9c2 <clear_lock+0x2a>
 800a9b6:	4a09      	ldr	r2, [pc, #36]	; (800a9dc <clear_lock+0x44>)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	4413      	add	r3, r2
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2bfe      	cmp	r3, #254	; 0xfe
 800a9cc:	d9eb      	bls.n	800a9a6 <clear_lock+0xe>
	}
}
 800a9ce:	bf00      	nop
 800a9d0:	bf00      	nop
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	20000354 	.word	0x20000354

0800a9e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	78db      	ldrb	r3, [r3, #3]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d034      	beq.n	800aa5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	7858      	ldrb	r0, [r3, #1]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800aa04:	2301      	movs	r3, #1
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	f7ff fbfc 	bl	800a204 <disk_write>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <sync_window+0x38>
			res = FR_DISK_ERR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	73fb      	strb	r3, [r7, #15]
 800aa16:	e022      	b.n	800aa5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	1ad2      	subs	r2, r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d217      	bcs.n	800aa5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	789b      	ldrb	r3, [r3, #2]
 800aa32:	613b      	str	r3, [r7, #16]
 800aa34:	e010      	b.n	800aa58 <sync_window+0x78>
					wsect += fs->fsize;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	7858      	ldrb	r0, [r3, #1]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	f7ff fbd9 	bl	800a204 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	3b01      	subs	r3, #1
 800aa56:	613b      	str	r3, [r7, #16]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d8eb      	bhi.n	800aa36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d01b      	beq.n	800aab8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff ffad 	bl	800a9e0 <sync_window>
 800aa86:	4603      	mov	r3, r0
 800aa88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d113      	bne.n	800aab8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	7858      	ldrb	r0, [r3, #1]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	f7ff fb91 	bl	800a1c4 <disk_read>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aaa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
	return res;
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff ff87 	bl	800a9e0 <sync_window>
 800aad2:	4603      	mov	r3, r0
 800aad4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d158      	bne.n	800ab8e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d148      	bne.n	800ab76 <sync_fs+0xb2>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	791b      	ldrb	r3, [r3, #4]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d144      	bne.n	800ab76 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3348      	adds	r3, #72	; 0x48
 800aaf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7ff fda8 	bl	800a64c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	3348      	adds	r3, #72	; 0x48
 800ab00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab04:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff fcaf 	bl	800a46c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	3348      	adds	r3, #72	; 0x48
 800ab12:	4921      	ldr	r1, [pc, #132]	; (800ab98 <sync_fs+0xd4>)
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fcc4 	bl	800a4a2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3348      	adds	r3, #72	; 0x48
 800ab1e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ab22:	491e      	ldr	r1, [pc, #120]	; (800ab9c <sync_fs+0xd8>)
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff fcbc 	bl	800a4a2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3348      	adds	r3, #72	; 0x48
 800ab2e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	4619      	mov	r1, r3
 800ab38:	4610      	mov	r0, r2
 800ab3a:	f7ff fcb2 	bl	800a4a2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3348      	adds	r3, #72	; 0x48
 800ab42:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f7ff fca8 	bl	800a4a2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	645a      	str	r2, [r3, #68]	; 0x44
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	7858      	ldrb	r0, [r3, #1]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	f7ff fb4a 	bl	800a204 <disk_write>
			fs->fsi_flag = 0;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff fb60 	bl	800a244 <disk_ioctl>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <sync_fs+0xca>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	41615252 	.word	0x41615252
 800ab9c:	61417272 	.word	0x61417272

0800aba0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	3b02      	subs	r3, #2
 800abae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	3b02      	subs	r3, #2
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d301      	bcc.n	800abc0 <clust2sect+0x20>
 800abbc:	2300      	movs	r3, #0
 800abbe:	e008      	b.n	800abd2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	895b      	ldrh	r3, [r3, #10]
 800abc4:	461a      	mov	r2, r3
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	fb03 f202 	mul.w	r2, r3, r2
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	4413      	add	r3, r2
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
	...

0800abe0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	6809      	ldr	r1, [r1, #0]
 800abee:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	2901      	cmp	r1, #1
 800abf4:	d904      	bls.n	800ac00 <get_fat+0x20>
 800abf6:	69b9      	ldr	r1, [r7, #24]
 800abf8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800abfa:	6838      	ldr	r0, [r7, #0]
 800abfc:	4288      	cmp	r0, r1
 800abfe:	d302      	bcc.n	800ac06 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ac00:	2301      	movs	r3, #1
 800ac02:	61fb      	str	r3, [r7, #28]
 800ac04:	e102      	b.n	800ae0c <get_fat+0x22c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ac06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ac0a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800ac0c:	69b9      	ldr	r1, [r7, #24]
 800ac0e:	7809      	ldrb	r1, [r1, #0]
 800ac10:	3901      	subs	r1, #1
 800ac12:	2903      	cmp	r1, #3
 800ac14:	f200 80ee 	bhi.w	800adf4 <get_fat+0x214>
 800ac18:	a001      	add	r0, pc, #4	; (adr r0, 800ac20 <get_fat+0x40>)
 800ac1a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ac1e:	bf00      	nop
 800ac20:	0800ac31 	.word	0x0800ac31
 800ac24:	0800acb9 	.word	0x0800acb9
 800ac28:	0800acef 	.word	0x0800acef
 800ac2c:	0800ad27 	.word	0x0800ad27
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	085b      	lsrs	r3, r3, #1
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	0a5b      	lsrs	r3, r3, #9
 800ac46:	4413      	add	r3, r2
 800ac48:	4619      	mov	r1, r3
 800ac4a:	69b8      	ldr	r0, [r7, #24]
 800ac4c:	f7ff ff0c 	bl	800aa68 <move_window>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f040 80d1 	bne.w	800adfa <get_fat+0x21a>
			wc = fs->win[bc++ % SS(fs)];
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	60fa      	str	r2, [r7, #12]
 800ac5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac62:	69ba      	ldr	r2, [r7, #24]
 800ac64:	4413      	add	r3, r2
 800ac66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ac6a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	0a5b      	lsrs	r3, r3, #9
 800ac74:	4413      	add	r3, r2
 800ac76:	4619      	mov	r1, r3
 800ac78:	69b8      	ldr	r0, [r7, #24]
 800ac7a:	f7ff fef5 	bl	800aa68 <move_window>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f040 80bc 	bne.w	800adfe <get_fat+0x21e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8c:	69ba      	ldr	r2, [r7, #24]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ac94:	021b      	lsls	r3, r3, #8
 800ac96:	461a      	mov	r2, r3
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <get_fat+0xce>
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	091b      	lsrs	r3, r3, #4
 800acac:	e002      	b.n	800acb4 <get_fat+0xd4>
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acb4:	61fb      	str	r3, [r7, #28]
			break;
 800acb6:	e0a9      	b.n	800ae0c <get_fat+0x22c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	0a1b      	lsrs	r3, r3, #8
 800acc0:	4413      	add	r3, r2
 800acc2:	4619      	mov	r1, r3
 800acc4:	69b8      	ldr	r0, [r7, #24]
 800acc6:	f7ff fecf 	bl	800aa68 <move_window>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	f040 8098 	bne.w	800ae02 <get_fat+0x222>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	005b      	lsls	r3, r3, #1
 800acdc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ace0:	4413      	add	r3, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff facc 	bl	800a280 <ld_word>
 800ace8:	4603      	mov	r3, r0
 800acea:	61fb      	str	r3, [r7, #28]
			break;
 800acec:	e08e      	b.n	800ae0c <get_fat+0x22c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	09db      	lsrs	r3, r3, #7
 800acf6:	4413      	add	r3, r2
 800acf8:	4619      	mov	r1, r3
 800acfa:	69b8      	ldr	r0, [r7, #24]
 800acfc:	f7ff feb4 	bl	800aa68 <move_window>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d17f      	bne.n	800ae06 <get_fat+0x226>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ad14:	4413      	add	r3, r2
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7ff faca 	bl	800a2b0 <ld_dword>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad22:	61fb      	str	r3, [r7, #28]
			break;
 800ad24:	e072      	b.n	800ae0c <get_fat+0x22c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800ad2c:	4301      	orrs	r1, r0
 800ad2e:	d061      	beq.n	800adf4 <get_fat+0x214>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ad30:	6879      	ldr	r1, [r7, #4]
 800ad32:	6889      	ldr	r1, [r1, #8]
 800ad34:	6838      	ldr	r0, [r7, #0]
 800ad36:	1a41      	subs	r1, r0, r1
 800ad38:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800ad40:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
 800ad44:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 800ad48:	f04f 0000 	mov.w	r0, #0
 800ad4c:	f04f 0100 	mov.w	r1, #0
 800ad50:	0a50      	lsrs	r0, r2, #9
 800ad52:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ad56:	0a59      	lsrs	r1, r3, #9
 800ad58:	4602      	mov	r2, r0
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	895b      	ldrh	r3, [r3, #10]
 800ad5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad62:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	79db      	ldrb	r3, [r3, #7]
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d10e      	bne.n	800ad8a <get_fat+0x1aa>
					if (cofs <= clen) {
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d80a      	bhi.n	800ad8a <get_fat+0x1aa>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d002      	beq.n	800ad82 <get_fat+0x1a2>
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	e001      	b.n	800ad86 <get_fat+0x1a6>
 800ad82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ad86:	61fb      	str	r3, [r7, #28]
						break;
 800ad88:	e040      	b.n	800ae0c <get_fat+0x22c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	79db      	ldrb	r3, [r3, #7]
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d108      	bne.n	800ada4 <get_fat+0x1c4>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d203      	bcs.n	800ada4 <get_fat+0x1c4>
					val = clst + 1; 	/* Generate the value */
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	61fb      	str	r3, [r7, #28]
					break;
 800ada2:	e033      	b.n	800ae0c <get_fat+0x22c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	79db      	ldrb	r3, [r3, #7]
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d023      	beq.n	800adf4 <get_fat+0x214>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <get_fat+0x1dc>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800adb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800adb8:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800adba:	e027      	b.n	800ae0c <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	09db      	lsrs	r3, r3, #7
 800adc4:	4413      	add	r3, r2
 800adc6:	4619      	mov	r1, r3
 800adc8:	69b8      	ldr	r0, [r7, #24]
 800adca:	f7ff fe4d 	bl	800aa68 <move_window>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d11a      	bne.n	800ae0a <get_fat+0x22a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ade2:	4413      	add	r3, r2
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7ff fa63 	bl	800a2b0 <ld_dword>
 800adea:	4603      	mov	r3, r0
 800adec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800adf0:	61fb      	str	r3, [r7, #28]
					break;
 800adf2:	e00b      	b.n	800ae0c <get_fat+0x22c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800adf4:	2301      	movs	r3, #1
 800adf6:	61fb      	str	r3, [r7, #28]
 800adf8:	e008      	b.n	800ae0c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800adfa:	bf00      	nop
 800adfc:	e006      	b.n	800ae0c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800adfe:	bf00      	nop
 800ae00:	e004      	b.n	800ae0c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae02:	bf00      	nop
 800ae04:	e002      	b.n	800ae0c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae06:	bf00      	nop
 800ae08:	e000      	b.n	800ae0c <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae0a:	bf00      	nop
		}
	}

	return val;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop

0800ae18 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ae18:	b590      	push	{r4, r7, lr}
 800ae1a:	b089      	sub	sp, #36	; 0x24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ae24:	2302      	movs	r3, #2
 800ae26:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	f240 80d6 	bls.w	800afdc <put_fat+0x1c4>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	f080 80d0 	bcs.w	800afdc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b04      	cmp	r3, #4
 800ae42:	f300 80d4 	bgt.w	800afee <put_fat+0x1d6>
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	f280 8093 	bge.w	800af72 <put_fat+0x15a>
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d002      	beq.n	800ae56 <put_fat+0x3e>
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d06e      	beq.n	800af32 <put_fat+0x11a>
 800ae54:	e0cb      	b.n	800afee <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	085b      	lsrs	r3, r3, #1
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	4413      	add	r3, r2
 800ae62:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	0a5b      	lsrs	r3, r3, #9
 800ae6c:	4413      	add	r3, r2
 800ae6e:	4619      	mov	r1, r3
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f7ff fdf9 	bl	800aa68 <move_window>
 800ae76:	4603      	mov	r3, r0
 800ae78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae7a:	7ffb      	ldrb	r3, [r7, #31]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f040 80af 	bne.w	800afe0 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	1c59      	adds	r1, r3, #1
 800ae8c:	61b9      	str	r1, [r7, #24]
 800ae8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae92:	4413      	add	r3, r2
 800ae94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00d      	beq.n	800aebc <put_fat+0xa4>
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	b25b      	sxtb	r3, r3
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	b25a      	sxtb	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	011b      	lsls	r3, r3, #4
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	b25b      	sxtb	r3, r3
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	e001      	b.n	800aec0 <put_fat+0xa8>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	697a      	ldr	r2, [r7, #20]
 800aec2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2201      	movs	r2, #1
 800aec8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	0a5b      	lsrs	r3, r3, #9
 800aed2:	4413      	add	r3, r2
 800aed4:	4619      	mov	r1, r3
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7ff fdc6 	bl	800aa68 <move_window>
 800aedc:	4603      	mov	r3, r0
 800aede:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aee0:	7ffb      	ldrb	r3, [r7, #31]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d17e      	bne.n	800afe4 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef2:	4413      	add	r3, r2
 800aef4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <put_fat+0xf0>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	091b      	lsrs	r3, r3, #4
 800af04:	b2db      	uxtb	r3, r3
 800af06:	e00e      	b.n	800af26 <put_fat+0x10e>
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	b25b      	sxtb	r3, r3
 800af0e:	f023 030f 	bic.w	r3, r3, #15
 800af12:	b25a      	sxtb	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	0a1b      	lsrs	r3, r3, #8
 800af18:	b25b      	sxtb	r3, r3
 800af1a:	f003 030f 	and.w	r3, r3, #15
 800af1e:	b25b      	sxtb	r3, r3
 800af20:	4313      	orrs	r3, r2
 800af22:	b25b      	sxtb	r3, r3
 800af24:	b2db      	uxtb	r3, r3
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2201      	movs	r2, #1
 800af2e:	70da      	strb	r2, [r3, #3]
			break;
 800af30:	e05d      	b.n	800afee <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	0a1b      	lsrs	r3, r3, #8
 800af3a:	4413      	add	r3, r2
 800af3c:	4619      	mov	r1, r3
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7ff fd92 	bl	800aa68 <move_window>
 800af44:	4603      	mov	r3, r0
 800af46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af48:	7ffb      	ldrb	r3, [r7, #31]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d14c      	bne.n	800afe8 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800af5c:	4413      	add	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	b292      	uxth	r2, r2
 800af62:	4611      	mov	r1, r2
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff fa81 	bl	800a46c <st_word>
			fs->wflag = 1;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	70da      	strb	r2, [r3, #3]
			break;
 800af70:	e03d      	b.n	800afee <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	09db      	lsrs	r3, r3, #7
 800af7a:	4413      	add	r3, r2
 800af7c:	4619      	mov	r1, r3
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7ff fd72 	bl	800aa68 <move_window>
 800af84:	4603      	mov	r3, r0
 800af86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af88:	7ffb      	ldrb	r3, [r7, #31]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d12e      	bne.n	800afec <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b04      	cmp	r3, #4
 800af94:	d012      	beq.n	800afbc <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800afaa:	4413      	add	r3, r2
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff f97f 	bl	800a2b0 <ld_dword>
 800afb2:	4603      	mov	r3, r0
 800afb4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800afb8:	4323      	orrs	r3, r4
 800afba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800afca:	4413      	add	r3, r2
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff fa67 	bl	800a4a2 <st_dword>
			fs->wflag = 1;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2201      	movs	r2, #1
 800afd8:	70da      	strb	r2, [r3, #3]
			break;
 800afda:	e008      	b.n	800afee <put_fat+0x1d6>
		}
	}
 800afdc:	bf00      	nop
 800afde:	e006      	b.n	800afee <put_fat+0x1d6>
			if (res != FR_OK) break;
 800afe0:	bf00      	nop
 800afe2:	e004      	b.n	800afee <put_fat+0x1d6>
			if (res != FR_OK) break;
 800afe4:	bf00      	nop
 800afe6:	e002      	b.n	800afee <put_fat+0x1d6>
			if (res != FR_OK) break;
 800afe8:	bf00      	nop
 800afea:	e000      	b.n	800afee <put_fat+0x1d6>
			if (res != FR_OK) break;
 800afec:	bf00      	nop
	return res;
 800afee:	7ffb      	ldrb	r3, [r7, #31]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3724      	adds	r7, #36	; 0x24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd90      	pop	{r4, r7, pc}

0800aff8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08a      	sub	sp, #40	; 0x28
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	3b02      	subs	r3, #2
 800b008:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00e:	3b02      	subs	r3, #2
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	429a      	cmp	r2, r3
 800b014:	d301      	bcc.n	800b01a <find_bitmap+0x22>
 800b016:	2300      	movs	r3, #0
 800b018:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	61fb      	str	r3, [r7, #28]
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	61bb      	str	r3, [r7, #24]
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	0b1b      	lsrs	r3, r3, #12
 800b02e:	4413      	add	r3, r2
 800b030:	4619      	mov	r1, r3
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f7ff fd18 	bl	800aa68 <move_window>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <find_bitmap+0x4c>
 800b03e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b042:	e051      	b.n	800b0e8 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	08db      	lsrs	r3, r3, #3
 800b048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04c:	623b      	str	r3, [r7, #32]
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	f003 0307 	and.w	r3, r3, #7
 800b054:	2201      	movs	r2, #1
 800b056:	fa02 f303 	lsl.w	r3, r2, r3
 800b05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800b05e:	68fa      	ldr	r2, [r7, #12]
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	4413      	add	r3, r2
 800b064:	3348      	adds	r3, #72	; 0x48
 800b066:	781a      	ldrb	r2, [r3, #0]
 800b068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b06c:	4013      	ands	r3, r2
 800b06e:	74fb      	strb	r3, [r7, #19]
 800b070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b074:	005b      	lsls	r3, r3, #1
 800b076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	3301      	adds	r3, #1
 800b07e:	61fb      	str	r3, [r7, #28]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	3b02      	subs	r3, #2
 800b086:	69fa      	ldr	r2, [r7, #28]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d307      	bcc.n	800b09c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800b08c:	2300      	movs	r3, #0
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	2300      	movs	r3, #0
 800b092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b09a:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800b09c:	7cfb      	ldrb	r3, [r7, #19]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d109      	bne.n	800b0b6 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d106      	bne.n	800b0be <find_bitmap+0xc6>
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	3302      	adds	r3, #2
 800b0b4:	e018      	b.n	800b0e8 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	61bb      	str	r3, [r7, #24]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800b0be:	69fa      	ldr	r2, [r7, #28]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d101      	bne.n	800b0ca <find_bitmap+0xd2>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	e00e      	b.n	800b0e8 <find_bitmap+0xf0>
			} while (bm);
 800b0ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1c5      	bne.n	800b05e <find_bitmap+0x66>
			bm = 1;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800b0d8:	6a3b      	ldr	r3, [r7, #32]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	623b      	str	r3, [r7, #32]
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0e4:	d3bb      	bcc.n	800b05e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b0e6:	e79e      	b.n	800b026 <find_bitmap+0x2e>
	}
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3728      	adds	r7, #40	; 0x28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	3b02      	subs	r3, #2
 800b102:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	0b1b      	lsrs	r3, r3, #12
 800b10c:	4413      	add	r3, r2
 800b10e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	08db      	lsrs	r3, r3, #3
 800b114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b118:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	f003 0307 	and.w	r3, r3, #7
 800b120:	2201      	movs	r2, #1
 800b122:	fa02 f303 	lsl.w	r3, r2, r3
 800b126:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	1c5a      	adds	r2, r3, #1
 800b12c:	617a      	str	r2, [r7, #20]
 800b12e:	4619      	mov	r1, r3
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff fc99 	bl	800aa68 <move_window>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <change_bitmap+0x50>
 800b13c:	2301      	movs	r3, #1
 800b13e:	e03d      	b.n	800b1bc <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	4413      	add	r3, r2
 800b146:	3348      	adds	r3, #72	; 0x48
 800b148:	781a      	ldrb	r2, [r3, #0]
 800b14a:	7ffb      	ldrb	r3, [r7, #31]
 800b14c:	4013      	ands	r3, r2
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b00      	cmp	r3, #0
 800b152:	bf14      	ite	ne
 800b154:	2301      	movne	r3, #1
 800b156:	2300      	moveq	r3, #0
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	461a      	mov	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	4293      	cmp	r3, r2
 800b160:	d101      	bne.n	800b166 <change_bitmap+0x76>
 800b162:	2302      	movs	r3, #2
 800b164:	e02a      	b.n	800b1bc <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	4413      	add	r3, r2
 800b16c:	3348      	adds	r3, #72	; 0x48
 800b16e:	781a      	ldrb	r2, [r3, #0]
 800b170:	7ffb      	ldrb	r3, [r7, #31]
 800b172:	4053      	eors	r3, r2
 800b174:	b2d9      	uxtb	r1, r3
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	4413      	add	r3, r2
 800b17c:	3348      	adds	r3, #72	; 0x48
 800b17e:	460a      	mov	r2, r1
 800b180:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	607b      	str	r3, [r7, #4]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <change_bitmap+0xa8>
 800b194:	2300      	movs	r3, #0
 800b196:	e011      	b.n	800b1bc <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800b198:	7ffb      	ldrb	r3, [r7, #31]
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	77fb      	strb	r3, [r7, #31]
 800b19e:	7ffb      	ldrb	r3, [r7, #31]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1cd      	bne.n	800b140 <change_bitmap+0x50>
			bm = 1;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	61bb      	str	r3, [r7, #24]
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1b4:	d3c4      	bcc.n	800b140 <change_bitmap+0x50>
		i = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b1ba:	e7b5      	b.n	800b128 <change_bitmap+0x38>
	}
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3720      	adds	r7, #32
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	79db      	ldrb	r3, [r3, #7]
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d121      	bne.n	800b218 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	617b      	str	r3, [r7, #20]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	613b      	str	r3, [r7, #16]
 800b1e0:	e014      	b.n	800b20c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6818      	ldr	r0, [r3, #0]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	6979      	ldr	r1, [r7, #20]
 800b1ee:	f7ff fe13 	bl	800ae18 <put_fat>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <fill_first_frag+0x3c>
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	e00c      	b.n	800b21a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	3301      	adds	r3, #1
 800b204:	617b      	str	r3, [r7, #20]
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	3b01      	subs	r3, #1
 800b20a:	613b      	str	r3, [r7, #16]
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1e7      	bne.n	800b1e2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3718      	adds	r7, #24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b086      	sub	sp, #24
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b22e:	e020      	b.n	800b272 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6818      	ldr	r0, [r3, #0]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	1c59      	adds	r1, r3, #1
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d905      	bls.n	800b252 <fill_last_frag+0x30>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	3302      	adds	r3, #2
 800b250:	e000      	b.n	800b254 <fill_last_frag+0x32>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	461a      	mov	r2, r3
 800b256:	f7ff fddf 	bl	800ae18 <put_fat>
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <fill_last_frag+0x46>
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	e009      	b.n	800b27c <fill_last_frag+0x5a>
		obj->n_frag--;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	69db      	ldr	r3, [r3, #28]
 800b26c:	1e5a      	subs	r2, r3, #1
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	69db      	ldr	r3, [r3, #28]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1da      	bne.n	800b230 <fill_last_frag+0xe>
	}
	return FR_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08a      	sub	sp, #40	; 0x28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d904      	bls.n	800b2b2 <remove_chain+0x2e>
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d301      	bcc.n	800b2b6 <remove_chain+0x32>
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	e096      	b.n	800b3e4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d014      	beq.n	800b2e6 <remove_chain+0x62>
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2b04      	cmp	r3, #4
 800b2c2:	d103      	bne.n	800b2cc <remove_chain+0x48>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	79db      	ldrb	r3, [r3, #7]
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d00c      	beq.n	800b2e6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b2cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	69b8      	ldr	r0, [r7, #24]
 800b2d4:	f7ff fda0 	bl	800ae18 <put_fat>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b2dc:	7ffb      	ldrb	r3, [r7, #31]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <remove_chain+0x62>
 800b2e2:	7ffb      	ldrb	r3, [r7, #31]
 800b2e4:	e07e      	b.n	800b3e4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b2e6:	68b9      	ldr	r1, [r7, #8]
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff fc79 	bl	800abe0 <get_fat>
 800b2ee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d055      	beq.n	800b3a2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d101      	bne.n	800b300 <remove_chain+0x7c>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e071      	b.n	800b3e4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b306:	d101      	bne.n	800b30c <remove_chain+0x88>
 800b308:	2301      	movs	r3, #1
 800b30a:	e06b      	b.n	800b3e4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b04      	cmp	r3, #4
 800b312:	d00b      	beq.n	800b32c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b314:	2200      	movs	r2, #0
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	69b8      	ldr	r0, [r7, #24]
 800b31a:	f7ff fd7d 	bl	800ae18 <put_fat>
 800b31e:	4603      	mov	r3, r0
 800b320:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b322:	7ffb      	ldrb	r3, [r7, #31]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <remove_chain+0xa8>
 800b328:	7ffb      	ldrb	r3, [r7, #31]
 800b32a:	e05b      	b.n	800b3e4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	699a      	ldr	r2, [r3, #24]
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b334:	3b02      	subs	r3, #2
 800b336:	429a      	cmp	r2, r3
 800b338:	d20b      	bcs.n	800b352 <remove_chain+0xce>
			fs->free_clst++;
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	791b      	ldrb	r3, [r3, #4]
 800b348:	f043 0301 	orr.w	r3, r3, #1
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	3301      	adds	r3, #1
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d102      	bne.n	800b362 <remove_chain+0xde>
			ecl = nxt;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	623b      	str	r3, [r7, #32]
 800b360:	e017      	b.n	800b392 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	2b04      	cmp	r3, #4
 800b368:	d10f      	bne.n	800b38a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b36a:	6a3a      	ldr	r2, [r7, #32]
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	2300      	movs	r3, #0
 800b374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b376:	69b8      	ldr	r0, [r7, #24]
 800b378:	f7ff feba 	bl	800b0f0 <change_bitmap>
 800b37c:	4603      	mov	r3, r0
 800b37e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b380:	7ffb      	ldrb	r3, [r7, #31]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <remove_chain+0x106>
 800b386:	7ffb      	ldrb	r3, [r7, #31]
 800b388:	e02c      	b.n	800b3e4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	623b      	str	r3, [r7, #32]
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d3a2      	bcc.n	800b2e6 <remove_chain+0x62>
 800b3a0:	e000      	b.n	800b3a4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b3a2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d11a      	bne.n	800b3e2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d103      	bne.n	800b3ba <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	71da      	strb	r2, [r3, #7]
 800b3b8:	e013      	b.n	800b3e2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	79db      	ldrb	r3, [r3, #7]
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d10f      	bne.n	800b3e2 <remove_chain+0x15e>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d30a      	bcc.n	800b3e2 <remove_chain+0x15e>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	689a      	ldr	r2, [r3, #8]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d802      	bhi.n	800b3e2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3728      	adds	r7, #40	; 0x28
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b088      	sub	sp, #32
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10d      	bne.n	800b41e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d004      	beq.n	800b418 <create_chain+0x2c>
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b412:	69ba      	ldr	r2, [r7, #24]
 800b414:	429a      	cmp	r2, r3
 800b416:	d31b      	bcc.n	800b450 <create_chain+0x64>
 800b418:	2301      	movs	r3, #1
 800b41a:	61bb      	str	r3, [r7, #24]
 800b41c:	e018      	b.n	800b450 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff fbdd 	bl	800abe0 <get_fat>
 800b426:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d801      	bhi.n	800b432 <create_chain+0x46>
 800b42e:	2301      	movs	r3, #1
 800b430:	e0d9      	b.n	800b5e6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b438:	d101      	bne.n	800b43e <create_chain+0x52>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	e0d3      	b.n	800b5e6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	429a      	cmp	r2, r3
 800b446:	d201      	bcs.n	800b44c <create_chain+0x60>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	e0cc      	b.n	800b5e6 <create_chain+0x1fa>
		scl = clst;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b04      	cmp	r3, #4
 800b456:	d164      	bne.n	800b522 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800b458:	2201      	movs	r2, #1
 800b45a:	69b9      	ldr	r1, [r7, #24]
 800b45c:	6938      	ldr	r0, [r7, #16]
 800b45e:	f7ff fdcb 	bl	800aff8 <find_bitmap>
 800b462:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <create_chain+0x86>
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b470:	d101      	bne.n	800b476 <create_chain+0x8a>
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	e0b7      	b.n	800b5e6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800b476:	2301      	movs	r3, #1
 800b478:	2201      	movs	r2, #1
 800b47a:	69f9      	ldr	r1, [r7, #28]
 800b47c:	6938      	ldr	r0, [r7, #16]
 800b47e:	f7ff fe37 	bl	800b0f0 <change_bitmap>
 800b482:	4603      	mov	r3, r0
 800b484:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d101      	bne.n	800b490 <create_chain+0xa4>
 800b48c:	2301      	movs	r3, #1
 800b48e:	e0aa      	b.n	800b5e6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d102      	bne.n	800b49c <create_chain+0xb0>
 800b496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b49a:	e0a4      	b.n	800b5e6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d103      	bne.n	800b4aa <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	71da      	strb	r2, [r3, #7]
 800b4a8:	e011      	b.n	800b4ce <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	79db      	ldrb	r3, [r3, #7]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d10d      	bne.n	800b4ce <create_chain+0xe2>
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d008      	beq.n	800b4ce <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	1ad2      	subs	r2, r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2203      	movs	r2, #3
 800b4cc:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	79db      	ldrb	r3, [r3, #7]
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d064      	beq.n	800b5a0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	69fa      	ldr	r2, [r7, #28]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d10b      	bne.n	800b4f8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d003      	beq.n	800b4f0 <create_chain+0x104>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	e000      	b.n	800b4f2 <create_chain+0x106>
 800b4f0:	2302      	movs	r3, #2
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	61d3      	str	r3, [r2, #28]
 800b4f6:	e053      	b.n	800b5a0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <create_chain+0x11a>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff fe89 	bl	800b222 <fill_last_frag>
 800b510:	4603      	mov	r3, r0
 800b512:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d142      	bne.n	800b5a0 <create_chain+0x1b4>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	61da      	str	r2, [r3, #28]
 800b520:	e03e      	b.n	800b5a0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	3301      	adds	r3, #1
 800b52a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b530:	69fa      	ldr	r2, [r7, #28]
 800b532:	429a      	cmp	r2, r3
 800b534:	d307      	bcc.n	800b546 <create_chain+0x15a>
				ncl = 2;
 800b536:	2302      	movs	r3, #2
 800b538:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b53a:	69fa      	ldr	r2, [r7, #28]
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d901      	bls.n	800b546 <create_chain+0x15a>
 800b542:	2300      	movs	r3, #0
 800b544:	e04f      	b.n	800b5e6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b546:	69f9      	ldr	r1, [r7, #28]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff fb49 	bl	800abe0 <get_fat>
 800b54e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00e      	beq.n	800b574 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d003      	beq.n	800b564 <create_chain+0x178>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b562:	d101      	bne.n	800b568 <create_chain+0x17c>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	e03e      	b.n	800b5e6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b568:	69fa      	ldr	r2, [r7, #28]
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d1da      	bne.n	800b526 <create_chain+0x13a>
 800b570:	2300      	movs	r3, #0
 800b572:	e038      	b.n	800b5e6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b574:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b57a:	69f9      	ldr	r1, [r7, #28]
 800b57c:	6938      	ldr	r0, [r7, #16]
 800b57e:	f7ff fc4b 	bl	800ae18 <put_fat>
 800b582:	4603      	mov	r3, r0
 800b584:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b586:	7dfb      	ldrb	r3, [r7, #23]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d109      	bne.n	800b5a0 <create_chain+0x1b4>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d006      	beq.n	800b5a0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b592:	69fa      	ldr	r2, [r7, #28]
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	6938      	ldr	r0, [r7, #16]
 800b598:	f7ff fc3e 	bl	800ae18 <put_fat>
 800b59c:	4603      	mov	r3, r0
 800b59e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d116      	bne.n	800b5d4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	69fa      	ldr	r2, [r7, #28]
 800b5aa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	699a      	ldr	r2, [r3, #24]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b4:	3b02      	subs	r3, #2
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d804      	bhi.n	800b5c4 <create_chain+0x1d8>
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	1e5a      	subs	r2, r3, #1
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	791b      	ldrb	r3, [r3, #4]
 800b5c8:	f043 0301 	orr.w	r3, r3, #1
 800b5cc:	b2da      	uxtb	r2, r3
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	711a      	strb	r2, [r3, #4]
 800b5d2:	e007      	b.n	800b5e4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d102      	bne.n	800b5e0 <create_chain+0x1f4>
 800b5da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5de:	e000      	b.n	800b5e2 <create_chain+0x1f6>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b5e4:	69fb      	ldr	r3, [r7, #28]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3720      	adds	r7, #32
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b088      	sub	sp, #32
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	60f8      	str	r0, [r7, #12]
 800b5f6:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b604:	3304      	adds	r3, #4
 800b606:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b60c:	f04f 0000 	mov.w	r0, #0
 800b610:	f04f 0100 	mov.w	r1, #0
 800b614:	0a50      	lsrs	r0, r2, #9
 800b616:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b61a:	0a59      	lsrs	r1, r3, #9
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	895b      	ldrh	r3, [r3, #10]
 800b620:	b29a      	uxth	r2, r3
 800b622:	f04f 0300 	mov.w	r3, #0
 800b626:	f7f4 ff13 	bl	8000450 <__aeabi_uldivmod>
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	4613      	mov	r3, r2
 800b630:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	1d1a      	adds	r2, r3, #4
 800b636:	61ba      	str	r2, [r7, #24]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <clmt_clust+0x58>
 800b642:	2300      	movs	r3, #0
 800b644:	e010      	b.n	800b668 <clmt_clust+0x7a>
		if (cl < ncl) break;	/* In this fragment? */
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d307      	bcc.n	800b65e <clmt_clust+0x70>
		cl -= ncl; tbl++;		/* Next fragment */
 800b64e:	69fa      	ldr	r2, [r7, #28]
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	61fb      	str	r3, [r7, #28]
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	3304      	adds	r3, #4
 800b65a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b65c:	e7e9      	b.n	800b632 <clmt_clust+0x44>
		if (cl < ncl) break;	/* In this fragment? */
 800b65e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	4413      	add	r3, r2
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3720      	adds	r7, #32
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b04      	cmp	r3, #4
 800b686:	d102      	bne.n	800b68e <dir_sdi+0x1e>
 800b688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b68c:	e001      	b.n	800b692 <dir_sdi+0x22>
 800b68e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	429a      	cmp	r2, r3
 800b696:	d904      	bls.n	800b6a2 <dir_sdi+0x32>
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	f003 031f 	and.w	r3, r3, #31
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	e066      	b.n	800b774 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d109      	bne.n	800b6cc <dir_sdi+0x5c>
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d905      	bls.n	800b6cc <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10c      	bne.n	800b6ec <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	095b      	lsrs	r3, r3, #5
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	8912      	ldrh	r2, [r2, #8]
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d301      	bcc.n	800b6e2 <dir_sdi+0x72>
 800b6de:	2302      	movs	r3, #2
 800b6e0:	e048      	b.n	800b774 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	639a      	str	r2, [r3, #56]	; 0x38
 800b6ea:	e029      	b.n	800b740 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	895b      	ldrh	r3, [r3, #10]
 800b6f0:	025b      	lsls	r3, r3, #9
 800b6f2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b6f4:	e019      	b.n	800b72a <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6979      	ldr	r1, [r7, #20]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff fa70 	bl	800abe0 <get_fat>
 800b700:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b708:	d101      	bne.n	800b70e <dir_sdi+0x9e>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e032      	b.n	800b774 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d904      	bls.n	800b71e <dir_sdi+0xae>
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d301      	bcc.n	800b722 <dir_sdi+0xb2>
 800b71e:	2302      	movs	r3, #2
 800b720:	e028      	b.n	800b774 <dir_sdi+0x104>
			ofs -= csz;
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d2e1      	bcs.n	800b6f6 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800b732:	6979      	ldr	r1, [r7, #20]
 800b734:	6938      	ldr	r0, [r7, #16]
 800b736:	f7ff fa33 	bl	800aba0 <clust2sect>
 800b73a:	4602      	mov	r2, r0
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <dir_sdi+0xe2>
 800b74e:	2302      	movs	r3, #2
 800b750:	e010      	b.n	800b774 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	0a5b      	lsrs	r3, r3, #9
 800b75a:	441a      	add	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76c:	441a      	add	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b790:	3320      	adds	r3, #32
 800b792:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00b      	beq.n	800b7b4 <dir_next+0x38>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b04      	cmp	r3, #4
 800b7a2:	d102      	bne.n	800b7aa <dir_next+0x2e>
 800b7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a8:	e001      	b.n	800b7ae <dir_next+0x32>
 800b7aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d801      	bhi.n	800b7b8 <dir_next+0x3c>
 800b7b4:	2304      	movs	r3, #4
 800b7b6:	e0b2      	b.n	800b91e <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f040 80a0 	bne.w	800b904 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10b      	bne.n	800b7ee <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	095b      	lsrs	r3, r3, #5
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	8912      	ldrh	r2, [r2, #8]
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	f0c0 8090 	bcc.w	800b904 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	639a      	str	r2, [r3, #56]	; 0x38
 800b7ea:	2304      	movs	r3, #4
 800b7ec:	e097      	b.n	800b91e <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	0a5b      	lsrs	r3, r3, #9
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	8952      	ldrh	r2, [r2, #10]
 800b7f6:	3a01      	subs	r2, #1
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f040 8082 	bne.w	800b904 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b806:	4619      	mov	r1, r3
 800b808:	4610      	mov	r0, r2
 800b80a:	f7ff f9e9 	bl	800abe0 <get_fat>
 800b80e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d801      	bhi.n	800b81a <dir_next+0x9e>
 800b816:	2302      	movs	r3, #2
 800b818:	e081      	b.n	800b91e <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b820:	d101      	bne.n	800b826 <dir_next+0xaa>
 800b822:	2301      	movs	r3, #1
 800b824:	e07b      	b.n	800b91e <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d35f      	bcc.n	800b8f0 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d104      	bne.n	800b840 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	639a      	str	r2, [r3, #56]	; 0x38
 800b83c:	2304      	movs	r3, #4
 800b83e:	e06e      	b.n	800b91e <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7ff fdcf 	bl	800b3ec <create_chain>
 800b84e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <dir_next+0xde>
 800b856:	2307      	movs	r3, #7
 800b858:	e061      	b.n	800b91e <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d101      	bne.n	800b864 <dir_next+0xe8>
 800b860:	2302      	movs	r3, #2
 800b862:	e05c      	b.n	800b91e <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b86a:	d101      	bne.n	800b870 <dir_next+0xf4>
 800b86c:	2301      	movs	r3, #1
 800b86e:	e056      	b.n	800b91e <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	79db      	ldrb	r3, [r3, #7]
 800b874:	f043 0304 	orr.w	r3, r3, #4
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff f8ae 	bl	800a9e0 <sync_window>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <dir_next+0x112>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e047      	b.n	800b91e <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3348      	adds	r3, #72	; 0x48
 800b892:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b896:	2100      	movs	r1, #0
 800b898:	4618      	mov	r0, r3
 800b89a:	f7fe fed7 	bl	800a64c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b89e:	2300      	movs	r3, #0
 800b8a0:	613b      	str	r3, [r7, #16]
 800b8a2:	6979      	ldr	r1, [r7, #20]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7ff f97b 	bl	800aba0 <clust2sect>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	645a      	str	r2, [r3, #68]	; 0x44
 800b8b0:	e012      	b.n	800b8d8 <dir_next+0x15c>
						fs->wflag = 1;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f7ff f891 	bl	800a9e0 <sync_window>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <dir_next+0x14c>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e02a      	b.n	800b91e <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	613b      	str	r3, [r7, #16]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	645a      	str	r2, [r3, #68]	; 0x44
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	895b      	ldrh	r3, [r3, #10]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d3e6      	bcc.n	800b8b2 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	1ad2      	subs	r2, r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	645a      	str	r2, [r3, #68]	; 0x44
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b8f6:	6979      	ldr	r1, [r7, #20]
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f7ff f951 	bl	800aba0 <clust2sect>
 800b8fe:	4602      	mov	r2, r0
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b916:	441a      	add	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3718      	adds	r7, #24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b086      	sub	sp, #24
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b936:	2100      	movs	r1, #0
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f7ff fe99 	bl	800b670 <dir_sdi>
 800b93e:	4603      	mov	r3, r0
 800b940:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b942:	7dfb      	ldrb	r3, [r7, #23]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d140      	bne.n	800b9ca <dir_alloc+0xa4>
		n = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b950:	4619      	mov	r1, r3
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f7ff f888 	bl	800aa68 <move_window>
 800b958:	4603      	mov	r3, r0
 800b95a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d132      	bne.n	800b9c8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b04      	cmp	r3, #4
 800b968:	d108      	bne.n	800b97c <dir_alloc+0x56>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	b25b      	sxtb	r3, r3
 800b972:	43db      	mvns	r3, r3
 800b974:	b2db      	uxtb	r3, r3
 800b976:	09db      	lsrs	r3, r3, #7
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	e00f      	b.n	800b99c <dir_alloc+0x76>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	2be5      	cmp	r3, #229	; 0xe5
 800b984:	d004      	beq.n	800b990 <dir_alloc+0x6a>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <dir_alloc+0x6e>
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <dir_alloc+0x70>
 800b994:	2300      	movs	r3, #0
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d007      	beq.n	800b9b0 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	613b      	str	r3, [r7, #16]
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d102      	bne.n	800b9b4 <dir_alloc+0x8e>
 800b9ae:	e00c      	b.n	800b9ca <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b9b4:	2101      	movs	r1, #1
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7ff fee0 	bl	800b77c <dir_next>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0c2      	beq.n	800b94c <dir_alloc+0x26>
 800b9c6:	e000      	b.n	800b9ca <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b9c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d101      	bne.n	800b9d4 <dir_alloc+0xae>
 800b9d0:	2307      	movs	r3, #7
 800b9d2:	75fb      	strb	r3, [r7, #23]
	return res;
 800b9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3718      	adds	r7, #24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
 800b9e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	331a      	adds	r3, #26
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fc47 	bl	800a280 <ld_word>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d109      	bne.n	800ba12 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	3314      	adds	r3, #20
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fe fc3c 	bl	800a280 <ld_word>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	041b      	lsls	r3, r3, #16
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ba12:	68fb      	ldr	r3, [r7, #12]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	331a      	adds	r3, #26
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	b292      	uxth	r2, r2
 800ba30:	4611      	mov	r1, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fd1a 	bl	800a46c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d109      	bne.n	800ba54 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	f103 0214 	add.w	r2, r3, #20
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	0c1b      	lsrs	r3, r3, #16
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	f7fe fd0c 	bl	800a46c <st_word>
	}
}
 800ba54:	bf00      	nop
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ba5c:	b590      	push	{r4, r7, lr}
 800ba5e:	b087      	sub	sp, #28
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	331a      	adds	r3, #26
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe fc08 	bl	800a280 <ld_word>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <cmp_lfn+0x1e>
 800ba76:	2300      	movs	r3, #0
 800ba78:	e059      	b.n	800bb2e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba82:	1e5a      	subs	r2, r3, #1
 800ba84:	4613      	mov	r3, r2
 800ba86:	005b      	lsls	r3, r3, #1
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ba90:	2301      	movs	r3, #1
 800ba92:	81fb      	strh	r3, [r7, #14]
 800ba94:	2300      	movs	r3, #0
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	e033      	b.n	800bb02 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ba9a:	4a27      	ldr	r2, [pc, #156]	; (800bb38 <cmp_lfn+0xdc>)
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	4413      	add	r3, r2
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	4413      	add	r3, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fbe9 	bl	800a280 <ld_word>
 800baae:	4603      	mov	r3, r0
 800bab0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bab2:	89fb      	ldrh	r3, [r7, #14]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d01a      	beq.n	800baee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	2bfe      	cmp	r3, #254	; 0xfe
 800babc:	d812      	bhi.n	800bae4 <cmp_lfn+0x88>
 800babe:	89bb      	ldrh	r3, [r7, #12]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f003 fa59 	bl	800ef78 <ff_wtoupper>
 800bac6:	4603      	mov	r3, r0
 800bac8:	461c      	mov	r4, r3
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	1c5a      	adds	r2, r3, #1
 800bace:	617a      	str	r2, [r7, #20]
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	4413      	add	r3, r2
 800bad6:	881b      	ldrh	r3, [r3, #0]
 800bad8:	4618      	mov	r0, r3
 800bada:	f003 fa4d 	bl	800ef78 <ff_wtoupper>
 800bade:	4603      	mov	r3, r0
 800bae0:	429c      	cmp	r4, r3
 800bae2:	d001      	beq.n	800bae8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bae4:	2300      	movs	r3, #0
 800bae6:	e022      	b.n	800bb2e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bae8:	89bb      	ldrh	r3, [r7, #12]
 800baea:	81fb      	strh	r3, [r7, #14]
 800baec:	e006      	b.n	800bafc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800baee:	89bb      	ldrh	r3, [r7, #12]
 800baf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d001      	beq.n	800bafc <cmp_lfn+0xa0>
 800baf8:	2300      	movs	r3, #0
 800bafa:	e018      	b.n	800bb2e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	3301      	adds	r3, #1
 800bb00:	613b      	str	r3, [r7, #16]
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b0c      	cmp	r3, #12
 800bb06:	d9c8      	bls.n	800ba9a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00b      	beq.n	800bb2c <cmp_lfn+0xd0>
 800bb14:	89fb      	ldrh	r3, [r7, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d008      	beq.n	800bb2c <cmp_lfn+0xd0>
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	4413      	add	r3, r2
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <cmp_lfn+0xd0>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	e000      	b.n	800bb2e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bb2c:	2301      	movs	r3, #1
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd90      	pop	{r4, r7, pc}
 800bb36:	bf00      	nop
 800bb38:	08012208 	.word	0x08012208

0800bb3c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	331a      	adds	r3, #26
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fe fb98 	bl	800a280 <ld_word>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <pick_lfn+0x1e>
 800bb56:	2300      	movs	r3, #0
 800bb58:	e04d      	b.n	800bbf6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb62:	1e5a      	subs	r2, r3, #1
 800bb64:	4613      	mov	r3, r2
 800bb66:	005b      	lsls	r3, r3, #1
 800bb68:	4413      	add	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb70:	2301      	movs	r3, #1
 800bb72:	81fb      	strh	r3, [r7, #14]
 800bb74:	2300      	movs	r3, #0
 800bb76:	613b      	str	r3, [r7, #16]
 800bb78:	e028      	b.n	800bbcc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bb7a:	4a21      	ldr	r2, [pc, #132]	; (800bc00 <pick_lfn+0xc4>)
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	4413      	add	r3, r2
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	4413      	add	r3, r2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe fb79 	bl	800a280 <ld_word>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bb92:	89fb      	ldrh	r3, [r7, #14]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00f      	beq.n	800bbb8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2bfe      	cmp	r3, #254	; 0xfe
 800bb9c:	d901      	bls.n	800bba2 <pick_lfn+0x66>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e029      	b.n	800bbf6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bba2:	89bb      	ldrh	r3, [r7, #12]
 800bba4:	81fb      	strh	r3, [r7, #14]
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	1c5a      	adds	r2, r3, #1
 800bbaa:	617a      	str	r2, [r7, #20]
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	89fa      	ldrh	r2, [r7, #14]
 800bbb4:	801a      	strh	r2, [r3, #0]
 800bbb6:	e006      	b.n	800bbc6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bbb8:	89bb      	ldrh	r3, [r7, #12]
 800bbba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d001      	beq.n	800bbc6 <pick_lfn+0x8a>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e017      	b.n	800bbf6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	613b      	str	r3, [r7, #16]
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2b0c      	cmp	r3, #12
 800bbd0:	d9d3      	bls.n	800bb7a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00a      	beq.n	800bbf4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2bfe      	cmp	r3, #254	; 0xfe
 800bbe2:	d901      	bls.n	800bbe8 <pick_lfn+0xac>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	e006      	b.n	800bbf6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	005b      	lsls	r3, r3, #1
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	4413      	add	r3, r2
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800bbf4:	2301      	movs	r3, #1
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	08012208 	.word	0x08012208

0800bc04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	461a      	mov	r2, r3
 800bc12:	460b      	mov	r3, r1
 800bc14:	71fb      	strb	r3, [r7, #7]
 800bc16:	4613      	mov	r3, r2
 800bc18:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	330d      	adds	r3, #13
 800bc1e:	79ba      	ldrb	r2, [r7, #6]
 800bc20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	330b      	adds	r3, #11
 800bc26:	220f      	movs	r2, #15
 800bc28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	330c      	adds	r3, #12
 800bc2e:	2200      	movs	r2, #0
 800bc30:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	331a      	adds	r3, #26
 800bc36:	2100      	movs	r1, #0
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fe fc17 	bl	800a46c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	1e5a      	subs	r2, r3, #1
 800bc42:	4613      	mov	r3, r2
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	4413      	add	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	82fb      	strh	r3, [r7, #22]
 800bc52:	2300      	movs	r3, #0
 800bc54:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bc56:	8afb      	ldrh	r3, [r7, #22]
 800bc58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d007      	beq.n	800bc70 <put_lfn+0x6c>
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	1c5a      	adds	r2, r3, #1
 800bc64:	61fa      	str	r2, [r7, #28]
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bc70:	4a17      	ldr	r2, [pc, #92]	; (800bcd0 <put_lfn+0xcc>)
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	4413      	add	r3, r2
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	8afa      	ldrh	r2, [r7, #22]
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fe fbf2 	bl	800a46c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bc88:	8afb      	ldrh	r3, [r7, #22]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d102      	bne.n	800bc94 <put_lfn+0x90>
 800bc8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc92:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	3301      	adds	r3, #1
 800bc98:	61bb      	str	r3, [r7, #24]
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	2b0c      	cmp	r3, #12
 800bc9e:	d9da      	bls.n	800bc56 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bca0:	8afb      	ldrh	r3, [r7, #22]
 800bca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d006      	beq.n	800bcb8 <put_lfn+0xb4>
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d103      	bne.n	800bcc0 <put_lfn+0xbc>
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcbe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	79fa      	ldrb	r2, [r7, #7]
 800bcc4:	701a      	strb	r2, [r3, #0]
}
 800bcc6:	bf00      	nop
 800bcc8:	3720      	adds	r7, #32
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	08012208 	.word	0x08012208

0800bcd4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b08c      	sub	sp, #48	; 0x30
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bce2:	220b      	movs	r2, #11
 800bce4:	68b9      	ldr	r1, [r7, #8]
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f7fe fc8f 	bl	800a60a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	d929      	bls.n	800bd46 <gen_numname+0x72>
		sr = seq;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bcf6:	e020      	b.n	800bd3a <gen_numname+0x66>
			wc = *lfn++;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	1c9a      	adds	r2, r3, #2
 800bcfc:	607a      	str	r2, [r7, #4]
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bd02:	2300      	movs	r3, #0
 800bd04:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd06:	e015      	b.n	800bd34 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	005a      	lsls	r2, r3, #1
 800bd0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	4413      	add	r3, r2
 800bd14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bd16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd18:	085b      	lsrs	r3, r3, #1
 800bd1a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <gen_numname+0x5a>
 800bd26:	69fa      	ldr	r2, [r7, #28]
 800bd28:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <gen_numname+0x11c>)
 800bd2a:	4053      	eors	r3, r2
 800bd2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	3301      	adds	r3, #1
 800bd32:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	2b0f      	cmp	r3, #15
 800bd38:	d9e6      	bls.n	800bd08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	881b      	ldrh	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1da      	bne.n	800bcf8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bd46:	2307      	movs	r3, #7
 800bd48:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 030f 	and.w	r3, r3, #15
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	3330      	adds	r3, #48	; 0x30
 800bd56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bd5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd5e:	2b39      	cmp	r3, #57	; 0x39
 800bd60:	d904      	bls.n	800bd6c <gen_numname+0x98>
 800bd62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd66:	3307      	adds	r3, #7
 800bd68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	1e5a      	subs	r2, r3, #1
 800bd70:	62ba      	str	r2, [r7, #40]	; 0x28
 800bd72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bd76:	4413      	add	r3, r2
 800bd78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bd7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	091b      	lsrs	r3, r3, #4
 800bd84:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1de      	bne.n	800bd4a <gen_numname+0x76>
	ns[i] = '~';
 800bd8c:	f107 0214 	add.w	r2, r7, #20
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	4413      	add	r3, r2
 800bd94:	227e      	movs	r2, #126	; 0x7e
 800bd96:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bd98:	2300      	movs	r3, #0
 800bd9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd9c:	e002      	b.n	800bda4 <gen_numname+0xd0>
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	3301      	adds	r3, #1
 800bda2:	627b      	str	r3, [r7, #36]	; 0x24
 800bda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d205      	bcs.n	800bdb8 <gen_numname+0xe4>
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	4413      	add	r3, r2
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b20      	cmp	r3, #32
 800bdb6:	d1f2      	bne.n	800bd9e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	2b07      	cmp	r3, #7
 800bdbc:	d808      	bhi.n	800bdd0 <gen_numname+0xfc>
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	1c5a      	adds	r2, r3, #1
 800bdc2:	62ba      	str	r2, [r7, #40]	; 0x28
 800bdc4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bdc8:	4413      	add	r3, r2
 800bdca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bdce:	e000      	b.n	800bdd2 <gen_numname+0xfe>
 800bdd0:	2120      	movs	r1, #32
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	627a      	str	r2, [r7, #36]	; 0x24
 800bdd8:	68fa      	ldr	r2, [r7, #12]
 800bdda:	4413      	add	r3, r2
 800bddc:	460a      	mov	r2, r1
 800bdde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	2b07      	cmp	r3, #7
 800bde4:	d9e8      	bls.n	800bdb8 <gen_numname+0xe4>
}
 800bde6:	bf00      	nop
 800bde8:	bf00      	nop
 800bdea:	3730      	adds	r7, #48	; 0x30
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	00011021 	.word	0x00011021

0800bdf4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800be00:	230b      	movs	r3, #11
 800be02:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	b2da      	uxtb	r2, r3
 800be08:	0852      	lsrs	r2, r2, #1
 800be0a:	01db      	lsls	r3, r3, #7
 800be0c:	4313      	orrs	r3, r2
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	1c59      	adds	r1, r3, #1
 800be14:	6079      	str	r1, [r7, #4]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	4413      	add	r3, r2
 800be1a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	3b01      	subs	r3, #1
 800be20:	60bb      	str	r3, [r7, #8]
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1ed      	bne.n	800be04 <sum_sfn+0x10>
	return sum;
 800be28:	7bfb      	ldrb	r3, [r7, #15]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800be36:	b480      	push	{r7}
 800be38:	b087      	sub	sp, #28
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	3301      	adds	r3, #1
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	3301      	adds	r3, #1
 800be46:	015b      	lsls	r3, r3, #5
 800be48:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800be4a:	2300      	movs	r3, #0
 800be4c:	827b      	strh	r3, [r7, #18]
 800be4e:	2300      	movs	r3, #0
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	e018      	b.n	800be86 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2b02      	cmp	r3, #2
 800be58:	d103      	bne.n	800be62 <xdir_sum+0x2c>
			i++;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	3301      	adds	r3, #1
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	e00e      	b.n	800be80 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800be62:	8a7b      	ldrh	r3, [r7, #18]
 800be64:	03db      	lsls	r3, r3, #15
 800be66:	b29a      	uxth	r2, r3
 800be68:	8a7b      	ldrh	r3, [r7, #18]
 800be6a:	085b      	lsrs	r3, r3, #1
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	4413      	add	r3, r2
 800be70:	b29a      	uxth	r2, r3
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	440b      	add	r3, r1
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	4413      	add	r3, r2
 800be7e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	3301      	adds	r3, #1
 800be84:	617b      	str	r3, [r7, #20]
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d3e2      	bcc.n	800be54 <xdir_sum+0x1e>
		}
	}
	return sum;
 800be8e:	8a7b      	ldrh	r3, [r7, #18]
}
 800be90:	4618      	mov	r0, r3
 800be92:	371c      	adds	r7, #28
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800bea8:	e01f      	b.n	800beea <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800beaa:	89bb      	ldrh	r3, [r7, #12]
 800beac:	4618      	mov	r0, r3
 800beae:	f003 f863 	bl	800ef78 <ff_wtoupper>
 800beb2:	4603      	mov	r3, r0
 800beb4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800beb6:	89fb      	ldrh	r3, [r7, #14]
 800beb8:	03db      	lsls	r3, r3, #15
 800beba:	b29a      	uxth	r2, r3
 800bebc:	89fb      	ldrh	r3, [r7, #14]
 800bebe:	085b      	lsrs	r3, r3, #1
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	4413      	add	r3, r2
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	89bb      	ldrh	r3, [r7, #12]
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	b29b      	uxth	r3, r3
 800becc:	4413      	add	r3, r2
 800bece:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800bed0:	89fb      	ldrh	r3, [r7, #14]
 800bed2:	03db      	lsls	r3, r3, #15
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	89fb      	ldrh	r3, [r7, #14]
 800bed8:	085b      	lsrs	r3, r3, #1
 800beda:	b29b      	uxth	r3, r3
 800bedc:	4413      	add	r3, r2
 800bede:	b29a      	uxth	r2, r3
 800bee0:	89bb      	ldrh	r3, [r7, #12]
 800bee2:	0a1b      	lsrs	r3, r3, #8
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	4413      	add	r3, r2
 800bee8:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	1c9a      	adds	r2, r3, #2
 800beee:	607a      	str	r2, [r7, #4]
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	81bb      	strh	r3, [r7, #12]
 800bef4:	89bb      	ldrh	r3, [r7, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1d7      	bne.n	800beaa <xname_sum+0xe>
	}
	return sum;
 800befa:	89fb      	ldrh	r3, [r7, #14]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bf12:	2340      	movs	r3, #64	; 0x40
 800bf14:	613b      	str	r3, [r7, #16]
 800bf16:	2300      	movs	r3, #0
 800bf18:	60fb      	str	r3, [r7, #12]
 800bf1a:	e02c      	b.n	800bf76 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f003 031f 	and.w	r3, r3, #31
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <get_xdir_info+0x28>
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	3302      	adds	r3, #2
 800bf2a:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	4413      	add	r3, r2
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe f9a4 	bl	800a280 <ld_word>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f002 ffdf 	bl	800ef00 <ff_convert>
 800bf42:	4603      	mov	r3, r0
 800bf44:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800bf46:	897b      	ldrh	r3, [r7, #10]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <get_xdir_info+0x4e>
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	2bfe      	cmp	r3, #254	; 0xfe
 800bf50:	d902      	bls.n	800bf58 <get_xdir_info+0x54>
 800bf52:	2300      	movs	r3, #0
 800bf54:	617b      	str	r3, [r7, #20]
 800bf56:	e015      	b.n	800bf84 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	617a      	str	r2, [r7, #20]
 800bf5e:	897a      	ldrh	r2, [r7, #10]
 800bf60:	b2d1      	uxtb	r1, r2
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	4413      	add	r3, r2
 800bf66:	460a      	mov	r2, r1
 800bf68:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	3302      	adds	r3, #2
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3301      	adds	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3323      	adds	r3, #35	; 0x23
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d3cb      	bcc.n	800bf1c <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d106      	bne.n	800bf98 <get_xdir_info+0x94>
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	1c5a      	adds	r2, r3, #1
 800bf8e:	617a      	str	r2, [r7, #20]
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	4413      	add	r3, r2
 800bf94:	223f      	movs	r2, #63	; 0x3f
 800bf96:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	4413      	add	r3, r2
 800bf9e:	331a      	adds	r3, #26
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	791a      	ldrb	r2, [r3, #4]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	7b1b      	ldrb	r3, [r3, #12]
 800bfb6:	f003 0310 	and.w	r3, r3, #16
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d107      	bne.n	800bfce <get_xdir_info+0xca>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3338      	adds	r3, #56	; 0x38
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe f997 	bl	800a2f6 <ld_qword>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	e003      	b.n	800bfd6 <get_xdir_info+0xd2>
 800bfce:	f04f 0200 	mov.w	r2, #0
 800bfd2:	f04f 0300 	mov.w	r3, #0
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	330c      	adds	r3, #12
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe f94d 	bl	800a280 <ld_word>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	461a      	mov	r2, r3
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	330e      	adds	r3, #14
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fe f944 	bl	800a280 <ld_word>
 800bff8:	4603      	mov	r3, r0
 800bffa:	461a      	mov	r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	811a      	strh	r2, [r3, #8]
}
 800c000:	bf00      	nop
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800c008:	b590      	push	{r4, r7, lr}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c020:	4619      	mov	r1, r3
 800c022:	4610      	mov	r0, r2
 800c024:	f7fe fd20 	bl	800aa68 <move_window>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <load_xdir+0x2e>
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	e09f      	b.n	800c176 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2b85      	cmp	r3, #133	; 0x85
 800c03e:	d001      	beq.n	800c044 <load_xdir+0x3c>
 800c040:	2302      	movs	r3, #2
 800c042:	e098      	b.n	800c176 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c048:	2220      	movs	r2, #32
 800c04a:	4619      	mov	r1, r3
 800c04c:	6938      	ldr	r0, [r7, #16]
 800c04e:	f7fe fadc 	bl	800a60a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	3301      	adds	r3, #1
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	3301      	adds	r3, #1
 800c05a:	015b      	lsls	r3, r3, #5
 800c05c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	2b5f      	cmp	r3, #95	; 0x5f
 800c062:	d903      	bls.n	800c06c <load_xdir+0x64>
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c06a:	d901      	bls.n	800c070 <load_xdir+0x68>
 800c06c:	2302      	movs	r3, #2
 800c06e:	e082      	b.n	800c176 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800c070:	2100      	movs	r1, #0
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff fb82 	bl	800b77c <dir_next>
 800c078:	4603      	mov	r3, r0
 800c07a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <load_xdir+0x7e>
 800c082:	7bfb      	ldrb	r3, [r7, #15]
 800c084:	e077      	b.n	800c176 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08e:	4619      	mov	r1, r3
 800c090:	4610      	mov	r0, r2
 800c092:	f7fe fce9 	bl	800aa68 <move_window>
 800c096:	4603      	mov	r3, r0
 800c098:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <load_xdir+0x9c>
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	e068      	b.n	800c176 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2bc0      	cmp	r3, #192	; 0xc0
 800c0ac:	d001      	beq.n	800c0b2 <load_xdir+0xaa>
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	e061      	b.n	800c176 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f103 0020 	add.w	r0, r3, #32
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0bc:	2220      	movs	r2, #32
 800c0be:	4619      	mov	r1, r3
 800c0c0:	f7fe faa3 	bl	800a60a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	3323      	adds	r3, #35	; 0x23
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	332c      	adds	r3, #44	; 0x2c
 800c0cc:	4a2c      	ldr	r2, [pc, #176]	; (800c180 <load_xdir+0x178>)
 800c0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d2:	08db      	lsrs	r3, r3, #3
 800c0d4:	015b      	lsls	r3, r3, #5
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d201      	bcs.n	800c0e0 <load_xdir+0xd8>
 800c0dc:	2302      	movs	r3, #2
 800c0de:	e04a      	b.n	800c176 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800c0e0:	2340      	movs	r3, #64	; 0x40
 800c0e2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7ff fb48 	bl	800b77c <dir_next>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d001      	beq.n	800c0fa <load_xdir+0xf2>
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
 800c0f8:	e03d      	b.n	800c176 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c102:	4619      	mov	r1, r3
 800c104:	4610      	mov	r0, r2
 800c106:	f7fe fcaf 	bl	800aa68 <move_window>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <load_xdir+0x110>
 800c114:	7bfb      	ldrb	r3, [r7, #15]
 800c116:	e02e      	b.n	800c176 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2bc1      	cmp	r3, #193	; 0xc1
 800c120:	d001      	beq.n	800c126 <load_xdir+0x11e>
 800c122:	2302      	movs	r3, #2
 800c124:	e027      	b.n	800c176 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c12c:	d208      	bcs.n	800c140 <load_xdir+0x138>
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	18d0      	adds	r0, r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c138:	2220      	movs	r2, #32
 800c13a:	4619      	mov	r1, r3
 800c13c:	f7fe fa65 	bl	800a60a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	3320      	adds	r3, #32
 800c144:	617b      	str	r3, [r7, #20]
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d3ca      	bcc.n	800c0e4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c154:	d80e      	bhi.n	800c174 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800c156:	6938      	ldr	r0, [r7, #16]
 800c158:	f7ff fe6d 	bl	800be36 <xdir_sum>
 800c15c:	4603      	mov	r3, r0
 800c15e:	461c      	mov	r4, r3
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	3302      	adds	r3, #2
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe f88b 	bl	800a280 <ld_word>
 800c16a:	4603      	mov	r3, r0
 800c16c:	429c      	cmp	r4, r3
 800c16e:	d001      	beq.n	800c174 <load_xdir+0x16c>
 800c170:	2302      	movs	r3, #2
 800c172:	e000      	b.n	800c176 <load_xdir+0x16e>
	}
	return FR_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	371c      	adds	r7, #28
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd90      	pop	{r4, r7, pc}
 800c17e:	bf00      	nop
 800c180:	88888889 	.word	0x88888889

0800c184 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800c184:	b5b0      	push	{r4, r5, r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6808      	ldr	r0, [r1, #0]
 800c192:	6879      	ldr	r1, [r7, #4]
 800c194:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6a08      	ldr	r0, [r1, #32]
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c1a2:	b2c8      	uxtb	r0, r1
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c1ac:	4608      	mov	r0, r1
 800c1ae:	f04f 0100 	mov.w	r1, #0
 800c1b2:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800c1b6:	f04f 0500 	mov.w	r5, #0
 800c1ba:	ea00 0204 	and.w	r2, r0, r4
 800c1be:	ea01 0305 	and.w	r3, r1, r5
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff fa4a 	bl	800b670 <dir_sdi>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d104      	bne.n	800c1f0 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7ff ff0e 	bl	800c008 <load_xdir>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800c1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bdb0      	pop	{r4, r5, r7, pc}

0800c1fa <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800c1fa:	b590      	push	{r4, r7, lr}
 800c1fc:	b087      	sub	sp, #28
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	1c9c      	adds	r4, r3, #2
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f7ff fe11 	bl	800be36 <xdir_sum>
 800c214:	4603      	mov	r3, r0
 800c216:	4619      	mov	r1, r3
 800c218:	4620      	mov	r0, r4
 800c21a:	f7fe f927 	bl	800a46c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3301      	adds	r3, #1
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	3301      	adds	r3, #1
 800c226:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff fa1e 	bl	800b670 <dir_sdi>
 800c234:	4603      	mov	r3, r0
 800c236:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c238:	e026      	b.n	800c288 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c242:	4619      	mov	r1, r3
 800c244:	4610      	mov	r0, r2
 800c246:	f7fe fc0f 	bl	800aa68 <move_window>
 800c24a:	4603      	mov	r3, r0
 800c24c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d11d      	bne.n	800c290 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c258:	2220      	movs	r2, #32
 800c25a:	68f9      	ldr	r1, [r7, #12]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fe f9d4 	bl	800a60a <mem_cpy>
		dp->obj.fs->wflag = 1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2201      	movs	r2, #1
 800c268:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	3b01      	subs	r3, #1
 800c26e:	613b      	str	r3, [r7, #16]
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00e      	beq.n	800c294 <store_xdir+0x9a>
		dirb += SZDIRE;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3320      	adds	r3, #32
 800c27a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800c27c:	2100      	movs	r1, #0
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff fa7c 	bl	800b77c <dir_next>
 800c284:	4603      	mov	r3, r0
 800c286:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c288:	7dfb      	ldrb	r3, [r7, #23]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d0d5      	beq.n	800c23a <store_xdir+0x40>
 800c28e:	e002      	b.n	800c296 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800c290:	bf00      	nop
 800c292:	e000      	b.n	800c296 <store_xdir+0x9c>
		if (--nent == 0) break;
 800c294:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <store_xdir+0xa8>
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d101      	bne.n	800c2a6 <store_xdir+0xac>
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
 800c2a4:	e000      	b.n	800c2a8 <store_xdir+0xae>
 800c2a6:	2302      	movs	r3, #2
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	371c      	adds	r7, #28
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd90      	pop	{r4, r7, pc}

0800c2b0 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800c2b0:	b590      	push	{r4, r7, lr}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800c2ba:	2240      	movs	r2, #64	; 0x40
 800c2bc:	2100      	movs	r1, #0
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7fe f9c4 	bl	800a64c <mem_set>
	dirb[XDIR_Type] = 0x85;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2285      	movs	r2, #133	; 0x85
 800c2c8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	3320      	adds	r3, #32
 800c2ce:	22c0      	movs	r2, #192	; 0xc0
 800c2d0:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	72bb      	strb	r3, [r7, #10]
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	72fb      	strb	r3, [r7, #11]
 800c2da:	2301      	movs	r3, #1
 800c2dc:	813b      	strh	r3, [r7, #8]
 800c2de:	2340      	movs	r3, #64	; 0x40
 800c2e0:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	60fa      	str	r2, [r7, #12]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	22c1      	movs	r2, #193	; 0xc1
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	1c5a      	adds	r2, r3, #1
 800c2f4:	60fa      	str	r2, [r7, #12]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c2fe:	893b      	ldrh	r3, [r7, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00b      	beq.n	800c31c <create_xdir+0x6c>
 800c304:	7abb      	ldrb	r3, [r7, #10]
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	4413      	add	r3, r2
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	813b      	strh	r3, [r7, #8]
 800c310:	893b      	ldrh	r3, [r7, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <create_xdir+0x6c>
 800c316:	7abb      	ldrb	r3, [r7, #10]
 800c318:	3301      	adds	r3, #1
 800c31a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4413      	add	r3, r2
 800c322:	893a      	ldrh	r2, [r7, #8]
 800c324:	4611      	mov	r1, r2
 800c326:	4618      	mov	r0, r3
 800c328:	f7fe f8a0 	bl	800a46c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3302      	adds	r3, #2
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f003 031f 	and.w	r3, r3, #31
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1e0      	bne.n	800c2fe <create_xdir+0x4e>
		nb++;
 800c33c:	7afb      	ldrb	r3, [r7, #11]
 800c33e:	3301      	adds	r3, #1
 800c340:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c342:	7abb      	ldrb	r3, [r7, #10]
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	4413      	add	r3, r2
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1c8      	bne.n	800c2e2 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	3323      	adds	r3, #35	; 0x23
 800c354:	7aba      	ldrb	r2, [r7, #10]
 800c356:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	3301      	adds	r3, #1
 800c35c:	7afa      	ldrb	r2, [r7, #11]
 800c35e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800c366:	6838      	ldr	r0, [r7, #0]
 800c368:	f7ff fd98 	bl	800be9c <xname_sum>
 800c36c:	4603      	mov	r3, r0
 800c36e:	4619      	mov	r1, r3
 800c370:	4620      	mov	r0, r4
 800c372:	f7fe f87b 	bl	800a46c <st_word>
}
 800c376:	bf00      	nop
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd90      	pop	{r4, r7, pc}

0800c37e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b086      	sub	sp, #24
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c388:	2304      	movs	r3, #4
 800c38a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c392:	23ff      	movs	r3, #255	; 0xff
 800c394:	757b      	strb	r3, [r7, #21]
 800c396:	23ff      	movs	r3, #255	; 0xff
 800c398:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c39a:	e09f      	b.n	800c4dc <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6938      	ldr	r0, [r7, #16]
 800c3a4:	f7fe fb60 	bl	800aa68 <move_window>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f040 809a 	bne.w	800c4e8 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c3bc:	7dbb      	ldrb	r3, [r7, #22]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d102      	bne.n	800c3c8 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c3c2:	2304      	movs	r3, #4
 800c3c4:	75fb      	strb	r3, [r7, #23]
 800c3c6:	e096      	b.n	800c4f6 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d118      	bne.n	800c402 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c3d0:	7dbb      	ldrb	r3, [r7, #22]
 800c3d2:	2b85      	cmp	r3, #133	; 0x85
 800c3d4:	d179      	bne.n	800c4ca <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7ff fe12 	bl	800c008 <load_xdir>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d17e      	bne.n	800c4ec <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c400:	e074      	b.n	800c4ec <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c406:	330b      	adds	r3, #11
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c40e:	73fb      	strb	r3, [r7, #15]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	7bfa      	ldrb	r2, [r7, #15]
 800c414:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c416:	7dbb      	ldrb	r3, [r7, #22]
 800c418:	2be5      	cmp	r3, #229	; 0xe5
 800c41a:	d00e      	beq.n	800c43a <dir_read+0xbc>
 800c41c:	7dbb      	ldrb	r3, [r7, #22]
 800c41e:	2b2e      	cmp	r3, #46	; 0x2e
 800c420:	d00b      	beq.n	800c43a <dir_read+0xbc>
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	f023 0320 	bic.w	r3, r3, #32
 800c428:	2b08      	cmp	r3, #8
 800c42a:	bf0c      	ite	eq
 800c42c:	2301      	moveq	r3, #1
 800c42e:	2300      	movne	r3, #0
 800c430:	b2db      	uxtb	r3, r3
 800c432:	461a      	mov	r2, r3
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	4293      	cmp	r3, r2
 800c438:	d002      	beq.n	800c440 <dir_read+0xc2>
				ord = 0xFF;
 800c43a:	23ff      	movs	r3, #255	; 0xff
 800c43c:	757b      	strb	r3, [r7, #21]
 800c43e:	e044      	b.n	800c4ca <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c440:	7bfb      	ldrb	r3, [r7, #15]
 800c442:	2b0f      	cmp	r3, #15
 800c444:	d12f      	bne.n	800c4a6 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c446:	7dbb      	ldrb	r3, [r7, #22]
 800c448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00d      	beq.n	800c46c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c454:	7b5b      	ldrb	r3, [r3, #13]
 800c456:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c458:	7dbb      	ldrb	r3, [r7, #22]
 800c45a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c45e:	75bb      	strb	r3, [r7, #22]
 800c460:	7dbb      	ldrb	r3, [r7, #22]
 800c462:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c46c:	7dba      	ldrb	r2, [r7, #22]
 800c46e:	7d7b      	ldrb	r3, [r7, #21]
 800c470:	429a      	cmp	r2, r3
 800c472:	d115      	bne.n	800c4a0 <dir_read+0x122>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c478:	330d      	adds	r3, #13
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	7d3a      	ldrb	r2, [r7, #20]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d10e      	bne.n	800c4a0 <dir_read+0x122>
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	68da      	ldr	r2, [r3, #12]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48a:	4619      	mov	r1, r3
 800c48c:	4610      	mov	r0, r2
 800c48e:	f7ff fb55 	bl	800bb3c <pick_lfn>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <dir_read+0x122>
 800c498:	7d7b      	ldrb	r3, [r7, #21]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	e000      	b.n	800c4a2 <dir_read+0x124>
 800c4a0:	23ff      	movs	r3, #255	; 0xff
 800c4a2:	757b      	strb	r3, [r7, #21]
 800c4a4:	e011      	b.n	800c4ca <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c4a6:	7d7b      	ldrb	r3, [r7, #21]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d109      	bne.n	800c4c0 <dir_read+0x142>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fc9f 	bl	800bdf4 <sum_sfn>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	7d3b      	ldrb	r3, [r7, #20]
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d017      	beq.n	800c4f0 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4c6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800c4c8:	e012      	b.n	800c4f0 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff f955 	bl	800b77c <dir_next>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10b      	bne.n	800c4f4 <dir_read+0x176>
	while (dp->sect) {
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f47f af5b 	bne.w	800c39c <dir_read+0x1e>
 800c4e6:	e006      	b.n	800c4f6 <dir_read+0x178>
		if (res != FR_OK) break;
 800c4e8:	bf00      	nop
 800c4ea:	e004      	b.n	800c4f6 <dir_read+0x178>
					break;
 800c4ec:	bf00      	nop
 800c4ee:	e002      	b.n	800c4f6 <dir_read+0x178>
					break;
 800c4f0:	bf00      	nop
 800c4f2:	e000      	b.n	800c4f6 <dir_read+0x178>
		if (res != FR_OK) break;
 800c4f4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c4f6:	7dfb      	ldrb	r3, [r7, #23]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <dir_read+0x184>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800c502:	7dfb      	ldrb	r3, [r7, #23]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3718      	adds	r7, #24
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c50c:	b590      	push	{r4, r7, lr}
 800c50e:	b089      	sub	sp, #36	; 0x24
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c51a:	2100      	movs	r1, #0
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff f8a7 	bl	800b670 <dir_sdi>
 800c522:	4603      	mov	r3, r0
 800c524:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c526:	7ffb      	ldrb	r3, [r7, #31]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d001      	beq.n	800c530 <dir_find+0x24>
 800c52c:	7ffb      	ldrb	r3, [r7, #31]
 800c52e:	e112      	b.n	800c756 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b04      	cmp	r3, #4
 800c536:	d164      	bne.n	800c602 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff fcad 	bl	800be9c <xname_sum>
 800c542:	4603      	mov	r3, r0
 800c544:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c546:	e04f      	b.n	800c5e8 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	3324      	adds	r3, #36	; 0x24
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fd fe96 	bl	800a280 <ld_word>
 800c554:	4603      	mov	r3, r0
 800c556:	461a      	mov	r2, r3
 800c558:	893b      	ldrh	r3, [r7, #8]
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d000      	beq.n	800c560 <dir_find+0x54>
 800c55e:	e043      	b.n	800c5e8 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c568:	76fb      	strb	r3, [r7, #27]
 800c56a:	2340      	movs	r3, #64	; 0x40
 800c56c:	617b      	str	r3, [r7, #20]
 800c56e:	2300      	movs	r3, #0
 800c570:	613b      	str	r3, [r7, #16]
 800c572:	e029      	b.n	800c5c8 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f003 031f 	and.w	r3, r3, #31
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d102      	bne.n	800c584 <dir_find+0x78>
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	3302      	adds	r3, #2
 800c582:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	691a      	ldr	r2, [r3, #16]
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	4413      	add	r3, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fd fe77 	bl	800a280 <ld_word>
 800c592:	4603      	mov	r3, r0
 800c594:	4618      	mov	r0, r3
 800c596:	f002 fcef 	bl	800ef78 <ff_wtoupper>
 800c59a:	4603      	mov	r3, r0
 800c59c:	461c      	mov	r4, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	68da      	ldr	r2, [r3, #12]
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	005b      	lsls	r3, r3, #1
 800c5a6:	4413      	add	r3, r2
 800c5a8:	881b      	ldrh	r3, [r3, #0]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f002 fce4 	bl	800ef78 <ff_wtoupper>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	d10c      	bne.n	800c5d0 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c5b6:	7efb      	ldrb	r3, [r7, #27]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	76fb      	strb	r3, [r7, #27]
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	3302      	adds	r3, #2
 800c5c0:	617b      	str	r3, [r7, #20]
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	613b      	str	r3, [r7, #16]
 800c5c8:	7efb      	ldrb	r3, [r7, #27]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1d2      	bne.n	800c574 <dir_find+0x68>
 800c5ce:	e000      	b.n	800c5d2 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c5d0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c5d2:	7efb      	ldrb	r3, [r7, #27]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d107      	bne.n	800c5e8 <dir_find+0xdc>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68da      	ldr	r2, [r3, #12]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	4413      	add	r3, r2
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d009      	beq.n	800c5fc <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7ff fec7 	bl	800c37e <dir_read>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	77fb      	strb	r3, [r7, #31]
 800c5f4:	7ffb      	ldrb	r3, [r7, #31]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0a6      	beq.n	800c548 <dir_find+0x3c>
 800c5fa:	e000      	b.n	800c5fe <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c5fc:	bf00      	nop
		}
		return res;
 800c5fe:	7ffb      	ldrb	r3, [r7, #31]
 800c600:	e0a9      	b.n	800c756 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c602:	23ff      	movs	r3, #255	; 0xff
 800c604:	773b      	strb	r3, [r7, #28]
 800c606:	7f3b      	ldrb	r3, [r7, #28]
 800c608:	777b      	strb	r3, [r7, #29]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c610:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c616:	4619      	mov	r1, r3
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7fe fa25 	bl	800aa68 <move_window>
 800c61e:	4603      	mov	r3, r0
 800c620:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c622:	7ffb      	ldrb	r3, [r7, #31]
 800c624:	2b00      	cmp	r3, #0
 800c626:	f040 8090 	bne.w	800c74a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c632:	7fbb      	ldrb	r3, [r7, #30]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <dir_find+0x132>
 800c638:	2304      	movs	r3, #4
 800c63a:	77fb      	strb	r3, [r7, #31]
 800c63c:	e08a      	b.n	800c754 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c642:	330b      	adds	r3, #11
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c64a:	72fb      	strb	r3, [r7, #11]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	7afa      	ldrb	r2, [r7, #11]
 800c650:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c652:	7fbb      	ldrb	r3, [r7, #30]
 800c654:	2be5      	cmp	r3, #229	; 0xe5
 800c656:	d007      	beq.n	800c668 <dir_find+0x15c>
 800c658:	7afb      	ldrb	r3, [r7, #11]
 800c65a:	f003 0308 	and.w	r3, r3, #8
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d009      	beq.n	800c676 <dir_find+0x16a>
 800c662:	7afb      	ldrb	r3, [r7, #11]
 800c664:	2b0f      	cmp	r3, #15
 800c666:	d006      	beq.n	800c676 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c668:	23ff      	movs	r3, #255	; 0xff
 800c66a:	777b      	strb	r3, [r7, #29]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c672:	64da      	str	r2, [r3, #76]	; 0x4c
 800c674:	e05e      	b.n	800c734 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c676:	7afb      	ldrb	r3, [r7, #11]
 800c678:	2b0f      	cmp	r3, #15
 800c67a:	d136      	bne.n	800c6ea <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d154      	bne.n	800c734 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c68a:	7fbb      	ldrb	r3, [r7, #30]
 800c68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00d      	beq.n	800c6b0 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c698:	7b5b      	ldrb	r3, [r3, #13]
 800c69a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c69c:	7fbb      	ldrb	r3, [r7, #30]
 800c69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6a2:	77bb      	strb	r3, [r7, #30]
 800c6a4:	7fbb      	ldrb	r3, [r7, #30]
 800c6a6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c6b0:	7fba      	ldrb	r2, [r7, #30]
 800c6b2:	7f7b      	ldrb	r3, [r7, #29]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d115      	bne.n	800c6e4 <dir_find+0x1d8>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6bc:	330d      	adds	r3, #13
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	7f3a      	ldrb	r2, [r7, #28]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d10e      	bne.n	800c6e4 <dir_find+0x1d8>
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	68da      	ldr	r2, [r3, #12]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	f7ff f9c3 	bl	800ba5c <cmp_lfn>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <dir_find+0x1d8>
 800c6dc:	7f7b      	ldrb	r3, [r7, #29]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	e000      	b.n	800c6e6 <dir_find+0x1da>
 800c6e4:	23ff      	movs	r3, #255	; 0xff
 800c6e6:	777b      	strb	r3, [r7, #29]
 800c6e8:	e024      	b.n	800c734 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c6ea:	7f7b      	ldrb	r3, [r7, #29]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d109      	bne.n	800c704 <dir_find+0x1f8>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff fb7d 	bl	800bdf4 <sum_sfn>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	7f3b      	ldrb	r3, [r7, #28]
 800c700:	4293      	cmp	r3, r2
 800c702:	d024      	beq.n	800c74e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c70a:	f003 0301 	and.w	r3, r3, #1
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10a      	bne.n	800c728 <dir_find+0x21c>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3340      	adds	r3, #64	; 0x40
 800c71a:	220b      	movs	r2, #11
 800c71c:	4619      	mov	r1, r3
 800c71e:	f7fd ffb0 	bl	800a682 <mem_cmp>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d014      	beq.n	800c752 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c728:	23ff      	movs	r3, #255	; 0xff
 800c72a:	777b      	strb	r3, [r7, #29]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c732:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c734:	2100      	movs	r1, #0
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff f820 	bl	800b77c <dir_next>
 800c73c:	4603      	mov	r3, r0
 800c73e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c740:	7ffb      	ldrb	r3, [r7, #31]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f43f af65 	beq.w	800c612 <dir_find+0x106>
 800c748:	e004      	b.n	800c754 <dir_find+0x248>
		if (res != FR_OK) break;
 800c74a:	bf00      	nop
 800c74c:	e002      	b.n	800c754 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c74e:	bf00      	nop
 800c750:	e000      	b.n	800c754 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c752:	bf00      	nop

	return res;
 800c754:	7ffb      	ldrb	r3, [r7, #31]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3724      	adds	r7, #36	; 0x24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd90      	pop	{r4, r7, pc}
	...

0800c760 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c760:	b5b0      	push	{r4, r5, r7, lr}
 800c762:	b0a2      	sub	sp, #136	; 0x88
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	677b      	str	r3, [r7, #116]	; 0x74
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c774:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <dir_register+0x20>
 800c77c:	2306      	movs	r3, #6
 800c77e:	e18e      	b.n	800ca9e <dir_register+0x33e>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c780:	2300      	movs	r3, #0
 800c782:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c784:	e002      	b.n	800c78c <dir_register+0x2c>
 800c786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c788:	3301      	adds	r3, #1
 800c78a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c78c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c78e:	68da      	ldr	r2, [r3, #12]
 800c790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	4413      	add	r3, r2
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1f4      	bne.n	800c786 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c79c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b04      	cmp	r3, #4
 800c7a2:	f040 809e 	bne.w	800c8e2 <dir_register+0x182>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c7a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7a8:	330e      	adds	r3, #14
 800c7aa:	4abf      	ldr	r2, [pc, #764]	; (800caa8 <dir_register+0x348>)
 800c7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b0:	08db      	lsrs	r3, r3, #3
 800c7b2:	3302      	adds	r3, #2
 800c7b4:	67bb      	str	r3, [r7, #120]	; 0x78
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c7b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff f8b4 	bl	800b926 <dir_alloc>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res != FR_OK) return res;
 800c7c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <dir_register+0x72>
 800c7cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c7d0:	e165      	b.n	800ca9e <dir_register+0x33e>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	015b      	lsls	r3, r3, #5
 800c7dc:	1ad2      	subs	r2, r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d071      	beq.n	800c8ce <dir_register+0x16e>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	79db      	ldrb	r3, [r3, #7]
 800c7ee:	f003 0304 	and.w	r3, r3, #4
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d06b      	beq.n	800c8ce <dir_register+0x16e>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c7fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7fe:	895b      	ldrh	r3, [r3, #10]
 800c800:	025b      	lsls	r3, r3, #9
 800c802:	461a      	mov	r2, r3
 800c804:	f04f 0300 	mov.w	r3, #0
 800c808:	1884      	adds	r4, r0, r2
 800c80a:	eb41 0503 	adc.w	r5, r1, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe fcd4 	bl	800b1c4 <fill_first_frag>
 800c81c:	4603      	mov	r3, r0
 800c81e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c822:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <dir_register+0xd0>
 800c82a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c82e:	e136      	b.n	800ca9e <dir_register+0x33e>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c83a:	4619      	mov	r1, r3
 800c83c:	f7fe fcf1 	bl	800b222 <fill_last_frag>
 800c840:	4603      	mov	r3, r0
 800c842:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c846:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <dir_register+0xf4>
 800c84e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c852:	e124      	b.n	800ca9e <dir_register+0x33e>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	f107 0308 	add.w	r3, r7, #8
 800c85a:	4611      	mov	r1, r2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7ff fc91 	bl	800c184 <load_obj_dir>
 800c862:	4603      	mov	r3, r0
 800c864:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c868:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <dir_register+0x116>
 800c870:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c874:	e113      	b.n	800ca9e <dir_register+0x33e>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c884:	4608      	mov	r0, r1
 800c886:	f7fd fe38 	bl	800a4fa <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c88a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c898:	4608      	mov	r0, r1
 800c89a:	f7fd fe2e 	bl	800a4fa <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	79da      	ldrb	r2, [r3, #7]
 800c8a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	3321      	adds	r3, #33	; 0x21
 800c8a8:	f042 0201 	orr.w	r2, r2, #1
 800c8ac:	b2d2      	uxtb	r2, r2
 800c8ae:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c8b0:	f107 0308 	add.w	r3, r7, #8
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7ff fca0 	bl	800c1fa <store_xdir>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c8c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <dir_register+0x16e>
 800c8c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c8cc:	e0e7      	b.n	800ca9e <dir_register+0x33e>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c8ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8d0:	691a      	ldr	r2, [r3, #16]
 800c8d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4610      	mov	r0, r2
 800c8da:	f7ff fce9 	bl	800c2b0 <create_xdir>
		return FR_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	e0dd      	b.n	800ca9e <dir_register+0x33e>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c8e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c8ec:	220c      	movs	r2, #12
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fd fe8b 	bl	800a60a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c8f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d039      	beq.n	800c974 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2240      	movs	r2, #64	; 0x40
 800c904:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800c908:	2301      	movs	r3, #1
 800c90a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c90e:	e019      	b.n	800c944 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800c91e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c922:	f7ff f9d7 	bl	800bcd4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff fdf0 	bl	800c50c <dir_find>
 800c92c:	4603      	mov	r3, r0
 800c92e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) break;
 800c932:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c936:	2b00      	cmp	r3, #0
 800c938:	d109      	bne.n	800c94e <dir_register+0x1ee>
		for (n = 1; n < 100; n++) {
 800c93a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c93e:	3301      	adds	r3, #1
 800c940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c948:	2b63      	cmp	r3, #99	; 0x63
 800c94a:	d9e1      	bls.n	800c910 <dir_register+0x1b0>
 800c94c:	e000      	b.n	800c950 <dir_register+0x1f0>
			if (res != FR_OK) break;
 800c94e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c954:	2b64      	cmp	r3, #100	; 0x64
 800c956:	d101      	bne.n	800c95c <dir_register+0x1fc>
 800c958:	2307      	movs	r3, #7
 800c95a:	e0a0      	b.n	800ca9e <dir_register+0x33e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c95c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c960:	2b04      	cmp	r3, #4
 800c962:	d002      	beq.n	800c96a <dir_register+0x20a>
 800c964:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c968:	e099      	b.n	800ca9e <dir_register+0x33e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c96a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c974:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c978:	f003 0302 	and.w	r3, r3, #2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d007      	beq.n	800c990 <dir_register+0x230>
 800c980:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c982:	330c      	adds	r3, #12
 800c984:	4a49      	ldr	r2, [pc, #292]	; (800caac <dir_register+0x34c>)
 800c986:	fba2 2303 	umull	r2, r3, r2, r3
 800c98a:	089b      	lsrs	r3, r3, #2
 800c98c:	3301      	adds	r3, #1
 800c98e:	e000      	b.n	800c992 <dir_register+0x232>
 800c990:	2301      	movs	r3, #1
 800c992:	67bb      	str	r3, [r7, #120]	; 0x78
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c994:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7fe ffc5 	bl	800b926 <dir_alloc>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c9a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d14a      	bne.n	800ca40 <dir_register+0x2e0>
 800c9aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	67bb      	str	r3, [r7, #120]	; 0x78
 800c9b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d044      	beq.n	800ca40 <dir_register+0x2e0>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9bc:	015b      	lsls	r3, r3, #5
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7fe fe54 	bl	800b670 <dir_sdi>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 800c9ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d134      	bne.n	800ca40 <dir_register+0x2e0>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	3340      	adds	r3, #64	; 0x40
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff fa0a 	bl	800bdf4 <sum_sfn>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c9ee:	f7fe f83b 	bl	800aa68 <move_window>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res != FR_OK) break;
 800c9f8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d11e      	bne.n	800ca3e <dir_register+0x2de>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ca00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca02:	68d8      	ldr	r0, [r3, #12]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ca08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ca10:	f7ff f8f8 	bl	800bc04 <put_lfn>
				fs->wflag = 1;
 800ca14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca16:	2201      	movs	r2, #1
 800ca18:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7fe fead 	bl	800b77c <dir_next>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			} while (res == FR_OK && --nent);
 800ca28:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d107      	bne.n	800ca40 <dir_register+0x2e0>
 800ca30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca32:	3b01      	subs	r3, #1
 800ca34:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1d4      	bne.n	800c9e6 <dir_register+0x286>
 800ca3c:	e000      	b.n	800ca40 <dir_register+0x2e0>
				if (res != FR_OK) break;
 800ca3e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ca40:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d128      	bne.n	800ca9a <dir_register+0x33a>
		res = move_window(fs, dp->sect);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ca50:	f7fe f80a 	bl	800aa68 <move_window>
 800ca54:	4603      	mov	r3, r0
 800ca56:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 800ca5a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d11b      	bne.n	800ca9a <dir_register+0x33a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca66:	2220      	movs	r2, #32
 800ca68:	2100      	movs	r1, #0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fd fdee 	bl	800a64c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3340      	adds	r3, #64	; 0x40
 800ca78:	220b      	movs	r2, #11
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	f7fd fdc5 	bl	800a60a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8a:	330c      	adds	r3, #12
 800ca8c:	f002 0218 	and.w	r2, r2, #24
 800ca90:	b2d2      	uxtb	r2, r2
 800ca92:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ca94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca96:	2201      	movs	r2, #1
 800ca98:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ca9a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3788      	adds	r7, #136	; 0x88
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bdb0      	pop	{r4, r5, r7, pc}
 800caa6:	bf00      	nop
 800caa8:	88888889 	.word	0x88888889
 800caac:	4ec4ec4f 	.word	0x4ec4ec4f

0800cab0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2200      	movs	r2, #0
 800cac4:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f000 80d8 	beq.w	800cc80 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b04      	cmp	r3, #4
 800cad6:	d106      	bne.n	800cae6 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff fa10 	bl	800bf04 <get_xdir_info>
		return;
 800cae4:	e0cd      	b.n	800cc82 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caee:	d032      	beq.n	800cb56 <get_fileinfo+0xa6>
			i = j = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	61bb      	str	r3, [r7, #24]
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800caf8:	e01b      	b.n	800cb32 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cafa:	89fb      	ldrh	r3, [r7, #14]
 800cafc:	2100      	movs	r1, #0
 800cafe:	4618      	mov	r0, r3
 800cb00:	f002 f9fe 	bl	800ef00 <ff_convert>
 800cb04:	4603      	mov	r3, r0
 800cb06:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800cb08:	89fb      	ldrh	r3, [r7, #14]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d102      	bne.n	800cb14 <get_fileinfo+0x64>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	61fb      	str	r3, [r7, #28]
 800cb12:	e01a      	b.n	800cb4a <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	2bfe      	cmp	r3, #254	; 0xfe
 800cb18:	d902      	bls.n	800cb20 <get_fileinfo+0x70>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	61fb      	str	r3, [r7, #28]
 800cb1e:	e014      	b.n	800cb4a <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	61fa      	str	r2, [r7, #28]
 800cb26:	89fa      	ldrh	r2, [r7, #14]
 800cb28:	b2d1      	uxtb	r1, r2
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	4413      	add	r3, r2
 800cb2e:	460a      	mov	r2, r1
 800cb30:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	68da      	ldr	r2, [r3, #12]
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	1c59      	adds	r1, r3, #1
 800cb3a:	61b9      	str	r1, [r7, #24]
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	4413      	add	r3, r2
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	81fb      	strh	r3, [r7, #14]
 800cb44:	89fb      	ldrh	r3, [r7, #14]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1d7      	bne.n	800cafa <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	4413      	add	r3, r2
 800cb50:	331a      	adds	r3, #26
 800cb52:	2200      	movs	r2, #0
 800cb54:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	61bb      	str	r3, [r7, #24]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	4413      	add	r3, r2
 800cb64:	331a      	adds	r3, #26
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cb6a:	e04c      	b.n	800cc06 <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	1c59      	adds	r1, r3, #1
 800cb74:	61f9      	str	r1, [r7, #28]
 800cb76:	4413      	add	r3, r2
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	2b20      	cmp	r3, #32
 800cb80:	d100      	bne.n	800cb84 <get_fileinfo+0xd4>
 800cb82:	e040      	b.n	800cc06 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cb84:	7dfb      	ldrb	r3, [r7, #23]
 800cb86:	2b05      	cmp	r3, #5
 800cb88:	d101      	bne.n	800cb8e <get_fileinfo+0xde>
 800cb8a:	23e5      	movs	r3, #229	; 0xe5
 800cb8c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	2b09      	cmp	r3, #9
 800cb92:	d10f      	bne.n	800cbb4 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800cb94:	89bb      	ldrh	r3, [r7, #12]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d105      	bne.n	800cba6 <get_fileinfo+0xf6>
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	4413      	add	r3, r2
 800cba0:	331a      	adds	r3, #26
 800cba2:	222e      	movs	r2, #46	; 0x2e
 800cba4:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	1c5a      	adds	r2, r3, #1
 800cbaa:	61ba      	str	r2, [r7, #24]
 800cbac:	683a      	ldr	r2, [r7, #0]
 800cbae:	4413      	add	r3, r2
 800cbb0:	222e      	movs	r2, #46	; 0x2e
 800cbb2:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cbb4:	683a      	ldr	r2, [r7, #0]
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	4413      	add	r3, r2
 800cbba:	330d      	adds	r3, #13
 800cbbc:	7dfa      	ldrb	r2, [r7, #23]
 800cbbe:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cbc0:	89bb      	ldrh	r3, [r7, #12]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d11c      	bne.n	800cc00 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
 800cbc8:	2b40      	cmp	r3, #64	; 0x40
 800cbca:	d913      	bls.n	800cbf4 <get_fileinfo+0x144>
 800cbcc:	7dfb      	ldrb	r3, [r7, #23]
 800cbce:	2b5a      	cmp	r3, #90	; 0x5a
 800cbd0:	d810      	bhi.n	800cbf4 <get_fileinfo+0x144>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd6:	330c      	adds	r3, #12
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	2b08      	cmp	r3, #8
 800cbe0:	d901      	bls.n	800cbe6 <get_fileinfo+0x136>
 800cbe2:	2310      	movs	r3, #16
 800cbe4:	e000      	b.n	800cbe8 <get_fileinfo+0x138>
 800cbe6:	2308      	movs	r3, #8
 800cbe8:	4013      	ands	r3, r2
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d002      	beq.n	800cbf4 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800cbee:	7dfb      	ldrb	r3, [r7, #23]
 800cbf0:	3320      	adds	r3, #32
 800cbf2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	331a      	adds	r3, #26
 800cbfc:	7dfa      	ldrb	r2, [r7, #23]
 800cbfe:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	3301      	adds	r3, #1
 800cc04:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	2b0a      	cmp	r3, #10
 800cc0a:	d9af      	bls.n	800cb6c <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800cc0c:	89bb      	ldrh	r3, [r7, #12]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10d      	bne.n	800cc2e <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	4413      	add	r3, r2
 800cc18:	331a      	adds	r3, #26
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc22:	330c      	adds	r3, #12
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <get_fileinfo+0x17e>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	4413      	add	r3, r2
 800cc34:	330d      	adds	r3, #13
 800cc36:	2200      	movs	r2, #0
 800cc38:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3e:	7ada      	ldrb	r2, [r3, #11]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc48:	331c      	adds	r3, #28
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fd fb30 	bl	800a2b0 <ld_dword>
 800cc50:	4603      	mov	r3, r0
 800cc52:	461a      	mov	r2, r3
 800cc54:	f04f 0300 	mov.w	r3, #0
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	e9c1 2300 	strd	r2, r3, [r1]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc62:	3316      	adds	r3, #22
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fd fb23 	bl	800a2b0 <ld_dword>
 800cc6a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	815a      	strh	r2, [r3, #10]
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	0c1b      	lsrs	r3, r3, #16
 800cc78:	b29a      	uxth	r2, r3
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	811a      	strh	r2, [r3, #8]
 800cc7e:	e000      	b.n	800cc82 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cc80:	bf00      	nop
}
 800cc82:	3720      	adds	r7, #32
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08a      	sub	sp, #40	; 0x28
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	613b      	str	r3, [r7, #16]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	60fb      	str	r3, [r7, #12]
 800cca0:	2300      	movs	r3, #0
 800cca2:	617b      	str	r3, [r7, #20]
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	1c5a      	adds	r2, r3, #1
 800ccac:	61ba      	str	r2, [r7, #24]
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ccb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccb8:	2b1f      	cmp	r3, #31
 800ccba:	d940      	bls.n	800cd3e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ccbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccbe:	2b2f      	cmp	r3, #47	; 0x2f
 800ccc0:	d006      	beq.n	800ccd0 <create_name+0x48>
 800ccc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccc4:	2b5c      	cmp	r3, #92	; 0x5c
 800ccc6:	d110      	bne.n	800ccea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ccc8:	e002      	b.n	800ccd0 <create_name+0x48>
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	3301      	adds	r3, #1
 800ccce:	61bb      	str	r3, [r7, #24]
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b2f      	cmp	r3, #47	; 0x2f
 800ccda:	d0f6      	beq.n	800ccca <create_name+0x42>
 800ccdc:	693a      	ldr	r2, [r7, #16]
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	4413      	add	r3, r2
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	2b5c      	cmp	r3, #92	; 0x5c
 800cce6:	d0f0      	beq.n	800ccca <create_name+0x42>
			break;
 800cce8:	e02a      	b.n	800cd40 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	2bfe      	cmp	r3, #254	; 0xfe
 800ccee:	d901      	bls.n	800ccf4 <create_name+0x6c>
 800ccf0:	2306      	movs	r3, #6
 800ccf2:	e1cb      	b.n	800d08c <create_name+0x404>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ccf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ccfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f002 f8fe 	bl	800ef00 <ff_convert>
 800cd04:	4603      	mov	r3, r0
 800cd06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cd08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <create_name+0x8a>
 800cd0e:	2306      	movs	r3, #6
 800cd10:	e1bc      	b.n	800d08c <create_name+0x404>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cd12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd14:	2b7f      	cmp	r3, #127	; 0x7f
 800cd16:	d809      	bhi.n	800cd2c <create_name+0xa4>
 800cd18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	48a5      	ldr	r0, [pc, #660]	; (800cfb4 <create_name+0x32c>)
 800cd1e:	f7fd fcd7 	bl	800a6d0 <chk_chr>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <create_name+0xa4>
 800cd28:	2306      	movs	r3, #6
 800cd2a:	e1af      	b.n	800d08c <create_name+0x404>
		lfn[di++] = w;					/* Store the Unicode character */
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	617a      	str	r2, [r7, #20]
 800cd32:	005b      	lsls	r3, r3, #1
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	4413      	add	r3, r2
 800cd38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd3a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cd3c:	e7b4      	b.n	800cca8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cd3e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	441a      	add	r2, r3
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cd4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd4c:	2b1f      	cmp	r3, #31
 800cd4e:	d801      	bhi.n	800cd54 <create_name+0xcc>
 800cd50:	2304      	movs	r3, #4
 800cd52:	e000      	b.n	800cd56 <create_name+0xce>
 800cd54:	2300      	movs	r3, #0
 800cd56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d109      	bne.n	800cd74 <create_name+0xec>
 800cd60:	697a      	ldr	r2, [r7, #20]
 800cd62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd66:	4413      	add	r3, r2
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	2b2e      	cmp	r3, #46	; 0x2e
 800cd72:	d015      	beq.n	800cda0 <create_name+0x118>
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d14d      	bne.n	800ce16 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd80:	4413      	add	r3, r2
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	4413      	add	r3, r2
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd8c:	d143      	bne.n	800ce16 <create_name+0x18e>
 800cd8e:	697a      	ldr	r2, [r7, #20]
 800cd90:	4b89      	ldr	r3, [pc, #548]	; (800cfb8 <create_name+0x330>)
 800cd92:	4413      	add	r3, r2
 800cd94:	005b      	lsls	r3, r3, #1
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	4413      	add	r3, r2
 800cd9a:	881b      	ldrh	r3, [r3, #0]
 800cd9c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd9e:	d13a      	bne.n	800ce16 <create_name+0x18e>
		lfn[di] = 0;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	4413      	add	r3, r2
 800cda8:	2200      	movs	r2, #0
 800cdaa:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800cdac:	2300      	movs	r3, #0
 800cdae:	623b      	str	r3, [r7, #32]
 800cdb0:	e00f      	b.n	800cdd2 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800cdb2:	6a3a      	ldr	r2, [r7, #32]
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d201      	bcs.n	800cdbe <create_name+0x136>
 800cdba:	212e      	movs	r1, #46	; 0x2e
 800cdbc:	e000      	b.n	800cdc0 <create_name+0x138>
 800cdbe:	2120      	movs	r1, #32
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	6a3b      	ldr	r3, [r7, #32]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	3340      	adds	r3, #64	; 0x40
 800cdc8:	460a      	mov	r2, r1
 800cdca:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	623b      	str	r3, [r7, #32]
 800cdd2:	6a3b      	ldr	r3, [r7, #32]
 800cdd4:	2b0a      	cmp	r3, #10
 800cdd6:	d9ec      	bls.n	800cdb2 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800cdd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cddc:	f043 0320 	orr.w	r3, r3, #32
 800cde0:	b2d9      	uxtb	r1, r3
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	4413      	add	r3, r2
 800cde8:	3340      	adds	r3, #64	; 0x40
 800cdea:	460a      	mov	r2, r1
 800cdec:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	e14c      	b.n	800d08c <create_name+0x404>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800cdf2:	697a      	ldr	r2, [r7, #20]
 800cdf4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cdf8:	4413      	add	r3, r2
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4413      	add	r3, r2
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ce04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce06:	2b20      	cmp	r3, #32
 800ce08:	d002      	beq.n	800ce10 <create_name+0x188>
 800ce0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce0e:	d106      	bne.n	800ce1e <create_name+0x196>
		di--;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	3b01      	subs	r3, #1
 800ce14:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1ea      	bne.n	800cdf2 <create_name+0x16a>
 800ce1c:	e000      	b.n	800ce20 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 800ce1e:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	4413      	add	r3, r2
 800ce28:	2200      	movs	r2, #0
 800ce2a:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <create_name+0x1ae>
 800ce32:	2306      	movs	r3, #6
 800ce34:	e12a      	b.n	800d08c <create_name+0x404>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3340      	adds	r3, #64	; 0x40
 800ce3a:	220b      	movs	r2, #11
 800ce3c:	2120      	movs	r1, #32
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fd fc04 	bl	800a64c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ce44:	2300      	movs	r3, #0
 800ce46:	61bb      	str	r3, [r7, #24]
 800ce48:	e002      	b.n	800ce50 <create_name+0x1c8>
 800ce4a:	69bb      	ldr	r3, [r7, #24]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	61bb      	str	r3, [r7, #24]
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	4413      	add	r3, r2
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	2b20      	cmp	r3, #32
 800ce5c:	d0f5      	beq.n	800ce4a <create_name+0x1c2>
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	4413      	add	r3, r2
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	2b2e      	cmp	r3, #46	; 0x2e
 800ce6a:	d0ee      	beq.n	800ce4a <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d009      	beq.n	800ce86 <create_name+0x1fe>
 800ce72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce76:	f043 0303 	orr.w	r3, r3, #3
 800ce7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ce7e:	e002      	b.n	800ce86 <create_name+0x1fe>
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	3b01      	subs	r3, #1
 800ce84:	617b      	str	r3, [r7, #20]
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d009      	beq.n	800cea0 <create_name+0x218>
 800ce8c:	697a      	ldr	r2, [r7, #20]
 800ce8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ce92:	4413      	add	r3, r2
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	4413      	add	r3, r2
 800ce9a:	881b      	ldrh	r3, [r3, #0]
 800ce9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce9e:	d1ef      	bne.n	800ce80 <create_name+0x1f8>

	i = b = 0; ni = 8;
 800cea0:	2300      	movs	r3, #0
 800cea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cea6:	2300      	movs	r3, #0
 800cea8:	623b      	str	r3, [r7, #32]
 800ceaa:	2308      	movs	r3, #8
 800ceac:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	61ba      	str	r2, [r7, #24]
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	68fa      	ldr	r2, [r7, #12]
 800ceb8:	4413      	add	r3, r2
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f000 8099 	beq.w	800cff8 <create_name+0x370>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec8:	2b20      	cmp	r3, #32
 800ceca:	d006      	beq.n	800ceda <create_name+0x252>
 800cecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cece:	2b2e      	cmp	r3, #46	; 0x2e
 800ced0:	d10a      	bne.n	800cee8 <create_name+0x260>
 800ced2:	69ba      	ldr	r2, [r7, #24]
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d006      	beq.n	800cee8 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 800ceda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cede:	f043 0303 	orr.w	r3, r3, #3
 800cee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cee6:	e086      	b.n	800cff6 <create_name+0x36e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cee8:	6a3a      	ldr	r2, [r7, #32]
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d203      	bcs.n	800cef8 <create_name+0x270>
 800cef0:	69ba      	ldr	r2, [r7, #24]
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d123      	bne.n	800cf40 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	2b0b      	cmp	r3, #11
 800cefc:	d106      	bne.n	800cf0c <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 800cefe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf02:	f043 0303 	orr.w	r3, r3, #3
 800cf06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf0a:	e078      	b.n	800cffe <create_name+0x376>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d005      	beq.n	800cf20 <create_name+0x298>
 800cf14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf18:	f043 0303 	orr.w	r3, r3, #3
 800cf1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cf20:	69ba      	ldr	r2, [r7, #24]
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d869      	bhi.n	800cffc <create_name+0x374>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	61bb      	str	r3, [r7, #24]
 800cf2c:	2308      	movs	r3, #8
 800cf2e:	623b      	str	r3, [r7, #32]
 800cf30:	230b      	movs	r3, #11
 800cf32:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cf34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf3e:	e05a      	b.n	800cff6 <create_name+0x36e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cf40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf42:	2b7f      	cmp	r3, #127	; 0x7f
 800cf44:	d914      	bls.n	800cf70 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cf46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf48:	2100      	movs	r1, #0
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f001 ffd8 	bl	800ef00 <ff_convert>
 800cf50:	4603      	mov	r3, r0
 800cf52:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cf54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d004      	beq.n	800cf64 <create_name+0x2dc>
 800cf5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf5c:	3b80      	subs	r3, #128	; 0x80
 800cf5e:	4a17      	ldr	r2, [pc, #92]	; (800cfbc <create_name+0x334>)
 800cf60:	5cd3      	ldrb	r3, [r2, r3]
 800cf62:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cf64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf68:	f043 0302 	orr.w	r3, r3, #2
 800cf6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cf70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d007      	beq.n	800cf86 <create_name+0x2fe>
 800cf76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf78:	4619      	mov	r1, r3
 800cf7a:	4811      	ldr	r0, [pc, #68]	; (800cfc0 <create_name+0x338>)
 800cf7c:	f7fd fba8 	bl	800a6d0 <chk_chr>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d008      	beq.n	800cf98 <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cf86:	235f      	movs	r3, #95	; 0x5f
 800cf88:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cf8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf8e:	f043 0303 	orr.w	r3, r3, #3
 800cf92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf96:	e024      	b.n	800cfe2 <create_name+0x35a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cf98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf9a:	2b40      	cmp	r3, #64	; 0x40
 800cf9c:	d912      	bls.n	800cfc4 <create_name+0x33c>
 800cf9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfa0:	2b5a      	cmp	r3, #90	; 0x5a
 800cfa2:	d80f      	bhi.n	800cfc4 <create_name+0x33c>
					b |= 2;
 800cfa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfa8:	f043 0302 	orr.w	r3, r3, #2
 800cfac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfb0:	e017      	b.n	800cfe2 <create_name+0x35a>
 800cfb2:	bf00      	nop
 800cfb4:	080120dc 	.word	0x080120dc
 800cfb8:	7ffffffe 	.word	0x7ffffffe
 800cfbc:	08012188 	.word	0x08012188
 800cfc0:	080120e8 	.word	0x080120e8
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cfc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfc6:	2b60      	cmp	r3, #96	; 0x60
 800cfc8:	d90b      	bls.n	800cfe2 <create_name+0x35a>
 800cfca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfcc:	2b7a      	cmp	r3, #122	; 0x7a
 800cfce:	d808      	bhi.n	800cfe2 <create_name+0x35a>
						b |= 1; w -= 0x20;
 800cfd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfd4:	f043 0301 	orr.w	r3, r3, #1
 800cfd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfde:	3b20      	subs	r3, #32
 800cfe0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	1c5a      	adds	r2, r3, #1
 800cfe6:	623a      	str	r2, [r7, #32]
 800cfe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cfea:	b2d1      	uxtb	r1, r2
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	4413      	add	r3, r2
 800cff0:	460a      	mov	r2, r1
 800cff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cff6:	e75a      	b.n	800ceae <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 800cff8:	bf00      	nop
 800cffa:	e000      	b.n	800cffe <create_name+0x376>
			if (si > di) break;			/* No extension */
 800cffc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d004:	2be5      	cmp	r3, #229	; 0xe5
 800d006:	d103      	bne.n	800d010 <create_name+0x388>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2205      	movs	r2, #5
 800d00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	2b08      	cmp	r3, #8
 800d014:	d104      	bne.n	800d020 <create_name+0x398>
 800d016:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d024:	f003 030c 	and.w	r3, r3, #12
 800d028:	2b0c      	cmp	r3, #12
 800d02a:	d005      	beq.n	800d038 <create_name+0x3b0>
 800d02c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d030:	f003 0303 	and.w	r3, r3, #3
 800d034:	2b03      	cmp	r3, #3
 800d036:	d105      	bne.n	800d044 <create_name+0x3bc>
 800d038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d03c:	f043 0302 	orr.w	r3, r3, #2
 800d040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d048:	f003 0302 	and.w	r3, r3, #2
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d117      	bne.n	800d080 <create_name+0x3f8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d054:	f003 0303 	and.w	r3, r3, #3
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d105      	bne.n	800d068 <create_name+0x3e0>
 800d05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d060:	f043 0310 	orr.w	r3, r3, #16
 800d064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d06c:	f003 030c 	and.w	r3, r3, #12
 800d070:	2b04      	cmp	r3, #4
 800d072:	d105      	bne.n	800d080 <create_name+0x3f8>
 800d074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d078:	f043 0308 	orr.w	r3, r3, #8
 800d07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d086:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800d08a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3728      	adds	r7, #40	; 0x28
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b09c      	sub	sp, #112	; 0x70
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	66bb      	str	r3, [r7, #104]	; 0x68
	FATFS *fs = obj->fs;
 800d0a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	667b      	str	r3, [r7, #100]	; 0x64


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	2b2f      	cmp	r3, #47	; 0x2f
 800d0ae:	d00b      	beq.n	800d0c8 <follow_path+0x34>
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	2b5c      	cmp	r3, #92	; 0x5c
 800d0b6:	d007      	beq.n	800d0c8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800d0b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0ba:	69da      	ldr	r2, [r3, #28]
 800d0bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0be:	609a      	str	r2, [r3, #8]
 800d0c0:	e00d      	b.n	800d0de <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	603b      	str	r3, [r7, #0]
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b2f      	cmp	r3, #47	; 0x2f
 800d0ce:	d0f8      	beq.n	800d0c2 <follow_path+0x2e>
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	2b5c      	cmp	r3, #92	; 0x5c
 800d0d6:	d0f4      	beq.n	800d0c2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800d0d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0da:	2200      	movs	r2, #0
 800d0dc:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d0de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	61da      	str	r2, [r3, #28]
#if _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 800d0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b04      	cmp	r3, #4
 800d0ea:	d135      	bne.n	800d158 <follow_path+0xc4>
 800d0ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d031      	beq.n	800d158 <follow_path+0xc4>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
 800d0f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0f6:	6a1a      	ldr	r2, [r3, #32]
 800d0f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0fa:	621a      	str	r2, [r3, #32]
		obj->c_size = fs->cdc_size;
 800d0fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d102:	625a      	str	r2, [r3, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 800d104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d10a:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 800d10c:	f107 0308 	add.w	r3, r7, #8
 800d110:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d112:	4618      	mov	r0, r3
 800d114:	f7ff f836 	bl	800c184 <load_obj_dir>
 800d118:	4603      	mov	r3, r0
 800d11a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (res != FR_OK) return res;
 800d11e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <follow_path+0x98>
 800d126:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d12a:	e0c1      	b.n	800d2b0 <follow_path+0x21c>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 800d12c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	3338      	adds	r3, #56	; 0x38
 800d132:	4618      	mov	r0, r3
 800d134:	f7fd f8bc 	bl	800a2b0 <ld_dword>
 800d138:	4603      	mov	r3, r0
 800d13a:	461a      	mov	r2, r3
 800d13c:	f04f 0300 	mov.w	r3, #0
 800d140:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d142:	e9c1 2304 	strd	r2, r3, [r1, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	3321      	adds	r3, #33	; 0x21
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	f003 0302 	and.w	r3, r3, #2
 800d152:	b2da      	uxtb	r2, r3
 800d154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d156:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	2b1f      	cmp	r3, #31
 800d15e:	d80b      	bhi.n	800d178 <follow_path+0xe4>
		dp->fn[NSFLAG] = NS_NONAME;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2280      	movs	r2, #128	; 0x80
 800d164:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800d168:	2100      	movs	r1, #0
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7fe fa80 	bl	800b670 <dir_sdi>
 800d170:	4603      	mov	r3, r0
 800d172:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800d176:	e099      	b.n	800d2ac <follow_path+0x218>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d178:	463b      	mov	r3, r7
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff fd83 	bl	800cc88 <create_name>
 800d182:	4603      	mov	r3, r0
 800d184:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (res != FR_OK) break;
 800d188:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f040 8088 	bne.w	800d2a2 <follow_path+0x20e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7ff f9ba 	bl	800c50c <dir_find>
 800d198:	4603      	mov	r3, r0
 800d19a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			ns = dp->fn[NSFLAG];
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d1a4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			if (res != FR_OK) {				/* Failed to find the object */
 800d1a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d021      	beq.n	800d1f4 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d1b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d1b4:	2b04      	cmp	r3, #4
 800d1b6:	d176      	bne.n	800d2a6 <follow_path+0x212>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800d1b8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d1bc:	f003 0320 	and.w	r3, r3, #32
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00d      	beq.n	800d1e0 <follow_path+0x14c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800d1c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d066      	beq.n	800d29e <follow_path+0x20a>
						dp->fn[NSFLAG] = NS_NONAME;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2280      	movs	r2, #128	; 0x80
 800d1d4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800d1de:	e062      	b.n	800d2a6 <follow_path+0x212>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d1e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d1e4:	f003 0304 	and.w	r3, r3, #4
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d15c      	bne.n	800d2a6 <follow_path+0x212>
 800d1ec:	2305      	movs	r3, #5
 800d1ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
 800d1f2:	e058      	b.n	800d2a6 <follow_path+0x212>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1f4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d1f8:	f003 0304 	and.w	r3, r3, #4
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d154      	bne.n	800d2aa <follow_path+0x216>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d202:	799b      	ldrb	r3, [r3, #6]
 800d204:	f003 0310 	and.w	r3, r3, #16
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d103      	bne.n	800d214 <follow_path+0x180>
				res = FR_NO_PATH; break;
 800d20c:	2305      	movs	r3, #5
 800d20e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800d212:	e04b      	b.n	800d2ac <follow_path+0x218>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800d214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	2b04      	cmp	r3, #4
 800d21a:	d130      	bne.n	800d27e <follow_path+0x1ea>
				obj->c_scl = obj->sclust;
 800d21c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d222:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d226:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d22a:	4613      	mov	r3, r2
 800d22c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d230:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d232:	79d2      	ldrb	r2, [r2, #7]
 800d234:	431a      	orrs	r2, r3
 800d236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d238:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d23e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d240:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800d242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	3334      	adds	r3, #52	; 0x34
 800d248:	4618      	mov	r0, r3
 800d24a:	f7fd f831 	bl	800a2b0 <ld_dword>
 800d24e:	4602      	mov	r2, r0
 800d250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d252:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	3321      	adds	r3, #33	; 0x21
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	f003 0302 	and.w	r3, r3, #2
 800d260:	b2da      	uxtb	r2, r3
 800d262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d264:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	3338      	adds	r3, #56	; 0x38
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fd f842 	bl	800a2f6 <ld_qword>
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d278:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d27c:	e77c      	b.n	800d178 <follow_path+0xe4>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d27e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d280:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28c:	4413      	add	r3, r2
 800d28e:	4619      	mov	r1, r3
 800d290:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d292:	f7fe fba4 	bl	800b9de <ld_clust>
 800d296:	4602      	mov	r2, r0
 800d298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d29a:	609a      	str	r2, [r3, #8]
 800d29c:	e76c      	b.n	800d178 <follow_path+0xe4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800d29e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d2a0:	e76a      	b.n	800d178 <follow_path+0xe4>
			if (res != FR_OK) break;
 800d2a2:	bf00      	nop
 800d2a4:	e002      	b.n	800d2ac <follow_path+0x218>
				break;
 800d2a6:	bf00      	nop
 800d2a8:	e000      	b.n	800d2ac <follow_path+0x218>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d2aa:	bf00      	nop
			}
		}
	}

	return res;
 800d2ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3770      	adds	r7, #112	; 0x70
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d2c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d031      	beq.n	800d332 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	e002      	b.n	800d2dc <get_ldnumber+0x24>
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	617b      	str	r3, [r7, #20]
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b1f      	cmp	r3, #31
 800d2e2:	d903      	bls.n	800d2ec <get_ldnumber+0x34>
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	2b3a      	cmp	r3, #58	; 0x3a
 800d2ea:	d1f4      	bne.n	800d2d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b3a      	cmp	r3, #58	; 0x3a
 800d2f2:	d11c      	bne.n	800d32e <get_ldnumber+0x76>
			tp = *path;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	60fa      	str	r2, [r7, #12]
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	3b30      	subs	r3, #48	; 0x30
 800d304:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b09      	cmp	r3, #9
 800d30a:	d80e      	bhi.n	800d32a <get_ldnumber+0x72>
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	429a      	cmp	r2, r3
 800d312:	d10a      	bne.n	800d32a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d107      	bne.n	800d32a <get_ldnumber+0x72>
					vol = (int)i;
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	3301      	adds	r3, #1
 800d322:	617b      	str	r3, [r7, #20]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	e002      	b.n	800d334 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d32e:	2300      	movs	r3, #0
 800d330:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d332:	693b      	ldr	r3, [r7, #16]
}
 800d334:	4618      	mov	r0, r3
 800d336:	371c      	adds	r7, #28
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	70da      	strb	r2, [r3, #3]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d356:	645a      	str	r2, [r3, #68]	; 0x44
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7fd fb84 	bl	800aa68 <move_window>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <check_fs+0x2a>
 800d366:	2304      	movs	r3, #4
 800d368:	e044      	b.n	800d3f4 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	3348      	adds	r3, #72	; 0x48
 800d36e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d372:	4618      	mov	r0, r3
 800d374:	f7fc ff84 	bl	800a280 <ld_word>
 800d378:	4603      	mov	r3, r0
 800d37a:	461a      	mov	r2, r3
 800d37c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d380:	429a      	cmp	r2, r3
 800d382:	d001      	beq.n	800d388 <check_fs+0x48>
 800d384:	2303      	movs	r3, #3
 800d386:	e035      	b.n	800d3f4 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d38e:	2be9      	cmp	r3, #233	; 0xe9
 800d390:	d009      	beq.n	800d3a6 <check_fs+0x66>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d398:	2beb      	cmp	r3, #235	; 0xeb
 800d39a:	d11e      	bne.n	800d3da <check_fs+0x9a>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800d3a2:	2b90      	cmp	r3, #144	; 0x90
 800d3a4:	d119      	bne.n	800d3da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3348      	adds	r3, #72	; 0x48
 800d3aa:	3336      	adds	r3, #54	; 0x36
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fc ff7f 	bl	800a2b0 <ld_dword>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d3b8:	4a10      	ldr	r2, [pc, #64]	; (800d3fc <check_fs+0xbc>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d101      	bne.n	800d3c2 <check_fs+0x82>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e018      	b.n	800d3f4 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	3348      	adds	r3, #72	; 0x48
 800d3c6:	3352      	adds	r3, #82	; 0x52
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fc ff71 	bl	800a2b0 <ld_dword>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	4a0b      	ldr	r2, [pc, #44]	; (800d400 <check_fs+0xc0>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d101      	bne.n	800d3da <check_fs+0x9a>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e00c      	b.n	800d3f4 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	3348      	adds	r3, #72	; 0x48
 800d3de:	220b      	movs	r2, #11
 800d3e0:	4908      	ldr	r1, [pc, #32]	; (800d404 <check_fs+0xc4>)
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fd f94d 	bl	800a682 <mem_cmp>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <check_fs+0xb2>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e000      	b.n	800d3f4 <check_fs+0xb4>
#endif
	return 2;
 800d3f2:	2302      	movs	r3, #2
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	00544146 	.word	0x00544146
 800d400:	33544146 	.word	0x33544146
 800d404:	080120f0 	.word	0x080120f0

0800d408 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d40c:	b098      	sub	sp, #96	; 0x60
 800d40e:	af00      	add	r7, sp, #0
 800d410:	60f8      	str	r0, [r7, #12]
 800d412:	60b9      	str	r1, [r7, #8]
 800d414:	4613      	mov	r3, r2
 800d416:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2200      	movs	r2, #0
 800d41c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f7ff ff4a 	bl	800d2b8 <get_ldnumber>
 800d424:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800d426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d428:	2b00      	cmp	r3, #0
 800d42a:	da01      	bge.n	800d430 <find_volume+0x28>
 800d42c:	230b      	movs	r3, #11
 800d42e:	e32e      	b.n	800da8e <find_volume+0x686>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d430:	4ab0      	ldr	r2, [pc, #704]	; (800d6f4 <find_volume+0x2ec>)
 800d432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d438:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d43a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d101      	bne.n	800d444 <find_volume+0x3c>
 800d440:	230c      	movs	r3, #12
 800d442:	e324      	b.n	800da8e <find_volume+0x686>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d448:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	f023 0301 	bic.w	r3, r3, #1
 800d450:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d01a      	beq.n	800d490 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d45c:	785b      	ldrb	r3, [r3, #1]
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fc fe70 	bl	800a144 <disk_status>
 800d464:	4603      	mov	r3, r0
 800d466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d46a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d46e:	f003 0301 	and.w	r3, r3, #1
 800d472:	2b00      	cmp	r3, #0
 800d474:	d10c      	bne.n	800d490 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d476:	79fb      	ldrb	r3, [r7, #7]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d007      	beq.n	800d48c <find_volume+0x84>
 800d47c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d480:	f003 0304 	and.w	r3, r3, #4
 800d484:	2b00      	cmp	r3, #0
 800d486:	d001      	beq.n	800d48c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d488:	230a      	movs	r3, #10
 800d48a:	e300      	b.n	800da8e <find_volume+0x686>
			}
			return FR_OK;				/* The file system object is valid */
 800d48c:	2300      	movs	r3, #0
 800d48e:	e2fe      	b.n	800da8e <find_volume+0x686>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d492:	2200      	movs	r2, #0
 800d494:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d498:	b2da      	uxtb	r2, r3
 800d49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d49c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4a0:	785b      	ldrb	r3, [r3, #1]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fc fe68 	bl	800a178 <disk_initialize>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d4ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e2e7      	b.n	800da8e <find_volume+0x686>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d007      	beq.n	800d4d4 <find_volume+0xcc>
 800d4c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4c8:	f003 0304 	and.w	r3, r3, #4
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d001      	beq.n	800d4d4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d4d0:	230a      	movs	r3, #10
 800d4d2:	e2dc      	b.n	800da8e <find_volume+0x686>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d4d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4da:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d4dc:	f7ff ff30 	bl	800d340 <check_fs>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d4e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d14b      	bne.n	800d586 <find_volume+0x17e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4f2:	e01f      	b.n	800d534 <find_volume+0x12c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d4f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d502:	4413      	add	r3, r2
 800d504:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d508:	3304      	adds	r3, #4
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d006      	beq.n	800d51e <find_volume+0x116>
 800d510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d512:	3308      	adds	r3, #8
 800d514:	4618      	mov	r0, r3
 800d516:	f7fc fecb 	bl	800a2b0 <ld_dword>
 800d51a:	4602      	mov	r2, r0
 800d51c:	e000      	b.n	800d520 <find_volume+0x118>
 800d51e:	2200      	movs	r2, #0
 800d520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d528:	440b      	add	r3, r1
 800d52a:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d530:	3301      	adds	r3, #1
 800d532:	64bb      	str	r3, [r7, #72]	; 0x48
 800d534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d536:	2b03      	cmp	r3, #3
 800d538:	d9dc      	bls.n	800d4f4 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d53a:	2300      	movs	r3, #0
 800d53c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800d53e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <find_volume+0x142>
 800d544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d546:	3b01      	subs	r3, #1
 800d548:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d54a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d552:	4413      	add	r3, r2
 800d554:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d558:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d55a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d005      	beq.n	800d56c <find_volume+0x164>
 800d560:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d562:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d564:	f7ff feec 	bl	800d340 <check_fs>
 800d568:	4603      	mov	r3, r0
 800d56a:	e000      	b.n	800d56e <find_volume+0x166>
 800d56c:	2303      	movs	r3, #3
 800d56e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d576:	2b01      	cmp	r3, #1
 800d578:	d905      	bls.n	800d586 <find_volume+0x17e>
 800d57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d57c:	3301      	adds	r3, #1
 800d57e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d582:	2b03      	cmp	r3, #3
 800d584:	d9e1      	bls.n	800d54a <find_volume+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d58a:	2b04      	cmp	r3, #4
 800d58c:	d101      	bne.n	800d592 <find_volume+0x18a>
 800d58e:	2301      	movs	r3, #1
 800d590:	e27d      	b.n	800da8e <find_volume+0x686>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d592:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d596:	2b01      	cmp	r3, #1
 800d598:	d901      	bls.n	800d59e <find_volume+0x196>
 800d59a:	230d      	movs	r3, #13
 800d59c:	e277      	b.n	800da8e <find_volume+0x686>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d59e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	f040 80f4 	bne.w	800d790 <find_volume+0x388>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d5a8:	230b      	movs	r3, #11
 800d5aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5ac:	e002      	b.n	800d5b4 <find_volume+0x1ac>
 800d5ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5b6:	2b3f      	cmp	r3, #63	; 0x3f
 800d5b8:	d806      	bhi.n	800d5c8 <find_volume+0x1c0>
 800d5ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5be:	4413      	add	r3, r2
 800d5c0:	3348      	adds	r3, #72	; 0x48
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d0f2      	beq.n	800d5ae <find_volume+0x1a6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ca:	2b3f      	cmp	r3, #63	; 0x3f
 800d5cc:	d801      	bhi.n	800d5d2 <find_volume+0x1ca>
 800d5ce:	230d      	movs	r3, #13
 800d5d0:	e25d      	b.n	800da8e <find_volume+0x686>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d5d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5d4:	3348      	adds	r3, #72	; 0x48
 800d5d6:	3368      	adds	r3, #104	; 0x68
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fc fe51 	bl	800a280 <ld_word>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5e4:	d001      	beq.n	800d5ea <find_volume+0x1e2>
 800d5e6:	230d      	movs	r3, #13
 800d5e8:	e251      	b.n	800da8e <find_volume+0x686>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ec:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d5f0:	2b09      	cmp	r3, #9
 800d5f2:	d001      	beq.n	800d5f8 <find_volume+0x1f0>
			return FR_NO_FILESYSTEM;
 800d5f4:	230d      	movs	r3, #13
 800d5f6:	e24a      	b.n	800da8e <find_volume+0x686>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5fa:	3348      	adds	r3, #72	; 0x48
 800d5fc:	3348      	adds	r3, #72	; 0x48
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fc fe79 	bl	800a2f6 <ld_qword>
 800d604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d606:	461a      	mov	r2, r3
 800d608:	f04f 0300 	mov.w	r3, #0
 800d60c:	eb10 0802 	adds.w	r8, r0, r2
 800d610:	eb41 0903 	adc.w	r9, r1, r3
 800d614:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d618:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	bf08      	it	eq
 800d620:	2a00      	cmpeq	r2, #0
 800d622:	d301      	bcc.n	800d628 <find_volume+0x220>
 800d624:	230d      	movs	r3, #13
 800d626:	e232      	b.n	800da8e <find_volume+0x686>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d62a:	3348      	adds	r3, #72	; 0x48
 800d62c:	3354      	adds	r3, #84	; 0x54
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fc fe3e 	bl	800a2b0 <ld_dword>
 800d634:	4602      	mov	r2, r0
 800d636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d638:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d63c:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
 800d640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d642:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d646:	789b      	ldrb	r3, [r3, #2]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d001      	beq.n	800d650 <find_volume+0x248>
 800d64c:	230d      	movs	r3, #13
 800d64e:	e21e      	b.n	800da8e <find_volume+0x686>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d652:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800d656:	461a      	mov	r2, r3
 800d658:	2301      	movs	r3, #1
 800d65a:	4093      	lsls	r3, r2
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d660:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d664:	895b      	ldrh	r3, [r3, #10]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d101      	bne.n	800d66e <find_volume+0x266>
 800d66a:	230d      	movs	r3, #13
 800d66c:	e20f      	b.n	800da8e <find_volume+0x686>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d670:	3348      	adds	r3, #72	; 0x48
 800d672:	335c      	adds	r3, #92	; 0x5c
 800d674:	4618      	mov	r0, r3
 800d676:	f7fc fe1b 	bl	800a2b0 <ld_dword>
 800d67a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	4a1e      	ldr	r2, [pc, #120]	; (800d6f8 <find_volume+0x2f0>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d901      	bls.n	800d688 <find_volume+0x280>
 800d684:	230d      	movs	r3, #13
 800d686:	e202      	b.n	800da8e <find_volume+0x686>
		fs->n_fatent = nclst + 2;
 800d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68a:	1c9a      	adds	r2, r3, #2
 800d68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d68e:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d694:	635a      	str	r2, [r3, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d698:	3348      	adds	r3, #72	; 0x48
 800d69a:	3358      	adds	r3, #88	; 0x58
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fc fe07 	bl	800a2b0 <ld_dword>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6a6:	441a      	add	r2, r3
 800d6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6aa:	641a      	str	r2, [r3, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ae:	3348      	adds	r3, #72	; 0x48
 800d6b0:	3350      	adds	r3, #80	; 0x50
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fc fdfc 	bl	800a2b0 <ld_dword>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6bc:	441a      	add	r2, r3
 800d6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c0:	639a      	str	r2, [r3, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f04f 0100 	mov.w	r1, #0
 800d6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ce:	895b      	ldrh	r3, [r3, #10]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d4:	fb03 f302 	mul.w	r3, r3, r2
 800d6d8:	461a      	mov	r2, r3
 800d6da:	f04f 0300 	mov.w	r3, #0
 800d6de:	1884      	adds	r4, r0, r2
 800d6e0:	eb41 0503 	adc.w	r5, r1, r3
 800d6e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d6e8:	42ab      	cmp	r3, r5
 800d6ea:	bf08      	it	eq
 800d6ec:	42a2      	cmpeq	r2, r4
 800d6ee:	d205      	bcs.n	800d6fc <find_volume+0x2f4>
 800d6f0:	230d      	movs	r3, #13
 800d6f2:	e1cc      	b.n	800da8e <find_volume+0x686>
 800d6f4:	2000034c 	.word	0x2000034c
 800d6f8:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fe:	3348      	adds	r3, #72	; 0x48
 800d700:	3360      	adds	r3, #96	; 0x60
 800d702:	4618      	mov	r0, r3
 800d704:	f7fc fdd4 	bl	800a2b0 <ld_dword>
 800d708:	4602      	mov	r2, r0
 800d70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d70c:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d712:	4619      	mov	r1, r3
 800d714:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d716:	f7fd fa43 	bl	800aba0 <clust2sect>
 800d71a:	4603      	mov	r3, r0
 800d71c:	4619      	mov	r1, r3
 800d71e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d720:	f7fd f9a2 	bl	800aa68 <move_window>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <find_volume+0x326>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e1af      	b.n	800da8e <find_volume+0x686>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d72e:	2300      	movs	r3, #0
 800d730:	64bb      	str	r3, [r7, #72]	; 0x48
 800d732:	e015      	b.n	800d760 <find_volume+0x358>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d738:	4413      	add	r3, r2
 800d73a:	3348      	adds	r3, #72	; 0x48
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	2b81      	cmp	r3, #129	; 0x81
 800d740:	d10b      	bne.n	800d75a <find_volume+0x352>
 800d742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d744:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d74a:	3314      	adds	r3, #20
 800d74c:	4413      	add	r3, r2
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fc fdae 	bl	800a2b0 <ld_dword>
 800d754:	4603      	mov	r3, r0
 800d756:	2b02      	cmp	r3, #2
 800d758:	d007      	beq.n	800d76a <find_volume+0x362>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d75a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d75c:	3320      	adds	r3, #32
 800d75e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d766:	d3e5      	bcc.n	800d734 <find_volume+0x32c>
 800d768:	e000      	b.n	800d76c <find_volume+0x364>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d76a:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d76c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d76e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d772:	d101      	bne.n	800d778 <find_volume+0x370>
 800d774:	230d      	movs	r3, #13
 800d776:	e18a      	b.n	800da8e <find_volume+0x686>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d77a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d77e:	619a      	str	r2, [r3, #24]
 800d780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d782:	699a      	ldr	r2, [r3, #24]
 800d784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d786:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d788:	2304      	movs	r3, #4
 800d78a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d78e:	e163      	b.n	800da58 <find_volume+0x650>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d792:	3348      	adds	r3, #72	; 0x48
 800d794:	330b      	adds	r3, #11
 800d796:	4618      	mov	r0, r3
 800d798:	f7fc fd72 	bl	800a280 <ld_word>
 800d79c:	4603      	mov	r3, r0
 800d79e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7a2:	d001      	beq.n	800d7a8 <find_volume+0x3a0>
 800d7a4:	230d      	movs	r3, #13
 800d7a6:	e172      	b.n	800da8e <find_volume+0x686>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7aa:	3348      	adds	r3, #72	; 0x48
 800d7ac:	3316      	adds	r3, #22
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fc fd66 	bl	800a280 <ld_word>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d7b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <find_volume+0x3c4>
 800d7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7c0:	3348      	adds	r3, #72	; 0x48
 800d7c2:	3324      	adds	r3, #36	; 0x24
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7fc fd73 	bl	800a2b0 <ld_dword>
 800d7ca:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800d7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7d0:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7d4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800d7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7de:	789b      	ldrb	r3, [r3, #2]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d005      	beq.n	800d7f0 <find_volume+0x3e8>
 800d7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7e6:	789b      	ldrb	r3, [r3, #2]
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d001      	beq.n	800d7f0 <find_volume+0x3e8>
 800d7ec:	230d      	movs	r3, #13
 800d7ee:	e14e      	b.n	800da8e <find_volume+0x686>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7f2:	789b      	ldrb	r3, [r3, #2]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7f8:	fb02 f303 	mul.w	r3, r2, r3
 800d7fc:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d800:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d804:	b29a      	uxth	r2, r3
 800d806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d808:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d80a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d80c:	895b      	ldrh	r3, [r3, #10]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d008      	beq.n	800d824 <find_volume+0x41c>
 800d812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d814:	895b      	ldrh	r3, [r3, #10]
 800d816:	461a      	mov	r2, r3
 800d818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d81a:	895b      	ldrh	r3, [r3, #10]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	4013      	ands	r3, r2
 800d820:	2b00      	cmp	r3, #0
 800d822:	d001      	beq.n	800d828 <find_volume+0x420>
 800d824:	230d      	movs	r3, #13
 800d826:	e132      	b.n	800da8e <find_volume+0x686>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d82a:	3348      	adds	r3, #72	; 0x48
 800d82c:	3311      	adds	r3, #17
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fc fd26 	bl	800a280 <ld_word>
 800d834:	4603      	mov	r3, r0
 800d836:	461a      	mov	r2, r3
 800d838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d83a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d83e:	891b      	ldrh	r3, [r3, #8]
 800d840:	f003 030f 	and.w	r3, r3, #15
 800d844:	b29b      	uxth	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <find_volume+0x446>
 800d84a:	230d      	movs	r3, #13
 800d84c:	e11f      	b.n	800da8e <find_volume+0x686>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d850:	3348      	adds	r3, #72	; 0x48
 800d852:	3313      	adds	r3, #19
 800d854:	4618      	mov	r0, r3
 800d856:	f7fc fd13 	bl	800a280 <ld_word>
 800d85a:	4603      	mov	r3, r0
 800d85c:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d860:	2b00      	cmp	r3, #0
 800d862:	d106      	bne.n	800d872 <find_volume+0x46a>
 800d864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d866:	3348      	adds	r3, #72	; 0x48
 800d868:	3320      	adds	r3, #32
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fc fd20 	bl	800a2b0 <ld_dword>
 800d870:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d874:	3348      	adds	r3, #72	; 0x48
 800d876:	330e      	adds	r3, #14
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fc fd01 	bl	800a280 <ld_word>
 800d87e:	4603      	mov	r3, r0
 800d880:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d884:	2b00      	cmp	r3, #0
 800d886:	d101      	bne.n	800d88c <find_volume+0x484>
 800d888:	230d      	movs	r3, #13
 800d88a:	e100      	b.n	800da8e <find_volume+0x686>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d88c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d88e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d890:	4413      	add	r3, r2
 800d892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d894:	8912      	ldrh	r2, [r2, #8]
 800d896:	0912      	lsrs	r2, r2, #4
 800d898:	b292      	uxth	r2, r2
 800d89a:	4413      	add	r3, r2
 800d89c:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d89e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d201      	bcs.n	800d8aa <find_volume+0x4a2>
 800d8a6:	230d      	movs	r3, #13
 800d8a8:	e0f1      	b.n	800da8e <find_volume+0x686>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d8aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d8b2:	8952      	ldrh	r2, [r2, #10]
 800d8b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <find_volume+0x4bc>
 800d8c0:	230d      	movs	r3, #13
 800d8c2:	e0e4      	b.n	800da8e <find_volume+0x686>
		fmt = FS_FAT32;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d802      	bhi.n	800d8da <find_volume+0x4d2>
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d802      	bhi.n	800d8ea <find_volume+0x4e2>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	1c9a      	adds	r2, r3, #2
 800d8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8f0:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800d8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8f6:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d8f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d8fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8fc:	441a      	add	r2, r3
 800d8fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 800d902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	441a      	add	r2, r3
 800d908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d90a:	641a      	str	r2, [r3, #64]	; 0x40
		if (fmt == FS_FAT32) {
 800d90c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d910:	2b03      	cmp	r3, #3
 800d912:	d11e      	bne.n	800d952 <find_volume+0x54a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d916:	3348      	adds	r3, #72	; 0x48
 800d918:	332a      	adds	r3, #42	; 0x2a
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fc fcb0 	bl	800a280 <ld_word>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d001      	beq.n	800d92a <find_volume+0x522>
 800d926:	230d      	movs	r3, #13
 800d928:	e0b1      	b.n	800da8e <find_volume+0x686>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d92c:	891b      	ldrh	r3, [r3, #8]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <find_volume+0x52e>
 800d932:	230d      	movs	r3, #13
 800d934:	e0ab      	b.n	800da8e <find_volume+0x686>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d938:	3348      	adds	r3, #72	; 0x48
 800d93a:	332c      	adds	r3, #44	; 0x2c
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fc fcb7 	bl	800a2b0 <ld_dword>
 800d942:	4602      	mov	r2, r0
 800d944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d946:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d950:	e01f      	b.n	800d992 <find_volume+0x58a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d954:	891b      	ldrh	r3, [r3, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <find_volume+0x556>
 800d95a:	230d      	movs	r3, #13
 800d95c:	e097      	b.n	800da8e <find_volume+0x686>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d964:	441a      	add	r2, r3
 800d966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d968:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d96a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d103      	bne.n	800d97a <find_volume+0x572>
 800d972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	e00a      	b.n	800d990 <find_volume+0x588>
 800d97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d97e:	4613      	mov	r3, r2
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	4413      	add	r3, r2
 800d984:	085a      	lsrs	r2, r3, #1
 800d986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d990:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d998:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d99c:	0a5b      	lsrs	r3, r3, #9
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d201      	bcs.n	800d9a6 <find_volume+0x59e>
 800d9a2:	230d      	movs	r3, #13
 800d9a4:	e073      	b.n	800da8e <find_volume+0x686>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9ac:	619a      	str	r2, [r3, #24]
 800d9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b0:	699a      	ldr	r2, [r3, #24]
 800d9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d9b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b8:	2280      	movs	r2, #128	; 0x80
 800d9ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9c0:	2b03      	cmp	r3, #3
 800d9c2:	d149      	bne.n	800da58 <find_volume+0x650>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c6:	3348      	adds	r3, #72	; 0x48
 800d9c8:	3330      	adds	r3, #48	; 0x30
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fc fc58 	bl	800a280 <ld_word>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d140      	bne.n	800da58 <find_volume+0x650>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9d8:	3301      	adds	r3, #1
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d9de:	f7fd f843 	bl	800aa68 <move_window>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d137      	bne.n	800da58 <find_volume+0x650>
		{
			fs->fsi_flag = 0;
 800d9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f0:	3348      	adds	r3, #72	; 0x48
 800d9f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fc fc42 	bl	800a280 <ld_word>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	461a      	mov	r2, r3
 800da00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800da04:	429a      	cmp	r2, r3
 800da06:	d127      	bne.n	800da58 <find_volume+0x650>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800da08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da0a:	3348      	adds	r3, #72	; 0x48
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fc fc4f 	bl	800a2b0 <ld_dword>
 800da12:	4603      	mov	r3, r0
 800da14:	4a20      	ldr	r2, [pc, #128]	; (800da98 <find_volume+0x690>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d11e      	bne.n	800da58 <find_volume+0x650>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800da1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da1c:	3348      	adds	r3, #72	; 0x48
 800da1e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800da22:	4618      	mov	r0, r3
 800da24:	f7fc fc44 	bl	800a2b0 <ld_dword>
 800da28:	4603      	mov	r3, r0
 800da2a:	4a1c      	ldr	r2, [pc, #112]	; (800da9c <find_volume+0x694>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d113      	bne.n	800da58 <find_volume+0x650>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da32:	3348      	adds	r3, #72	; 0x48
 800da34:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fc fc39 	bl	800a2b0 <ld_dword>
 800da3e:	4602      	mov	r2, r0
 800da40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da42:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da46:	3348      	adds	r3, #72	; 0x48
 800da48:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fc fc2f 	bl	800a2b0 <ld_dword>
 800da52:	4602      	mov	r2, r0
 800da54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da56:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da5a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800da5e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da60:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <find_volume+0x698>)
 800da62:	881b      	ldrh	r3, [r3, #0]
 800da64:	3301      	adds	r3, #1
 800da66:	b29a      	uxth	r2, r3
 800da68:	4b0d      	ldr	r3, [pc, #52]	; (800daa0 <find_volume+0x698>)
 800da6a:	801a      	strh	r2, [r3, #0]
 800da6c:	4b0c      	ldr	r3, [pc, #48]	; (800daa0 <find_volume+0x698>)
 800da6e:	881a      	ldrh	r2, [r3, #0]
 800da70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da72:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800da74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da76:	4a0b      	ldr	r2, [pc, #44]	; (800daa4 <find_volume+0x69c>)
 800da78:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800da7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da7c:	4a0a      	ldr	r2, [pc, #40]	; (800daa8 <find_volume+0x6a0>)
 800da7e:	611a      	str	r2, [r3, #16]
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800da80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da82:	2200      	movs	r2, #0
 800da84:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da86:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800da88:	f7fc ff86 	bl	800a998 <clear_lock>
#endif
	return FR_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3760      	adds	r7, #96	; 0x60
 800da92:	46bd      	mov	sp, r7
 800da94:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800da98:	41615252 	.word	0x41615252
 800da9c:	61417272 	.word	0x61417272
 800daa0:	20000350 	.word	0x20000350
 800daa4:	200015a4 	.word	0x200015a4
 800daa8:	20001344 	.word	0x20001344

0800daac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dab6:	2309      	movs	r3, #9
 800dab8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d01c      	beq.n	800dafa <validate+0x4e>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d018      	beq.n	800dafa <validate+0x4e>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d013      	beq.n	800dafa <validate+0x4e>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	889a      	ldrh	r2, [r3, #4]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	88db      	ldrh	r3, [r3, #6]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d10c      	bne.n	800dafa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	785b      	ldrb	r3, [r3, #1]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fc fb2c 	bl	800a144 <disk_status>
 800daec:	4603      	mov	r3, r0
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <validate+0x4e>
			res = FR_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dafa:	7bfb      	ldrb	r3, [r7, #15]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d102      	bne.n	800db06 <validate+0x5a>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	e000      	b.n	800db08 <validate+0x5c>
 800db06:	2300      	movs	r3, #0
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	6013      	str	r3, [r2, #0]
	return res;
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
	...

0800db18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	4613      	mov	r3, r2
 800db24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800db2a:	f107 0310 	add.w	r3, r7, #16
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff fbc2 	bl	800d2b8 <get_ldnumber>
 800db34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	da01      	bge.n	800db40 <f_mount+0x28>
 800db3c:	230b      	movs	r3, #11
 800db3e:	e02b      	b.n	800db98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db40:	4a17      	ldr	r2, [pc, #92]	; (800dba0 <f_mount+0x88>)
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d005      	beq.n	800db5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db50:	69b8      	ldr	r0, [r7, #24]
 800db52:	f7fc ff21 	bl	800a998 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	2200      	movs	r2, #0
 800db5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d002      	beq.n	800db68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2200      	movs	r2, #0
 800db66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	490d      	ldr	r1, [pc, #52]	; (800dba0 <f_mount+0x88>)
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d002      	beq.n	800db7e <f_mount+0x66>
 800db78:	79fb      	ldrb	r3, [r7, #7]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d001      	beq.n	800db82 <f_mount+0x6a>
 800db7e:	2300      	movs	r3, #0
 800db80:	e00a      	b.n	800db98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db82:	f107 010c 	add.w	r1, r7, #12
 800db86:	f107 0308 	add.w	r3, r7, #8
 800db8a:	2200      	movs	r2, #0
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7ff fc3b 	bl	800d408 <find_volume>
 800db92:	4603      	mov	r3, r0
 800db94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db96:	7dfb      	ldrb	r3, [r7, #23]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3720      	adds	r7, #32
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	2000034c 	.word	0x2000034c

0800dba4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800dba8:	b0a4      	sub	sp, #144	; 0x90
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	60f8      	str	r0, [r7, #12]
 800dbae:	60b9      	str	r1, [r7, #8]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <f_open+0x1a>
 800dbba:	2309      	movs	r3, #9
 800dbbc:	e29e      	b.n	800e0fc <f_open+0x558>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dbbe:	79fb      	ldrb	r3, [r7, #7]
 800dbc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbc4:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dbc6:	79fa      	ldrb	r2, [r7, #7]
 800dbc8:	f107 0114 	add.w	r1, r7, #20
 800dbcc:	f107 0308 	add.w	r3, r7, #8
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7ff fc19 	bl	800d408 <find_volume>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800dbdc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f040 8282 	bne.w	800e0ea <f_open+0x546>
		dj.obj.fs = fs;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	f107 0318 	add.w	r3, r7, #24
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7ff fa4e 	bl	800d094 <follow_path>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dbfe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d11a      	bne.n	800dc3c <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dc06:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800dc0a:	b25b      	sxtb	r3, r3
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	da03      	bge.n	800dc18 <f_open+0x74>
				res = FR_INVALID_NAME;
 800dc10:	2306      	movs	r3, #6
 800dc12:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800dc16:	e011      	b.n	800dc3c <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc18:	79fb      	ldrb	r3, [r7, #7]
 800dc1a:	f023 0301 	bic.w	r3, r3, #1
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bf14      	ite	ne
 800dc22:	2301      	movne	r3, #1
 800dc24:	2300      	moveq	r3, #0
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	461a      	mov	r2, r3
 800dc2a:	f107 0318 	add.w	r3, r7, #24
 800dc2e:	4611      	mov	r1, r2
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fc fd69 	bl	800a708 <chk_lock>
 800dc36:	4603      	mov	r3, r0
 800dc38:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc3c:	79fb      	ldrb	r3, [r7, #7]
 800dc3e:	f003 031c 	and.w	r3, r3, #28
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 8109 	beq.w	800de5a <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 800dc48:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d017      	beq.n	800dc80 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc50:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dc54:	2b04      	cmp	r3, #4
 800dc56:	d10e      	bne.n	800dc76 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc58:	f7fc fdb2 	bl	800a7c0 <enq_lock>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d006      	beq.n	800dc70 <f_open+0xcc>
 800dc62:	f107 0318 	add.w	r3, r7, #24
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fe fd7a 	bl	800c760 <dir_register>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	e000      	b.n	800dc72 <f_open+0xce>
 800dc70:	2312      	movs	r3, #18
 800dc72:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	f043 0308 	orr.w	r3, r3, #8
 800dc7c:	71fb      	strb	r3, [r7, #7]
 800dc7e:	e010      	b.n	800dca2 <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc80:	7fbb      	ldrb	r3, [r7, #30]
 800dc82:	f003 0311 	and.w	r3, r3, #17
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d003      	beq.n	800dc92 <f_open+0xee>
					res = FR_DENIED;
 800dc8a:	2307      	movs	r3, #7
 800dc8c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800dc90:	e007      	b.n	800dca2 <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc92:	79fb      	ldrb	r3, [r7, #7]
 800dc94:	f003 0304 	and.w	r3, r3, #4
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <f_open+0xfe>
 800dc9c:	2308      	movs	r3, #8
 800dc9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dca2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f040 80f1 	bne.w	800de8e <f_open+0x2ea>
 800dcac:	79fb      	ldrb	r3, [r7, #7]
 800dcae:	f003 0308 	and.w	r3, r3, #8
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 80eb 	beq.w	800de8e <f_open+0x2ea>
				dw = GET_FATTIME();
 800dcb8:	f7fc f87e 	bl	8009db8 <get_fattime>
 800dcbc:	67f8      	str	r0, [r7, #124]	; 0x7c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	2b04      	cmp	r3, #4
 800dcc4:	f040 8082 	bne.w	800ddcc <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800dcc8:	697a      	ldr	r2, [r7, #20]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	3334      	adds	r3, #52	; 0x34
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7fc faeb 	bl	800a2b0 <ld_dword>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	3338      	adds	r3, #56	; 0x38
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fc fb05 	bl	800a2f6 <ld_qword>
 800dcec:	4602      	mov	r2, r0
 800dcee:	460b      	mov	r3, r1
 800dcf0:	68f9      	ldr	r1, [r7, #12]
 800dcf2:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	691b      	ldr	r3, [r3, #16]
 800dcfa:	3321      	adds	r3, #33	; 0x21
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	f003 0302 	and.w	r3, r3, #2
 800dd02:	b2da      	uxtb	r2, r3
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	3308      	adds	r3, #8
 800dd14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fc fbc3 	bl	800a4a2 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	3314      	adds	r3, #20
 800dd22:	2200      	movs	r2, #0
 800dd24:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	330c      	adds	r3, #12
 800dd2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fc fbb7 	bl	800a4a2 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	691b      	ldr	r3, [r3, #16]
 800dd38:	3315      	adds	r3, #21
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	3304      	adds	r3, #4
 800dd44:	2220      	movs	r2, #32
 800dd46:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	3334      	adds	r3, #52	; 0x34
 800dd4e:	2100      	movs	r1, #0
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7fc fba6 	bl	800a4a2 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	691b      	ldr	r3, [r3, #16]
 800dd5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd5e:	f04f 0200 	mov.w	r2, #0
 800dd62:	f04f 0300 	mov.w	r3, #0
 800dd66:	4608      	mov	r0, r1
 800dd68:	f7fc fbc7 	bl	800a4fa <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	691b      	ldr	r3, [r3, #16]
 800dd70:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dd74:	f04f 0200 	mov.w	r2, #0
 800dd78:	f04f 0300 	mov.w	r3, #0
 800dd7c:	4608      	mov	r0, r1
 800dd7e:	f7fc fbbc 	bl	800a4fa <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	3321      	adds	r3, #33	; 0x21
 800dd88:	2201      	movs	r2, #1
 800dd8a:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800dd8c:	f107 0318 	add.w	r3, r7, #24
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7fe fa32 	bl	800c1fa <store_xdir>
 800dd96:	4603      	mov	r3, r0
 800dd98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800dd9c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d174      	bne.n	800de8e <f_open+0x2ea>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d070      	beq.n	800de8e <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	f7fd fa65 	bl	800b284 <remove_chain>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	689a      	ldr	r2, [r3, #8]
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	3a01      	subs	r2, #1
 800ddc8:	615a      	str	r2, [r3, #20]
 800ddca:	e060      	b.n	800de8e <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ddcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddce:	330e      	adds	r3, #14
 800ddd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fc fb65 	bl	800a4a2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ddd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddda:	3316      	adds	r3, #22
 800dddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fc fb5f 	bl	800a4a2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dde4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dde6:	330b      	adds	r3, #11
 800dde8:	2220      	movs	r2, #32
 800ddea:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddf0:	4611      	mov	r1, r2
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fd fdf3 	bl	800b9de <ld_clust>
 800ddf8:	67b8      	str	r0, [r7, #120]	; 0x78
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ddfe:	2200      	movs	r2, #0
 800de00:	4618      	mov	r0, r3
 800de02:	f7fd fe0b 	bl	800ba1c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800de06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de08:	331c      	adds	r3, #28
 800de0a:	2100      	movs	r1, #0
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7fc fb48 	bl	800a4a2 <st_dword>
					fs->wflag = 1;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	2201      	movs	r2, #1
 800de16:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800de18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d037      	beq.n	800de8e <f_open+0x2ea>
						dw = fs->winsect;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de22:	67fb      	str	r3, [r7, #124]	; 0x7c
						res = remove_chain(&dj.obj, cl, 0);
 800de24:	f107 0318 	add.w	r3, r7, #24
 800de28:	2200      	movs	r2, #0
 800de2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fd fa29 	bl	800b284 <remove_chain>
 800de32:	4603      	mov	r3, r0
 800de34:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 800de38:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d126      	bne.n	800de8e <f_open+0x2ea>
							res = move_window(fs, dw);
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800de44:	4618      	mov	r0, r3
 800de46:	f7fc fe0f 	bl	800aa68 <move_window>
 800de4a:	4603      	mov	r3, r0
 800de4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800de54:	3a01      	subs	r2, #1
 800de56:	615a      	str	r2, [r3, #20]
 800de58:	e019      	b.n	800de8e <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800de5a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d115      	bne.n	800de8e <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800de62:	7fbb      	ldrb	r3, [r7, #30]
 800de64:	f003 0310 	and.w	r3, r3, #16
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <f_open+0x2d0>
					res = FR_NO_FILE;
 800de6c:	2304      	movs	r3, #4
 800de6e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800de72:	e00c      	b.n	800de8e <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800de74:	79fb      	ldrb	r3, [r7, #7]
 800de76:	f003 0302 	and.w	r3, r3, #2
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d007      	beq.n	800de8e <f_open+0x2ea>
 800de7e:	7fbb      	ldrb	r3, [r7, #30]
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <f_open+0x2ea>
						res = FR_DENIED;
 800de88:	2307      	movs	r3, #7
 800de8a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 800de8e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800de92:	2b00      	cmp	r3, #0
 800de94:	d128      	bne.n	800dee8 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	f003 0308 	and.w	r3, r3, #8
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d003      	beq.n	800dea8 <f_open+0x304>
				mode |= FA_MODIFIED;
 800dea0:	79fb      	ldrb	r3, [r7, #7]
 800dea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dea6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800deb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800deb6:	79fb      	ldrb	r3, [r7, #7]
 800deb8:	f023 0301 	bic.w	r3, r3, #1
 800debc:	2b00      	cmp	r3, #0
 800debe:	bf14      	ite	ne
 800dec0:	2301      	movne	r3, #1
 800dec2:	2300      	moveq	r3, #0
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	461a      	mov	r2, r3
 800dec8:	f107 0318 	add.w	r3, r7, #24
 800decc:	4611      	mov	r1, r2
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fc fc98 	bl	800a804 <inc_lock>
 800ded4:	4602      	mov	r2, r0
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d102      	bne.n	800dee8 <f_open+0x344>
 800dee2:	2302      	movs	r3, #2
 800dee4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dee8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 80fc 	bne.w	800e0ea <f_open+0x546>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2b04      	cmp	r3, #4
 800def8:	d12c      	bne.n	800df54 <f_open+0x3b0>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800defa:	6a3a      	ldr	r2, [r7, #32]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800df00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800df04:	4613      	mov	r3, r2
 800df06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800df0a:	7ffa      	ldrb	r2, [r7, #31]
 800df0c:	431a      	orrs	r2, r3
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800df12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	3334      	adds	r3, #52	; 0x34
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fc f9c6 	bl	800a2b0 <ld_dword>
 800df24:	4602      	mov	r2, r0
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	3338      	adds	r3, #56	; 0x38
 800df30:	4618      	mov	r0, r3
 800df32:	f7fc f9e0 	bl	800a2f6 <ld_qword>
 800df36:	4602      	mov	r2, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	68f9      	ldr	r1, [r7, #12]
 800df3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	3321      	adds	r3, #33	; 0x21
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 0302 	and.w	r3, r3, #2
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	71da      	strb	r2, [r3, #7]
 800df52:	e014      	b.n	800df7e <f_open+0x3da>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df58:	4611      	mov	r1, r2
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fd fd3f 	bl	800b9de <ld_clust>
 800df60:	4602      	mov	r2, r0
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800df66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df68:	331c      	adds	r3, #28
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fc f9a0 	bl	800a2b0 <ld_dword>
 800df70:	4603      	mov	r3, r0
 800df72:	461a      	mov	r2, r3
 800df74:	f04f 0300 	mov.w	r3, #0
 800df78:	68f9      	ldr	r1, [r7, #12]
 800df7a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2200      	movs	r2, #0
 800df82:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800df84:	697a      	ldr	r2, [r7, #20]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	88da      	ldrh	r2, [r3, #6]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	79fa      	ldrb	r2, [r7, #7]
 800df96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dfa8:	68f9      	ldr	r1, [r7, #12]
 800dfaa:	f04f 0200 	mov.w	r2, #0
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	3354      	adds	r3, #84	; 0x54
 800dfba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fc fb43 	bl	800a64c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dfc6:	79fb      	ldrb	r3, [r7, #7]
 800dfc8:	f003 0320 	and.w	r3, r3, #32
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f000 808c 	beq.w	800e0ea <f_open+0x546>
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	f000 8086 	beq.w	800e0ea <f_open+0x546>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dfe4:	68f9      	ldr	r1, [r7, #12]
 800dfe6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	895b      	ldrh	r3, [r3, #10]
 800dfee:	025b      	lsls	r3, r3, #9
 800dff0:	677b      	str	r3, [r7, #116]	; 0x74
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e000:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800e004:	e022      	b.n	800e04c <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fc fde7 	bl	800abe0 <get_fat>
 800e012:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 800e016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d802      	bhi.n	800e024 <f_open+0x480>
 800e01e:	2302      	movs	r3, #2
 800e020:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e02c:	d102      	bne.n	800e034 <f_open+0x490>
 800e02e:	2301      	movs	r3, #1
 800e030:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e036:	461a      	mov	r2, r3
 800e038:	f04f 0300 	mov.w	r3, #0
 800e03c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e040:	ebb0 0802 	subs.w	r8, r0, r2
 800e044:	eb61 0903 	sbc.w	r9, r1, r3
 800e048:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
 800e04c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e050:	2b00      	cmp	r3, #0
 800e052:	d109      	bne.n	800e068 <f_open+0x4c4>
 800e054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e056:	4618      	mov	r0, r3
 800e058:	f04f 0100 	mov.w	r1, #0
 800e05c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e060:	4299      	cmp	r1, r3
 800e062:	bf08      	it	eq
 800e064:	4290      	cmpeq	r0, r2
 800e066:	d3ce      	bcc.n	800e006 <f_open+0x462>
				}
				fp->clust = clst;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e06e:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e070:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e074:	2b00      	cmp	r3, #0
 800e076:	d138      	bne.n	800e0ea <f_open+0x546>
 800e078:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800e07c:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e080:	f04f 0100 	mov.w	r1, #0
 800e084:	ea02 0400 	and.w	r4, r2, r0
 800e088:	ea03 0501 	and.w	r5, r3, r1
 800e08c:	ea54 0305 	orrs.w	r3, r4, r5
 800e090:	d02b      	beq.n	800e0ea <f_open+0x546>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e098:	4618      	mov	r0, r3
 800e09a:	f7fc fd81 	bl	800aba0 <clust2sect>
 800e09e:	6738      	str	r0, [r7, #112]	; 0x70
 800e0a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d103      	bne.n	800e0ae <f_open+0x50a>
						res = FR_INT_ERR;
 800e0a6:	2302      	movs	r3, #2
 800e0a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800e0ac:	e01d      	b.n	800e0ea <f_open+0x546>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e0ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e0b2:	f04f 0200 	mov.w	r2, #0
 800e0b6:	f04f 0300 	mov.w	r3, #0
 800e0ba:	0a42      	lsrs	r2, r0, #9
 800e0bc:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e0c0:	0a4b      	lsrs	r3, r1, #9
 800e0c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0c4:	441a      	add	r2, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	7858      	ldrb	r0, [r3, #1]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0d8:	2301      	movs	r3, #1
 800e0da:	f7fc f873 	bl	800a1c4 <disk_read>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <f_open+0x546>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e0ea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d002      	beq.n	800e0f8 <f_open+0x554>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e0f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3790      	adds	r7, #144	; 0x90
 800e100:	46bd      	mov	sp, r7
 800e102:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e106 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e106:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e10a:	b08c      	sub	sp, #48	; 0x30
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	2200      	movs	r2, #0
 800e11e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f107 0210 	add.w	r2, r7, #16
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff fcbf 	bl	800daac <validate>
 800e12e:	4603      	mov	r3, r0
 800e130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d108      	bne.n	800e14e <f_write+0x48>
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <f_write+0x4e>
 800e14e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e152:	e18c      	b.n	800e46e <f_write+0x368>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e15a:	f003 0302 	and.w	r3, r3, #2
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <f_write+0x60>
 800e162:	2307      	movs	r3, #7
 800e164:	e183      	b.n	800e46e <f_write+0x368>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	2b04      	cmp	r3, #4
 800e16c:	f000 816f 	beq.w	800e44e <f_write+0x348>
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	18d1      	adds	r1, r2, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e180:	4613      	mov	r3, r2
 800e182:	4299      	cmp	r1, r3
 800e184:	f080 8163 	bcs.w	800e44e <f_write+0x348>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e18e:	4613      	mov	r3, r2
 800e190:	43db      	mvns	r3, r3
 800e192:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e194:	e15b      	b.n	800e44e <f_write+0x348>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e19c:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e1a0:	f04f 0100 	mov.w	r1, #0
 800e1a4:	ea02 0400 	and.w	r4, r2, r0
 800e1a8:	ea03 0501 	and.w	r5, r3, r1
 800e1ac:	ea54 0305 	orrs.w	r3, r4, r5
 800e1b0:	f040 80fb 	bne.w	800e3aa <f_write+0x2a4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e1ba:	f04f 0200 	mov.w	r2, #0
 800e1be:	f04f 0300 	mov.w	r3, #0
 800e1c2:	0a42      	lsrs	r2, r0, #9
 800e1c4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e1c8:	0a4b      	lsrs	r3, r1, #9
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	895b      	ldrh	r3, [r3, #10]
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d146      	bne.n	800e268 <f_write+0x162>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	d10c      	bne.n	800e1fe <f_write+0xf8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d11a      	bne.n	800e226 <f_write+0x120>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fd f8f9 	bl	800b3ec <create_chain>
 800e1fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800e1fc:	e013      	b.n	800e226 <f_write+0x120>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e202:	2b00      	cmp	r3, #0
 800e204:	d007      	beq.n	800e216 <f_write+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f7fd f9ee 	bl	800b5ee <clmt_clust>
 800e212:	62b8      	str	r0, [r7, #40]	; 0x28
 800e214:	e007      	b.n	800e226 <f_write+0x120>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e21c:	4619      	mov	r1, r3
 800e21e:	4610      	mov	r0, r2
 800e220:	f7fd f8e4 	bl	800b3ec <create_chain>
 800e224:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 8115 	beq.w	800e458 <f_write+0x352>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	2b01      	cmp	r3, #1
 800e232:	d105      	bne.n	800e240 <f_write+0x13a>
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2202      	movs	r2, #2
 800e238:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e23c:	2302      	movs	r3, #2
 800e23e:	e116      	b.n	800e46e <f_write+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e246:	d105      	bne.n	800e254 <f_write+0x14e>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e250:	2301      	movs	r3, #1
 800e252:	e10c      	b.n	800e46e <f_write+0x368>
				fp->clust = clst;			/* Update current cluster */
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e258:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d102      	bne.n	800e268 <f_write+0x162>
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e266:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e26e:	b25b      	sxtb	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	da1b      	bge.n	800e2ac <f_write+0x1a6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	7858      	ldrb	r0, [r3, #1]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e282:	2301      	movs	r3, #1
 800e284:	f7fb ffbe 	bl	800a204 <disk_write>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d005      	beq.n	800e29a <f_write+0x194>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2201      	movs	r2, #1
 800e292:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e296:	2301      	movs	r3, #1
 800e298:	e0e9      	b.n	800e46e <f_write+0x368>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e2ac:	693a      	ldr	r2, [r7, #16]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	f7fc fc73 	bl	800aba0 <clust2sect>
 800e2ba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d105      	bne.n	800e2ce <f_write+0x1c8>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2202      	movs	r2, #2
 800e2c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e0cf      	b.n	800e46e <f_write+0x368>
			sect += csect;
 800e2ce:	697a      	ldr	r2, [r7, #20]
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	0a5b      	lsrs	r3, r3, #9
 800e2da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d03f      	beq.n	800e362 <f_write+0x25c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e2e2:	69ba      	ldr	r2, [r7, #24]
 800e2e4:	6a3b      	ldr	r3, [r7, #32]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	693a      	ldr	r2, [r7, #16]
 800e2ea:	8952      	ldrh	r2, [r2, #10]
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d905      	bls.n	800e2fc <f_write+0x1f6>
					cc = fs->csize - csect;
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	895b      	ldrh	r3, [r3, #10]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	7858      	ldrb	r0, [r3, #1]
 800e300:	6a3b      	ldr	r3, [r7, #32]
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	69f9      	ldr	r1, [r7, #28]
 800e306:	f7fb ff7d 	bl	800a204 <disk_write>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d005      	beq.n	800e31c <f_write+0x216>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e318:	2301      	movs	r3, #1
 800e31a:	e0a8      	b.n	800e46e <f_write+0x368>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	6a3a      	ldr	r2, [r7, #32]
 800e326:	429a      	cmp	r2, r3
 800e328:	d917      	bls.n	800e35a <f_write+0x254>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	1ad3      	subs	r3, r2, r3
 800e338:	025b      	lsls	r3, r3, #9
 800e33a:	69fa      	ldr	r2, [r7, #28]
 800e33c:	4413      	add	r3, r2
 800e33e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e342:	4619      	mov	r1, r3
 800e344:	f7fc f961 	bl	800a60a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e352:	b2da      	uxtb	r2, r3
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e35a:	6a3b      	ldr	r3, [r7, #32]
 800e35c:	025b      	lsls	r3, r3, #9
 800e35e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e360:	e04a      	b.n	800e3f8 <f_write+0x2f2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e366:	697a      	ldr	r2, [r7, #20]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d01b      	beq.n	800e3a4 <f_write+0x29e>
				fp->fptr < fp->obj.objsize &&
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e378:	4299      	cmp	r1, r3
 800e37a:	bf08      	it	eq
 800e37c:	4290      	cmpeq	r0, r2
 800e37e:	d211      	bcs.n	800e3a4 <f_write+0x29e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	7858      	ldrb	r0, [r3, #1]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e38a:	2301      	movs	r3, #1
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	f7fb ff19 	bl	800a1c4 <disk_read>
 800e392:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e394:	2b00      	cmp	r3, #0
 800e396:	d005      	beq.n	800e3a4 <f_write+0x29e>
					ABORT(fs, FR_DISK_ERR);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e064      	b.n	800e46e <f_write+0x368>
			}
#endif
			fp->sect = sect;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3b6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e3ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d901      	bls.n	800e3c8 <f_write+0x2c2>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3da:	440b      	add	r3, r1
 800e3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3de:	69f9      	ldr	r1, [r7, #28]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fc f912 	bl	800a60a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e3ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e3f8:	69fa      	ldr	r2, [r7, #28]
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	4413      	add	r3, r2
 800e3fe:	61fb      	str	r3, [r7, #28]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e408:	461a      	mov	r2, r3
 800e40a:	f04f 0300 	mov.w	r3, #0
 800e40e:	eb10 0802 	adds.w	r8, r0, r2
 800e412:	eb41 0903 	adc.w	r9, r1, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e422:	68f9      	ldr	r1, [r7, #12]
 800e424:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800e428:	428b      	cmp	r3, r1
 800e42a:	bf08      	it	eq
 800e42c:	4282      	cmpeq	r2, r0
 800e42e:	d201      	bcs.n	800e434 <f_write+0x32e>
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	68f9      	ldr	r1, [r7, #12]
 800e436:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e440:	441a      	add	r2, r3
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	601a      	str	r2, [r3, #0]
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	f47f aea0 	bne.w	800e196 <f_write+0x90>
 800e456:	e000      	b.n	800e45a <f_write+0x354>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e458:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e464:	b2da      	uxtb	r2, r3
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3730      	adds	r7, #48	; 0x30
 800e472:	46bd      	mov	sp, r7
 800e474:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e478 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b09c      	sub	sp, #112	; 0x70
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e486:	4611      	mov	r1, r2
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff fb0f 	bl	800daac <validate>
 800e48e:	4603      	mov	r3, r0
 800e490:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800e494:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f040 8105 	bne.w	800e6a8 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 80fd 	beq.w	800e6a8 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4b4:	b25b      	sxtb	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	da17      	bge.n	800e4ea <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e4ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4bc:	7858      	ldrb	r0, [r3, #1]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	f7fb fe9b 	bl	800a204 <disk_write>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d001      	beq.n	800e4d8 <f_sync+0x60>
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e0e9      	b.n	800e6ac <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e4ea:	f7fb fc65 	bl	8009db8 <get_fattime>
 800e4ee:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e4f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	2b04      	cmp	r3, #4
 800e4f6:	f040 808c 	bne.w	800e612 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fc fe61 	bl	800b1c4 <fill_first_frag>
 800e502:	4603      	mov	r3, r0
 800e504:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e508:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10a      	bne.n	800e526 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e51a:	4619      	mov	r1, r3
 800e51c:	f7fc fe81 	bl	800b222 <fill_last_frag>
 800e520:	4603      	mov	r3, r0
 800e522:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800e526:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f040 80bc 	bne.w	800e6a8 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	f107 0308 	add.w	r3, r7, #8
 800e536:	4611      	mov	r1, r2
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fd fe23 	bl	800c184 <load_obj_dir>
 800e53e:	4603      	mov	r3, r0
 800e540:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800e544:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f040 80ad 	bne.w	800e6a8 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e54e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e550:	691b      	ldr	r3, [r3, #16]
 800e552:	3304      	adds	r3, #4
 800e554:	781a      	ldrb	r2, [r3, #0]
 800e556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	3304      	adds	r3, #4
 800e55c:	f042 0220 	orr.w	r2, r2, #32
 800e560:	b2d2      	uxtb	r2, r2
 800e562:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	79da      	ldrb	r2, [r3, #7]
 800e568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	3321      	adds	r3, #33	; 0x21
 800e56e:	f042 0201 	orr.w	r2, r2, #1
 800e572:	b2d2      	uxtb	r2, r2
 800e574:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e578:	691b      	ldr	r3, [r3, #16]
 800e57a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	4619      	mov	r1, r3
 800e584:	4610      	mov	r0, r2
 800e586:	f7fb ff8c 	bl	800a4a2 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e58a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e598:	4608      	mov	r0, r1
 800e59a:	f7fb ffae 	bl	800a4fa <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e59e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e5ac:	4608      	mov	r0, r1
 800e5ae:	f7fb ffa4 	bl	800a4fa <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e5b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5b4:	691b      	ldr	r3, [r3, #16]
 800e5b6:	330c      	adds	r3, #12
 800e5b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fb ff71 	bl	800a4a2 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e5c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	3315      	adds	r3, #21
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e5ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	3310      	adds	r3, #16
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fb ff65 	bl	800a4a2 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e5d8:	f107 0308 	add.w	r3, r7, #8
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7fd fe0c 	bl	800c1fa <store_xdir>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800e5e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d15b      	bne.n	800e6a8 <f_sync+0x230>
							res = sync_fs(fs);
 800e5f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fc fa66 	bl	800aac4 <sync_fs>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e608:	b2da      	uxtb	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800e610:	e04a      	b.n	800e6a8 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e612:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e618:	4619      	mov	r1, r3
 800e61a:	4610      	mov	r0, r2
 800e61c:	f7fc fa24 	bl	800aa68 <move_window>
 800e620:	4603      	mov	r3, r0
 800e622:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e626:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d13c      	bne.n	800e6a8 <f_sync+0x230>
					dir = fp->dir_ptr;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e632:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e636:	330b      	adds	r3, #11
 800e638:	781a      	ldrb	r2, [r3, #0]
 800e63a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e63c:	330b      	adds	r3, #11
 800e63e:	f042 0220 	orr.w	r2, r2, #32
 800e642:	b2d2      	uxtb	r2, r2
 800e644:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6818      	ldr	r0, [r3, #0]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	461a      	mov	r2, r3
 800e650:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e652:	f7fd f9e3 	bl	800ba1c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e658:	f103 001c 	add.w	r0, r3, #28
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e662:	4613      	mov	r3, r2
 800e664:	4619      	mov	r1, r3
 800e666:	f7fb ff1c 	bl	800a4a2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e66a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e66c:	3316      	adds	r3, #22
 800e66e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e670:	4618      	mov	r0, r3
 800e672:	f7fb ff16 	bl	800a4a2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e678:	3312      	adds	r3, #18
 800e67a:	2100      	movs	r1, #0
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fb fef5 	bl	800a46c <st_word>
					fs->wflag = 1;
 800e682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e684:	2201      	movs	r2, #1
 800e686:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fc fa1a 	bl	800aac4 <sync_fs>
 800e690:	4603      	mov	r3, r0
 800e692:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e69c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e6a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3770      	adds	r7, #112	; 0x70
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7ff fedb 	bl	800e478 <f_sync>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e6c6:	7bfb      	ldrb	r3, [r7, #15]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d118      	bne.n	800e6fe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f107 0208 	add.w	r2, r7, #8
 800e6d2:	4611      	mov	r1, r2
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7ff f9e9 	bl	800daac <validate>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d10c      	bne.n	800e6fe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fc f919 	bl	800a920 <dec_lock>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e6f2:	7bfb      	ldrb	r3, [r7, #15]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d102      	bne.n	800e6fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b086      	sub	sp, #24
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d101      	bne.n	800e71c <f_opendir+0x14>
 800e718:	2309      	movs	r3, #9
 800e71a:	e09a      	b.n	800e852 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e720:	f107 010c 	add.w	r1, r7, #12
 800e724:	463b      	mov	r3, r7
 800e726:	2200      	movs	r2, #0
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fe fe6d 	bl	800d408 <find_volume>
 800e72e:	4603      	mov	r3, r0
 800e730:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e732:	7dfb      	ldrb	r3, [r7, #23]
 800e734:	2b00      	cmp	r3, #0
 800e736:	f040 8085 	bne.w	800e844 <f_opendir+0x13c>
		obj->fs = fs;
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	4619      	mov	r1, r3
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7fe fca5 	bl	800d094 <follow_path>
 800e74a:	4603      	mov	r3, r0
 800e74c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d172      	bne.n	800e83a <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e75a:	b25b      	sxtb	r3, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	db47      	blt.n	800e7f0 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	799b      	ldrb	r3, [r3, #6]
 800e764:	f003 0310 	and.w	r3, r3, #16
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d03f      	beq.n	800e7ec <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	2b04      	cmp	r3, #4
 800e772:	d130      	bne.n	800e7d6 <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	689a      	ldr	r2, [r3, #8]
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e782:	4613      	mov	r3, r2
 800e784:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e788:	693a      	ldr	r2, [r7, #16]
 800e78a:	79d2      	ldrb	r2, [r2, #7]
 800e78c:	431a      	orrs	r2, r3
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	691b      	ldr	r3, [r3, #16]
 800e79e:	3334      	adds	r3, #52	; 0x34
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fb fd85 	bl	800a2b0 <ld_dword>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	691b      	ldr	r3, [r3, #16]
 800e7b0:	3338      	adds	r3, #56	; 0x38
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fb fd9f 	bl	800a2f6 <ld_qword>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	6939      	ldr	r1, [r7, #16]
 800e7be:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	691b      	ldr	r3, [r3, #16]
 800e7c6:	3321      	adds	r3, #33	; 0x21
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	f003 0302 	and.w	r3, r3, #2
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	71da      	strb	r2, [r3, #7]
 800e7d4:	e00c      	b.n	800e7f0 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7dc:	4619      	mov	r1, r3
 800e7de:	4610      	mov	r0, r2
 800e7e0:	f7fd f8fd 	bl	800b9de <ld_clust>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	609a      	str	r2, [r3, #8]
 800e7ea:	e001      	b.n	800e7f0 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e7ec:	2305      	movs	r3, #5
 800e7ee:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d121      	bne.n	800e83a <f_opendir+0x132>
				obj->id = fs->id;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	88da      	ldrh	r2, [r3, #6]
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e7fe:	2100      	movs	r1, #0
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7fc ff35 	bl	800b670 <dir_sdi>
 800e806:	4603      	mov	r3, r0
 800e808:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e80a:	7dfb      	ldrb	r3, [r7, #23]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d114      	bne.n	800e83a <f_opendir+0x132>
					if (obj->sclust) {
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00d      	beq.n	800e834 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e818:	2100      	movs	r1, #0
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7fb fff2 	bl	800a804 <inc_lock>
 800e820:	4602      	mov	r2, r0
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d105      	bne.n	800e83a <f_opendir+0x132>
 800e82e:	2312      	movs	r3, #18
 800e830:	75fb      	strb	r3, [r7, #23]
 800e832:	e002      	b.n	800e83a <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	2200      	movs	r2, #0
 800e838:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	2b04      	cmp	r3, #4
 800e83e:	d101      	bne.n	800e844 <f_opendir+0x13c>
 800e840:	2305      	movs	r3, #5
 800e842:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d002      	beq.n	800e850 <f_opendir+0x148>
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	2200      	movs	r2, #0
 800e84e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e850:	7dfb      	ldrb	r3, [r7, #23]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3718      	adds	r7, #24
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b084      	sub	sp, #16
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f107 0208 	add.w	r2, r7, #8
 800e868:	4611      	mov	r1, r2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7ff f91e 	bl	800daac <validate>
 800e870:	4603      	mov	r3, r0
 800e872:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d110      	bne.n	800e89c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d006      	beq.n	800e890 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e886:	4618      	mov	r0, r3
 800e888:	f7fc f84a 	bl	800a920 <dec_lock>
 800e88c:	4603      	mov	r3, r0
 800e88e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e890:	7bfb      	ldrb	r3, [r7, #15]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d102      	bne.n	800e89c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b084      	sub	sp, #16
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
 800e8ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f107 0208 	add.w	r2, r7, #8
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff f8f7 	bl	800daac <validate>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d126      	bne.n	800e916 <f_readdir+0x70>
		if (!fno) {
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f7fc fecd 	bl	800b670 <dir_sdi>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	73fb      	strb	r3, [r7, #15]
 800e8da:	e01c      	b.n	800e916 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e8dc:	2100      	movs	r1, #0
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7fd fd4d 	bl	800c37e <dir_read>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e8e8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ea:	2b04      	cmp	r3, #4
 800e8ec:	d101      	bne.n	800e8f2 <f_readdir+0x4c>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10e      	bne.n	800e916 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7fe f8d8 	bl	800cab0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e900:	2100      	movs	r1, #0
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7fc ff3a 	bl	800b77c <dir_next>
 800e908:	4603      	mov	r3, r0
 800e90a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e90c:	7bfb      	ldrb	r3, [r7, #15]
 800e90e:	2b04      	cmp	r3, #4
 800e910:	d101      	bne.n	800e916 <f_readdir+0x70>
 800e912:	2300      	movs	r3, #0
 800e914:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e916:	7bfb      	ldrb	r3, [r7, #15]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b09a      	sub	sp, #104	; 0x68
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e92a:	f107 0108 	add.w	r1, r7, #8
 800e92e:	1d3b      	adds	r3, r7, #4
 800e930:	2200      	movs	r2, #0
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fd68 	bl	800d408 <find_volume>
 800e938:	4603      	mov	r3, r0
 800e93a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e93e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e942:	2b00      	cmp	r3, #0
 800e944:	d11f      	bne.n	800e986 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	f107 0308 	add.w	r3, r7, #8
 800e94c:	4611      	mov	r1, r2
 800e94e:	4618      	mov	r0, r3
 800e950:	f7fe fba0 	bl	800d094 <follow_path>
 800e954:	4603      	mov	r3, r0
 800e956:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res == FR_OK) {				/* Follow completed */
 800e95a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d111      	bne.n	800e986 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e962:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e966:	b25b      	sxtb	r3, r3
 800e968:	2b00      	cmp	r3, #0
 800e96a:	da03      	bge.n	800e974 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e96c:	2306      	movs	r3, #6
 800e96e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e972:	e008      	b.n	800e986 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d005      	beq.n	800e986 <f_stat+0x66>
 800e97a:	f107 0308 	add.w	r3, r7, #8
 800e97e:	6839      	ldr	r1, [r7, #0]
 800e980:	4618      	mov	r0, r3
 800e982:	f7fe f895 	bl	800cab0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e986:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3768      	adds	r7, #104	; 0x68
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e992:	b580      	push	{r7, lr}
 800e994:	b09a      	sub	sp, #104	; 0x68
 800e996:	af00      	add	r7, sp, #0
 800e998:	60f8      	str	r0, [r7, #12]
 800e99a:	60b9      	str	r1, [r7, #8]
 800e99c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e99e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e9a2:	f107 030c 	add.w	r3, r7, #12
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7fe fd2d 	bl	800d408 <find_volume>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e9b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f040 80e6 	bne.w	800eb8a <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e9be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9c6:	699a      	ldr	r2, [r3, #24]
 800e9c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9cc:	3b02      	subs	r3, #2
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d804      	bhi.n	800e9dc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d4:	699a      	ldr	r2, [r3, #24]
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	601a      	str	r2, [r3, #0]
 800e9da:	e0d6      	b.n	800eb8a <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e9e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d128      	bne.n	800ea3a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ee:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800e9f0:	f107 0310 	add.w	r3, r7, #16
 800e9f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fc f8f2 	bl	800abe0 <get_fat>
 800e9fc:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea04:	d103      	bne.n	800ea0e <f_getfree+0x7c>
 800ea06:	2301      	movs	r3, #1
 800ea08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea0c:	e0b0      	b.n	800eb70 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ea0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d103      	bne.n	800ea1c <f_getfree+0x8a>
 800ea14:	2302      	movs	r3, #2
 800ea16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea1a:	e0a9      	b.n	800eb70 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800ea1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d102      	bne.n	800ea28 <f_getfree+0x96>
 800ea22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea24:	3301      	adds	r3, #1
 800ea26:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800ea28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d3db      	bcc.n	800e9f0 <f_getfree+0x5e>
 800ea38:	e09a      	b.n	800eb70 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800ea3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	2b04      	cmp	r3, #4
 800ea40:	d146      	bne.n	800ead0 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800ea42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea46:	3b02      	subs	r3, #2
 800ea48:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800ea4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea4e:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800ea54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10d      	bne.n	800ea76 <f_getfree+0xe4>
 800ea5a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ea5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	65ba      	str	r2, [r7, #88]	; 0x58
 800ea62:	4619      	mov	r1, r3
 800ea64:	f7fc f800 	bl	800aa68 <move_window>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d179      	bne.n	800eb6a <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800ea76:	2308      	movs	r3, #8
 800ea78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea7e:	4413      	add	r3, r2
 800ea80:	3348      	adds	r3, #72	; 0x48
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ea88:	e013      	b.n	800eab2 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800ea8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ea8e:	f003 0301 	and.w	r3, r3, #1
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d102      	bne.n	800ea9c <f_getfree+0x10a>
 800ea96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea98:	3301      	adds	r3, #1
 800ea9a:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800ea9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eaa0:	085b      	lsrs	r3, r3, #1
 800eaa2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800eaa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800eaac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaae:	3b01      	subs	r3, #1
 800eab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <f_getfree+0x12c>
 800eab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1e5      	bne.n	800ea8a <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800eabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eac0:	3301      	adds	r3, #1
 800eac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac6:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800eac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1c2      	bne.n	800ea54 <f_getfree+0xc2>
 800eace:	e04f      	b.n	800eb70 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ead0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ead6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eada:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800eadc:	2300      	movs	r3, #0
 800eade:	657b      	str	r3, [r7, #84]	; 0x54
 800eae0:	2300      	movs	r3, #0
 800eae2:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800eae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d113      	bne.n	800eb12 <f_getfree+0x180>
							res = move_window(fs, sect++);
 800eaea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eaec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	65ba      	str	r2, [r7, #88]	; 0x58
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	f7fb ffb8 	bl	800aa68 <move_window>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800eafe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d133      	bne.n	800eb6e <f_getfree+0x1dc>
							p = fs->win;
 800eb06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb08:	3348      	adds	r3, #72	; 0x48
 800eb0a:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800eb0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb10:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800eb12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b02      	cmp	r3, #2
 800eb18:	d10f      	bne.n	800eb3a <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800eb1a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eb1c:	f7fb fbb0 	bl	800a280 <ld_word>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d102      	bne.n	800eb2c <f_getfree+0x19a>
 800eb26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb28:	3301      	adds	r3, #1
 800eb2a:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800eb2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb2e:	3302      	adds	r3, #2
 800eb30:	653b      	str	r3, [r7, #80]	; 0x50
 800eb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb34:	3b02      	subs	r3, #2
 800eb36:	657b      	str	r3, [r7, #84]	; 0x54
 800eb38:	e010      	b.n	800eb5c <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800eb3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eb3c:	f7fb fbb8 	bl	800a2b0 <ld_dword>
 800eb40:	4603      	mov	r3, r0
 800eb42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d102      	bne.n	800eb50 <f_getfree+0x1be>
 800eb4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800eb50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb52:	3304      	adds	r3, #4
 800eb54:	653b      	str	r3, [r7, #80]	; 0x50
 800eb56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb58:	3b04      	subs	r3, #4
 800eb5a:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800eb5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb5e:	3b01      	subs	r3, #1
 800eb60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1bd      	bne.n	800eae4 <f_getfree+0x152>
 800eb68:	e002      	b.n	800eb70 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800eb6a:	bf00      	nop
 800eb6c:	e000      	b.n	800eb70 <f_getfree+0x1de>
							if (res != FR_OK) break;
 800eb6e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb74:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800eb76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb7a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800eb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb7e:	791a      	ldrb	r2, [r3, #4]
 800eb80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb82:	f042 0201 	orr.w	r2, r2, #1
 800eb86:	b2d2      	uxtb	r2, r2
 800eb88:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800eb8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3768      	adds	r7, #104	; 0x68
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}

0800eb96 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b0a2      	sub	sp, #136	; 0x88
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eb9e:	f107 010c 	add.w	r1, r7, #12
 800eba2:	1d3b      	adds	r3, r7, #4
 800eba4:	2202      	movs	r2, #2
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe fc2e 	bl	800d408 <find_volume>
 800ebac:	4603      	mov	r3, r0
 800ebae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	dj.obj.fs = fs;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800ebb6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f040 813e 	bne.w	800ee3c <f_mkdir+0x2a6>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	f107 0310 	add.w	r3, r7, #16
 800ebc6:	4611      	mov	r1, r2
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7fe fa63 	bl	800d094 <follow_path>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ebd4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d102      	bne.n	800ebe2 <f_mkdir+0x4c>
 800ebdc:	2308      	movs	r3, #8
 800ebde:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800ebe2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ebe6:	2b04      	cmp	r3, #4
 800ebe8:	d108      	bne.n	800ebfc <f_mkdir+0x66>
 800ebea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ebee:	f003 0320 	and.w	r3, r3, #32
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d002      	beq.n	800ebfc <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800ebf6:	2306      	movs	r3, #6
 800ebf8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ebfc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ec00:	2b04      	cmp	r3, #4
 800ec02:	f040 811b 	bne.w	800ee3c <f_mkdir+0x2a6>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ec06:	f107 0310 	add.w	r3, r7, #16
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fc fbed 	bl	800b3ec <create_chain>
 800ec12:	6778      	str	r0, [r7, #116]	; 0x74
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	895b      	ldrh	r3, [r3, #10]
 800ec18:	025b      	lsls	r3, r3, #9
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f04f 0300 	mov.w	r3, #0
 800ec20:	e9c7 2308 	strd	r2, r3, [r7, #32]
			res = FR_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ec2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <f_mkdir+0xa0>
 800ec30:	2307      	movs	r3, #7
 800ec32:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (dcl == 1) res = FR_INT_ERR;
 800ec36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d102      	bne.n	800ec42 <f_mkdir+0xac>
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec48:	d102      	bne.n	800ec50 <f_mkdir+0xba>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ec50:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d106      	bne.n	800ec66 <f_mkdir+0xd0>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fb fec0 	bl	800a9e0 <sync_window>
 800ec60:	4603      	mov	r3, r0
 800ec62:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			tm = GET_FATTIME();
 800ec66:	f7fb f8a7 	bl	8009db8 <get_fattime>
 800ec6a:	6738      	str	r0, [r7, #112]	; 0x70
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ec6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d172      	bne.n	800ed5a <f_mkdir+0x1c4>
				dsc = clust2sect(fs, dcl);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fb ff91 	bl	800aba0 <clust2sect>
 800ec7e:	67f8      	str	r0, [r7, #124]	; 0x7c
				dir = fs->win;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	3348      	adds	r3, #72	; 0x48
 800ec84:	66fb      	str	r3, [r7, #108]	; 0x6c
				mem_set(dir, 0, SS(fs));
 800ec86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ec8e:	f7fb fcdd 	bl	800a64c <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	2b04      	cmp	r3, #4
 800ec98:	d036      	beq.n	800ed08 <f_mkdir+0x172>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ec9a:	220b      	movs	r2, #11
 800ec9c:	2120      	movs	r1, #32
 800ec9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eca0:	f7fb fcd4 	bl	800a64c <mem_set>
					dir[DIR_Name] = '.';
 800eca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eca6:	222e      	movs	r2, #46	; 0x2e
 800eca8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ecaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecac:	330b      	adds	r3, #11
 800ecae:	2210      	movs	r2, #16
 800ecb0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800ecb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecb4:	3316      	adds	r3, #22
 800ecb6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fb fbf2 	bl	800a4a2 <st_dword>
					st_clust(fs, dir, dcl);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ecc2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fc fea9 	bl	800ba1c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800ecca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eccc:	3320      	adds	r3, #32
 800ecce:	2220      	movs	r2, #32
 800ecd0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fb fc99 	bl	800a60a <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800ecd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecda:	3321      	adds	r3, #33	; 0x21
 800ecdc:	222e      	movs	r2, #46	; 0x2e
 800ecde:	701a      	strb	r2, [r3, #0]
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	67bb      	str	r3, [r7, #120]	; 0x78
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	2b03      	cmp	r3, #3
 800ecea:	d106      	bne.n	800ecfa <f_mkdir+0x164>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d101      	bne.n	800ecfa <f_mkdir+0x164>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	67bb      	str	r3, [r7, #120]	; 0x78
					st_clust(fs, dir + SZDIRE, pcl);
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecfe:	3320      	adds	r3, #32
 800ed00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ed02:	4619      	mov	r1, r3
 800ed04:	f7fc fe8a 	bl	800ba1c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ed10:	e01d      	b.n	800ed4e <f_mkdir+0x1b8>
					fs->winsect = dsc++;
 800ed12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed14:	1c5a      	adds	r2, r3, #1
 800ed16:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	6453      	str	r3, [r2, #68]	; 0x44
					fs->wflag = 1;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fb fe5b 	bl	800a9e0 <sync_window>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res != FR_OK) break;
 800ed30:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10f      	bne.n	800ed58 <f_mkdir+0x1c2>
					mem_set(dir, 0, SS(fs));
 800ed38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ed40:	f7fb fc84 	bl	800a64c <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ed44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ed4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1dd      	bne.n	800ed12 <f_mkdir+0x17c>
 800ed56:	e000      	b.n	800ed5a <f_mkdir+0x1c4>
					if (res != FR_OK) break;
 800ed58:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ed5a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d107      	bne.n	800ed72 <f_mkdir+0x1dc>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ed62:	f107 0310 	add.w	r3, r7, #16
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fd fcfa 	bl	800c760 <dir_register>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
			if (res == FR_OK) {
 800ed72:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d159      	bne.n	800ee2e <f_mkdir+0x298>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	2b04      	cmp	r3, #4
 800ed80:	d134      	bne.n	800edec <f_mkdir+0x256>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	691b      	ldr	r3, [r3, #16]
 800ed86:	330c      	adds	r3, #12
 800ed88:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fb fb89 	bl	800a4a2 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	3334      	adds	r3, #52	; 0x34
 800ed96:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fb fb82 	bl	800a4a2 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	691b      	ldr	r3, [r3, #16]
 800eda2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800eda6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800edaa:	4613      	mov	r3, r2
 800edac:	4619      	mov	r1, r3
 800edae:	f7fb fb78 	bl	800a4a2 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	691b      	ldr	r3, [r3, #16]
 800edb6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800edba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800edbe:	4613      	mov	r3, r2
 800edc0:	4619      	mov	r1, r3
 800edc2:	f7fb fb6e 	bl	800a4a2 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	691b      	ldr	r3, [r3, #16]
 800edca:	3321      	adds	r3, #33	; 0x21
 800edcc:	2203      	movs	r2, #3
 800edce:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	3304      	adds	r3, #4
 800edd6:	2210      	movs	r2, #16
 800edd8:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800edda:	f107 0310 	add.w	r3, r7, #16
 800edde:	4618      	mov	r0, r3
 800ede0:	f7fd fa0b 	bl	800c1fa <store_xdir>
 800ede4:	4603      	mov	r3, r0
 800ede6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800edea:	e014      	b.n	800ee16 <f_mkdir+0x280>
				} else
#endif
				{
					dir = dj.dir;
 800edec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edee:	66fb      	str	r3, [r7, #108]	; 0x6c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800edf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edf2:	3316      	adds	r3, #22
 800edf4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fb fb53 	bl	800a4a2 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ee00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fc fe0a 	bl	800ba1c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ee08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee0a:	330b      	adds	r3, #11
 800ee0c:	2210      	movs	r2, #16
 800ee0e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2201      	movs	r2, #1
 800ee14:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ee16:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10e      	bne.n	800ee3c <f_mkdir+0x2a6>
					res = sync_fs(fs);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fb fe4f 	bl	800aac4 <sync_fs>
 800ee26:	4603      	mov	r3, r0
 800ee28:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ee2c:	e006      	b.n	800ee3c <f_mkdir+0x2a6>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800ee2e:	f107 0310 	add.w	r3, r7, #16
 800ee32:	2200      	movs	r2, #0
 800ee34:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fc fa24 	bl	800b284 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ee3c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3788      	adds	r7, #136	; 0x88
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b087      	sub	sp, #28
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	4613      	mov	r3, r2
 800ee54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ee56:	2301      	movs	r3, #1
 800ee58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ee5e:	4b1f      	ldr	r3, [pc, #124]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800ee60:	7a5b      	ldrb	r3, [r3, #9]
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d131      	bne.n	800eecc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ee68:	4b1c      	ldr	r3, [pc, #112]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800ee6a:	7a5b      	ldrb	r3, [r3, #9]
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	461a      	mov	r2, r3
 800ee70:	4b1a      	ldr	r3, [pc, #104]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800ee72:	2100      	movs	r1, #0
 800ee74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ee76:	4b19      	ldr	r3, [pc, #100]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800ee78:	7a5b      	ldrb	r3, [r3, #9]
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	4a17      	ldr	r2, [pc, #92]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	4413      	add	r3, r2
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ee86:	4b15      	ldr	r3, [pc, #84]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800ee88:	7a5b      	ldrb	r3, [r3, #9]
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	4b13      	ldr	r3, [pc, #76]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800ee90:	4413      	add	r3, r2
 800ee92:	79fa      	ldrb	r2, [r7, #7]
 800ee94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ee96:	4b11      	ldr	r3, [pc, #68]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800ee98:	7a5b      	ldrb	r3, [r3, #9]
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	1c5a      	adds	r2, r3, #1
 800ee9e:	b2d1      	uxtb	r1, r2
 800eea0:	4a0e      	ldr	r2, [pc, #56]	; (800eedc <FATFS_LinkDriverEx+0x94>)
 800eea2:	7251      	strb	r1, [r2, #9]
 800eea4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eea6:	7dbb      	ldrb	r3, [r7, #22]
 800eea8:	3330      	adds	r3, #48	; 0x30
 800eeaa:	b2da      	uxtb	r2, r3
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	223a      	movs	r2, #58	; 0x3a
 800eeb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	3302      	adds	r3, #2
 800eebc:	222f      	movs	r2, #47	; 0x2f
 800eebe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	3303      	adds	r3, #3
 800eec4:	2200      	movs	r2, #0
 800eec6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eec8:	2300      	movs	r3, #0
 800eeca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eecc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	371c      	adds	r7, #28
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	200017a4 	.word	0x200017a4

0800eee0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eeea:	2200      	movs	r2, #0
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7ff ffaa 	bl	800ee48 <FATFS_LinkDriverEx>
 800eef4:	4603      	mov	r3, r0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
	...

0800ef00 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	4603      	mov	r3, r0
 800ef08:	6039      	str	r1, [r7, #0]
 800ef0a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ef0c:	88fb      	ldrh	r3, [r7, #6]
 800ef0e:	2b7f      	cmp	r3, #127	; 0x7f
 800ef10:	d802      	bhi.n	800ef18 <ff_convert+0x18>
		c = chr;
 800ef12:	88fb      	ldrh	r3, [r7, #6]
 800ef14:	81fb      	strh	r3, [r7, #14]
 800ef16:	e025      	b.n	800ef64 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00b      	beq.n	800ef36 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ef1e:	88fb      	ldrh	r3, [r7, #6]
 800ef20:	2bff      	cmp	r3, #255	; 0xff
 800ef22:	d805      	bhi.n	800ef30 <ff_convert+0x30>
 800ef24:	88fb      	ldrh	r3, [r7, #6]
 800ef26:	3b80      	subs	r3, #128	; 0x80
 800ef28:	4a12      	ldr	r2, [pc, #72]	; (800ef74 <ff_convert+0x74>)
 800ef2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef2e:	e000      	b.n	800ef32 <ff_convert+0x32>
 800ef30:	2300      	movs	r3, #0
 800ef32:	81fb      	strh	r3, [r7, #14]
 800ef34:	e016      	b.n	800ef64 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ef36:	2300      	movs	r3, #0
 800ef38:	81fb      	strh	r3, [r7, #14]
 800ef3a:	e009      	b.n	800ef50 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ef3c:	89fb      	ldrh	r3, [r7, #14]
 800ef3e:	4a0d      	ldr	r2, [pc, #52]	; (800ef74 <ff_convert+0x74>)
 800ef40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef44:	88fa      	ldrh	r2, [r7, #6]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d006      	beq.n	800ef58 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ef4a:	89fb      	ldrh	r3, [r7, #14]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	81fb      	strh	r3, [r7, #14]
 800ef50:	89fb      	ldrh	r3, [r7, #14]
 800ef52:	2b7f      	cmp	r3, #127	; 0x7f
 800ef54:	d9f2      	bls.n	800ef3c <ff_convert+0x3c>
 800ef56:	e000      	b.n	800ef5a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ef58:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ef5a:	89fb      	ldrh	r3, [r7, #14]
 800ef5c:	3380      	adds	r3, #128	; 0x80
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ef64:	89fb      	ldrh	r3, [r7, #14]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3714      	adds	r7, #20
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	08012218 	.word	0x08012218

0800ef78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ef82:	88fb      	ldrh	r3, [r7, #6]
 800ef84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef88:	d201      	bcs.n	800ef8e <ff_wtoupper+0x16>
 800ef8a:	4b3e      	ldr	r3, [pc, #248]	; (800f084 <ff_wtoupper+0x10c>)
 800ef8c:	e000      	b.n	800ef90 <ff_wtoupper+0x18>
 800ef8e:	4b3e      	ldr	r3, [pc, #248]	; (800f088 <ff_wtoupper+0x110>)
 800ef90:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	1c9a      	adds	r2, r3, #2
 800ef96:	617a      	str	r2, [r7, #20]
 800ef98:	881b      	ldrh	r3, [r3, #0]
 800ef9a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ef9c:	8a7b      	ldrh	r3, [r7, #18]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d068      	beq.n	800f074 <ff_wtoupper+0xfc>
 800efa2:	88fa      	ldrh	r2, [r7, #6]
 800efa4:	8a7b      	ldrh	r3, [r7, #18]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d364      	bcc.n	800f074 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	1c9a      	adds	r2, r3, #2
 800efae:	617a      	str	r2, [r7, #20]
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	823b      	strh	r3, [r7, #16]
 800efb4:	8a3b      	ldrh	r3, [r7, #16]
 800efb6:	0a1b      	lsrs	r3, r3, #8
 800efb8:	81fb      	strh	r3, [r7, #14]
 800efba:	8a3b      	ldrh	r3, [r7, #16]
 800efbc:	b2db      	uxtb	r3, r3
 800efbe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800efc0:	88fa      	ldrh	r2, [r7, #6]
 800efc2:	8a79      	ldrh	r1, [r7, #18]
 800efc4:	8a3b      	ldrh	r3, [r7, #16]
 800efc6:	440b      	add	r3, r1
 800efc8:	429a      	cmp	r2, r3
 800efca:	da49      	bge.n	800f060 <ff_wtoupper+0xe8>
			switch (cmd) {
 800efcc:	89fb      	ldrh	r3, [r7, #14]
 800efce:	2b08      	cmp	r3, #8
 800efd0:	d84f      	bhi.n	800f072 <ff_wtoupper+0xfa>
 800efd2:	a201      	add	r2, pc, #4	; (adr r2, 800efd8 <ff_wtoupper+0x60>)
 800efd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd8:	0800effd 	.word	0x0800effd
 800efdc:	0800f00f 	.word	0x0800f00f
 800efe0:	0800f025 	.word	0x0800f025
 800efe4:	0800f02d 	.word	0x0800f02d
 800efe8:	0800f035 	.word	0x0800f035
 800efec:	0800f03d 	.word	0x0800f03d
 800eff0:	0800f045 	.word	0x0800f045
 800eff4:	0800f04d 	.word	0x0800f04d
 800eff8:	0800f055 	.word	0x0800f055
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800effc:	88fa      	ldrh	r2, [r7, #6]
 800effe:	8a7b      	ldrh	r3, [r7, #18]
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	005b      	lsls	r3, r3, #1
 800f004:	697a      	ldr	r2, [r7, #20]
 800f006:	4413      	add	r3, r2
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	80fb      	strh	r3, [r7, #6]
 800f00c:	e027      	b.n	800f05e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f00e:	88fa      	ldrh	r2, [r7, #6]
 800f010:	8a7b      	ldrh	r3, [r7, #18]
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	b29b      	uxth	r3, r3
 800f016:	f003 0301 	and.w	r3, r3, #1
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	88fa      	ldrh	r2, [r7, #6]
 800f01e:	1ad3      	subs	r3, r2, r3
 800f020:	80fb      	strh	r3, [r7, #6]
 800f022:	e01c      	b.n	800f05e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f024:	88fb      	ldrh	r3, [r7, #6]
 800f026:	3b10      	subs	r3, #16
 800f028:	80fb      	strh	r3, [r7, #6]
 800f02a:	e018      	b.n	800f05e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f02c:	88fb      	ldrh	r3, [r7, #6]
 800f02e:	3b20      	subs	r3, #32
 800f030:	80fb      	strh	r3, [r7, #6]
 800f032:	e014      	b.n	800f05e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f034:	88fb      	ldrh	r3, [r7, #6]
 800f036:	3b30      	subs	r3, #48	; 0x30
 800f038:	80fb      	strh	r3, [r7, #6]
 800f03a:	e010      	b.n	800f05e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f03c:	88fb      	ldrh	r3, [r7, #6]
 800f03e:	3b1a      	subs	r3, #26
 800f040:	80fb      	strh	r3, [r7, #6]
 800f042:	e00c      	b.n	800f05e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f044:	88fb      	ldrh	r3, [r7, #6]
 800f046:	3308      	adds	r3, #8
 800f048:	80fb      	strh	r3, [r7, #6]
 800f04a:	e008      	b.n	800f05e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f04c:	88fb      	ldrh	r3, [r7, #6]
 800f04e:	3b50      	subs	r3, #80	; 0x50
 800f050:	80fb      	strh	r3, [r7, #6]
 800f052:	e004      	b.n	800f05e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f054:	88fb      	ldrh	r3, [r7, #6]
 800f056:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f05a:	80fb      	strh	r3, [r7, #6]
 800f05c:	bf00      	nop
			}
			break;
 800f05e:	e008      	b.n	800f072 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f060:	89fb      	ldrh	r3, [r7, #14]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d195      	bne.n	800ef92 <ff_wtoupper+0x1a>
 800f066:	8a3b      	ldrh	r3, [r7, #16]
 800f068:	005b      	lsls	r3, r3, #1
 800f06a:	697a      	ldr	r2, [r7, #20]
 800f06c:	4413      	add	r3, r2
 800f06e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f070:	e78f      	b.n	800ef92 <ff_wtoupper+0x1a>
			break;
 800f072:	bf00      	nop
	}

	return chr;
 800f074:	88fb      	ldrh	r3, [r7, #6]
}
 800f076:	4618      	mov	r0, r3
 800f078:	371c      	adds	r7, #28
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop
 800f084:	08012318 	.word	0x08012318
 800f088:	0801250c 	.word	0x0801250c

0800f08c <__errno>:
 800f08c:	4b01      	ldr	r3, [pc, #4]	; (800f094 <__errno+0x8>)
 800f08e:	6818      	ldr	r0, [r3, #0]
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	20000030 	.word	0x20000030

0800f098 <__libc_init_array>:
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	4d0d      	ldr	r5, [pc, #52]	; (800f0d0 <__libc_init_array+0x38>)
 800f09c:	4c0d      	ldr	r4, [pc, #52]	; (800f0d4 <__libc_init_array+0x3c>)
 800f09e:	1b64      	subs	r4, r4, r5
 800f0a0:	10a4      	asrs	r4, r4, #2
 800f0a2:	2600      	movs	r6, #0
 800f0a4:	42a6      	cmp	r6, r4
 800f0a6:	d109      	bne.n	800f0bc <__libc_init_array+0x24>
 800f0a8:	4d0b      	ldr	r5, [pc, #44]	; (800f0d8 <__libc_init_array+0x40>)
 800f0aa:	4c0c      	ldr	r4, [pc, #48]	; (800f0dc <__libc_init_array+0x44>)
 800f0ac:	f002 fb2e 	bl	801170c <_init>
 800f0b0:	1b64      	subs	r4, r4, r5
 800f0b2:	10a4      	asrs	r4, r4, #2
 800f0b4:	2600      	movs	r6, #0
 800f0b6:	42a6      	cmp	r6, r4
 800f0b8:	d105      	bne.n	800f0c6 <__libc_init_array+0x2e>
 800f0ba:	bd70      	pop	{r4, r5, r6, pc}
 800f0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0c0:	4798      	blx	r3
 800f0c2:	3601      	adds	r6, #1
 800f0c4:	e7ee      	b.n	800f0a4 <__libc_init_array+0xc>
 800f0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ca:	4798      	blx	r3
 800f0cc:	3601      	adds	r6, #1
 800f0ce:	e7f2      	b.n	800f0b6 <__libc_init_array+0x1e>
 800f0d0:	080128d4 	.word	0x080128d4
 800f0d4:	080128d4 	.word	0x080128d4
 800f0d8:	080128d4 	.word	0x080128d4
 800f0dc:	080128d8 	.word	0x080128d8

0800f0e0 <localtime>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <localtime+0x30>)
 800f0e4:	681d      	ldr	r5, [r3, #0]
 800f0e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	b953      	cbnz	r3, 800f102 <localtime+0x22>
 800f0ec:	2024      	movs	r0, #36	; 0x24
 800f0ee:	f000 f90b 	bl	800f308 <malloc>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	63e8      	str	r0, [r5, #60]	; 0x3c
 800f0f6:	b920      	cbnz	r0, 800f102 <localtime+0x22>
 800f0f8:	4b06      	ldr	r3, [pc, #24]	; (800f114 <localtime+0x34>)
 800f0fa:	4807      	ldr	r0, [pc, #28]	; (800f118 <localtime+0x38>)
 800f0fc:	2132      	movs	r1, #50	; 0x32
 800f0fe:	f000 fc73 	bl	800f9e8 <__assert_func>
 800f102:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800f104:	4620      	mov	r0, r4
 800f106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f10a:	f000 b807 	b.w	800f11c <localtime_r>
 800f10e:	bf00      	nop
 800f110:	20000030 	.word	0x20000030
 800f114:	080125cc 	.word	0x080125cc
 800f118:	080125e3 	.word	0x080125e3

0800f11c <localtime_r>:
 800f11c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f120:	4607      	mov	r7, r0
 800f122:	9101      	str	r1, [sp, #4]
 800f124:	f000 fcd2 	bl	800facc <__gettzinfo>
 800f128:	9901      	ldr	r1, [sp, #4]
 800f12a:	4680      	mov	r8, r0
 800f12c:	4638      	mov	r0, r7
 800f12e:	f000 fcd1 	bl	800fad4 <gmtime_r>
 800f132:	6943      	ldr	r3, [r0, #20]
 800f134:	079a      	lsls	r2, r3, #30
 800f136:	4604      	mov	r4, r0
 800f138:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 800f13c:	d105      	bne.n	800f14a <localtime_r+0x2e>
 800f13e:	2264      	movs	r2, #100	; 0x64
 800f140:	fb96 f3f2 	sdiv	r3, r6, r2
 800f144:	fb02 6313 	mls	r3, r2, r3, r6
 800f148:	bb7b      	cbnz	r3, 800f1aa <localtime_r+0x8e>
 800f14a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f14e:	fb96 f5f3 	sdiv	r5, r6, r3
 800f152:	fb03 6515 	mls	r5, r3, r5, r6
 800f156:	fab5 f585 	clz	r5, r5
 800f15a:	096d      	lsrs	r5, r5, #5
 800f15c:	4b68      	ldr	r3, [pc, #416]	; (800f300 <localtime_r+0x1e4>)
 800f15e:	2230      	movs	r2, #48	; 0x30
 800f160:	fb02 3505 	mla	r5, r2, r5, r3
 800f164:	f000 fa78 	bl	800f658 <__tz_lock>
 800f168:	f000 fa82 	bl	800f670 <_tzset_unlocked>
 800f16c:	4b65      	ldr	r3, [pc, #404]	; (800f304 <localtime_r+0x1e8>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	b353      	cbz	r3, 800f1c8 <localtime_r+0xac>
 800f172:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f176:	42b3      	cmp	r3, r6
 800f178:	d119      	bne.n	800f1ae <localtime_r+0x92>
 800f17a:	f8d8 1000 	ldr.w	r1, [r8]
 800f17e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800f182:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800f186:	b9d1      	cbnz	r1, 800f1be <localtime_r+0xa2>
 800f188:	4296      	cmp	r6, r2
 800f18a:	eb77 0303 	sbcs.w	r3, r7, r3
 800f18e:	da23      	bge.n	800f1d8 <localtime_r+0xbc>
 800f190:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800f194:	4296      	cmp	r6, r2
 800f196:	eb77 0303 	sbcs.w	r3, r7, r3
 800f19a:	bfb4      	ite	lt
 800f19c:	2301      	movlt	r3, #1
 800f19e:	2300      	movge	r3, #0
 800f1a0:	6223      	str	r3, [r4, #32]
 800f1a2:	db1b      	blt.n	800f1dc <localtime_r+0xc0>
 800f1a4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 800f1a8:	e01a      	b.n	800f1e0 <localtime_r+0xc4>
 800f1aa:	2501      	movs	r5, #1
 800f1ac:	e7d6      	b.n	800f15c <localtime_r+0x40>
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f000 f9aa 	bl	800f508 <__tzcalc_limits>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d1e0      	bne.n	800f17a <localtime_r+0x5e>
 800f1b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1bc:	e004      	b.n	800f1c8 <localtime_r+0xac>
 800f1be:	4296      	cmp	r6, r2
 800f1c0:	eb77 0303 	sbcs.w	r3, r7, r3
 800f1c4:	da02      	bge.n	800f1cc <localtime_r+0xb0>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	6223      	str	r3, [r4, #32]
 800f1ca:	e7eb      	b.n	800f1a4 <localtime_r+0x88>
 800f1cc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800f1d0:	4296      	cmp	r6, r2
 800f1d2:	eb77 0303 	sbcs.w	r3, r7, r3
 800f1d6:	daf6      	bge.n	800f1c6 <localtime_r+0xaa>
 800f1d8:	2301      	movs	r3, #1
 800f1da:	6223      	str	r3, [r4, #32]
 800f1dc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 800f1e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f1e4:	203c      	movs	r0, #60	; 0x3c
 800f1e6:	fb91 f6f3 	sdiv	r6, r1, r3
 800f1ea:	fb03 1316 	mls	r3, r3, r6, r1
 800f1ee:	6861      	ldr	r1, [r4, #4]
 800f1f0:	fb93 f2f0 	sdiv	r2, r3, r0
 800f1f4:	fb00 3012 	mls	r0, r0, r2, r3
 800f1f8:	6823      	ldr	r3, [r4, #0]
 800f1fa:	1a89      	subs	r1, r1, r2
 800f1fc:	68a2      	ldr	r2, [r4, #8]
 800f1fe:	6061      	str	r1, [r4, #4]
 800f200:	1a1b      	subs	r3, r3, r0
 800f202:	1b92      	subs	r2, r2, r6
 800f204:	2b3b      	cmp	r3, #59	; 0x3b
 800f206:	6023      	str	r3, [r4, #0]
 800f208:	60a2      	str	r2, [r4, #8]
 800f20a:	dd35      	ble.n	800f278 <localtime_r+0x15c>
 800f20c:	3101      	adds	r1, #1
 800f20e:	6061      	str	r1, [r4, #4]
 800f210:	3b3c      	subs	r3, #60	; 0x3c
 800f212:	6023      	str	r3, [r4, #0]
 800f214:	6863      	ldr	r3, [r4, #4]
 800f216:	2b3b      	cmp	r3, #59	; 0x3b
 800f218:	dd34      	ble.n	800f284 <localtime_r+0x168>
 800f21a:	3201      	adds	r2, #1
 800f21c:	60a2      	str	r2, [r4, #8]
 800f21e:	3b3c      	subs	r3, #60	; 0x3c
 800f220:	6063      	str	r3, [r4, #4]
 800f222:	68a3      	ldr	r3, [r4, #8]
 800f224:	2b17      	cmp	r3, #23
 800f226:	dd33      	ble.n	800f290 <localtime_r+0x174>
 800f228:	69e2      	ldr	r2, [r4, #28]
 800f22a:	3201      	adds	r2, #1
 800f22c:	61e2      	str	r2, [r4, #28]
 800f22e:	69a2      	ldr	r2, [r4, #24]
 800f230:	3201      	adds	r2, #1
 800f232:	2a06      	cmp	r2, #6
 800f234:	bfc8      	it	gt
 800f236:	2200      	movgt	r2, #0
 800f238:	61a2      	str	r2, [r4, #24]
 800f23a:	68e2      	ldr	r2, [r4, #12]
 800f23c:	3b18      	subs	r3, #24
 800f23e:	3201      	adds	r2, #1
 800f240:	60a3      	str	r3, [r4, #8]
 800f242:	6923      	ldr	r3, [r4, #16]
 800f244:	60e2      	str	r2, [r4, #12]
 800f246:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800f24a:	428a      	cmp	r2, r1
 800f24c:	dd0e      	ble.n	800f26c <localtime_r+0x150>
 800f24e:	2b0b      	cmp	r3, #11
 800f250:	eba2 0201 	sub.w	r2, r2, r1
 800f254:	60e2      	str	r2, [r4, #12]
 800f256:	f103 0201 	add.w	r2, r3, #1
 800f25a:	bf09      	itett	eq
 800f25c:	6963      	ldreq	r3, [r4, #20]
 800f25e:	6122      	strne	r2, [r4, #16]
 800f260:	2200      	moveq	r2, #0
 800f262:	3301      	addeq	r3, #1
 800f264:	bf02      	ittt	eq
 800f266:	6122      	streq	r2, [r4, #16]
 800f268:	6163      	streq	r3, [r4, #20]
 800f26a:	61e2      	streq	r2, [r4, #28]
 800f26c:	f000 f9fa 	bl	800f664 <__tz_unlock>
 800f270:	4620      	mov	r0, r4
 800f272:	b002      	add	sp, #8
 800f274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f278:	2b00      	cmp	r3, #0
 800f27a:	dacb      	bge.n	800f214 <localtime_r+0xf8>
 800f27c:	3901      	subs	r1, #1
 800f27e:	6061      	str	r1, [r4, #4]
 800f280:	333c      	adds	r3, #60	; 0x3c
 800f282:	e7c6      	b.n	800f212 <localtime_r+0xf6>
 800f284:	2b00      	cmp	r3, #0
 800f286:	dacc      	bge.n	800f222 <localtime_r+0x106>
 800f288:	3a01      	subs	r2, #1
 800f28a:	60a2      	str	r2, [r4, #8]
 800f28c:	333c      	adds	r3, #60	; 0x3c
 800f28e:	e7c7      	b.n	800f220 <localtime_r+0x104>
 800f290:	2b00      	cmp	r3, #0
 800f292:	daeb      	bge.n	800f26c <localtime_r+0x150>
 800f294:	69e2      	ldr	r2, [r4, #28]
 800f296:	3a01      	subs	r2, #1
 800f298:	61e2      	str	r2, [r4, #28]
 800f29a:	69a2      	ldr	r2, [r4, #24]
 800f29c:	3a01      	subs	r2, #1
 800f29e:	bf48      	it	mi
 800f2a0:	2206      	movmi	r2, #6
 800f2a2:	61a2      	str	r2, [r4, #24]
 800f2a4:	68e2      	ldr	r2, [r4, #12]
 800f2a6:	3318      	adds	r3, #24
 800f2a8:	3a01      	subs	r2, #1
 800f2aa:	60e2      	str	r2, [r4, #12]
 800f2ac:	60a3      	str	r3, [r4, #8]
 800f2ae:	2a00      	cmp	r2, #0
 800f2b0:	d1dc      	bne.n	800f26c <localtime_r+0x150>
 800f2b2:	6923      	ldr	r3, [r4, #16]
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	d405      	bmi.n	800f2c4 <localtime_r+0x1a8>
 800f2b8:	6123      	str	r3, [r4, #16]
 800f2ba:	6923      	ldr	r3, [r4, #16]
 800f2bc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800f2c0:	60e3      	str	r3, [r4, #12]
 800f2c2:	e7d3      	b.n	800f26c <localtime_r+0x150>
 800f2c4:	230b      	movs	r3, #11
 800f2c6:	6123      	str	r3, [r4, #16]
 800f2c8:	6963      	ldr	r3, [r4, #20]
 800f2ca:	1e5a      	subs	r2, r3, #1
 800f2cc:	6162      	str	r2, [r4, #20]
 800f2ce:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 800f2d2:	0793      	lsls	r3, r2, #30
 800f2d4:	d105      	bne.n	800f2e2 <localtime_r+0x1c6>
 800f2d6:	2164      	movs	r1, #100	; 0x64
 800f2d8:	fb92 f3f1 	sdiv	r3, r2, r1
 800f2dc:	fb01 2313 	mls	r3, r1, r3, r2
 800f2e0:	b963      	cbnz	r3, 800f2fc <localtime_r+0x1e0>
 800f2e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800f2e6:	fb92 f3f1 	sdiv	r3, r2, r1
 800f2ea:	fb01 2313 	mls	r3, r1, r3, r2
 800f2ee:	fab3 f383 	clz	r3, r3
 800f2f2:	095b      	lsrs	r3, r3, #5
 800f2f4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800f2f8:	61e3      	str	r3, [r4, #28]
 800f2fa:	e7de      	b.n	800f2ba <localtime_r+0x19e>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e7f9      	b.n	800f2f4 <localtime_r+0x1d8>
 800f300:	08012644 	.word	0x08012644
 800f304:	200017d4 	.word	0x200017d4

0800f308 <malloc>:
 800f308:	4b02      	ldr	r3, [pc, #8]	; (800f314 <malloc+0xc>)
 800f30a:	4601      	mov	r1, r0
 800f30c:	6818      	ldr	r0, [r3, #0]
 800f30e:	f000 b871 	b.w	800f3f4 <_malloc_r>
 800f312:	bf00      	nop
 800f314:	20000030 	.word	0x20000030

0800f318 <free>:
 800f318:	4b02      	ldr	r3, [pc, #8]	; (800f324 <free+0xc>)
 800f31a:	4601      	mov	r1, r0
 800f31c:	6818      	ldr	r0, [r3, #0]
 800f31e:	f000 b819 	b.w	800f354 <_free_r>
 800f322:	bf00      	nop
 800f324:	20000030 	.word	0x20000030

0800f328 <memcpy>:
 800f328:	440a      	add	r2, r1
 800f32a:	4291      	cmp	r1, r2
 800f32c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f330:	d100      	bne.n	800f334 <memcpy+0xc>
 800f332:	4770      	bx	lr
 800f334:	b510      	push	{r4, lr}
 800f336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f33a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f33e:	4291      	cmp	r1, r2
 800f340:	d1f9      	bne.n	800f336 <memcpy+0xe>
 800f342:	bd10      	pop	{r4, pc}

0800f344 <memset>:
 800f344:	4402      	add	r2, r0
 800f346:	4603      	mov	r3, r0
 800f348:	4293      	cmp	r3, r2
 800f34a:	d100      	bne.n	800f34e <memset+0xa>
 800f34c:	4770      	bx	lr
 800f34e:	f803 1b01 	strb.w	r1, [r3], #1
 800f352:	e7f9      	b.n	800f348 <memset+0x4>

0800f354 <_free_r>:
 800f354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f356:	2900      	cmp	r1, #0
 800f358:	d048      	beq.n	800f3ec <_free_r+0x98>
 800f35a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f35e:	9001      	str	r0, [sp, #4]
 800f360:	2b00      	cmp	r3, #0
 800f362:	f1a1 0404 	sub.w	r4, r1, #4
 800f366:	bfb8      	it	lt
 800f368:	18e4      	addlt	r4, r4, r3
 800f36a:	f000 fc69 	bl	800fc40 <__malloc_lock>
 800f36e:	4a20      	ldr	r2, [pc, #128]	; (800f3f0 <_free_r+0x9c>)
 800f370:	9801      	ldr	r0, [sp, #4]
 800f372:	6813      	ldr	r3, [r2, #0]
 800f374:	4615      	mov	r5, r2
 800f376:	b933      	cbnz	r3, 800f386 <_free_r+0x32>
 800f378:	6063      	str	r3, [r4, #4]
 800f37a:	6014      	str	r4, [r2, #0]
 800f37c:	b003      	add	sp, #12
 800f37e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f382:	f000 bc63 	b.w	800fc4c <__malloc_unlock>
 800f386:	42a3      	cmp	r3, r4
 800f388:	d90b      	bls.n	800f3a2 <_free_r+0x4e>
 800f38a:	6821      	ldr	r1, [r4, #0]
 800f38c:	1862      	adds	r2, r4, r1
 800f38e:	4293      	cmp	r3, r2
 800f390:	bf04      	itt	eq
 800f392:	681a      	ldreq	r2, [r3, #0]
 800f394:	685b      	ldreq	r3, [r3, #4]
 800f396:	6063      	str	r3, [r4, #4]
 800f398:	bf04      	itt	eq
 800f39a:	1852      	addeq	r2, r2, r1
 800f39c:	6022      	streq	r2, [r4, #0]
 800f39e:	602c      	str	r4, [r5, #0]
 800f3a0:	e7ec      	b.n	800f37c <_free_r+0x28>
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	b10b      	cbz	r3, 800f3ac <_free_r+0x58>
 800f3a8:	42a3      	cmp	r3, r4
 800f3aa:	d9fa      	bls.n	800f3a2 <_free_r+0x4e>
 800f3ac:	6811      	ldr	r1, [r2, #0]
 800f3ae:	1855      	adds	r5, r2, r1
 800f3b0:	42a5      	cmp	r5, r4
 800f3b2:	d10b      	bne.n	800f3cc <_free_r+0x78>
 800f3b4:	6824      	ldr	r4, [r4, #0]
 800f3b6:	4421      	add	r1, r4
 800f3b8:	1854      	adds	r4, r2, r1
 800f3ba:	42a3      	cmp	r3, r4
 800f3bc:	6011      	str	r1, [r2, #0]
 800f3be:	d1dd      	bne.n	800f37c <_free_r+0x28>
 800f3c0:	681c      	ldr	r4, [r3, #0]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	6053      	str	r3, [r2, #4]
 800f3c6:	4421      	add	r1, r4
 800f3c8:	6011      	str	r1, [r2, #0]
 800f3ca:	e7d7      	b.n	800f37c <_free_r+0x28>
 800f3cc:	d902      	bls.n	800f3d4 <_free_r+0x80>
 800f3ce:	230c      	movs	r3, #12
 800f3d0:	6003      	str	r3, [r0, #0]
 800f3d2:	e7d3      	b.n	800f37c <_free_r+0x28>
 800f3d4:	6825      	ldr	r5, [r4, #0]
 800f3d6:	1961      	adds	r1, r4, r5
 800f3d8:	428b      	cmp	r3, r1
 800f3da:	bf04      	itt	eq
 800f3dc:	6819      	ldreq	r1, [r3, #0]
 800f3de:	685b      	ldreq	r3, [r3, #4]
 800f3e0:	6063      	str	r3, [r4, #4]
 800f3e2:	bf04      	itt	eq
 800f3e4:	1949      	addeq	r1, r1, r5
 800f3e6:	6021      	streq	r1, [r4, #0]
 800f3e8:	6054      	str	r4, [r2, #4]
 800f3ea:	e7c7      	b.n	800f37c <_free_r+0x28>
 800f3ec:	b003      	add	sp, #12
 800f3ee:	bd30      	pop	{r4, r5, pc}
 800f3f0:	200017b0 	.word	0x200017b0

0800f3f4 <_malloc_r>:
 800f3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3f6:	1ccd      	adds	r5, r1, #3
 800f3f8:	f025 0503 	bic.w	r5, r5, #3
 800f3fc:	3508      	adds	r5, #8
 800f3fe:	2d0c      	cmp	r5, #12
 800f400:	bf38      	it	cc
 800f402:	250c      	movcc	r5, #12
 800f404:	2d00      	cmp	r5, #0
 800f406:	4606      	mov	r6, r0
 800f408:	db01      	blt.n	800f40e <_malloc_r+0x1a>
 800f40a:	42a9      	cmp	r1, r5
 800f40c:	d903      	bls.n	800f416 <_malloc_r+0x22>
 800f40e:	230c      	movs	r3, #12
 800f410:	6033      	str	r3, [r6, #0]
 800f412:	2000      	movs	r0, #0
 800f414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f416:	f000 fc13 	bl	800fc40 <__malloc_lock>
 800f41a:	4921      	ldr	r1, [pc, #132]	; (800f4a0 <_malloc_r+0xac>)
 800f41c:	680a      	ldr	r2, [r1, #0]
 800f41e:	4614      	mov	r4, r2
 800f420:	b99c      	cbnz	r4, 800f44a <_malloc_r+0x56>
 800f422:	4f20      	ldr	r7, [pc, #128]	; (800f4a4 <_malloc_r+0xb0>)
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	b923      	cbnz	r3, 800f432 <_malloc_r+0x3e>
 800f428:	4621      	mov	r1, r4
 800f42a:	4630      	mov	r0, r6
 800f42c:	f000 f83c 	bl	800f4a8 <_sbrk_r>
 800f430:	6038      	str	r0, [r7, #0]
 800f432:	4629      	mov	r1, r5
 800f434:	4630      	mov	r0, r6
 800f436:	f000 f837 	bl	800f4a8 <_sbrk_r>
 800f43a:	1c43      	adds	r3, r0, #1
 800f43c:	d123      	bne.n	800f486 <_malloc_r+0x92>
 800f43e:	230c      	movs	r3, #12
 800f440:	6033      	str	r3, [r6, #0]
 800f442:	4630      	mov	r0, r6
 800f444:	f000 fc02 	bl	800fc4c <__malloc_unlock>
 800f448:	e7e3      	b.n	800f412 <_malloc_r+0x1e>
 800f44a:	6823      	ldr	r3, [r4, #0]
 800f44c:	1b5b      	subs	r3, r3, r5
 800f44e:	d417      	bmi.n	800f480 <_malloc_r+0x8c>
 800f450:	2b0b      	cmp	r3, #11
 800f452:	d903      	bls.n	800f45c <_malloc_r+0x68>
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	441c      	add	r4, r3
 800f458:	6025      	str	r5, [r4, #0]
 800f45a:	e004      	b.n	800f466 <_malloc_r+0x72>
 800f45c:	6863      	ldr	r3, [r4, #4]
 800f45e:	42a2      	cmp	r2, r4
 800f460:	bf0c      	ite	eq
 800f462:	600b      	streq	r3, [r1, #0]
 800f464:	6053      	strne	r3, [r2, #4]
 800f466:	4630      	mov	r0, r6
 800f468:	f000 fbf0 	bl	800fc4c <__malloc_unlock>
 800f46c:	f104 000b 	add.w	r0, r4, #11
 800f470:	1d23      	adds	r3, r4, #4
 800f472:	f020 0007 	bic.w	r0, r0, #7
 800f476:	1ac2      	subs	r2, r0, r3
 800f478:	d0cc      	beq.n	800f414 <_malloc_r+0x20>
 800f47a:	1a1b      	subs	r3, r3, r0
 800f47c:	50a3      	str	r3, [r4, r2]
 800f47e:	e7c9      	b.n	800f414 <_malloc_r+0x20>
 800f480:	4622      	mov	r2, r4
 800f482:	6864      	ldr	r4, [r4, #4]
 800f484:	e7cc      	b.n	800f420 <_malloc_r+0x2c>
 800f486:	1cc4      	adds	r4, r0, #3
 800f488:	f024 0403 	bic.w	r4, r4, #3
 800f48c:	42a0      	cmp	r0, r4
 800f48e:	d0e3      	beq.n	800f458 <_malloc_r+0x64>
 800f490:	1a21      	subs	r1, r4, r0
 800f492:	4630      	mov	r0, r6
 800f494:	f000 f808 	bl	800f4a8 <_sbrk_r>
 800f498:	3001      	adds	r0, #1
 800f49a:	d1dd      	bne.n	800f458 <_malloc_r+0x64>
 800f49c:	e7cf      	b.n	800f43e <_malloc_r+0x4a>
 800f49e:	bf00      	nop
 800f4a0:	200017b0 	.word	0x200017b0
 800f4a4:	200017b4 	.word	0x200017b4

0800f4a8 <_sbrk_r>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	4d06      	ldr	r5, [pc, #24]	; (800f4c4 <_sbrk_r+0x1c>)
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	4608      	mov	r0, r1
 800f4b2:	602b      	str	r3, [r5, #0]
 800f4b4:	f7f2 ff04 	bl	80022c0 <_sbrk>
 800f4b8:	1c43      	adds	r3, r0, #1
 800f4ba:	d102      	bne.n	800f4c2 <_sbrk_r+0x1a>
 800f4bc:	682b      	ldr	r3, [r5, #0]
 800f4be:	b103      	cbz	r3, 800f4c2 <_sbrk_r+0x1a>
 800f4c0:	6023      	str	r3, [r4, #0]
 800f4c2:	bd38      	pop	{r3, r4, r5, pc}
 800f4c4:	20008e04 	.word	0x20008e04

0800f4c8 <siprintf>:
 800f4c8:	b40e      	push	{r1, r2, r3}
 800f4ca:	b500      	push	{lr}
 800f4cc:	b09c      	sub	sp, #112	; 0x70
 800f4ce:	ab1d      	add	r3, sp, #116	; 0x74
 800f4d0:	9002      	str	r0, [sp, #8]
 800f4d2:	9006      	str	r0, [sp, #24]
 800f4d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4d8:	4809      	ldr	r0, [pc, #36]	; (800f500 <siprintf+0x38>)
 800f4da:	9107      	str	r1, [sp, #28]
 800f4dc:	9104      	str	r1, [sp, #16]
 800f4de:	4909      	ldr	r1, [pc, #36]	; (800f504 <siprintf+0x3c>)
 800f4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4e4:	9105      	str	r1, [sp, #20]
 800f4e6:	6800      	ldr	r0, [r0, #0]
 800f4e8:	9301      	str	r3, [sp, #4]
 800f4ea:	a902      	add	r1, sp, #8
 800f4ec:	f000 fc10 	bl	800fd10 <_svfiprintf_r>
 800f4f0:	9b02      	ldr	r3, [sp, #8]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	701a      	strb	r2, [r3, #0]
 800f4f6:	b01c      	add	sp, #112	; 0x70
 800f4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4fc:	b003      	add	sp, #12
 800f4fe:	4770      	bx	lr
 800f500:	20000030 	.word	0x20000030
 800f504:	ffff0208 	.word	0xffff0208

0800f508 <__tzcalc_limits>:
 800f508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50c:	4680      	mov	r8, r0
 800f50e:	f000 fadd 	bl	800facc <__gettzinfo>
 800f512:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800f516:	4598      	cmp	r8, r3
 800f518:	f340 8098 	ble.w	800f64c <__tzcalc_limits+0x144>
 800f51c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800f520:	4443      	add	r3, r8
 800f522:	109b      	asrs	r3, r3, #2
 800f524:	f240 126d 	movw	r2, #365	; 0x16d
 800f528:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800f52c:	fb02 3505 	mla	r5, r2, r5, r3
 800f530:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800f534:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800f538:	fb93 f3f2 	sdiv	r3, r3, r2
 800f53c:	441d      	add	r5, r3
 800f53e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f542:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800f546:	fb98 f7f3 	sdiv	r7, r8, r3
 800f54a:	fb03 8717 	mls	r7, r3, r7, r8
 800f54e:	4442      	add	r2, r8
 800f550:	fab7 fc87 	clz	ip, r7
 800f554:	fbb2 f2f3 	udiv	r2, r2, r3
 800f558:	f008 0303 	and.w	r3, r8, #3
 800f55c:	4415      	add	r5, r2
 800f55e:	2264      	movs	r2, #100	; 0x64
 800f560:	f8c0 8004 	str.w	r8, [r0, #4]
 800f564:	fb98 f6f2 	sdiv	r6, r8, r2
 800f568:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f56c:	fb02 8616 	mls	r6, r2, r6, r8
 800f570:	4604      	mov	r4, r0
 800f572:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	f04f 0e07 	mov.w	lr, #7
 800f57c:	7a22      	ldrb	r2, [r4, #8]
 800f57e:	6963      	ldr	r3, [r4, #20]
 800f580:	2a4a      	cmp	r2, #74	; 0x4a
 800f582:	d128      	bne.n	800f5d6 <__tzcalc_limits+0xce>
 800f584:	9900      	ldr	r1, [sp, #0]
 800f586:	18ea      	adds	r2, r5, r3
 800f588:	b901      	cbnz	r1, 800f58c <__tzcalc_limits+0x84>
 800f58a:	b906      	cbnz	r6, 800f58e <__tzcalc_limits+0x86>
 800f58c:	bb0f      	cbnz	r7, 800f5d2 <__tzcalc_limits+0xca>
 800f58e:	2b3b      	cmp	r3, #59	; 0x3b
 800f590:	bfd4      	ite	le
 800f592:	2300      	movle	r3, #0
 800f594:	2301      	movgt	r3, #1
 800f596:	4413      	add	r3, r2
 800f598:	1e5a      	subs	r2, r3, #1
 800f59a:	69a3      	ldr	r3, [r4, #24]
 800f59c:	492c      	ldr	r1, [pc, #176]	; (800f650 <__tzcalc_limits+0x148>)
 800f59e:	fb01 3202 	mla	r2, r1, r2, r3
 800f5a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f5a4:	4413      	add	r3, r2
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	17db      	asrs	r3, r3, #31
 800f5aa:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800f5ae:	3428      	adds	r4, #40	; 0x28
 800f5b0:	45a3      	cmp	fp, r4
 800f5b2:	d1e3      	bne.n	800f57c <__tzcalc_limits+0x74>
 800f5b4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800f5b8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800f5bc:	4294      	cmp	r4, r2
 800f5be:	eb75 0303 	sbcs.w	r3, r5, r3
 800f5c2:	bfb4      	ite	lt
 800f5c4:	2301      	movlt	r3, #1
 800f5c6:	2300      	movge	r3, #0
 800f5c8:	6003      	str	r3, [r0, #0]
 800f5ca:	2001      	movs	r0, #1
 800f5cc:	b003      	add	sp, #12
 800f5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	e7df      	b.n	800f596 <__tzcalc_limits+0x8e>
 800f5d6:	2a44      	cmp	r2, #68	; 0x44
 800f5d8:	d101      	bne.n	800f5de <__tzcalc_limits+0xd6>
 800f5da:	18ea      	adds	r2, r5, r3
 800f5dc:	e7dd      	b.n	800f59a <__tzcalc_limits+0x92>
 800f5de:	9a00      	ldr	r2, [sp, #0]
 800f5e0:	bb72      	cbnz	r2, 800f640 <__tzcalc_limits+0x138>
 800f5e2:	2e00      	cmp	r6, #0
 800f5e4:	bf0c      	ite	eq
 800f5e6:	46e0      	moveq	r8, ip
 800f5e8:	f04f 0801 	movne.w	r8, #1
 800f5ec:	4919      	ldr	r1, [pc, #100]	; (800f654 <__tzcalc_limits+0x14c>)
 800f5ee:	68e2      	ldr	r2, [r4, #12]
 800f5f0:	9201      	str	r2, [sp, #4]
 800f5f2:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800f5f6:	fb0a 1808 	mla	r8, sl, r8, r1
 800f5fa:	462a      	mov	r2, r5
 800f5fc:	f04f 0900 	mov.w	r9, #0
 800f600:	f1a8 0804 	sub.w	r8, r8, #4
 800f604:	9901      	ldr	r1, [sp, #4]
 800f606:	f109 0901 	add.w	r9, r9, #1
 800f60a:	4549      	cmp	r1, r9
 800f60c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 800f610:	dc18      	bgt.n	800f644 <__tzcalc_limits+0x13c>
 800f612:	f102 0804 	add.w	r8, r2, #4
 800f616:	fb98 f9fe 	sdiv	r9, r8, lr
 800f61a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800f61e:	eba8 0909 	sub.w	r9, r8, r9
 800f622:	ebb3 0909 	subs.w	r9, r3, r9
 800f626:	6923      	ldr	r3, [r4, #16]
 800f628:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f62c:	bf48      	it	mi
 800f62e:	f109 0907 	addmi.w	r9, r9, #7
 800f632:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f636:	444b      	add	r3, r9
 800f638:	4553      	cmp	r3, sl
 800f63a:	da05      	bge.n	800f648 <__tzcalc_limits+0x140>
 800f63c:	441a      	add	r2, r3
 800f63e:	e7ac      	b.n	800f59a <__tzcalc_limits+0x92>
 800f640:	46e0      	mov	r8, ip
 800f642:	e7d3      	b.n	800f5ec <__tzcalc_limits+0xe4>
 800f644:	4452      	add	r2, sl
 800f646:	e7dd      	b.n	800f604 <__tzcalc_limits+0xfc>
 800f648:	3b07      	subs	r3, #7
 800f64a:	e7f5      	b.n	800f638 <__tzcalc_limits+0x130>
 800f64c:	2000      	movs	r0, #0
 800f64e:	e7bd      	b.n	800f5cc <__tzcalc_limits+0xc4>
 800f650:	00015180 	.word	0x00015180
 800f654:	08012644 	.word	0x08012644

0800f658 <__tz_lock>:
 800f658:	4801      	ldr	r0, [pc, #4]	; (800f660 <__tz_lock+0x8>)
 800f65a:	f000 baec 	b.w	800fc36 <__retarget_lock_acquire>
 800f65e:	bf00      	nop
 800f660:	20008dff 	.word	0x20008dff

0800f664 <__tz_unlock>:
 800f664:	4801      	ldr	r0, [pc, #4]	; (800f66c <__tz_unlock+0x8>)
 800f666:	f000 bae8 	b.w	800fc3a <__retarget_lock_release>
 800f66a:	bf00      	nop
 800f66c:	20008dff 	.word	0x20008dff

0800f670 <_tzset_unlocked>:
 800f670:	4b01      	ldr	r3, [pc, #4]	; (800f678 <_tzset_unlocked+0x8>)
 800f672:	6818      	ldr	r0, [r3, #0]
 800f674:	f000 b802 	b.w	800f67c <_tzset_unlocked_r>
 800f678:	20000030 	.word	0x20000030

0800f67c <_tzset_unlocked_r>:
 800f67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f680:	b08d      	sub	sp, #52	; 0x34
 800f682:	4607      	mov	r7, r0
 800f684:	f000 fa22 	bl	800facc <__gettzinfo>
 800f688:	49ae      	ldr	r1, [pc, #696]	; (800f944 <_tzset_unlocked_r+0x2c8>)
 800f68a:	4eaf      	ldr	r6, [pc, #700]	; (800f948 <_tzset_unlocked_r+0x2cc>)
 800f68c:	4605      	mov	r5, r0
 800f68e:	4638      	mov	r0, r7
 800f690:	f000 fa14 	bl	800fabc <_getenv_r>
 800f694:	4604      	mov	r4, r0
 800f696:	b970      	cbnz	r0, 800f6b6 <_tzset_unlocked_r+0x3a>
 800f698:	4bac      	ldr	r3, [pc, #688]	; (800f94c <_tzset_unlocked_r+0x2d0>)
 800f69a:	4aad      	ldr	r2, [pc, #692]	; (800f950 <_tzset_unlocked_r+0x2d4>)
 800f69c:	6018      	str	r0, [r3, #0]
 800f69e:	4bad      	ldr	r3, [pc, #692]	; (800f954 <_tzset_unlocked_r+0x2d8>)
 800f6a0:	6018      	str	r0, [r3, #0]
 800f6a2:	4bad      	ldr	r3, [pc, #692]	; (800f958 <_tzset_unlocked_r+0x2dc>)
 800f6a4:	6830      	ldr	r0, [r6, #0]
 800f6a6:	e9c3 2200 	strd	r2, r2, [r3]
 800f6aa:	f7ff fe35 	bl	800f318 <free>
 800f6ae:	6034      	str	r4, [r6, #0]
 800f6b0:	b00d      	add	sp, #52	; 0x34
 800f6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b6:	6831      	ldr	r1, [r6, #0]
 800f6b8:	2900      	cmp	r1, #0
 800f6ba:	d15f      	bne.n	800f77c <_tzset_unlocked_r+0x100>
 800f6bc:	6830      	ldr	r0, [r6, #0]
 800f6be:	f7ff fe2b 	bl	800f318 <free>
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f7f0 fe0c 	bl	80002e0 <strlen>
 800f6c8:	1c41      	adds	r1, r0, #1
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	f7ff fe92 	bl	800f3f4 <_malloc_r>
 800f6d0:	6030      	str	r0, [r6, #0]
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d157      	bne.n	800f786 <_tzset_unlocked_r+0x10a>
 800f6d6:	7823      	ldrb	r3, [r4, #0]
 800f6d8:	4aa0      	ldr	r2, [pc, #640]	; (800f95c <_tzset_unlocked_r+0x2e0>)
 800f6da:	49a1      	ldr	r1, [pc, #644]	; (800f960 <_tzset_unlocked_r+0x2e4>)
 800f6dc:	2b3a      	cmp	r3, #58	; 0x3a
 800f6de:	bf08      	it	eq
 800f6e0:	3401      	addeq	r4, #1
 800f6e2:	ae0a      	add	r6, sp, #40	; 0x28
 800f6e4:	4633      	mov	r3, r6
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	f000 ff00 	bl	80104ec <siscanf>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	dddf      	ble.n	800f6b0 <_tzset_unlocked_r+0x34>
 800f6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6f2:	18e7      	adds	r7, r4, r3
 800f6f4:	5ce3      	ldrb	r3, [r4, r3]
 800f6f6:	2b2d      	cmp	r3, #45	; 0x2d
 800f6f8:	d149      	bne.n	800f78e <_tzset_unlocked_r+0x112>
 800f6fa:	3701      	adds	r7, #1
 800f6fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f700:	f10d 0a20 	add.w	sl, sp, #32
 800f704:	f10d 0b1e 	add.w	fp, sp, #30
 800f708:	f04f 0800 	mov.w	r8, #0
 800f70c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800f710:	4994      	ldr	r1, [pc, #592]	; (800f964 <_tzset_unlocked_r+0x2e8>)
 800f712:	9603      	str	r6, [sp, #12]
 800f714:	f8cd b000 	str.w	fp, [sp]
 800f718:	4633      	mov	r3, r6
 800f71a:	aa07      	add	r2, sp, #28
 800f71c:	4638      	mov	r0, r7
 800f71e:	f8ad 801e 	strh.w	r8, [sp, #30]
 800f722:	f8ad 8020 	strh.w	r8, [sp, #32]
 800f726:	f000 fee1 	bl	80104ec <siscanf>
 800f72a:	4540      	cmp	r0, r8
 800f72c:	ddc0      	ble.n	800f6b0 <_tzset_unlocked_r+0x34>
 800f72e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f732:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800f736:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800f970 <_tzset_unlocked_r+0x2f4>
 800f73a:	213c      	movs	r1, #60	; 0x3c
 800f73c:	fb01 2203 	mla	r2, r1, r3, r2
 800f740:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f744:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f748:	fb01 2303 	mla	r3, r1, r3, r2
 800f74c:	435c      	muls	r4, r3
 800f74e:	62ac      	str	r4, [r5, #40]	; 0x28
 800f750:	4c81      	ldr	r4, [pc, #516]	; (800f958 <_tzset_unlocked_r+0x2dc>)
 800f752:	4b82      	ldr	r3, [pc, #520]	; (800f95c <_tzset_unlocked_r+0x2e0>)
 800f754:	6023      	str	r3, [r4, #0]
 800f756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f758:	4981      	ldr	r1, [pc, #516]	; (800f960 <_tzset_unlocked_r+0x2e4>)
 800f75a:	441f      	add	r7, r3
 800f75c:	464a      	mov	r2, r9
 800f75e:	4633      	mov	r3, r6
 800f760:	4638      	mov	r0, r7
 800f762:	f000 fec3 	bl	80104ec <siscanf>
 800f766:	4540      	cmp	r0, r8
 800f768:	dc16      	bgt.n	800f798 <_tzset_unlocked_r+0x11c>
 800f76a:	6823      	ldr	r3, [r4, #0]
 800f76c:	6063      	str	r3, [r4, #4]
 800f76e:	4b77      	ldr	r3, [pc, #476]	; (800f94c <_tzset_unlocked_r+0x2d0>)
 800f770:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800f772:	601a      	str	r2, [r3, #0]
 800f774:	4b77      	ldr	r3, [pc, #476]	; (800f954 <_tzset_unlocked_r+0x2d8>)
 800f776:	f8c3 8000 	str.w	r8, [r3]
 800f77a:	e799      	b.n	800f6b0 <_tzset_unlocked_r+0x34>
 800f77c:	f7f0 fdb8 	bl	80002f0 <strcmp>
 800f780:	2800      	cmp	r0, #0
 800f782:	d19b      	bne.n	800f6bc <_tzset_unlocked_r+0x40>
 800f784:	e794      	b.n	800f6b0 <_tzset_unlocked_r+0x34>
 800f786:	4621      	mov	r1, r4
 800f788:	f000 ff21 	bl	80105ce <strcpy>
 800f78c:	e7a3      	b.n	800f6d6 <_tzset_unlocked_r+0x5a>
 800f78e:	2b2b      	cmp	r3, #43	; 0x2b
 800f790:	bf08      	it	eq
 800f792:	3701      	addeq	r7, #1
 800f794:	2401      	movs	r4, #1
 800f796:	e7b3      	b.n	800f700 <_tzset_unlocked_r+0x84>
 800f798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f79a:	f8c4 9004 	str.w	r9, [r4, #4]
 800f79e:	18fc      	adds	r4, r7, r3
 800f7a0:	5cfb      	ldrb	r3, [r7, r3]
 800f7a2:	2b2d      	cmp	r3, #45	; 0x2d
 800f7a4:	f040 808b 	bne.w	800f8be <_tzset_unlocked_r+0x242>
 800f7a8:	3401      	adds	r4, #1
 800f7aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f7b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f7b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f7bc:	930a      	str	r3, [sp, #40]	; 0x28
 800f7be:	e9cd a602 	strd	sl, r6, [sp, #8]
 800f7c2:	e9cd b600 	strd	fp, r6, [sp]
 800f7c6:	4967      	ldr	r1, [pc, #412]	; (800f964 <_tzset_unlocked_r+0x2e8>)
 800f7c8:	4633      	mov	r3, r6
 800f7ca:	aa07      	add	r2, sp, #28
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f000 fe8d 	bl	80104ec <siscanf>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	dc78      	bgt.n	800f8c8 <_tzset_unlocked_r+0x24c>
 800f7d6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800f7d8:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 800f7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7de:	652f      	str	r7, [r5, #80]	; 0x50
 800f7e0:	441c      	add	r4, r3
 800f7e2:	462f      	mov	r7, r5
 800f7e4:	f04f 0900 	mov.w	r9, #0
 800f7e8:	7823      	ldrb	r3, [r4, #0]
 800f7ea:	2b2c      	cmp	r3, #44	; 0x2c
 800f7ec:	bf08      	it	eq
 800f7ee:	3401      	addeq	r4, #1
 800f7f0:	f894 8000 	ldrb.w	r8, [r4]
 800f7f4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800f7f8:	d178      	bne.n	800f8ec <_tzset_unlocked_r+0x270>
 800f7fa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800f7fe:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800f802:	ab09      	add	r3, sp, #36	; 0x24
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	4958      	ldr	r1, [pc, #352]	; (800f968 <_tzset_unlocked_r+0x2ec>)
 800f808:	9603      	str	r6, [sp, #12]
 800f80a:	4633      	mov	r3, r6
 800f80c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800f810:	4620      	mov	r0, r4
 800f812:	f000 fe6b 	bl	80104ec <siscanf>
 800f816:	2803      	cmp	r0, #3
 800f818:	f47f af4a 	bne.w	800f6b0 <_tzset_unlocked_r+0x34>
 800f81c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800f820:	1e4b      	subs	r3, r1, #1
 800f822:	2b0b      	cmp	r3, #11
 800f824:	f63f af44 	bhi.w	800f6b0 <_tzset_unlocked_r+0x34>
 800f828:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800f82c:	1e53      	subs	r3, r2, #1
 800f82e:	2b04      	cmp	r3, #4
 800f830:	f63f af3e 	bhi.w	800f6b0 <_tzset_unlocked_r+0x34>
 800f834:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f838:	2b06      	cmp	r3, #6
 800f83a:	f63f af39 	bhi.w	800f6b0 <_tzset_unlocked_r+0x34>
 800f83e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800f842:	f887 8008 	strb.w	r8, [r7, #8]
 800f846:	617b      	str	r3, [r7, #20]
 800f848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f84a:	eb04 0803 	add.w	r8, r4, r3
 800f84e:	2302      	movs	r3, #2
 800f850:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f854:	2300      	movs	r3, #0
 800f856:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f85a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800f85e:	930a      	str	r3, [sp, #40]	; 0x28
 800f860:	f898 3000 	ldrb.w	r3, [r8]
 800f864:	2b2f      	cmp	r3, #47	; 0x2f
 800f866:	d109      	bne.n	800f87c <_tzset_unlocked_r+0x200>
 800f868:	e9cd a602 	strd	sl, r6, [sp, #8]
 800f86c:	e9cd b600 	strd	fp, r6, [sp]
 800f870:	493e      	ldr	r1, [pc, #248]	; (800f96c <_tzset_unlocked_r+0x2f0>)
 800f872:	4633      	mov	r3, r6
 800f874:	aa07      	add	r2, sp, #28
 800f876:	4640      	mov	r0, r8
 800f878:	f000 fe38 	bl	80104ec <siscanf>
 800f87c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f880:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800f884:	213c      	movs	r1, #60	; 0x3c
 800f886:	fb01 2203 	mla	r2, r1, r3, r2
 800f88a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f88e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f892:	fb01 2303 	mla	r3, r1, r3, r2
 800f896:	61bb      	str	r3, [r7, #24]
 800f898:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f89a:	3728      	adds	r7, #40	; 0x28
 800f89c:	4444      	add	r4, r8
 800f89e:	f1b9 0f00 	cmp.w	r9, #0
 800f8a2:	d020      	beq.n	800f8e6 <_tzset_unlocked_r+0x26a>
 800f8a4:	6868      	ldr	r0, [r5, #4]
 800f8a6:	f7ff fe2f 	bl	800f508 <__tzcalc_limits>
 800f8aa:	4b28      	ldr	r3, [pc, #160]	; (800f94c <_tzset_unlocked_r+0x2d0>)
 800f8ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800f8ae:	601a      	str	r2, [r3, #0]
 800f8b0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800f8b2:	1a9b      	subs	r3, r3, r2
 800f8b4:	4a27      	ldr	r2, [pc, #156]	; (800f954 <_tzset_unlocked_r+0x2d8>)
 800f8b6:	bf18      	it	ne
 800f8b8:	2301      	movne	r3, #1
 800f8ba:	6013      	str	r3, [r2, #0]
 800f8bc:	e6f8      	b.n	800f6b0 <_tzset_unlocked_r+0x34>
 800f8be:	2b2b      	cmp	r3, #43	; 0x2b
 800f8c0:	bf08      	it	eq
 800f8c2:	3401      	addeq	r4, #1
 800f8c4:	2701      	movs	r7, #1
 800f8c6:	e772      	b.n	800f7ae <_tzset_unlocked_r+0x132>
 800f8c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f8cc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800f8d0:	213c      	movs	r1, #60	; 0x3c
 800f8d2:	fb01 2203 	mla	r2, r1, r3, r2
 800f8d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f8da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800f8de:	fb01 2303 	mla	r3, r1, r3, r2
 800f8e2:	435f      	muls	r7, r3
 800f8e4:	e77a      	b.n	800f7dc <_tzset_unlocked_r+0x160>
 800f8e6:	f04f 0901 	mov.w	r9, #1
 800f8ea:	e77d      	b.n	800f7e8 <_tzset_unlocked_r+0x16c>
 800f8ec:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800f8f0:	bf06      	itte	eq
 800f8f2:	3401      	addeq	r4, #1
 800f8f4:	4643      	moveq	r3, r8
 800f8f6:	2344      	movne	r3, #68	; 0x44
 800f8f8:	220a      	movs	r2, #10
 800f8fa:	a90b      	add	r1, sp, #44	; 0x2c
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	9305      	str	r3, [sp, #20]
 800f900:	f000 fefe 	bl	8010700 <strtoul>
 800f904:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800f908:	9b05      	ldr	r3, [sp, #20]
 800f90a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800f90e:	45a0      	cmp	r8, r4
 800f910:	d114      	bne.n	800f93c <_tzset_unlocked_r+0x2c0>
 800f912:	234d      	movs	r3, #77	; 0x4d
 800f914:	f1b9 0f00 	cmp.w	r9, #0
 800f918:	d107      	bne.n	800f92a <_tzset_unlocked_r+0x2ae>
 800f91a:	722b      	strb	r3, [r5, #8]
 800f91c:	2103      	movs	r1, #3
 800f91e:	2302      	movs	r3, #2
 800f920:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800f924:	f8c5 9014 	str.w	r9, [r5, #20]
 800f928:	e791      	b.n	800f84e <_tzset_unlocked_r+0x1d2>
 800f92a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800f92e:	220b      	movs	r2, #11
 800f930:	2301      	movs	r3, #1
 800f932:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800f936:	2300      	movs	r3, #0
 800f938:	63eb      	str	r3, [r5, #60]	; 0x3c
 800f93a:	e788      	b.n	800f84e <_tzset_unlocked_r+0x1d2>
 800f93c:	b280      	uxth	r0, r0
 800f93e:	723b      	strb	r3, [r7, #8]
 800f940:	6178      	str	r0, [r7, #20]
 800f942:	e784      	b.n	800f84e <_tzset_unlocked_r+0x1d2>
 800f944:	080126a4 	.word	0x080126a4
 800f948:	200017d0 	.word	0x200017d0
 800f94c:	200017d8 	.word	0x200017d8
 800f950:	080126a7 	.word	0x080126a7
 800f954:	200017d4 	.word	0x200017d4
 800f958:	20000094 	.word	0x20000094
 800f95c:	200017c3 	.word	0x200017c3
 800f960:	080126ab 	.word	0x080126ab
 800f964:	080126ce 	.word	0x080126ce
 800f968:	080126ba 	.word	0x080126ba
 800f96c:	080126cd 	.word	0x080126cd
 800f970:	200017b8 	.word	0x200017b8

0800f974 <_vsniprintf_r>:
 800f974:	b530      	push	{r4, r5, lr}
 800f976:	1e14      	subs	r4, r2, #0
 800f978:	4605      	mov	r5, r0
 800f97a:	b09b      	sub	sp, #108	; 0x6c
 800f97c:	4618      	mov	r0, r3
 800f97e:	da05      	bge.n	800f98c <_vsniprintf_r+0x18>
 800f980:	238b      	movs	r3, #139	; 0x8b
 800f982:	602b      	str	r3, [r5, #0]
 800f984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f988:	b01b      	add	sp, #108	; 0x6c
 800f98a:	bd30      	pop	{r4, r5, pc}
 800f98c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f990:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f994:	bf14      	ite	ne
 800f996:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f99a:	4623      	moveq	r3, r4
 800f99c:	9302      	str	r3, [sp, #8]
 800f99e:	9305      	str	r3, [sp, #20]
 800f9a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9a4:	9100      	str	r1, [sp, #0]
 800f9a6:	9104      	str	r1, [sp, #16]
 800f9a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f9b0:	4669      	mov	r1, sp
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f000 f9ac 	bl	800fd10 <_svfiprintf_r>
 800f9b8:	1c43      	adds	r3, r0, #1
 800f9ba:	bfbc      	itt	lt
 800f9bc:	238b      	movlt	r3, #139	; 0x8b
 800f9be:	602b      	strlt	r3, [r5, #0]
 800f9c0:	2c00      	cmp	r4, #0
 800f9c2:	d0e1      	beq.n	800f988 <_vsniprintf_r+0x14>
 800f9c4:	9b00      	ldr	r3, [sp, #0]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	701a      	strb	r2, [r3, #0]
 800f9ca:	e7dd      	b.n	800f988 <_vsniprintf_r+0x14>

0800f9cc <vsniprintf>:
 800f9cc:	b507      	push	{r0, r1, r2, lr}
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	460a      	mov	r2, r1
 800f9d4:	4601      	mov	r1, r0
 800f9d6:	4803      	ldr	r0, [pc, #12]	; (800f9e4 <vsniprintf+0x18>)
 800f9d8:	6800      	ldr	r0, [r0, #0]
 800f9da:	f7ff ffcb 	bl	800f974 <_vsniprintf_r>
 800f9de:	b003      	add	sp, #12
 800f9e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9e4:	20000030 	.word	0x20000030

0800f9e8 <__assert_func>:
 800f9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9ea:	4614      	mov	r4, r2
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4b09      	ldr	r3, [pc, #36]	; (800fa14 <__assert_func+0x2c>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4605      	mov	r5, r0
 800f9f4:	68d8      	ldr	r0, [r3, #12]
 800f9f6:	b14c      	cbz	r4, 800fa0c <__assert_func+0x24>
 800f9f8:	4b07      	ldr	r3, [pc, #28]	; (800fa18 <__assert_func+0x30>)
 800f9fa:	9100      	str	r1, [sp, #0]
 800f9fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa00:	4906      	ldr	r1, [pc, #24]	; (800fa1c <__assert_func+0x34>)
 800fa02:	462b      	mov	r3, r5
 800fa04:	f000 f80e 	bl	800fa24 <fiprintf>
 800fa08:	f000 ff56 	bl	80108b8 <abort>
 800fa0c:	4b04      	ldr	r3, [pc, #16]	; (800fa20 <__assert_func+0x38>)
 800fa0e:	461c      	mov	r4, r3
 800fa10:	e7f3      	b.n	800f9fa <__assert_func+0x12>
 800fa12:	bf00      	nop
 800fa14:	20000030 	.word	0x20000030
 800fa18:	080126e0 	.word	0x080126e0
 800fa1c:	080126ed 	.word	0x080126ed
 800fa20:	0801271b 	.word	0x0801271b

0800fa24 <fiprintf>:
 800fa24:	b40e      	push	{r1, r2, r3}
 800fa26:	b503      	push	{r0, r1, lr}
 800fa28:	4601      	mov	r1, r0
 800fa2a:	ab03      	add	r3, sp, #12
 800fa2c:	4805      	ldr	r0, [pc, #20]	; (800fa44 <fiprintf+0x20>)
 800fa2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa32:	6800      	ldr	r0, [r0, #0]
 800fa34:	9301      	str	r3, [sp, #4]
 800fa36:	f000 fa95 	bl	800ff64 <_vfiprintf_r>
 800fa3a:	b002      	add	sp, #8
 800fa3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa40:	b003      	add	sp, #12
 800fa42:	4770      	bx	lr
 800fa44:	20000030 	.word	0x20000030

0800fa48 <_findenv_r>:
 800fa48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4c:	4607      	mov	r7, r0
 800fa4e:	4689      	mov	r9, r1
 800fa50:	4616      	mov	r6, r2
 800fa52:	f000 ff49 	bl	80108e8 <__env_lock>
 800fa56:	4b18      	ldr	r3, [pc, #96]	; (800fab8 <_findenv_r+0x70>)
 800fa58:	681c      	ldr	r4, [r3, #0]
 800fa5a:	469a      	mov	sl, r3
 800fa5c:	b134      	cbz	r4, 800fa6c <_findenv_r+0x24>
 800fa5e:	464b      	mov	r3, r9
 800fa60:	4698      	mov	r8, r3
 800fa62:	f813 1b01 	ldrb.w	r1, [r3], #1
 800fa66:	b139      	cbz	r1, 800fa78 <_findenv_r+0x30>
 800fa68:	293d      	cmp	r1, #61	; 0x3d
 800fa6a:	d1f9      	bne.n	800fa60 <_findenv_r+0x18>
 800fa6c:	4638      	mov	r0, r7
 800fa6e:	f000 ff41 	bl	80108f4 <__env_unlock>
 800fa72:	2000      	movs	r0, #0
 800fa74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa78:	eba8 0809 	sub.w	r8, r8, r9
 800fa7c:	46a3      	mov	fp, r4
 800fa7e:	f854 0b04 	ldr.w	r0, [r4], #4
 800fa82:	2800      	cmp	r0, #0
 800fa84:	d0f2      	beq.n	800fa6c <_findenv_r+0x24>
 800fa86:	4642      	mov	r2, r8
 800fa88:	4649      	mov	r1, r9
 800fa8a:	f000 fda8 	bl	80105de <strncmp>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d1f4      	bne.n	800fa7c <_findenv_r+0x34>
 800fa92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fa96:	eb03 0508 	add.w	r5, r3, r8
 800fa9a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800fa9e:	2b3d      	cmp	r3, #61	; 0x3d
 800faa0:	d1ec      	bne.n	800fa7c <_findenv_r+0x34>
 800faa2:	f8da 3000 	ldr.w	r3, [sl]
 800faa6:	ebab 0303 	sub.w	r3, fp, r3
 800faaa:	109b      	asrs	r3, r3, #2
 800faac:	4638      	mov	r0, r7
 800faae:	6033      	str	r3, [r6, #0]
 800fab0:	f000 ff20 	bl	80108f4 <__env_unlock>
 800fab4:	1c68      	adds	r0, r5, #1
 800fab6:	e7dd      	b.n	800fa74 <_findenv_r+0x2c>
 800fab8:	2000001c 	.word	0x2000001c

0800fabc <_getenv_r>:
 800fabc:	b507      	push	{r0, r1, r2, lr}
 800fabe:	aa01      	add	r2, sp, #4
 800fac0:	f7ff ffc2 	bl	800fa48 <_findenv_r>
 800fac4:	b003      	add	sp, #12
 800fac6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800facc <__gettzinfo>:
 800facc:	4800      	ldr	r0, [pc, #0]	; (800fad0 <__gettzinfo+0x4>)
 800face:	4770      	bx	lr
 800fad0:	200000a0 	.word	0x200000a0

0800fad4 <gmtime_r>:
 800fad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800fadc:	460c      	mov	r4, r1
 800fade:	4a51      	ldr	r2, [pc, #324]	; (800fc24 <gmtime_r+0x150>)
 800fae0:	2300      	movs	r3, #0
 800fae2:	4630      	mov	r0, r6
 800fae4:	4639      	mov	r1, r7
 800fae6:	f7f0 fc63 	bl	80003b0 <__aeabi_ldivmod>
 800faea:	4639      	mov	r1, r7
 800faec:	4605      	mov	r5, r0
 800faee:	4a4d      	ldr	r2, [pc, #308]	; (800fc24 <gmtime_r+0x150>)
 800faf0:	4630      	mov	r0, r6
 800faf2:	2300      	movs	r3, #0
 800faf4:	f7f0 fc5c 	bl	80003b0 <__aeabi_ldivmod>
 800faf8:	2a00      	cmp	r2, #0
 800fafa:	bfbc      	itt	lt
 800fafc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800fb00:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800fb04:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800fb08:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800fb0c:	fbb2 f3f1 	udiv	r3, r2, r1
 800fb10:	fb01 2213 	mls	r2, r1, r3, r2
 800fb14:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800fb18:	bfac      	ite	ge
 800fb1a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800fb1e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800fb22:	60a3      	str	r3, [r4, #8]
 800fb24:	fbb2 f3f1 	udiv	r3, r2, r1
 800fb28:	fb01 2213 	mls	r2, r1, r3, r2
 800fb2c:	6063      	str	r3, [r4, #4]
 800fb2e:	6022      	str	r2, [r4, #0]
 800fb30:	1cc3      	adds	r3, r0, #3
 800fb32:	2207      	movs	r2, #7
 800fb34:	fb93 f2f2 	sdiv	r2, r3, r2
 800fb38:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fb3c:	1a9b      	subs	r3, r3, r2
 800fb3e:	bf48      	it	mi
 800fb40:	3307      	addmi	r3, #7
 800fb42:	2800      	cmp	r0, #0
 800fb44:	61a3      	str	r3, [r4, #24]
 800fb46:	bfb8      	it	lt
 800fb48:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800fb4c:	4936      	ldr	r1, [pc, #216]	; (800fc28 <gmtime_r+0x154>)
 800fb4e:	bfae      	itee	ge
 800fb50:	fb90 f1f1 	sdivge	r1, r0, r1
 800fb54:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800fb58:	fb93 f1f1 	sdivlt	r1, r3, r1
 800fb5c:	4b33      	ldr	r3, [pc, #204]	; (800fc2c <gmtime_r+0x158>)
 800fb5e:	fb03 0001 	mla	r0, r3, r1, r0
 800fb62:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800fb66:	fbb0 f2f2 	udiv	r2, r0, r2
 800fb6a:	4402      	add	r2, r0
 800fb6c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800fb70:	fbb0 f3fc 	udiv	r3, r0, ip
 800fb74:	1ad2      	subs	r2, r2, r3
 800fb76:	f240 176d 	movw	r7, #365	; 0x16d
 800fb7a:	4b2d      	ldr	r3, [pc, #180]	; (800fc30 <gmtime_r+0x15c>)
 800fb7c:	fbb0 f3f3 	udiv	r3, r0, r3
 800fb80:	2664      	movs	r6, #100	; 0x64
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	fbb3 f5f7 	udiv	r5, r3, r7
 800fb88:	fbb3 f3fc 	udiv	r3, r3, ip
 800fb8c:	fbb5 f2f6 	udiv	r2, r5, r6
 800fb90:	1ad3      	subs	r3, r2, r3
 800fb92:	4403      	add	r3, r0
 800fb94:	fb07 3315 	mls	r3, r7, r5, r3
 800fb98:	2099      	movs	r0, #153	; 0x99
 800fb9a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800fb9e:	f10c 0c02 	add.w	ip, ip, #2
 800fba2:	f103 0e01 	add.w	lr, r3, #1
 800fba6:	fbbc f7f0 	udiv	r7, ip, r0
 800fbaa:	4378      	muls	r0, r7
 800fbac:	3002      	adds	r0, #2
 800fbae:	f04f 0805 	mov.w	r8, #5
 800fbb2:	fbb0 f0f8 	udiv	r0, r0, r8
 800fbb6:	ebae 0000 	sub.w	r0, lr, r0
 800fbba:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800fbbe:	45f4      	cmp	ip, lr
 800fbc0:	bf94      	ite	ls
 800fbc2:	f04f 0c02 	movls.w	ip, #2
 800fbc6:	f06f 0c09 	mvnhi.w	ip, #9
 800fbca:	4467      	add	r7, ip
 800fbcc:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800fbd0:	fb0c 5101 	mla	r1, ip, r1, r5
 800fbd4:	2f01      	cmp	r7, #1
 800fbd6:	bf98      	it	ls
 800fbd8:	3101      	addls	r1, #1
 800fbda:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800fbde:	d30c      	bcc.n	800fbfa <gmtime_r+0x126>
 800fbe0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800fbe4:	61e3      	str	r3, [r4, #28]
 800fbe6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800fbea:	2300      	movs	r3, #0
 800fbec:	60e0      	str	r0, [r4, #12]
 800fbee:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800fbf2:	6223      	str	r3, [r4, #32]
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbfa:	f015 0f03 	tst.w	r5, #3
 800fbfe:	d102      	bne.n	800fc06 <gmtime_r+0x132>
 800fc00:	fb06 5212 	mls	r2, r6, r2, r5
 800fc04:	b95a      	cbnz	r2, 800fc1e <gmtime_r+0x14a>
 800fc06:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800fc0a:	fbb5 f2f6 	udiv	r2, r5, r6
 800fc0e:	fb06 5212 	mls	r2, r6, r2, r5
 800fc12:	fab2 f282 	clz	r2, r2
 800fc16:	0952      	lsrs	r2, r2, #5
 800fc18:	333b      	adds	r3, #59	; 0x3b
 800fc1a:	4413      	add	r3, r2
 800fc1c:	e7e2      	b.n	800fbe4 <gmtime_r+0x110>
 800fc1e:	2201      	movs	r2, #1
 800fc20:	e7fa      	b.n	800fc18 <gmtime_r+0x144>
 800fc22:	bf00      	nop
 800fc24:	00015180 	.word	0x00015180
 800fc28:	00023ab1 	.word	0x00023ab1
 800fc2c:	fffdc54f 	.word	0xfffdc54f
 800fc30:	00023ab0 	.word	0x00023ab0

0800fc34 <__retarget_lock_init_recursive>:
 800fc34:	4770      	bx	lr

0800fc36 <__retarget_lock_acquire>:
 800fc36:	4770      	bx	lr

0800fc38 <__retarget_lock_acquire_recursive>:
 800fc38:	4770      	bx	lr

0800fc3a <__retarget_lock_release>:
 800fc3a:	4770      	bx	lr

0800fc3c <__retarget_lock_release_recursive>:
 800fc3c:	4770      	bx	lr
	...

0800fc40 <__malloc_lock>:
 800fc40:	4801      	ldr	r0, [pc, #4]	; (800fc48 <__malloc_lock+0x8>)
 800fc42:	f7ff bff9 	b.w	800fc38 <__retarget_lock_acquire_recursive>
 800fc46:	bf00      	nop
 800fc48:	20008dfc 	.word	0x20008dfc

0800fc4c <__malloc_unlock>:
 800fc4c:	4801      	ldr	r0, [pc, #4]	; (800fc54 <__malloc_unlock+0x8>)
 800fc4e:	f7ff bff5 	b.w	800fc3c <__retarget_lock_release_recursive>
 800fc52:	bf00      	nop
 800fc54:	20008dfc 	.word	0x20008dfc

0800fc58 <__ssputs_r>:
 800fc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc5c:	688e      	ldr	r6, [r1, #8]
 800fc5e:	429e      	cmp	r6, r3
 800fc60:	4682      	mov	sl, r0
 800fc62:	460c      	mov	r4, r1
 800fc64:	4690      	mov	r8, r2
 800fc66:	461f      	mov	r7, r3
 800fc68:	d838      	bhi.n	800fcdc <__ssputs_r+0x84>
 800fc6a:	898a      	ldrh	r2, [r1, #12]
 800fc6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc70:	d032      	beq.n	800fcd8 <__ssputs_r+0x80>
 800fc72:	6825      	ldr	r5, [r4, #0]
 800fc74:	6909      	ldr	r1, [r1, #16]
 800fc76:	eba5 0901 	sub.w	r9, r5, r1
 800fc7a:	6965      	ldr	r5, [r4, #20]
 800fc7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc84:	3301      	adds	r3, #1
 800fc86:	444b      	add	r3, r9
 800fc88:	106d      	asrs	r5, r5, #1
 800fc8a:	429d      	cmp	r5, r3
 800fc8c:	bf38      	it	cc
 800fc8e:	461d      	movcc	r5, r3
 800fc90:	0553      	lsls	r3, r2, #21
 800fc92:	d531      	bpl.n	800fcf8 <__ssputs_r+0xa0>
 800fc94:	4629      	mov	r1, r5
 800fc96:	f7ff fbad 	bl	800f3f4 <_malloc_r>
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	b950      	cbnz	r0, 800fcb4 <__ssputs_r+0x5c>
 800fc9e:	230c      	movs	r3, #12
 800fca0:	f8ca 3000 	str.w	r3, [sl]
 800fca4:	89a3      	ldrh	r3, [r4, #12]
 800fca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcaa:	81a3      	strh	r3, [r4, #12]
 800fcac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb4:	6921      	ldr	r1, [r4, #16]
 800fcb6:	464a      	mov	r2, r9
 800fcb8:	f7ff fb36 	bl	800f328 <memcpy>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fcc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcc6:	81a3      	strh	r3, [r4, #12]
 800fcc8:	6126      	str	r6, [r4, #16]
 800fcca:	6165      	str	r5, [r4, #20]
 800fccc:	444e      	add	r6, r9
 800fcce:	eba5 0509 	sub.w	r5, r5, r9
 800fcd2:	6026      	str	r6, [r4, #0]
 800fcd4:	60a5      	str	r5, [r4, #8]
 800fcd6:	463e      	mov	r6, r7
 800fcd8:	42be      	cmp	r6, r7
 800fcda:	d900      	bls.n	800fcde <__ssputs_r+0x86>
 800fcdc:	463e      	mov	r6, r7
 800fcde:	4632      	mov	r2, r6
 800fce0:	6820      	ldr	r0, [r4, #0]
 800fce2:	4641      	mov	r1, r8
 800fce4:	f001 f83a 	bl	8010d5c <memmove>
 800fce8:	68a3      	ldr	r3, [r4, #8]
 800fcea:	6822      	ldr	r2, [r4, #0]
 800fcec:	1b9b      	subs	r3, r3, r6
 800fcee:	4432      	add	r2, r6
 800fcf0:	60a3      	str	r3, [r4, #8]
 800fcf2:	6022      	str	r2, [r4, #0]
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	e7db      	b.n	800fcb0 <__ssputs_r+0x58>
 800fcf8:	462a      	mov	r2, r5
 800fcfa:	f001 f849 	bl	8010d90 <_realloc_r>
 800fcfe:	4606      	mov	r6, r0
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d1e1      	bne.n	800fcc8 <__ssputs_r+0x70>
 800fd04:	6921      	ldr	r1, [r4, #16]
 800fd06:	4650      	mov	r0, sl
 800fd08:	f7ff fb24 	bl	800f354 <_free_r>
 800fd0c:	e7c7      	b.n	800fc9e <__ssputs_r+0x46>
	...

0800fd10 <_svfiprintf_r>:
 800fd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd14:	4698      	mov	r8, r3
 800fd16:	898b      	ldrh	r3, [r1, #12]
 800fd18:	061b      	lsls	r3, r3, #24
 800fd1a:	b09d      	sub	sp, #116	; 0x74
 800fd1c:	4607      	mov	r7, r0
 800fd1e:	460d      	mov	r5, r1
 800fd20:	4614      	mov	r4, r2
 800fd22:	d50e      	bpl.n	800fd42 <_svfiprintf_r+0x32>
 800fd24:	690b      	ldr	r3, [r1, #16]
 800fd26:	b963      	cbnz	r3, 800fd42 <_svfiprintf_r+0x32>
 800fd28:	2140      	movs	r1, #64	; 0x40
 800fd2a:	f7ff fb63 	bl	800f3f4 <_malloc_r>
 800fd2e:	6028      	str	r0, [r5, #0]
 800fd30:	6128      	str	r0, [r5, #16]
 800fd32:	b920      	cbnz	r0, 800fd3e <_svfiprintf_r+0x2e>
 800fd34:	230c      	movs	r3, #12
 800fd36:	603b      	str	r3, [r7, #0]
 800fd38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd3c:	e0d1      	b.n	800fee2 <_svfiprintf_r+0x1d2>
 800fd3e:	2340      	movs	r3, #64	; 0x40
 800fd40:	616b      	str	r3, [r5, #20]
 800fd42:	2300      	movs	r3, #0
 800fd44:	9309      	str	r3, [sp, #36]	; 0x24
 800fd46:	2320      	movs	r3, #32
 800fd48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd50:	2330      	movs	r3, #48	; 0x30
 800fd52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fefc <_svfiprintf_r+0x1ec>
 800fd56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd5a:	f04f 0901 	mov.w	r9, #1
 800fd5e:	4623      	mov	r3, r4
 800fd60:	469a      	mov	sl, r3
 800fd62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd66:	b10a      	cbz	r2, 800fd6c <_svfiprintf_r+0x5c>
 800fd68:	2a25      	cmp	r2, #37	; 0x25
 800fd6a:	d1f9      	bne.n	800fd60 <_svfiprintf_r+0x50>
 800fd6c:	ebba 0b04 	subs.w	fp, sl, r4
 800fd70:	d00b      	beq.n	800fd8a <_svfiprintf_r+0x7a>
 800fd72:	465b      	mov	r3, fp
 800fd74:	4622      	mov	r2, r4
 800fd76:	4629      	mov	r1, r5
 800fd78:	4638      	mov	r0, r7
 800fd7a:	f7ff ff6d 	bl	800fc58 <__ssputs_r>
 800fd7e:	3001      	adds	r0, #1
 800fd80:	f000 80aa 	beq.w	800fed8 <_svfiprintf_r+0x1c8>
 800fd84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd86:	445a      	add	r2, fp
 800fd88:	9209      	str	r2, [sp, #36]	; 0x24
 800fd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f000 80a2 	beq.w	800fed8 <_svfiprintf_r+0x1c8>
 800fd94:	2300      	movs	r3, #0
 800fd96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd9e:	f10a 0a01 	add.w	sl, sl, #1
 800fda2:	9304      	str	r3, [sp, #16]
 800fda4:	9307      	str	r3, [sp, #28]
 800fda6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdaa:	931a      	str	r3, [sp, #104]	; 0x68
 800fdac:	4654      	mov	r4, sl
 800fdae:	2205      	movs	r2, #5
 800fdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdb4:	4851      	ldr	r0, [pc, #324]	; (800fefc <_svfiprintf_r+0x1ec>)
 800fdb6:	f7f0 faab 	bl	8000310 <memchr>
 800fdba:	9a04      	ldr	r2, [sp, #16]
 800fdbc:	b9d8      	cbnz	r0, 800fdf6 <_svfiprintf_r+0xe6>
 800fdbe:	06d0      	lsls	r0, r2, #27
 800fdc0:	bf44      	itt	mi
 800fdc2:	2320      	movmi	r3, #32
 800fdc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdc8:	0711      	lsls	r1, r2, #28
 800fdca:	bf44      	itt	mi
 800fdcc:	232b      	movmi	r3, #43	; 0x2b
 800fdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdd2:	f89a 3000 	ldrb.w	r3, [sl]
 800fdd6:	2b2a      	cmp	r3, #42	; 0x2a
 800fdd8:	d015      	beq.n	800fe06 <_svfiprintf_r+0xf6>
 800fdda:	9a07      	ldr	r2, [sp, #28]
 800fddc:	4654      	mov	r4, sl
 800fdde:	2000      	movs	r0, #0
 800fde0:	f04f 0c0a 	mov.w	ip, #10
 800fde4:	4621      	mov	r1, r4
 800fde6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdea:	3b30      	subs	r3, #48	; 0x30
 800fdec:	2b09      	cmp	r3, #9
 800fdee:	d94e      	bls.n	800fe8e <_svfiprintf_r+0x17e>
 800fdf0:	b1b0      	cbz	r0, 800fe20 <_svfiprintf_r+0x110>
 800fdf2:	9207      	str	r2, [sp, #28]
 800fdf4:	e014      	b.n	800fe20 <_svfiprintf_r+0x110>
 800fdf6:	eba0 0308 	sub.w	r3, r0, r8
 800fdfa:	fa09 f303 	lsl.w	r3, r9, r3
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	9304      	str	r3, [sp, #16]
 800fe02:	46a2      	mov	sl, r4
 800fe04:	e7d2      	b.n	800fdac <_svfiprintf_r+0x9c>
 800fe06:	9b03      	ldr	r3, [sp, #12]
 800fe08:	1d19      	adds	r1, r3, #4
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	9103      	str	r1, [sp, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	bfbb      	ittet	lt
 800fe12:	425b      	neglt	r3, r3
 800fe14:	f042 0202 	orrlt.w	r2, r2, #2
 800fe18:	9307      	strge	r3, [sp, #28]
 800fe1a:	9307      	strlt	r3, [sp, #28]
 800fe1c:	bfb8      	it	lt
 800fe1e:	9204      	strlt	r2, [sp, #16]
 800fe20:	7823      	ldrb	r3, [r4, #0]
 800fe22:	2b2e      	cmp	r3, #46	; 0x2e
 800fe24:	d10c      	bne.n	800fe40 <_svfiprintf_r+0x130>
 800fe26:	7863      	ldrb	r3, [r4, #1]
 800fe28:	2b2a      	cmp	r3, #42	; 0x2a
 800fe2a:	d135      	bne.n	800fe98 <_svfiprintf_r+0x188>
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	1d1a      	adds	r2, r3, #4
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	9203      	str	r2, [sp, #12]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	bfb8      	it	lt
 800fe38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fe3c:	3402      	adds	r4, #2
 800fe3e:	9305      	str	r3, [sp, #20]
 800fe40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ff0c <_svfiprintf_r+0x1fc>
 800fe44:	7821      	ldrb	r1, [r4, #0]
 800fe46:	2203      	movs	r2, #3
 800fe48:	4650      	mov	r0, sl
 800fe4a:	f7f0 fa61 	bl	8000310 <memchr>
 800fe4e:	b140      	cbz	r0, 800fe62 <_svfiprintf_r+0x152>
 800fe50:	2340      	movs	r3, #64	; 0x40
 800fe52:	eba0 000a 	sub.w	r0, r0, sl
 800fe56:	fa03 f000 	lsl.w	r0, r3, r0
 800fe5a:	9b04      	ldr	r3, [sp, #16]
 800fe5c:	4303      	orrs	r3, r0
 800fe5e:	3401      	adds	r4, #1
 800fe60:	9304      	str	r3, [sp, #16]
 800fe62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe66:	4826      	ldr	r0, [pc, #152]	; (800ff00 <_svfiprintf_r+0x1f0>)
 800fe68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe6c:	2206      	movs	r2, #6
 800fe6e:	f7f0 fa4f 	bl	8000310 <memchr>
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d038      	beq.n	800fee8 <_svfiprintf_r+0x1d8>
 800fe76:	4b23      	ldr	r3, [pc, #140]	; (800ff04 <_svfiprintf_r+0x1f4>)
 800fe78:	bb1b      	cbnz	r3, 800fec2 <_svfiprintf_r+0x1b2>
 800fe7a:	9b03      	ldr	r3, [sp, #12]
 800fe7c:	3307      	adds	r3, #7
 800fe7e:	f023 0307 	bic.w	r3, r3, #7
 800fe82:	3308      	adds	r3, #8
 800fe84:	9303      	str	r3, [sp, #12]
 800fe86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe88:	4433      	add	r3, r6
 800fe8a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe8c:	e767      	b.n	800fd5e <_svfiprintf_r+0x4e>
 800fe8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe92:	460c      	mov	r4, r1
 800fe94:	2001      	movs	r0, #1
 800fe96:	e7a5      	b.n	800fde4 <_svfiprintf_r+0xd4>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	3401      	adds	r4, #1
 800fe9c:	9305      	str	r3, [sp, #20]
 800fe9e:	4619      	mov	r1, r3
 800fea0:	f04f 0c0a 	mov.w	ip, #10
 800fea4:	4620      	mov	r0, r4
 800fea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feaa:	3a30      	subs	r2, #48	; 0x30
 800feac:	2a09      	cmp	r2, #9
 800feae:	d903      	bls.n	800feb8 <_svfiprintf_r+0x1a8>
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d0c5      	beq.n	800fe40 <_svfiprintf_r+0x130>
 800feb4:	9105      	str	r1, [sp, #20]
 800feb6:	e7c3      	b.n	800fe40 <_svfiprintf_r+0x130>
 800feb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800febc:	4604      	mov	r4, r0
 800febe:	2301      	movs	r3, #1
 800fec0:	e7f0      	b.n	800fea4 <_svfiprintf_r+0x194>
 800fec2:	ab03      	add	r3, sp, #12
 800fec4:	9300      	str	r3, [sp, #0]
 800fec6:	462a      	mov	r2, r5
 800fec8:	4b0f      	ldr	r3, [pc, #60]	; (800ff08 <_svfiprintf_r+0x1f8>)
 800feca:	a904      	add	r1, sp, #16
 800fecc:	4638      	mov	r0, r7
 800fece:	f3af 8000 	nop.w
 800fed2:	1c42      	adds	r2, r0, #1
 800fed4:	4606      	mov	r6, r0
 800fed6:	d1d6      	bne.n	800fe86 <_svfiprintf_r+0x176>
 800fed8:	89ab      	ldrh	r3, [r5, #12]
 800feda:	065b      	lsls	r3, r3, #25
 800fedc:	f53f af2c 	bmi.w	800fd38 <_svfiprintf_r+0x28>
 800fee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fee2:	b01d      	add	sp, #116	; 0x74
 800fee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee8:	ab03      	add	r3, sp, #12
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	462a      	mov	r2, r5
 800feee:	4b06      	ldr	r3, [pc, #24]	; (800ff08 <_svfiprintf_r+0x1f8>)
 800fef0:	a904      	add	r1, sp, #16
 800fef2:	4638      	mov	r0, r7
 800fef4:	f000 f9d4 	bl	80102a0 <_printf_i>
 800fef8:	e7eb      	b.n	800fed2 <_svfiprintf_r+0x1c2>
 800fefa:	bf00      	nop
 800fefc:	0801271c 	.word	0x0801271c
 800ff00:	08012726 	.word	0x08012726
 800ff04:	00000000 	.word	0x00000000
 800ff08:	0800fc59 	.word	0x0800fc59
 800ff0c:	08012722 	.word	0x08012722

0800ff10 <__sfputc_r>:
 800ff10:	6893      	ldr	r3, [r2, #8]
 800ff12:	3b01      	subs	r3, #1
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	b410      	push	{r4}
 800ff18:	6093      	str	r3, [r2, #8]
 800ff1a:	da08      	bge.n	800ff2e <__sfputc_r+0x1e>
 800ff1c:	6994      	ldr	r4, [r2, #24]
 800ff1e:	42a3      	cmp	r3, r4
 800ff20:	db01      	blt.n	800ff26 <__sfputc_r+0x16>
 800ff22:	290a      	cmp	r1, #10
 800ff24:	d103      	bne.n	800ff2e <__sfputc_r+0x1e>
 800ff26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff2a:	f000 bbf3 	b.w	8010714 <__swbuf_r>
 800ff2e:	6813      	ldr	r3, [r2, #0]
 800ff30:	1c58      	adds	r0, r3, #1
 800ff32:	6010      	str	r0, [r2, #0]
 800ff34:	7019      	strb	r1, [r3, #0]
 800ff36:	4608      	mov	r0, r1
 800ff38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff3c:	4770      	bx	lr

0800ff3e <__sfputs_r>:
 800ff3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff40:	4606      	mov	r6, r0
 800ff42:	460f      	mov	r7, r1
 800ff44:	4614      	mov	r4, r2
 800ff46:	18d5      	adds	r5, r2, r3
 800ff48:	42ac      	cmp	r4, r5
 800ff4a:	d101      	bne.n	800ff50 <__sfputs_r+0x12>
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	e007      	b.n	800ff60 <__sfputs_r+0x22>
 800ff50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff54:	463a      	mov	r2, r7
 800ff56:	4630      	mov	r0, r6
 800ff58:	f7ff ffda 	bl	800ff10 <__sfputc_r>
 800ff5c:	1c43      	adds	r3, r0, #1
 800ff5e:	d1f3      	bne.n	800ff48 <__sfputs_r+0xa>
 800ff60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff64 <_vfiprintf_r>:
 800ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff68:	460d      	mov	r5, r1
 800ff6a:	b09d      	sub	sp, #116	; 0x74
 800ff6c:	4614      	mov	r4, r2
 800ff6e:	4698      	mov	r8, r3
 800ff70:	4606      	mov	r6, r0
 800ff72:	b118      	cbz	r0, 800ff7c <_vfiprintf_r+0x18>
 800ff74:	6983      	ldr	r3, [r0, #24]
 800ff76:	b90b      	cbnz	r3, 800ff7c <_vfiprintf_r+0x18>
 800ff78:	f000 fddc 	bl	8010b34 <__sinit>
 800ff7c:	4b89      	ldr	r3, [pc, #548]	; (80101a4 <_vfiprintf_r+0x240>)
 800ff7e:	429d      	cmp	r5, r3
 800ff80:	d11b      	bne.n	800ffba <_vfiprintf_r+0x56>
 800ff82:	6875      	ldr	r5, [r6, #4]
 800ff84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff86:	07d9      	lsls	r1, r3, #31
 800ff88:	d405      	bmi.n	800ff96 <_vfiprintf_r+0x32>
 800ff8a:	89ab      	ldrh	r3, [r5, #12]
 800ff8c:	059a      	lsls	r2, r3, #22
 800ff8e:	d402      	bmi.n	800ff96 <_vfiprintf_r+0x32>
 800ff90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff92:	f7ff fe51 	bl	800fc38 <__retarget_lock_acquire_recursive>
 800ff96:	89ab      	ldrh	r3, [r5, #12]
 800ff98:	071b      	lsls	r3, r3, #28
 800ff9a:	d501      	bpl.n	800ffa0 <_vfiprintf_r+0x3c>
 800ff9c:	692b      	ldr	r3, [r5, #16]
 800ff9e:	b9eb      	cbnz	r3, 800ffdc <_vfiprintf_r+0x78>
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f000 fc1a 	bl	80107dc <__swsetup_r>
 800ffa8:	b1c0      	cbz	r0, 800ffdc <_vfiprintf_r+0x78>
 800ffaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffac:	07dc      	lsls	r4, r3, #31
 800ffae:	d50e      	bpl.n	800ffce <_vfiprintf_r+0x6a>
 800ffb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffb4:	b01d      	add	sp, #116	; 0x74
 800ffb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffba:	4b7b      	ldr	r3, [pc, #492]	; (80101a8 <_vfiprintf_r+0x244>)
 800ffbc:	429d      	cmp	r5, r3
 800ffbe:	d101      	bne.n	800ffc4 <_vfiprintf_r+0x60>
 800ffc0:	68b5      	ldr	r5, [r6, #8]
 800ffc2:	e7df      	b.n	800ff84 <_vfiprintf_r+0x20>
 800ffc4:	4b79      	ldr	r3, [pc, #484]	; (80101ac <_vfiprintf_r+0x248>)
 800ffc6:	429d      	cmp	r5, r3
 800ffc8:	bf08      	it	eq
 800ffca:	68f5      	ldreq	r5, [r6, #12]
 800ffcc:	e7da      	b.n	800ff84 <_vfiprintf_r+0x20>
 800ffce:	89ab      	ldrh	r3, [r5, #12]
 800ffd0:	0598      	lsls	r0, r3, #22
 800ffd2:	d4ed      	bmi.n	800ffb0 <_vfiprintf_r+0x4c>
 800ffd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffd6:	f7ff fe31 	bl	800fc3c <__retarget_lock_release_recursive>
 800ffda:	e7e9      	b.n	800ffb0 <_vfiprintf_r+0x4c>
 800ffdc:	2300      	movs	r3, #0
 800ffde:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe0:	2320      	movs	r3, #32
 800ffe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffea:	2330      	movs	r3, #48	; 0x30
 800ffec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80101b0 <_vfiprintf_r+0x24c>
 800fff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fff4:	f04f 0901 	mov.w	r9, #1
 800fff8:	4623      	mov	r3, r4
 800fffa:	469a      	mov	sl, r3
 800fffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010000:	b10a      	cbz	r2, 8010006 <_vfiprintf_r+0xa2>
 8010002:	2a25      	cmp	r2, #37	; 0x25
 8010004:	d1f9      	bne.n	800fffa <_vfiprintf_r+0x96>
 8010006:	ebba 0b04 	subs.w	fp, sl, r4
 801000a:	d00b      	beq.n	8010024 <_vfiprintf_r+0xc0>
 801000c:	465b      	mov	r3, fp
 801000e:	4622      	mov	r2, r4
 8010010:	4629      	mov	r1, r5
 8010012:	4630      	mov	r0, r6
 8010014:	f7ff ff93 	bl	800ff3e <__sfputs_r>
 8010018:	3001      	adds	r0, #1
 801001a:	f000 80aa 	beq.w	8010172 <_vfiprintf_r+0x20e>
 801001e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010020:	445a      	add	r2, fp
 8010022:	9209      	str	r2, [sp, #36]	; 0x24
 8010024:	f89a 3000 	ldrb.w	r3, [sl]
 8010028:	2b00      	cmp	r3, #0
 801002a:	f000 80a2 	beq.w	8010172 <_vfiprintf_r+0x20e>
 801002e:	2300      	movs	r3, #0
 8010030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010038:	f10a 0a01 	add.w	sl, sl, #1
 801003c:	9304      	str	r3, [sp, #16]
 801003e:	9307      	str	r3, [sp, #28]
 8010040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010044:	931a      	str	r3, [sp, #104]	; 0x68
 8010046:	4654      	mov	r4, sl
 8010048:	2205      	movs	r2, #5
 801004a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801004e:	4858      	ldr	r0, [pc, #352]	; (80101b0 <_vfiprintf_r+0x24c>)
 8010050:	f7f0 f95e 	bl	8000310 <memchr>
 8010054:	9a04      	ldr	r2, [sp, #16]
 8010056:	b9d8      	cbnz	r0, 8010090 <_vfiprintf_r+0x12c>
 8010058:	06d1      	lsls	r1, r2, #27
 801005a:	bf44      	itt	mi
 801005c:	2320      	movmi	r3, #32
 801005e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010062:	0713      	lsls	r3, r2, #28
 8010064:	bf44      	itt	mi
 8010066:	232b      	movmi	r3, #43	; 0x2b
 8010068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801006c:	f89a 3000 	ldrb.w	r3, [sl]
 8010070:	2b2a      	cmp	r3, #42	; 0x2a
 8010072:	d015      	beq.n	80100a0 <_vfiprintf_r+0x13c>
 8010074:	9a07      	ldr	r2, [sp, #28]
 8010076:	4654      	mov	r4, sl
 8010078:	2000      	movs	r0, #0
 801007a:	f04f 0c0a 	mov.w	ip, #10
 801007e:	4621      	mov	r1, r4
 8010080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010084:	3b30      	subs	r3, #48	; 0x30
 8010086:	2b09      	cmp	r3, #9
 8010088:	d94e      	bls.n	8010128 <_vfiprintf_r+0x1c4>
 801008a:	b1b0      	cbz	r0, 80100ba <_vfiprintf_r+0x156>
 801008c:	9207      	str	r2, [sp, #28]
 801008e:	e014      	b.n	80100ba <_vfiprintf_r+0x156>
 8010090:	eba0 0308 	sub.w	r3, r0, r8
 8010094:	fa09 f303 	lsl.w	r3, r9, r3
 8010098:	4313      	orrs	r3, r2
 801009a:	9304      	str	r3, [sp, #16]
 801009c:	46a2      	mov	sl, r4
 801009e:	e7d2      	b.n	8010046 <_vfiprintf_r+0xe2>
 80100a0:	9b03      	ldr	r3, [sp, #12]
 80100a2:	1d19      	adds	r1, r3, #4
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	9103      	str	r1, [sp, #12]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	bfbb      	ittet	lt
 80100ac:	425b      	neglt	r3, r3
 80100ae:	f042 0202 	orrlt.w	r2, r2, #2
 80100b2:	9307      	strge	r3, [sp, #28]
 80100b4:	9307      	strlt	r3, [sp, #28]
 80100b6:	bfb8      	it	lt
 80100b8:	9204      	strlt	r2, [sp, #16]
 80100ba:	7823      	ldrb	r3, [r4, #0]
 80100bc:	2b2e      	cmp	r3, #46	; 0x2e
 80100be:	d10c      	bne.n	80100da <_vfiprintf_r+0x176>
 80100c0:	7863      	ldrb	r3, [r4, #1]
 80100c2:	2b2a      	cmp	r3, #42	; 0x2a
 80100c4:	d135      	bne.n	8010132 <_vfiprintf_r+0x1ce>
 80100c6:	9b03      	ldr	r3, [sp, #12]
 80100c8:	1d1a      	adds	r2, r3, #4
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	9203      	str	r2, [sp, #12]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	bfb8      	it	lt
 80100d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80100d6:	3402      	adds	r4, #2
 80100d8:	9305      	str	r3, [sp, #20]
 80100da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80101c0 <_vfiprintf_r+0x25c>
 80100de:	7821      	ldrb	r1, [r4, #0]
 80100e0:	2203      	movs	r2, #3
 80100e2:	4650      	mov	r0, sl
 80100e4:	f7f0 f914 	bl	8000310 <memchr>
 80100e8:	b140      	cbz	r0, 80100fc <_vfiprintf_r+0x198>
 80100ea:	2340      	movs	r3, #64	; 0x40
 80100ec:	eba0 000a 	sub.w	r0, r0, sl
 80100f0:	fa03 f000 	lsl.w	r0, r3, r0
 80100f4:	9b04      	ldr	r3, [sp, #16]
 80100f6:	4303      	orrs	r3, r0
 80100f8:	3401      	adds	r4, #1
 80100fa:	9304      	str	r3, [sp, #16]
 80100fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010100:	482c      	ldr	r0, [pc, #176]	; (80101b4 <_vfiprintf_r+0x250>)
 8010102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010106:	2206      	movs	r2, #6
 8010108:	f7f0 f902 	bl	8000310 <memchr>
 801010c:	2800      	cmp	r0, #0
 801010e:	d03f      	beq.n	8010190 <_vfiprintf_r+0x22c>
 8010110:	4b29      	ldr	r3, [pc, #164]	; (80101b8 <_vfiprintf_r+0x254>)
 8010112:	bb1b      	cbnz	r3, 801015c <_vfiprintf_r+0x1f8>
 8010114:	9b03      	ldr	r3, [sp, #12]
 8010116:	3307      	adds	r3, #7
 8010118:	f023 0307 	bic.w	r3, r3, #7
 801011c:	3308      	adds	r3, #8
 801011e:	9303      	str	r3, [sp, #12]
 8010120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010122:	443b      	add	r3, r7
 8010124:	9309      	str	r3, [sp, #36]	; 0x24
 8010126:	e767      	b.n	800fff8 <_vfiprintf_r+0x94>
 8010128:	fb0c 3202 	mla	r2, ip, r2, r3
 801012c:	460c      	mov	r4, r1
 801012e:	2001      	movs	r0, #1
 8010130:	e7a5      	b.n	801007e <_vfiprintf_r+0x11a>
 8010132:	2300      	movs	r3, #0
 8010134:	3401      	adds	r4, #1
 8010136:	9305      	str	r3, [sp, #20]
 8010138:	4619      	mov	r1, r3
 801013a:	f04f 0c0a 	mov.w	ip, #10
 801013e:	4620      	mov	r0, r4
 8010140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010144:	3a30      	subs	r2, #48	; 0x30
 8010146:	2a09      	cmp	r2, #9
 8010148:	d903      	bls.n	8010152 <_vfiprintf_r+0x1ee>
 801014a:	2b00      	cmp	r3, #0
 801014c:	d0c5      	beq.n	80100da <_vfiprintf_r+0x176>
 801014e:	9105      	str	r1, [sp, #20]
 8010150:	e7c3      	b.n	80100da <_vfiprintf_r+0x176>
 8010152:	fb0c 2101 	mla	r1, ip, r1, r2
 8010156:	4604      	mov	r4, r0
 8010158:	2301      	movs	r3, #1
 801015a:	e7f0      	b.n	801013e <_vfiprintf_r+0x1da>
 801015c:	ab03      	add	r3, sp, #12
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	462a      	mov	r2, r5
 8010162:	4b16      	ldr	r3, [pc, #88]	; (80101bc <_vfiprintf_r+0x258>)
 8010164:	a904      	add	r1, sp, #16
 8010166:	4630      	mov	r0, r6
 8010168:	f3af 8000 	nop.w
 801016c:	4607      	mov	r7, r0
 801016e:	1c78      	adds	r0, r7, #1
 8010170:	d1d6      	bne.n	8010120 <_vfiprintf_r+0x1bc>
 8010172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010174:	07d9      	lsls	r1, r3, #31
 8010176:	d405      	bmi.n	8010184 <_vfiprintf_r+0x220>
 8010178:	89ab      	ldrh	r3, [r5, #12]
 801017a:	059a      	lsls	r2, r3, #22
 801017c:	d402      	bmi.n	8010184 <_vfiprintf_r+0x220>
 801017e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010180:	f7ff fd5c 	bl	800fc3c <__retarget_lock_release_recursive>
 8010184:	89ab      	ldrh	r3, [r5, #12]
 8010186:	065b      	lsls	r3, r3, #25
 8010188:	f53f af12 	bmi.w	800ffb0 <_vfiprintf_r+0x4c>
 801018c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801018e:	e711      	b.n	800ffb4 <_vfiprintf_r+0x50>
 8010190:	ab03      	add	r3, sp, #12
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	462a      	mov	r2, r5
 8010196:	4b09      	ldr	r3, [pc, #36]	; (80101bc <_vfiprintf_r+0x258>)
 8010198:	a904      	add	r1, sp, #16
 801019a:	4630      	mov	r0, r6
 801019c:	f000 f880 	bl	80102a0 <_printf_i>
 80101a0:	e7e4      	b.n	801016c <_vfiprintf_r+0x208>
 80101a2:	bf00      	nop
 80101a4:	08012870 	.word	0x08012870
 80101a8:	08012890 	.word	0x08012890
 80101ac:	08012850 	.word	0x08012850
 80101b0:	0801271c 	.word	0x0801271c
 80101b4:	08012726 	.word	0x08012726
 80101b8:	00000000 	.word	0x00000000
 80101bc:	0800ff3f 	.word	0x0800ff3f
 80101c0:	08012722 	.word	0x08012722

080101c4 <_printf_common>:
 80101c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c8:	4616      	mov	r6, r2
 80101ca:	4699      	mov	r9, r3
 80101cc:	688a      	ldr	r2, [r1, #8]
 80101ce:	690b      	ldr	r3, [r1, #16]
 80101d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101d4:	4293      	cmp	r3, r2
 80101d6:	bfb8      	it	lt
 80101d8:	4613      	movlt	r3, r2
 80101da:	6033      	str	r3, [r6, #0]
 80101dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101e0:	4607      	mov	r7, r0
 80101e2:	460c      	mov	r4, r1
 80101e4:	b10a      	cbz	r2, 80101ea <_printf_common+0x26>
 80101e6:	3301      	adds	r3, #1
 80101e8:	6033      	str	r3, [r6, #0]
 80101ea:	6823      	ldr	r3, [r4, #0]
 80101ec:	0699      	lsls	r1, r3, #26
 80101ee:	bf42      	ittt	mi
 80101f0:	6833      	ldrmi	r3, [r6, #0]
 80101f2:	3302      	addmi	r3, #2
 80101f4:	6033      	strmi	r3, [r6, #0]
 80101f6:	6825      	ldr	r5, [r4, #0]
 80101f8:	f015 0506 	ands.w	r5, r5, #6
 80101fc:	d106      	bne.n	801020c <_printf_common+0x48>
 80101fe:	f104 0a19 	add.w	sl, r4, #25
 8010202:	68e3      	ldr	r3, [r4, #12]
 8010204:	6832      	ldr	r2, [r6, #0]
 8010206:	1a9b      	subs	r3, r3, r2
 8010208:	42ab      	cmp	r3, r5
 801020a:	dc26      	bgt.n	801025a <_printf_common+0x96>
 801020c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010210:	1e13      	subs	r3, r2, #0
 8010212:	6822      	ldr	r2, [r4, #0]
 8010214:	bf18      	it	ne
 8010216:	2301      	movne	r3, #1
 8010218:	0692      	lsls	r2, r2, #26
 801021a:	d42b      	bmi.n	8010274 <_printf_common+0xb0>
 801021c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010220:	4649      	mov	r1, r9
 8010222:	4638      	mov	r0, r7
 8010224:	47c0      	blx	r8
 8010226:	3001      	adds	r0, #1
 8010228:	d01e      	beq.n	8010268 <_printf_common+0xa4>
 801022a:	6823      	ldr	r3, [r4, #0]
 801022c:	68e5      	ldr	r5, [r4, #12]
 801022e:	6832      	ldr	r2, [r6, #0]
 8010230:	f003 0306 	and.w	r3, r3, #6
 8010234:	2b04      	cmp	r3, #4
 8010236:	bf08      	it	eq
 8010238:	1aad      	subeq	r5, r5, r2
 801023a:	68a3      	ldr	r3, [r4, #8]
 801023c:	6922      	ldr	r2, [r4, #16]
 801023e:	bf0c      	ite	eq
 8010240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010244:	2500      	movne	r5, #0
 8010246:	4293      	cmp	r3, r2
 8010248:	bfc4      	itt	gt
 801024a:	1a9b      	subgt	r3, r3, r2
 801024c:	18ed      	addgt	r5, r5, r3
 801024e:	2600      	movs	r6, #0
 8010250:	341a      	adds	r4, #26
 8010252:	42b5      	cmp	r5, r6
 8010254:	d11a      	bne.n	801028c <_printf_common+0xc8>
 8010256:	2000      	movs	r0, #0
 8010258:	e008      	b.n	801026c <_printf_common+0xa8>
 801025a:	2301      	movs	r3, #1
 801025c:	4652      	mov	r2, sl
 801025e:	4649      	mov	r1, r9
 8010260:	4638      	mov	r0, r7
 8010262:	47c0      	blx	r8
 8010264:	3001      	adds	r0, #1
 8010266:	d103      	bne.n	8010270 <_printf_common+0xac>
 8010268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801026c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010270:	3501      	adds	r5, #1
 8010272:	e7c6      	b.n	8010202 <_printf_common+0x3e>
 8010274:	18e1      	adds	r1, r4, r3
 8010276:	1c5a      	adds	r2, r3, #1
 8010278:	2030      	movs	r0, #48	; 0x30
 801027a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801027e:	4422      	add	r2, r4
 8010280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010288:	3302      	adds	r3, #2
 801028a:	e7c7      	b.n	801021c <_printf_common+0x58>
 801028c:	2301      	movs	r3, #1
 801028e:	4622      	mov	r2, r4
 8010290:	4649      	mov	r1, r9
 8010292:	4638      	mov	r0, r7
 8010294:	47c0      	blx	r8
 8010296:	3001      	adds	r0, #1
 8010298:	d0e6      	beq.n	8010268 <_printf_common+0xa4>
 801029a:	3601      	adds	r6, #1
 801029c:	e7d9      	b.n	8010252 <_printf_common+0x8e>
	...

080102a0 <_printf_i>:
 80102a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102a4:	460c      	mov	r4, r1
 80102a6:	4691      	mov	r9, r2
 80102a8:	7e27      	ldrb	r7, [r4, #24]
 80102aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80102ac:	2f78      	cmp	r7, #120	; 0x78
 80102ae:	4680      	mov	r8, r0
 80102b0:	469a      	mov	sl, r3
 80102b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102b6:	d807      	bhi.n	80102c8 <_printf_i+0x28>
 80102b8:	2f62      	cmp	r7, #98	; 0x62
 80102ba:	d80a      	bhi.n	80102d2 <_printf_i+0x32>
 80102bc:	2f00      	cmp	r7, #0
 80102be:	f000 80d8 	beq.w	8010472 <_printf_i+0x1d2>
 80102c2:	2f58      	cmp	r7, #88	; 0x58
 80102c4:	f000 80a3 	beq.w	801040e <_printf_i+0x16e>
 80102c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80102cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80102d0:	e03a      	b.n	8010348 <_printf_i+0xa8>
 80102d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80102d6:	2b15      	cmp	r3, #21
 80102d8:	d8f6      	bhi.n	80102c8 <_printf_i+0x28>
 80102da:	a001      	add	r0, pc, #4	; (adr r0, 80102e0 <_printf_i+0x40>)
 80102dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80102e0:	08010339 	.word	0x08010339
 80102e4:	0801034d 	.word	0x0801034d
 80102e8:	080102c9 	.word	0x080102c9
 80102ec:	080102c9 	.word	0x080102c9
 80102f0:	080102c9 	.word	0x080102c9
 80102f4:	080102c9 	.word	0x080102c9
 80102f8:	0801034d 	.word	0x0801034d
 80102fc:	080102c9 	.word	0x080102c9
 8010300:	080102c9 	.word	0x080102c9
 8010304:	080102c9 	.word	0x080102c9
 8010308:	080102c9 	.word	0x080102c9
 801030c:	08010459 	.word	0x08010459
 8010310:	0801037d 	.word	0x0801037d
 8010314:	0801043b 	.word	0x0801043b
 8010318:	080102c9 	.word	0x080102c9
 801031c:	080102c9 	.word	0x080102c9
 8010320:	0801047b 	.word	0x0801047b
 8010324:	080102c9 	.word	0x080102c9
 8010328:	0801037d 	.word	0x0801037d
 801032c:	080102c9 	.word	0x080102c9
 8010330:	080102c9 	.word	0x080102c9
 8010334:	08010443 	.word	0x08010443
 8010338:	680b      	ldr	r3, [r1, #0]
 801033a:	1d1a      	adds	r2, r3, #4
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	600a      	str	r2, [r1, #0]
 8010340:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010348:	2301      	movs	r3, #1
 801034a:	e0a3      	b.n	8010494 <_printf_i+0x1f4>
 801034c:	6825      	ldr	r5, [r4, #0]
 801034e:	6808      	ldr	r0, [r1, #0]
 8010350:	062e      	lsls	r6, r5, #24
 8010352:	f100 0304 	add.w	r3, r0, #4
 8010356:	d50a      	bpl.n	801036e <_printf_i+0xce>
 8010358:	6805      	ldr	r5, [r0, #0]
 801035a:	600b      	str	r3, [r1, #0]
 801035c:	2d00      	cmp	r5, #0
 801035e:	da03      	bge.n	8010368 <_printf_i+0xc8>
 8010360:	232d      	movs	r3, #45	; 0x2d
 8010362:	426d      	negs	r5, r5
 8010364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010368:	485e      	ldr	r0, [pc, #376]	; (80104e4 <_printf_i+0x244>)
 801036a:	230a      	movs	r3, #10
 801036c:	e019      	b.n	80103a2 <_printf_i+0x102>
 801036e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010372:	6805      	ldr	r5, [r0, #0]
 8010374:	600b      	str	r3, [r1, #0]
 8010376:	bf18      	it	ne
 8010378:	b22d      	sxthne	r5, r5
 801037a:	e7ef      	b.n	801035c <_printf_i+0xbc>
 801037c:	680b      	ldr	r3, [r1, #0]
 801037e:	6825      	ldr	r5, [r4, #0]
 8010380:	1d18      	adds	r0, r3, #4
 8010382:	6008      	str	r0, [r1, #0]
 8010384:	0628      	lsls	r0, r5, #24
 8010386:	d501      	bpl.n	801038c <_printf_i+0xec>
 8010388:	681d      	ldr	r5, [r3, #0]
 801038a:	e002      	b.n	8010392 <_printf_i+0xf2>
 801038c:	0669      	lsls	r1, r5, #25
 801038e:	d5fb      	bpl.n	8010388 <_printf_i+0xe8>
 8010390:	881d      	ldrh	r5, [r3, #0]
 8010392:	4854      	ldr	r0, [pc, #336]	; (80104e4 <_printf_i+0x244>)
 8010394:	2f6f      	cmp	r7, #111	; 0x6f
 8010396:	bf0c      	ite	eq
 8010398:	2308      	moveq	r3, #8
 801039a:	230a      	movne	r3, #10
 801039c:	2100      	movs	r1, #0
 801039e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103a2:	6866      	ldr	r6, [r4, #4]
 80103a4:	60a6      	str	r6, [r4, #8]
 80103a6:	2e00      	cmp	r6, #0
 80103a8:	bfa2      	ittt	ge
 80103aa:	6821      	ldrge	r1, [r4, #0]
 80103ac:	f021 0104 	bicge.w	r1, r1, #4
 80103b0:	6021      	strge	r1, [r4, #0]
 80103b2:	b90d      	cbnz	r5, 80103b8 <_printf_i+0x118>
 80103b4:	2e00      	cmp	r6, #0
 80103b6:	d04d      	beq.n	8010454 <_printf_i+0x1b4>
 80103b8:	4616      	mov	r6, r2
 80103ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80103be:	fb03 5711 	mls	r7, r3, r1, r5
 80103c2:	5dc7      	ldrb	r7, [r0, r7]
 80103c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80103c8:	462f      	mov	r7, r5
 80103ca:	42bb      	cmp	r3, r7
 80103cc:	460d      	mov	r5, r1
 80103ce:	d9f4      	bls.n	80103ba <_printf_i+0x11a>
 80103d0:	2b08      	cmp	r3, #8
 80103d2:	d10b      	bne.n	80103ec <_printf_i+0x14c>
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	07df      	lsls	r7, r3, #31
 80103d8:	d508      	bpl.n	80103ec <_printf_i+0x14c>
 80103da:	6923      	ldr	r3, [r4, #16]
 80103dc:	6861      	ldr	r1, [r4, #4]
 80103de:	4299      	cmp	r1, r3
 80103e0:	bfde      	ittt	le
 80103e2:	2330      	movle	r3, #48	; 0x30
 80103e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103e8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80103ec:	1b92      	subs	r2, r2, r6
 80103ee:	6122      	str	r2, [r4, #16]
 80103f0:	f8cd a000 	str.w	sl, [sp]
 80103f4:	464b      	mov	r3, r9
 80103f6:	aa03      	add	r2, sp, #12
 80103f8:	4621      	mov	r1, r4
 80103fa:	4640      	mov	r0, r8
 80103fc:	f7ff fee2 	bl	80101c4 <_printf_common>
 8010400:	3001      	adds	r0, #1
 8010402:	d14c      	bne.n	801049e <_printf_i+0x1fe>
 8010404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010408:	b004      	add	sp, #16
 801040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801040e:	4835      	ldr	r0, [pc, #212]	; (80104e4 <_printf_i+0x244>)
 8010410:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010414:	6823      	ldr	r3, [r4, #0]
 8010416:	680e      	ldr	r6, [r1, #0]
 8010418:	061f      	lsls	r7, r3, #24
 801041a:	f856 5b04 	ldr.w	r5, [r6], #4
 801041e:	600e      	str	r6, [r1, #0]
 8010420:	d514      	bpl.n	801044c <_printf_i+0x1ac>
 8010422:	07d9      	lsls	r1, r3, #31
 8010424:	bf44      	itt	mi
 8010426:	f043 0320 	orrmi.w	r3, r3, #32
 801042a:	6023      	strmi	r3, [r4, #0]
 801042c:	b91d      	cbnz	r5, 8010436 <_printf_i+0x196>
 801042e:	6823      	ldr	r3, [r4, #0]
 8010430:	f023 0320 	bic.w	r3, r3, #32
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	2310      	movs	r3, #16
 8010438:	e7b0      	b.n	801039c <_printf_i+0xfc>
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	f043 0320 	orr.w	r3, r3, #32
 8010440:	6023      	str	r3, [r4, #0]
 8010442:	2378      	movs	r3, #120	; 0x78
 8010444:	4828      	ldr	r0, [pc, #160]	; (80104e8 <_printf_i+0x248>)
 8010446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801044a:	e7e3      	b.n	8010414 <_printf_i+0x174>
 801044c:	065e      	lsls	r6, r3, #25
 801044e:	bf48      	it	mi
 8010450:	b2ad      	uxthmi	r5, r5
 8010452:	e7e6      	b.n	8010422 <_printf_i+0x182>
 8010454:	4616      	mov	r6, r2
 8010456:	e7bb      	b.n	80103d0 <_printf_i+0x130>
 8010458:	680b      	ldr	r3, [r1, #0]
 801045a:	6826      	ldr	r6, [r4, #0]
 801045c:	6960      	ldr	r0, [r4, #20]
 801045e:	1d1d      	adds	r5, r3, #4
 8010460:	600d      	str	r5, [r1, #0]
 8010462:	0635      	lsls	r5, r6, #24
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	d501      	bpl.n	801046c <_printf_i+0x1cc>
 8010468:	6018      	str	r0, [r3, #0]
 801046a:	e002      	b.n	8010472 <_printf_i+0x1d2>
 801046c:	0671      	lsls	r1, r6, #25
 801046e:	d5fb      	bpl.n	8010468 <_printf_i+0x1c8>
 8010470:	8018      	strh	r0, [r3, #0]
 8010472:	2300      	movs	r3, #0
 8010474:	6123      	str	r3, [r4, #16]
 8010476:	4616      	mov	r6, r2
 8010478:	e7ba      	b.n	80103f0 <_printf_i+0x150>
 801047a:	680b      	ldr	r3, [r1, #0]
 801047c:	1d1a      	adds	r2, r3, #4
 801047e:	600a      	str	r2, [r1, #0]
 8010480:	681e      	ldr	r6, [r3, #0]
 8010482:	6862      	ldr	r2, [r4, #4]
 8010484:	2100      	movs	r1, #0
 8010486:	4630      	mov	r0, r6
 8010488:	f7ef ff42 	bl	8000310 <memchr>
 801048c:	b108      	cbz	r0, 8010492 <_printf_i+0x1f2>
 801048e:	1b80      	subs	r0, r0, r6
 8010490:	6060      	str	r0, [r4, #4]
 8010492:	6863      	ldr	r3, [r4, #4]
 8010494:	6123      	str	r3, [r4, #16]
 8010496:	2300      	movs	r3, #0
 8010498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801049c:	e7a8      	b.n	80103f0 <_printf_i+0x150>
 801049e:	6923      	ldr	r3, [r4, #16]
 80104a0:	4632      	mov	r2, r6
 80104a2:	4649      	mov	r1, r9
 80104a4:	4640      	mov	r0, r8
 80104a6:	47d0      	blx	sl
 80104a8:	3001      	adds	r0, #1
 80104aa:	d0ab      	beq.n	8010404 <_printf_i+0x164>
 80104ac:	6823      	ldr	r3, [r4, #0]
 80104ae:	079b      	lsls	r3, r3, #30
 80104b0:	d413      	bmi.n	80104da <_printf_i+0x23a>
 80104b2:	68e0      	ldr	r0, [r4, #12]
 80104b4:	9b03      	ldr	r3, [sp, #12]
 80104b6:	4298      	cmp	r0, r3
 80104b8:	bfb8      	it	lt
 80104ba:	4618      	movlt	r0, r3
 80104bc:	e7a4      	b.n	8010408 <_printf_i+0x168>
 80104be:	2301      	movs	r3, #1
 80104c0:	4632      	mov	r2, r6
 80104c2:	4649      	mov	r1, r9
 80104c4:	4640      	mov	r0, r8
 80104c6:	47d0      	blx	sl
 80104c8:	3001      	adds	r0, #1
 80104ca:	d09b      	beq.n	8010404 <_printf_i+0x164>
 80104cc:	3501      	adds	r5, #1
 80104ce:	68e3      	ldr	r3, [r4, #12]
 80104d0:	9903      	ldr	r1, [sp, #12]
 80104d2:	1a5b      	subs	r3, r3, r1
 80104d4:	42ab      	cmp	r3, r5
 80104d6:	dcf2      	bgt.n	80104be <_printf_i+0x21e>
 80104d8:	e7eb      	b.n	80104b2 <_printf_i+0x212>
 80104da:	2500      	movs	r5, #0
 80104dc:	f104 0619 	add.w	r6, r4, #25
 80104e0:	e7f5      	b.n	80104ce <_printf_i+0x22e>
 80104e2:	bf00      	nop
 80104e4:	0801272d 	.word	0x0801272d
 80104e8:	0801273e 	.word	0x0801273e

080104ec <siscanf>:
 80104ec:	b40e      	push	{r1, r2, r3}
 80104ee:	b510      	push	{r4, lr}
 80104f0:	b09f      	sub	sp, #124	; 0x7c
 80104f2:	ac21      	add	r4, sp, #132	; 0x84
 80104f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80104f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80104fc:	9201      	str	r2, [sp, #4]
 80104fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010502:	9004      	str	r0, [sp, #16]
 8010504:	9008      	str	r0, [sp, #32]
 8010506:	f7ef feeb 	bl	80002e0 <strlen>
 801050a:	4b0c      	ldr	r3, [pc, #48]	; (801053c <siscanf+0x50>)
 801050c:	9005      	str	r0, [sp, #20]
 801050e:	9009      	str	r0, [sp, #36]	; 0x24
 8010510:	930d      	str	r3, [sp, #52]	; 0x34
 8010512:	480b      	ldr	r0, [pc, #44]	; (8010540 <siscanf+0x54>)
 8010514:	9a01      	ldr	r2, [sp, #4]
 8010516:	6800      	ldr	r0, [r0, #0]
 8010518:	9403      	str	r4, [sp, #12]
 801051a:	2300      	movs	r3, #0
 801051c:	9311      	str	r3, [sp, #68]	; 0x44
 801051e:	9316      	str	r3, [sp, #88]	; 0x58
 8010520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010524:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010528:	a904      	add	r1, sp, #16
 801052a:	4623      	mov	r3, r4
 801052c:	f000 fcb0 	bl	8010e90 <__ssvfiscanf_r>
 8010530:	b01f      	add	sp, #124	; 0x7c
 8010532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010536:	b003      	add	sp, #12
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	08010567 	.word	0x08010567
 8010540:	20000030 	.word	0x20000030

08010544 <__sread>:
 8010544:	b510      	push	{r4, lr}
 8010546:	460c      	mov	r4, r1
 8010548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801054c:	f000 ff64 	bl	8011418 <_read_r>
 8010550:	2800      	cmp	r0, #0
 8010552:	bfab      	itete	ge
 8010554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010556:	89a3      	ldrhlt	r3, [r4, #12]
 8010558:	181b      	addge	r3, r3, r0
 801055a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801055e:	bfac      	ite	ge
 8010560:	6563      	strge	r3, [r4, #84]	; 0x54
 8010562:	81a3      	strhlt	r3, [r4, #12]
 8010564:	bd10      	pop	{r4, pc}

08010566 <__seofread>:
 8010566:	2000      	movs	r0, #0
 8010568:	4770      	bx	lr

0801056a <__swrite>:
 801056a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801056e:	461f      	mov	r7, r3
 8010570:	898b      	ldrh	r3, [r1, #12]
 8010572:	05db      	lsls	r3, r3, #23
 8010574:	4605      	mov	r5, r0
 8010576:	460c      	mov	r4, r1
 8010578:	4616      	mov	r6, r2
 801057a:	d505      	bpl.n	8010588 <__swrite+0x1e>
 801057c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010580:	2302      	movs	r3, #2
 8010582:	2200      	movs	r2, #0
 8010584:	f000 fb74 	bl	8010c70 <_lseek_r>
 8010588:	89a3      	ldrh	r3, [r4, #12]
 801058a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801058e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010592:	81a3      	strh	r3, [r4, #12]
 8010594:	4632      	mov	r2, r6
 8010596:	463b      	mov	r3, r7
 8010598:	4628      	mov	r0, r5
 801059a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801059e:	f000 b90b 	b.w	80107b8 <_write_r>

080105a2 <__sseek>:
 80105a2:	b510      	push	{r4, lr}
 80105a4:	460c      	mov	r4, r1
 80105a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105aa:	f000 fb61 	bl	8010c70 <_lseek_r>
 80105ae:	1c43      	adds	r3, r0, #1
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	bf15      	itete	ne
 80105b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80105b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80105ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80105be:	81a3      	strheq	r3, [r4, #12]
 80105c0:	bf18      	it	ne
 80105c2:	81a3      	strhne	r3, [r4, #12]
 80105c4:	bd10      	pop	{r4, pc}

080105c6 <__sclose>:
 80105c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ca:	f000 b97d 	b.w	80108c8 <_close_r>

080105ce <strcpy>:
 80105ce:	4603      	mov	r3, r0
 80105d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105d4:	f803 2b01 	strb.w	r2, [r3], #1
 80105d8:	2a00      	cmp	r2, #0
 80105da:	d1f9      	bne.n	80105d0 <strcpy+0x2>
 80105dc:	4770      	bx	lr

080105de <strncmp>:
 80105de:	b510      	push	{r4, lr}
 80105e0:	b16a      	cbz	r2, 80105fe <strncmp+0x20>
 80105e2:	3901      	subs	r1, #1
 80105e4:	1884      	adds	r4, r0, r2
 80105e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80105ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d103      	bne.n	80105fa <strncmp+0x1c>
 80105f2:	42a0      	cmp	r0, r4
 80105f4:	d001      	beq.n	80105fa <strncmp+0x1c>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d1f5      	bne.n	80105e6 <strncmp+0x8>
 80105fa:	1a98      	subs	r0, r3, r2
 80105fc:	bd10      	pop	{r4, pc}
 80105fe:	4610      	mov	r0, r2
 8010600:	e7fc      	b.n	80105fc <strncmp+0x1e>
	...

08010604 <_strtoul_l.isra.0>:
 8010604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010608:	4e3b      	ldr	r6, [pc, #236]	; (80106f8 <_strtoul_l.isra.0+0xf4>)
 801060a:	4686      	mov	lr, r0
 801060c:	468c      	mov	ip, r1
 801060e:	4660      	mov	r0, ip
 8010610:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010614:	5da5      	ldrb	r5, [r4, r6]
 8010616:	f015 0508 	ands.w	r5, r5, #8
 801061a:	d1f8      	bne.n	801060e <_strtoul_l.isra.0+0xa>
 801061c:	2c2d      	cmp	r4, #45	; 0x2d
 801061e:	d134      	bne.n	801068a <_strtoul_l.isra.0+0x86>
 8010620:	f89c 4000 	ldrb.w	r4, [ip]
 8010624:	f04f 0801 	mov.w	r8, #1
 8010628:	f100 0c02 	add.w	ip, r0, #2
 801062c:	2b00      	cmp	r3, #0
 801062e:	d05e      	beq.n	80106ee <_strtoul_l.isra.0+0xea>
 8010630:	2b10      	cmp	r3, #16
 8010632:	d10c      	bne.n	801064e <_strtoul_l.isra.0+0x4a>
 8010634:	2c30      	cmp	r4, #48	; 0x30
 8010636:	d10a      	bne.n	801064e <_strtoul_l.isra.0+0x4a>
 8010638:	f89c 0000 	ldrb.w	r0, [ip]
 801063c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010640:	2858      	cmp	r0, #88	; 0x58
 8010642:	d14f      	bne.n	80106e4 <_strtoul_l.isra.0+0xe0>
 8010644:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8010648:	2310      	movs	r3, #16
 801064a:	f10c 0c02 	add.w	ip, ip, #2
 801064e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010652:	2500      	movs	r5, #0
 8010654:	fbb7 f7f3 	udiv	r7, r7, r3
 8010658:	fb03 f907 	mul.w	r9, r3, r7
 801065c:	ea6f 0909 	mvn.w	r9, r9
 8010660:	4628      	mov	r0, r5
 8010662:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8010666:	2e09      	cmp	r6, #9
 8010668:	d818      	bhi.n	801069c <_strtoul_l.isra.0+0x98>
 801066a:	4634      	mov	r4, r6
 801066c:	42a3      	cmp	r3, r4
 801066e:	dd24      	ble.n	80106ba <_strtoul_l.isra.0+0xb6>
 8010670:	2d00      	cmp	r5, #0
 8010672:	db1f      	blt.n	80106b4 <_strtoul_l.isra.0+0xb0>
 8010674:	4287      	cmp	r7, r0
 8010676:	d31d      	bcc.n	80106b4 <_strtoul_l.isra.0+0xb0>
 8010678:	d101      	bne.n	801067e <_strtoul_l.isra.0+0x7a>
 801067a:	45a1      	cmp	r9, r4
 801067c:	db1a      	blt.n	80106b4 <_strtoul_l.isra.0+0xb0>
 801067e:	fb00 4003 	mla	r0, r0, r3, r4
 8010682:	2501      	movs	r5, #1
 8010684:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010688:	e7eb      	b.n	8010662 <_strtoul_l.isra.0+0x5e>
 801068a:	2c2b      	cmp	r4, #43	; 0x2b
 801068c:	bf08      	it	eq
 801068e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8010692:	46a8      	mov	r8, r5
 8010694:	bf08      	it	eq
 8010696:	f100 0c02 	addeq.w	ip, r0, #2
 801069a:	e7c7      	b.n	801062c <_strtoul_l.isra.0+0x28>
 801069c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80106a0:	2e19      	cmp	r6, #25
 80106a2:	d801      	bhi.n	80106a8 <_strtoul_l.isra.0+0xa4>
 80106a4:	3c37      	subs	r4, #55	; 0x37
 80106a6:	e7e1      	b.n	801066c <_strtoul_l.isra.0+0x68>
 80106a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80106ac:	2e19      	cmp	r6, #25
 80106ae:	d804      	bhi.n	80106ba <_strtoul_l.isra.0+0xb6>
 80106b0:	3c57      	subs	r4, #87	; 0x57
 80106b2:	e7db      	b.n	801066c <_strtoul_l.isra.0+0x68>
 80106b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80106b8:	e7e4      	b.n	8010684 <_strtoul_l.isra.0+0x80>
 80106ba:	2d00      	cmp	r5, #0
 80106bc:	da07      	bge.n	80106ce <_strtoul_l.isra.0+0xca>
 80106be:	2322      	movs	r3, #34	; 0x22
 80106c0:	f8ce 3000 	str.w	r3, [lr]
 80106c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106c8:	b942      	cbnz	r2, 80106dc <_strtoul_l.isra.0+0xd8>
 80106ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106ce:	f1b8 0f00 	cmp.w	r8, #0
 80106d2:	d000      	beq.n	80106d6 <_strtoul_l.isra.0+0xd2>
 80106d4:	4240      	negs	r0, r0
 80106d6:	2a00      	cmp	r2, #0
 80106d8:	d0f7      	beq.n	80106ca <_strtoul_l.isra.0+0xc6>
 80106da:	b10d      	cbz	r5, 80106e0 <_strtoul_l.isra.0+0xdc>
 80106dc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80106e0:	6011      	str	r1, [r2, #0]
 80106e2:	e7f2      	b.n	80106ca <_strtoul_l.isra.0+0xc6>
 80106e4:	2430      	movs	r4, #48	; 0x30
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d1b1      	bne.n	801064e <_strtoul_l.isra.0+0x4a>
 80106ea:	2308      	movs	r3, #8
 80106ec:	e7af      	b.n	801064e <_strtoul_l.isra.0+0x4a>
 80106ee:	2c30      	cmp	r4, #48	; 0x30
 80106f0:	d0a2      	beq.n	8010638 <_strtoul_l.isra.0+0x34>
 80106f2:	230a      	movs	r3, #10
 80106f4:	e7ab      	b.n	801064e <_strtoul_l.isra.0+0x4a>
 80106f6:	bf00      	nop
 80106f8:	08012750 	.word	0x08012750

080106fc <_strtoul_r>:
 80106fc:	f7ff bf82 	b.w	8010604 <_strtoul_l.isra.0>

08010700 <strtoul>:
 8010700:	4613      	mov	r3, r2
 8010702:	460a      	mov	r2, r1
 8010704:	4601      	mov	r1, r0
 8010706:	4802      	ldr	r0, [pc, #8]	; (8010710 <strtoul+0x10>)
 8010708:	6800      	ldr	r0, [r0, #0]
 801070a:	f7ff bf7b 	b.w	8010604 <_strtoul_l.isra.0>
 801070e:	bf00      	nop
 8010710:	20000030 	.word	0x20000030

08010714 <__swbuf_r>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	460e      	mov	r6, r1
 8010718:	4614      	mov	r4, r2
 801071a:	4605      	mov	r5, r0
 801071c:	b118      	cbz	r0, 8010726 <__swbuf_r+0x12>
 801071e:	6983      	ldr	r3, [r0, #24]
 8010720:	b90b      	cbnz	r3, 8010726 <__swbuf_r+0x12>
 8010722:	f000 fa07 	bl	8010b34 <__sinit>
 8010726:	4b21      	ldr	r3, [pc, #132]	; (80107ac <__swbuf_r+0x98>)
 8010728:	429c      	cmp	r4, r3
 801072a:	d12b      	bne.n	8010784 <__swbuf_r+0x70>
 801072c:	686c      	ldr	r4, [r5, #4]
 801072e:	69a3      	ldr	r3, [r4, #24]
 8010730:	60a3      	str	r3, [r4, #8]
 8010732:	89a3      	ldrh	r3, [r4, #12]
 8010734:	071a      	lsls	r2, r3, #28
 8010736:	d52f      	bpl.n	8010798 <__swbuf_r+0x84>
 8010738:	6923      	ldr	r3, [r4, #16]
 801073a:	b36b      	cbz	r3, 8010798 <__swbuf_r+0x84>
 801073c:	6923      	ldr	r3, [r4, #16]
 801073e:	6820      	ldr	r0, [r4, #0]
 8010740:	1ac0      	subs	r0, r0, r3
 8010742:	6963      	ldr	r3, [r4, #20]
 8010744:	b2f6      	uxtb	r6, r6
 8010746:	4283      	cmp	r3, r0
 8010748:	4637      	mov	r7, r6
 801074a:	dc04      	bgt.n	8010756 <__swbuf_r+0x42>
 801074c:	4621      	mov	r1, r4
 801074e:	4628      	mov	r0, r5
 8010750:	f000 f95c 	bl	8010a0c <_fflush_r>
 8010754:	bb30      	cbnz	r0, 80107a4 <__swbuf_r+0x90>
 8010756:	68a3      	ldr	r3, [r4, #8]
 8010758:	3b01      	subs	r3, #1
 801075a:	60a3      	str	r3, [r4, #8]
 801075c:	6823      	ldr	r3, [r4, #0]
 801075e:	1c5a      	adds	r2, r3, #1
 8010760:	6022      	str	r2, [r4, #0]
 8010762:	701e      	strb	r6, [r3, #0]
 8010764:	6963      	ldr	r3, [r4, #20]
 8010766:	3001      	adds	r0, #1
 8010768:	4283      	cmp	r3, r0
 801076a:	d004      	beq.n	8010776 <__swbuf_r+0x62>
 801076c:	89a3      	ldrh	r3, [r4, #12]
 801076e:	07db      	lsls	r3, r3, #31
 8010770:	d506      	bpl.n	8010780 <__swbuf_r+0x6c>
 8010772:	2e0a      	cmp	r6, #10
 8010774:	d104      	bne.n	8010780 <__swbuf_r+0x6c>
 8010776:	4621      	mov	r1, r4
 8010778:	4628      	mov	r0, r5
 801077a:	f000 f947 	bl	8010a0c <_fflush_r>
 801077e:	b988      	cbnz	r0, 80107a4 <__swbuf_r+0x90>
 8010780:	4638      	mov	r0, r7
 8010782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010784:	4b0a      	ldr	r3, [pc, #40]	; (80107b0 <__swbuf_r+0x9c>)
 8010786:	429c      	cmp	r4, r3
 8010788:	d101      	bne.n	801078e <__swbuf_r+0x7a>
 801078a:	68ac      	ldr	r4, [r5, #8]
 801078c:	e7cf      	b.n	801072e <__swbuf_r+0x1a>
 801078e:	4b09      	ldr	r3, [pc, #36]	; (80107b4 <__swbuf_r+0xa0>)
 8010790:	429c      	cmp	r4, r3
 8010792:	bf08      	it	eq
 8010794:	68ec      	ldreq	r4, [r5, #12]
 8010796:	e7ca      	b.n	801072e <__swbuf_r+0x1a>
 8010798:	4621      	mov	r1, r4
 801079a:	4628      	mov	r0, r5
 801079c:	f000 f81e 	bl	80107dc <__swsetup_r>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d0cb      	beq.n	801073c <__swbuf_r+0x28>
 80107a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80107a8:	e7ea      	b.n	8010780 <__swbuf_r+0x6c>
 80107aa:	bf00      	nop
 80107ac:	08012870 	.word	0x08012870
 80107b0:	08012890 	.word	0x08012890
 80107b4:	08012850 	.word	0x08012850

080107b8 <_write_r>:
 80107b8:	b538      	push	{r3, r4, r5, lr}
 80107ba:	4d07      	ldr	r5, [pc, #28]	; (80107d8 <_write_r+0x20>)
 80107bc:	4604      	mov	r4, r0
 80107be:	4608      	mov	r0, r1
 80107c0:	4611      	mov	r1, r2
 80107c2:	2200      	movs	r2, #0
 80107c4:	602a      	str	r2, [r5, #0]
 80107c6:	461a      	mov	r2, r3
 80107c8:	f7f1 fd29 	bl	800221e <_write>
 80107cc:	1c43      	adds	r3, r0, #1
 80107ce:	d102      	bne.n	80107d6 <_write_r+0x1e>
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	b103      	cbz	r3, 80107d6 <_write_r+0x1e>
 80107d4:	6023      	str	r3, [r4, #0]
 80107d6:	bd38      	pop	{r3, r4, r5, pc}
 80107d8:	20008e04 	.word	0x20008e04

080107dc <__swsetup_r>:
 80107dc:	4b32      	ldr	r3, [pc, #200]	; (80108a8 <__swsetup_r+0xcc>)
 80107de:	b570      	push	{r4, r5, r6, lr}
 80107e0:	681d      	ldr	r5, [r3, #0]
 80107e2:	4606      	mov	r6, r0
 80107e4:	460c      	mov	r4, r1
 80107e6:	b125      	cbz	r5, 80107f2 <__swsetup_r+0x16>
 80107e8:	69ab      	ldr	r3, [r5, #24]
 80107ea:	b913      	cbnz	r3, 80107f2 <__swsetup_r+0x16>
 80107ec:	4628      	mov	r0, r5
 80107ee:	f000 f9a1 	bl	8010b34 <__sinit>
 80107f2:	4b2e      	ldr	r3, [pc, #184]	; (80108ac <__swsetup_r+0xd0>)
 80107f4:	429c      	cmp	r4, r3
 80107f6:	d10f      	bne.n	8010818 <__swsetup_r+0x3c>
 80107f8:	686c      	ldr	r4, [r5, #4]
 80107fa:	89a3      	ldrh	r3, [r4, #12]
 80107fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010800:	0719      	lsls	r1, r3, #28
 8010802:	d42c      	bmi.n	801085e <__swsetup_r+0x82>
 8010804:	06dd      	lsls	r5, r3, #27
 8010806:	d411      	bmi.n	801082c <__swsetup_r+0x50>
 8010808:	2309      	movs	r3, #9
 801080a:	6033      	str	r3, [r6, #0]
 801080c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010810:	81a3      	strh	r3, [r4, #12]
 8010812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010816:	e03e      	b.n	8010896 <__swsetup_r+0xba>
 8010818:	4b25      	ldr	r3, [pc, #148]	; (80108b0 <__swsetup_r+0xd4>)
 801081a:	429c      	cmp	r4, r3
 801081c:	d101      	bne.n	8010822 <__swsetup_r+0x46>
 801081e:	68ac      	ldr	r4, [r5, #8]
 8010820:	e7eb      	b.n	80107fa <__swsetup_r+0x1e>
 8010822:	4b24      	ldr	r3, [pc, #144]	; (80108b4 <__swsetup_r+0xd8>)
 8010824:	429c      	cmp	r4, r3
 8010826:	bf08      	it	eq
 8010828:	68ec      	ldreq	r4, [r5, #12]
 801082a:	e7e6      	b.n	80107fa <__swsetup_r+0x1e>
 801082c:	0758      	lsls	r0, r3, #29
 801082e:	d512      	bpl.n	8010856 <__swsetup_r+0x7a>
 8010830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010832:	b141      	cbz	r1, 8010846 <__swsetup_r+0x6a>
 8010834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010838:	4299      	cmp	r1, r3
 801083a:	d002      	beq.n	8010842 <__swsetup_r+0x66>
 801083c:	4630      	mov	r0, r6
 801083e:	f7fe fd89 	bl	800f354 <_free_r>
 8010842:	2300      	movs	r3, #0
 8010844:	6363      	str	r3, [r4, #52]	; 0x34
 8010846:	89a3      	ldrh	r3, [r4, #12]
 8010848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801084c:	81a3      	strh	r3, [r4, #12]
 801084e:	2300      	movs	r3, #0
 8010850:	6063      	str	r3, [r4, #4]
 8010852:	6923      	ldr	r3, [r4, #16]
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	89a3      	ldrh	r3, [r4, #12]
 8010858:	f043 0308 	orr.w	r3, r3, #8
 801085c:	81a3      	strh	r3, [r4, #12]
 801085e:	6923      	ldr	r3, [r4, #16]
 8010860:	b94b      	cbnz	r3, 8010876 <__swsetup_r+0x9a>
 8010862:	89a3      	ldrh	r3, [r4, #12]
 8010864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801086c:	d003      	beq.n	8010876 <__swsetup_r+0x9a>
 801086e:	4621      	mov	r1, r4
 8010870:	4630      	mov	r0, r6
 8010872:	f000 fa33 	bl	8010cdc <__smakebuf_r>
 8010876:	89a0      	ldrh	r0, [r4, #12]
 8010878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801087c:	f010 0301 	ands.w	r3, r0, #1
 8010880:	d00a      	beq.n	8010898 <__swsetup_r+0xbc>
 8010882:	2300      	movs	r3, #0
 8010884:	60a3      	str	r3, [r4, #8]
 8010886:	6963      	ldr	r3, [r4, #20]
 8010888:	425b      	negs	r3, r3
 801088a:	61a3      	str	r3, [r4, #24]
 801088c:	6923      	ldr	r3, [r4, #16]
 801088e:	b943      	cbnz	r3, 80108a2 <__swsetup_r+0xc6>
 8010890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010894:	d1ba      	bne.n	801080c <__swsetup_r+0x30>
 8010896:	bd70      	pop	{r4, r5, r6, pc}
 8010898:	0781      	lsls	r1, r0, #30
 801089a:	bf58      	it	pl
 801089c:	6963      	ldrpl	r3, [r4, #20]
 801089e:	60a3      	str	r3, [r4, #8]
 80108a0:	e7f4      	b.n	801088c <__swsetup_r+0xb0>
 80108a2:	2000      	movs	r0, #0
 80108a4:	e7f7      	b.n	8010896 <__swsetup_r+0xba>
 80108a6:	bf00      	nop
 80108a8:	20000030 	.word	0x20000030
 80108ac:	08012870 	.word	0x08012870
 80108b0:	08012890 	.word	0x08012890
 80108b4:	08012850 	.word	0x08012850

080108b8 <abort>:
 80108b8:	b508      	push	{r3, lr}
 80108ba:	2006      	movs	r0, #6
 80108bc:	f000 fe20 	bl	8011500 <raise>
 80108c0:	2001      	movs	r0, #1
 80108c2:	f7f1 fc85 	bl	80021d0 <_exit>
	...

080108c8 <_close_r>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	4d06      	ldr	r5, [pc, #24]	; (80108e4 <_close_r+0x1c>)
 80108cc:	2300      	movs	r3, #0
 80108ce:	4604      	mov	r4, r0
 80108d0:	4608      	mov	r0, r1
 80108d2:	602b      	str	r3, [r5, #0]
 80108d4:	f7f1 fcbf 	bl	8002256 <_close>
 80108d8:	1c43      	adds	r3, r0, #1
 80108da:	d102      	bne.n	80108e2 <_close_r+0x1a>
 80108dc:	682b      	ldr	r3, [r5, #0]
 80108de:	b103      	cbz	r3, 80108e2 <_close_r+0x1a>
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	bd38      	pop	{r3, r4, r5, pc}
 80108e4:	20008e04 	.word	0x20008e04

080108e8 <__env_lock>:
 80108e8:	4801      	ldr	r0, [pc, #4]	; (80108f0 <__env_lock+0x8>)
 80108ea:	f7ff b9a5 	b.w	800fc38 <__retarget_lock_acquire_recursive>
 80108ee:	bf00      	nop
 80108f0:	20008dfa 	.word	0x20008dfa

080108f4 <__env_unlock>:
 80108f4:	4801      	ldr	r0, [pc, #4]	; (80108fc <__env_unlock+0x8>)
 80108f6:	f7ff b9a1 	b.w	800fc3c <__retarget_lock_release_recursive>
 80108fa:	bf00      	nop
 80108fc:	20008dfa 	.word	0x20008dfa

08010900 <__sflush_r>:
 8010900:	898a      	ldrh	r2, [r1, #12]
 8010902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010906:	4605      	mov	r5, r0
 8010908:	0710      	lsls	r0, r2, #28
 801090a:	460c      	mov	r4, r1
 801090c:	d458      	bmi.n	80109c0 <__sflush_r+0xc0>
 801090e:	684b      	ldr	r3, [r1, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	dc05      	bgt.n	8010920 <__sflush_r+0x20>
 8010914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010916:	2b00      	cmp	r3, #0
 8010918:	dc02      	bgt.n	8010920 <__sflush_r+0x20>
 801091a:	2000      	movs	r0, #0
 801091c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010922:	2e00      	cmp	r6, #0
 8010924:	d0f9      	beq.n	801091a <__sflush_r+0x1a>
 8010926:	2300      	movs	r3, #0
 8010928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801092c:	682f      	ldr	r7, [r5, #0]
 801092e:	602b      	str	r3, [r5, #0]
 8010930:	d032      	beq.n	8010998 <__sflush_r+0x98>
 8010932:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	075a      	lsls	r2, r3, #29
 8010938:	d505      	bpl.n	8010946 <__sflush_r+0x46>
 801093a:	6863      	ldr	r3, [r4, #4]
 801093c:	1ac0      	subs	r0, r0, r3
 801093e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010940:	b10b      	cbz	r3, 8010946 <__sflush_r+0x46>
 8010942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010944:	1ac0      	subs	r0, r0, r3
 8010946:	2300      	movs	r3, #0
 8010948:	4602      	mov	r2, r0
 801094a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801094c:	6a21      	ldr	r1, [r4, #32]
 801094e:	4628      	mov	r0, r5
 8010950:	47b0      	blx	r6
 8010952:	1c43      	adds	r3, r0, #1
 8010954:	89a3      	ldrh	r3, [r4, #12]
 8010956:	d106      	bne.n	8010966 <__sflush_r+0x66>
 8010958:	6829      	ldr	r1, [r5, #0]
 801095a:	291d      	cmp	r1, #29
 801095c:	d82c      	bhi.n	80109b8 <__sflush_r+0xb8>
 801095e:	4a2a      	ldr	r2, [pc, #168]	; (8010a08 <__sflush_r+0x108>)
 8010960:	40ca      	lsrs	r2, r1
 8010962:	07d6      	lsls	r6, r2, #31
 8010964:	d528      	bpl.n	80109b8 <__sflush_r+0xb8>
 8010966:	2200      	movs	r2, #0
 8010968:	6062      	str	r2, [r4, #4]
 801096a:	04d9      	lsls	r1, r3, #19
 801096c:	6922      	ldr	r2, [r4, #16]
 801096e:	6022      	str	r2, [r4, #0]
 8010970:	d504      	bpl.n	801097c <__sflush_r+0x7c>
 8010972:	1c42      	adds	r2, r0, #1
 8010974:	d101      	bne.n	801097a <__sflush_r+0x7a>
 8010976:	682b      	ldr	r3, [r5, #0]
 8010978:	b903      	cbnz	r3, 801097c <__sflush_r+0x7c>
 801097a:	6560      	str	r0, [r4, #84]	; 0x54
 801097c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801097e:	602f      	str	r7, [r5, #0]
 8010980:	2900      	cmp	r1, #0
 8010982:	d0ca      	beq.n	801091a <__sflush_r+0x1a>
 8010984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010988:	4299      	cmp	r1, r3
 801098a:	d002      	beq.n	8010992 <__sflush_r+0x92>
 801098c:	4628      	mov	r0, r5
 801098e:	f7fe fce1 	bl	800f354 <_free_r>
 8010992:	2000      	movs	r0, #0
 8010994:	6360      	str	r0, [r4, #52]	; 0x34
 8010996:	e7c1      	b.n	801091c <__sflush_r+0x1c>
 8010998:	6a21      	ldr	r1, [r4, #32]
 801099a:	2301      	movs	r3, #1
 801099c:	4628      	mov	r0, r5
 801099e:	47b0      	blx	r6
 80109a0:	1c41      	adds	r1, r0, #1
 80109a2:	d1c7      	bne.n	8010934 <__sflush_r+0x34>
 80109a4:	682b      	ldr	r3, [r5, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d0c4      	beq.n	8010934 <__sflush_r+0x34>
 80109aa:	2b1d      	cmp	r3, #29
 80109ac:	d001      	beq.n	80109b2 <__sflush_r+0xb2>
 80109ae:	2b16      	cmp	r3, #22
 80109b0:	d101      	bne.n	80109b6 <__sflush_r+0xb6>
 80109b2:	602f      	str	r7, [r5, #0]
 80109b4:	e7b1      	b.n	801091a <__sflush_r+0x1a>
 80109b6:	89a3      	ldrh	r3, [r4, #12]
 80109b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109bc:	81a3      	strh	r3, [r4, #12]
 80109be:	e7ad      	b.n	801091c <__sflush_r+0x1c>
 80109c0:	690f      	ldr	r7, [r1, #16]
 80109c2:	2f00      	cmp	r7, #0
 80109c4:	d0a9      	beq.n	801091a <__sflush_r+0x1a>
 80109c6:	0793      	lsls	r3, r2, #30
 80109c8:	680e      	ldr	r6, [r1, #0]
 80109ca:	bf08      	it	eq
 80109cc:	694b      	ldreq	r3, [r1, #20]
 80109ce:	600f      	str	r7, [r1, #0]
 80109d0:	bf18      	it	ne
 80109d2:	2300      	movne	r3, #0
 80109d4:	eba6 0807 	sub.w	r8, r6, r7
 80109d8:	608b      	str	r3, [r1, #8]
 80109da:	f1b8 0f00 	cmp.w	r8, #0
 80109de:	dd9c      	ble.n	801091a <__sflush_r+0x1a>
 80109e0:	6a21      	ldr	r1, [r4, #32]
 80109e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109e4:	4643      	mov	r3, r8
 80109e6:	463a      	mov	r2, r7
 80109e8:	4628      	mov	r0, r5
 80109ea:	47b0      	blx	r6
 80109ec:	2800      	cmp	r0, #0
 80109ee:	dc06      	bgt.n	80109fe <__sflush_r+0xfe>
 80109f0:	89a3      	ldrh	r3, [r4, #12]
 80109f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109f6:	81a3      	strh	r3, [r4, #12]
 80109f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109fc:	e78e      	b.n	801091c <__sflush_r+0x1c>
 80109fe:	4407      	add	r7, r0
 8010a00:	eba8 0800 	sub.w	r8, r8, r0
 8010a04:	e7e9      	b.n	80109da <__sflush_r+0xda>
 8010a06:	bf00      	nop
 8010a08:	20400001 	.word	0x20400001

08010a0c <_fflush_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	690b      	ldr	r3, [r1, #16]
 8010a10:	4605      	mov	r5, r0
 8010a12:	460c      	mov	r4, r1
 8010a14:	b913      	cbnz	r3, 8010a1c <_fflush_r+0x10>
 8010a16:	2500      	movs	r5, #0
 8010a18:	4628      	mov	r0, r5
 8010a1a:	bd38      	pop	{r3, r4, r5, pc}
 8010a1c:	b118      	cbz	r0, 8010a26 <_fflush_r+0x1a>
 8010a1e:	6983      	ldr	r3, [r0, #24]
 8010a20:	b90b      	cbnz	r3, 8010a26 <_fflush_r+0x1a>
 8010a22:	f000 f887 	bl	8010b34 <__sinit>
 8010a26:	4b14      	ldr	r3, [pc, #80]	; (8010a78 <_fflush_r+0x6c>)
 8010a28:	429c      	cmp	r4, r3
 8010a2a:	d11b      	bne.n	8010a64 <_fflush_r+0x58>
 8010a2c:	686c      	ldr	r4, [r5, #4]
 8010a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d0ef      	beq.n	8010a16 <_fflush_r+0xa>
 8010a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a38:	07d0      	lsls	r0, r2, #31
 8010a3a:	d404      	bmi.n	8010a46 <_fflush_r+0x3a>
 8010a3c:	0599      	lsls	r1, r3, #22
 8010a3e:	d402      	bmi.n	8010a46 <_fflush_r+0x3a>
 8010a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a42:	f7ff f8f9 	bl	800fc38 <__retarget_lock_acquire_recursive>
 8010a46:	4628      	mov	r0, r5
 8010a48:	4621      	mov	r1, r4
 8010a4a:	f7ff ff59 	bl	8010900 <__sflush_r>
 8010a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a50:	07da      	lsls	r2, r3, #31
 8010a52:	4605      	mov	r5, r0
 8010a54:	d4e0      	bmi.n	8010a18 <_fflush_r+0xc>
 8010a56:	89a3      	ldrh	r3, [r4, #12]
 8010a58:	059b      	lsls	r3, r3, #22
 8010a5a:	d4dd      	bmi.n	8010a18 <_fflush_r+0xc>
 8010a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a5e:	f7ff f8ed 	bl	800fc3c <__retarget_lock_release_recursive>
 8010a62:	e7d9      	b.n	8010a18 <_fflush_r+0xc>
 8010a64:	4b05      	ldr	r3, [pc, #20]	; (8010a7c <_fflush_r+0x70>)
 8010a66:	429c      	cmp	r4, r3
 8010a68:	d101      	bne.n	8010a6e <_fflush_r+0x62>
 8010a6a:	68ac      	ldr	r4, [r5, #8]
 8010a6c:	e7df      	b.n	8010a2e <_fflush_r+0x22>
 8010a6e:	4b04      	ldr	r3, [pc, #16]	; (8010a80 <_fflush_r+0x74>)
 8010a70:	429c      	cmp	r4, r3
 8010a72:	bf08      	it	eq
 8010a74:	68ec      	ldreq	r4, [r5, #12]
 8010a76:	e7da      	b.n	8010a2e <_fflush_r+0x22>
 8010a78:	08012870 	.word	0x08012870
 8010a7c:	08012890 	.word	0x08012890
 8010a80:	08012850 	.word	0x08012850

08010a84 <std>:
 8010a84:	2300      	movs	r3, #0
 8010a86:	b510      	push	{r4, lr}
 8010a88:	4604      	mov	r4, r0
 8010a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8010a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a92:	6083      	str	r3, [r0, #8]
 8010a94:	8181      	strh	r1, [r0, #12]
 8010a96:	6643      	str	r3, [r0, #100]	; 0x64
 8010a98:	81c2      	strh	r2, [r0, #14]
 8010a9a:	6183      	str	r3, [r0, #24]
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	2208      	movs	r2, #8
 8010aa0:	305c      	adds	r0, #92	; 0x5c
 8010aa2:	f7fe fc4f 	bl	800f344 <memset>
 8010aa6:	4b05      	ldr	r3, [pc, #20]	; (8010abc <std+0x38>)
 8010aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8010aaa:	4b05      	ldr	r3, [pc, #20]	; (8010ac0 <std+0x3c>)
 8010aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8010aae:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <std+0x40>)
 8010ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ab2:	4b05      	ldr	r3, [pc, #20]	; (8010ac8 <std+0x44>)
 8010ab4:	6224      	str	r4, [r4, #32]
 8010ab6:	6323      	str	r3, [r4, #48]	; 0x30
 8010ab8:	bd10      	pop	{r4, pc}
 8010aba:	bf00      	nop
 8010abc:	08010545 	.word	0x08010545
 8010ac0:	0801056b 	.word	0x0801056b
 8010ac4:	080105a3 	.word	0x080105a3
 8010ac8:	080105c7 	.word	0x080105c7

08010acc <_cleanup_r>:
 8010acc:	4901      	ldr	r1, [pc, #4]	; (8010ad4 <_cleanup_r+0x8>)
 8010ace:	f000 b8af 	b.w	8010c30 <_fwalk_reent>
 8010ad2:	bf00      	nop
 8010ad4:	08010a0d 	.word	0x08010a0d

08010ad8 <__sfmoreglue>:
 8010ad8:	b570      	push	{r4, r5, r6, lr}
 8010ada:	1e4a      	subs	r2, r1, #1
 8010adc:	2568      	movs	r5, #104	; 0x68
 8010ade:	4355      	muls	r5, r2
 8010ae0:	460e      	mov	r6, r1
 8010ae2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010ae6:	f7fe fc85 	bl	800f3f4 <_malloc_r>
 8010aea:	4604      	mov	r4, r0
 8010aec:	b140      	cbz	r0, 8010b00 <__sfmoreglue+0x28>
 8010aee:	2100      	movs	r1, #0
 8010af0:	e9c0 1600 	strd	r1, r6, [r0]
 8010af4:	300c      	adds	r0, #12
 8010af6:	60a0      	str	r0, [r4, #8]
 8010af8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010afc:	f7fe fc22 	bl	800f344 <memset>
 8010b00:	4620      	mov	r0, r4
 8010b02:	bd70      	pop	{r4, r5, r6, pc}

08010b04 <__sfp_lock_acquire>:
 8010b04:	4801      	ldr	r0, [pc, #4]	; (8010b0c <__sfp_lock_acquire+0x8>)
 8010b06:	f7ff b897 	b.w	800fc38 <__retarget_lock_acquire_recursive>
 8010b0a:	bf00      	nop
 8010b0c:	20008e00 	.word	0x20008e00

08010b10 <__sfp_lock_release>:
 8010b10:	4801      	ldr	r0, [pc, #4]	; (8010b18 <__sfp_lock_release+0x8>)
 8010b12:	f7ff b893 	b.w	800fc3c <__retarget_lock_release_recursive>
 8010b16:	bf00      	nop
 8010b18:	20008e00 	.word	0x20008e00

08010b1c <__sinit_lock_acquire>:
 8010b1c:	4801      	ldr	r0, [pc, #4]	; (8010b24 <__sinit_lock_acquire+0x8>)
 8010b1e:	f7ff b88b 	b.w	800fc38 <__retarget_lock_acquire_recursive>
 8010b22:	bf00      	nop
 8010b24:	20008dfb 	.word	0x20008dfb

08010b28 <__sinit_lock_release>:
 8010b28:	4801      	ldr	r0, [pc, #4]	; (8010b30 <__sinit_lock_release+0x8>)
 8010b2a:	f7ff b887 	b.w	800fc3c <__retarget_lock_release_recursive>
 8010b2e:	bf00      	nop
 8010b30:	20008dfb 	.word	0x20008dfb

08010b34 <__sinit>:
 8010b34:	b510      	push	{r4, lr}
 8010b36:	4604      	mov	r4, r0
 8010b38:	f7ff fff0 	bl	8010b1c <__sinit_lock_acquire>
 8010b3c:	69a3      	ldr	r3, [r4, #24]
 8010b3e:	b11b      	cbz	r3, 8010b48 <__sinit+0x14>
 8010b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b44:	f7ff bff0 	b.w	8010b28 <__sinit_lock_release>
 8010b48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b4c:	6523      	str	r3, [r4, #80]	; 0x50
 8010b4e:	4b13      	ldr	r3, [pc, #76]	; (8010b9c <__sinit+0x68>)
 8010b50:	4a13      	ldr	r2, [pc, #76]	; (8010ba0 <__sinit+0x6c>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b56:	42a3      	cmp	r3, r4
 8010b58:	bf04      	itt	eq
 8010b5a:	2301      	moveq	r3, #1
 8010b5c:	61a3      	streq	r3, [r4, #24]
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f000 f820 	bl	8010ba4 <__sfp>
 8010b64:	6060      	str	r0, [r4, #4]
 8010b66:	4620      	mov	r0, r4
 8010b68:	f000 f81c 	bl	8010ba4 <__sfp>
 8010b6c:	60a0      	str	r0, [r4, #8]
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f000 f818 	bl	8010ba4 <__sfp>
 8010b74:	2200      	movs	r2, #0
 8010b76:	60e0      	str	r0, [r4, #12]
 8010b78:	2104      	movs	r1, #4
 8010b7a:	6860      	ldr	r0, [r4, #4]
 8010b7c:	f7ff ff82 	bl	8010a84 <std>
 8010b80:	68a0      	ldr	r0, [r4, #8]
 8010b82:	2201      	movs	r2, #1
 8010b84:	2109      	movs	r1, #9
 8010b86:	f7ff ff7d 	bl	8010a84 <std>
 8010b8a:	68e0      	ldr	r0, [r4, #12]
 8010b8c:	2202      	movs	r2, #2
 8010b8e:	2112      	movs	r1, #18
 8010b90:	f7ff ff78 	bl	8010a84 <std>
 8010b94:	2301      	movs	r3, #1
 8010b96:	61a3      	str	r3, [r4, #24]
 8010b98:	e7d2      	b.n	8010b40 <__sinit+0xc>
 8010b9a:	bf00      	nop
 8010b9c:	080125c8 	.word	0x080125c8
 8010ba0:	08010acd 	.word	0x08010acd

08010ba4 <__sfp>:
 8010ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ba6:	4607      	mov	r7, r0
 8010ba8:	f7ff ffac 	bl	8010b04 <__sfp_lock_acquire>
 8010bac:	4b1e      	ldr	r3, [pc, #120]	; (8010c28 <__sfp+0x84>)
 8010bae:	681e      	ldr	r6, [r3, #0]
 8010bb0:	69b3      	ldr	r3, [r6, #24]
 8010bb2:	b913      	cbnz	r3, 8010bba <__sfp+0x16>
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f7ff ffbd 	bl	8010b34 <__sinit>
 8010bba:	3648      	adds	r6, #72	; 0x48
 8010bbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010bc0:	3b01      	subs	r3, #1
 8010bc2:	d503      	bpl.n	8010bcc <__sfp+0x28>
 8010bc4:	6833      	ldr	r3, [r6, #0]
 8010bc6:	b30b      	cbz	r3, 8010c0c <__sfp+0x68>
 8010bc8:	6836      	ldr	r6, [r6, #0]
 8010bca:	e7f7      	b.n	8010bbc <__sfp+0x18>
 8010bcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010bd0:	b9d5      	cbnz	r5, 8010c08 <__sfp+0x64>
 8010bd2:	4b16      	ldr	r3, [pc, #88]	; (8010c2c <__sfp+0x88>)
 8010bd4:	60e3      	str	r3, [r4, #12]
 8010bd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010bda:	6665      	str	r5, [r4, #100]	; 0x64
 8010bdc:	f7ff f82a 	bl	800fc34 <__retarget_lock_init_recursive>
 8010be0:	f7ff ff96 	bl	8010b10 <__sfp_lock_release>
 8010be4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010be8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010bec:	6025      	str	r5, [r4, #0]
 8010bee:	61a5      	str	r5, [r4, #24]
 8010bf0:	2208      	movs	r2, #8
 8010bf2:	4629      	mov	r1, r5
 8010bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010bf8:	f7fe fba4 	bl	800f344 <memset>
 8010bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c04:	4620      	mov	r0, r4
 8010c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c08:	3468      	adds	r4, #104	; 0x68
 8010c0a:	e7d9      	b.n	8010bc0 <__sfp+0x1c>
 8010c0c:	2104      	movs	r1, #4
 8010c0e:	4638      	mov	r0, r7
 8010c10:	f7ff ff62 	bl	8010ad8 <__sfmoreglue>
 8010c14:	4604      	mov	r4, r0
 8010c16:	6030      	str	r0, [r6, #0]
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	d1d5      	bne.n	8010bc8 <__sfp+0x24>
 8010c1c:	f7ff ff78 	bl	8010b10 <__sfp_lock_release>
 8010c20:	230c      	movs	r3, #12
 8010c22:	603b      	str	r3, [r7, #0]
 8010c24:	e7ee      	b.n	8010c04 <__sfp+0x60>
 8010c26:	bf00      	nop
 8010c28:	080125c8 	.word	0x080125c8
 8010c2c:	ffff0001 	.word	0xffff0001

08010c30 <_fwalk_reent>:
 8010c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c34:	4606      	mov	r6, r0
 8010c36:	4688      	mov	r8, r1
 8010c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c3c:	2700      	movs	r7, #0
 8010c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c42:	f1b9 0901 	subs.w	r9, r9, #1
 8010c46:	d505      	bpl.n	8010c54 <_fwalk_reent+0x24>
 8010c48:	6824      	ldr	r4, [r4, #0]
 8010c4a:	2c00      	cmp	r4, #0
 8010c4c:	d1f7      	bne.n	8010c3e <_fwalk_reent+0xe>
 8010c4e:	4638      	mov	r0, r7
 8010c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c54:	89ab      	ldrh	r3, [r5, #12]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d907      	bls.n	8010c6a <_fwalk_reent+0x3a>
 8010c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c5e:	3301      	adds	r3, #1
 8010c60:	d003      	beq.n	8010c6a <_fwalk_reent+0x3a>
 8010c62:	4629      	mov	r1, r5
 8010c64:	4630      	mov	r0, r6
 8010c66:	47c0      	blx	r8
 8010c68:	4307      	orrs	r7, r0
 8010c6a:	3568      	adds	r5, #104	; 0x68
 8010c6c:	e7e9      	b.n	8010c42 <_fwalk_reent+0x12>
	...

08010c70 <_lseek_r>:
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	4d07      	ldr	r5, [pc, #28]	; (8010c90 <_lseek_r+0x20>)
 8010c74:	4604      	mov	r4, r0
 8010c76:	4608      	mov	r0, r1
 8010c78:	4611      	mov	r1, r2
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	602a      	str	r2, [r5, #0]
 8010c7e:	461a      	mov	r2, r3
 8010c80:	f7f1 fb10 	bl	80022a4 <_lseek>
 8010c84:	1c43      	adds	r3, r0, #1
 8010c86:	d102      	bne.n	8010c8e <_lseek_r+0x1e>
 8010c88:	682b      	ldr	r3, [r5, #0]
 8010c8a:	b103      	cbz	r3, 8010c8e <_lseek_r+0x1e>
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	bd38      	pop	{r3, r4, r5, pc}
 8010c90:	20008e04 	.word	0x20008e04

08010c94 <__swhatbuf_r>:
 8010c94:	b570      	push	{r4, r5, r6, lr}
 8010c96:	460e      	mov	r6, r1
 8010c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c9c:	2900      	cmp	r1, #0
 8010c9e:	b096      	sub	sp, #88	; 0x58
 8010ca0:	4614      	mov	r4, r2
 8010ca2:	461d      	mov	r5, r3
 8010ca4:	da07      	bge.n	8010cb6 <__swhatbuf_r+0x22>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	602b      	str	r3, [r5, #0]
 8010caa:	89b3      	ldrh	r3, [r6, #12]
 8010cac:	061a      	lsls	r2, r3, #24
 8010cae:	d410      	bmi.n	8010cd2 <__swhatbuf_r+0x3e>
 8010cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cb4:	e00e      	b.n	8010cd4 <__swhatbuf_r+0x40>
 8010cb6:	466a      	mov	r2, sp
 8010cb8:	f000 fcfe 	bl	80116b8 <_fstat_r>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	dbf2      	blt.n	8010ca6 <__swhatbuf_r+0x12>
 8010cc0:	9a01      	ldr	r2, [sp, #4]
 8010cc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010cc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010cca:	425a      	negs	r2, r3
 8010ccc:	415a      	adcs	r2, r3
 8010cce:	602a      	str	r2, [r5, #0]
 8010cd0:	e7ee      	b.n	8010cb0 <__swhatbuf_r+0x1c>
 8010cd2:	2340      	movs	r3, #64	; 0x40
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	6023      	str	r3, [r4, #0]
 8010cd8:	b016      	add	sp, #88	; 0x58
 8010cda:	bd70      	pop	{r4, r5, r6, pc}

08010cdc <__smakebuf_r>:
 8010cdc:	898b      	ldrh	r3, [r1, #12]
 8010cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ce0:	079d      	lsls	r5, r3, #30
 8010ce2:	4606      	mov	r6, r0
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	d507      	bpl.n	8010cf8 <__smakebuf_r+0x1c>
 8010ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010cec:	6023      	str	r3, [r4, #0]
 8010cee:	6123      	str	r3, [r4, #16]
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	6163      	str	r3, [r4, #20]
 8010cf4:	b002      	add	sp, #8
 8010cf6:	bd70      	pop	{r4, r5, r6, pc}
 8010cf8:	ab01      	add	r3, sp, #4
 8010cfa:	466a      	mov	r2, sp
 8010cfc:	f7ff ffca 	bl	8010c94 <__swhatbuf_r>
 8010d00:	9900      	ldr	r1, [sp, #0]
 8010d02:	4605      	mov	r5, r0
 8010d04:	4630      	mov	r0, r6
 8010d06:	f7fe fb75 	bl	800f3f4 <_malloc_r>
 8010d0a:	b948      	cbnz	r0, 8010d20 <__smakebuf_r+0x44>
 8010d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d10:	059a      	lsls	r2, r3, #22
 8010d12:	d4ef      	bmi.n	8010cf4 <__smakebuf_r+0x18>
 8010d14:	f023 0303 	bic.w	r3, r3, #3
 8010d18:	f043 0302 	orr.w	r3, r3, #2
 8010d1c:	81a3      	strh	r3, [r4, #12]
 8010d1e:	e7e3      	b.n	8010ce8 <__smakebuf_r+0xc>
 8010d20:	4b0d      	ldr	r3, [pc, #52]	; (8010d58 <__smakebuf_r+0x7c>)
 8010d22:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d24:	89a3      	ldrh	r3, [r4, #12]
 8010d26:	6020      	str	r0, [r4, #0]
 8010d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d2c:	81a3      	strh	r3, [r4, #12]
 8010d2e:	9b00      	ldr	r3, [sp, #0]
 8010d30:	6163      	str	r3, [r4, #20]
 8010d32:	9b01      	ldr	r3, [sp, #4]
 8010d34:	6120      	str	r0, [r4, #16]
 8010d36:	b15b      	cbz	r3, 8010d50 <__smakebuf_r+0x74>
 8010d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f000 fccd 	bl	80116dc <_isatty_r>
 8010d42:	b128      	cbz	r0, 8010d50 <__smakebuf_r+0x74>
 8010d44:	89a3      	ldrh	r3, [r4, #12]
 8010d46:	f023 0303 	bic.w	r3, r3, #3
 8010d4a:	f043 0301 	orr.w	r3, r3, #1
 8010d4e:	81a3      	strh	r3, [r4, #12]
 8010d50:	89a0      	ldrh	r0, [r4, #12]
 8010d52:	4305      	orrs	r5, r0
 8010d54:	81a5      	strh	r5, [r4, #12]
 8010d56:	e7cd      	b.n	8010cf4 <__smakebuf_r+0x18>
 8010d58:	08010acd 	.word	0x08010acd

08010d5c <memmove>:
 8010d5c:	4288      	cmp	r0, r1
 8010d5e:	b510      	push	{r4, lr}
 8010d60:	eb01 0402 	add.w	r4, r1, r2
 8010d64:	d902      	bls.n	8010d6c <memmove+0x10>
 8010d66:	4284      	cmp	r4, r0
 8010d68:	4623      	mov	r3, r4
 8010d6a:	d807      	bhi.n	8010d7c <memmove+0x20>
 8010d6c:	1e43      	subs	r3, r0, #1
 8010d6e:	42a1      	cmp	r1, r4
 8010d70:	d008      	beq.n	8010d84 <memmove+0x28>
 8010d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d7a:	e7f8      	b.n	8010d6e <memmove+0x12>
 8010d7c:	4402      	add	r2, r0
 8010d7e:	4601      	mov	r1, r0
 8010d80:	428a      	cmp	r2, r1
 8010d82:	d100      	bne.n	8010d86 <memmove+0x2a>
 8010d84:	bd10      	pop	{r4, pc}
 8010d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d8e:	e7f7      	b.n	8010d80 <memmove+0x24>

08010d90 <_realloc_r>:
 8010d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d92:	4607      	mov	r7, r0
 8010d94:	4614      	mov	r4, r2
 8010d96:	460e      	mov	r6, r1
 8010d98:	b921      	cbnz	r1, 8010da4 <_realloc_r+0x14>
 8010d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d9e:	4611      	mov	r1, r2
 8010da0:	f7fe bb28 	b.w	800f3f4 <_malloc_r>
 8010da4:	b922      	cbnz	r2, 8010db0 <_realloc_r+0x20>
 8010da6:	f7fe fad5 	bl	800f354 <_free_r>
 8010daa:	4625      	mov	r5, r4
 8010dac:	4628      	mov	r0, r5
 8010dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010db0:	f000 fca4 	bl	80116fc <_malloc_usable_size_r>
 8010db4:	42a0      	cmp	r0, r4
 8010db6:	d20f      	bcs.n	8010dd8 <_realloc_r+0x48>
 8010db8:	4621      	mov	r1, r4
 8010dba:	4638      	mov	r0, r7
 8010dbc:	f7fe fb1a 	bl	800f3f4 <_malloc_r>
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	d0f2      	beq.n	8010dac <_realloc_r+0x1c>
 8010dc6:	4631      	mov	r1, r6
 8010dc8:	4622      	mov	r2, r4
 8010dca:	f7fe faad 	bl	800f328 <memcpy>
 8010dce:	4631      	mov	r1, r6
 8010dd0:	4638      	mov	r0, r7
 8010dd2:	f7fe fabf 	bl	800f354 <_free_r>
 8010dd6:	e7e9      	b.n	8010dac <_realloc_r+0x1c>
 8010dd8:	4635      	mov	r5, r6
 8010dda:	e7e7      	b.n	8010dac <_realloc_r+0x1c>

08010ddc <_sungetc_r>:
 8010ddc:	b538      	push	{r3, r4, r5, lr}
 8010dde:	1c4b      	adds	r3, r1, #1
 8010de0:	4614      	mov	r4, r2
 8010de2:	d103      	bne.n	8010dec <_sungetc_r+0x10>
 8010de4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010de8:	4628      	mov	r0, r5
 8010dea:	bd38      	pop	{r3, r4, r5, pc}
 8010dec:	8993      	ldrh	r3, [r2, #12]
 8010dee:	f023 0320 	bic.w	r3, r3, #32
 8010df2:	8193      	strh	r3, [r2, #12]
 8010df4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010df6:	6852      	ldr	r2, [r2, #4]
 8010df8:	b2cd      	uxtb	r5, r1
 8010dfa:	b18b      	cbz	r3, 8010e20 <_sungetc_r+0x44>
 8010dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	dd08      	ble.n	8010e14 <_sungetc_r+0x38>
 8010e02:	6823      	ldr	r3, [r4, #0]
 8010e04:	1e5a      	subs	r2, r3, #1
 8010e06:	6022      	str	r2, [r4, #0]
 8010e08:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010e0c:	6863      	ldr	r3, [r4, #4]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	6063      	str	r3, [r4, #4]
 8010e12:	e7e9      	b.n	8010de8 <_sungetc_r+0xc>
 8010e14:	4621      	mov	r1, r4
 8010e16:	f000 fc15 	bl	8011644 <__submore>
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	d0f1      	beq.n	8010e02 <_sungetc_r+0x26>
 8010e1e:	e7e1      	b.n	8010de4 <_sungetc_r+0x8>
 8010e20:	6921      	ldr	r1, [r4, #16]
 8010e22:	6823      	ldr	r3, [r4, #0]
 8010e24:	b151      	cbz	r1, 8010e3c <_sungetc_r+0x60>
 8010e26:	4299      	cmp	r1, r3
 8010e28:	d208      	bcs.n	8010e3c <_sungetc_r+0x60>
 8010e2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010e2e:	42a9      	cmp	r1, r5
 8010e30:	d104      	bne.n	8010e3c <_sungetc_r+0x60>
 8010e32:	3b01      	subs	r3, #1
 8010e34:	3201      	adds	r2, #1
 8010e36:	6023      	str	r3, [r4, #0]
 8010e38:	6062      	str	r2, [r4, #4]
 8010e3a:	e7d5      	b.n	8010de8 <_sungetc_r+0xc>
 8010e3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e44:	6363      	str	r3, [r4, #52]	; 0x34
 8010e46:	2303      	movs	r3, #3
 8010e48:	63a3      	str	r3, [r4, #56]	; 0x38
 8010e4a:	4623      	mov	r3, r4
 8010e4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010e50:	6023      	str	r3, [r4, #0]
 8010e52:	2301      	movs	r3, #1
 8010e54:	e7dc      	b.n	8010e10 <_sungetc_r+0x34>

08010e56 <__ssrefill_r>:
 8010e56:	b510      	push	{r4, lr}
 8010e58:	460c      	mov	r4, r1
 8010e5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010e5c:	b169      	cbz	r1, 8010e7a <__ssrefill_r+0x24>
 8010e5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e62:	4299      	cmp	r1, r3
 8010e64:	d001      	beq.n	8010e6a <__ssrefill_r+0x14>
 8010e66:	f7fe fa75 	bl	800f354 <_free_r>
 8010e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e6c:	6063      	str	r3, [r4, #4]
 8010e6e:	2000      	movs	r0, #0
 8010e70:	6360      	str	r0, [r4, #52]	; 0x34
 8010e72:	b113      	cbz	r3, 8010e7a <__ssrefill_r+0x24>
 8010e74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010e76:	6023      	str	r3, [r4, #0]
 8010e78:	bd10      	pop	{r4, pc}
 8010e7a:	6923      	ldr	r3, [r4, #16]
 8010e7c:	6023      	str	r3, [r4, #0]
 8010e7e:	2300      	movs	r3, #0
 8010e80:	6063      	str	r3, [r4, #4]
 8010e82:	89a3      	ldrh	r3, [r4, #12]
 8010e84:	f043 0320 	orr.w	r3, r3, #32
 8010e88:	81a3      	strh	r3, [r4, #12]
 8010e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e8e:	e7f3      	b.n	8010e78 <__ssrefill_r+0x22>

08010e90 <__ssvfiscanf_r>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	460c      	mov	r4, r1
 8010e96:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8010e9a:	2100      	movs	r1, #0
 8010e9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010ea0:	49b2      	ldr	r1, [pc, #712]	; (801116c <__ssvfiscanf_r+0x2dc>)
 8010ea2:	91a0      	str	r1, [sp, #640]	; 0x280
 8010ea4:	f10d 0804 	add.w	r8, sp, #4
 8010ea8:	49b1      	ldr	r1, [pc, #708]	; (8011170 <__ssvfiscanf_r+0x2e0>)
 8010eaa:	4fb2      	ldr	r7, [pc, #712]	; (8011174 <__ssvfiscanf_r+0x2e4>)
 8010eac:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8011178 <__ssvfiscanf_r+0x2e8>
 8010eb0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	91a1      	str	r1, [sp, #644]	; 0x284
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	f892 a000 	ldrb.w	sl, [r2]
 8010ebe:	f1ba 0f00 	cmp.w	sl, #0
 8010ec2:	f000 8151 	beq.w	8011168 <__ssvfiscanf_r+0x2d8>
 8010ec6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010eca:	f013 0308 	ands.w	r3, r3, #8
 8010ece:	f102 0501 	add.w	r5, r2, #1
 8010ed2:	d019      	beq.n	8010f08 <__ssvfiscanf_r+0x78>
 8010ed4:	6863      	ldr	r3, [r4, #4]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	dd0f      	ble.n	8010efa <__ssvfiscanf_r+0x6a>
 8010eda:	6823      	ldr	r3, [r4, #0]
 8010edc:	781a      	ldrb	r2, [r3, #0]
 8010ede:	5cba      	ldrb	r2, [r7, r2]
 8010ee0:	0712      	lsls	r2, r2, #28
 8010ee2:	d401      	bmi.n	8010ee8 <__ssvfiscanf_r+0x58>
 8010ee4:	462a      	mov	r2, r5
 8010ee6:	e7e8      	b.n	8010eba <__ssvfiscanf_r+0x2a>
 8010ee8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010eea:	3201      	adds	r2, #1
 8010eec:	9245      	str	r2, [sp, #276]	; 0x114
 8010eee:	6862      	ldr	r2, [r4, #4]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	3a01      	subs	r2, #1
 8010ef4:	6062      	str	r2, [r4, #4]
 8010ef6:	6023      	str	r3, [r4, #0]
 8010ef8:	e7ec      	b.n	8010ed4 <__ssvfiscanf_r+0x44>
 8010efa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010efc:	4621      	mov	r1, r4
 8010efe:	4630      	mov	r0, r6
 8010f00:	4798      	blx	r3
 8010f02:	2800      	cmp	r0, #0
 8010f04:	d0e9      	beq.n	8010eda <__ssvfiscanf_r+0x4a>
 8010f06:	e7ed      	b.n	8010ee4 <__ssvfiscanf_r+0x54>
 8010f08:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8010f0c:	f040 8083 	bne.w	8011016 <__ssvfiscanf_r+0x186>
 8010f10:	9341      	str	r3, [sp, #260]	; 0x104
 8010f12:	9343      	str	r3, [sp, #268]	; 0x10c
 8010f14:	7853      	ldrb	r3, [r2, #1]
 8010f16:	2b2a      	cmp	r3, #42	; 0x2a
 8010f18:	bf02      	ittt	eq
 8010f1a:	2310      	moveq	r3, #16
 8010f1c:	1c95      	addeq	r5, r2, #2
 8010f1e:	9341      	streq	r3, [sp, #260]	; 0x104
 8010f20:	220a      	movs	r2, #10
 8010f22:	46ab      	mov	fp, r5
 8010f24:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8010f28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010f2c:	2b09      	cmp	r3, #9
 8010f2e:	d91d      	bls.n	8010f6c <__ssvfiscanf_r+0xdc>
 8010f30:	4891      	ldr	r0, [pc, #580]	; (8011178 <__ssvfiscanf_r+0x2e8>)
 8010f32:	2203      	movs	r2, #3
 8010f34:	f7ef f9ec 	bl	8000310 <memchr>
 8010f38:	b140      	cbz	r0, 8010f4c <__ssvfiscanf_r+0xbc>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	eba0 0009 	sub.w	r0, r0, r9
 8010f40:	fa03 f000 	lsl.w	r0, r3, r0
 8010f44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010f46:	4318      	orrs	r0, r3
 8010f48:	9041      	str	r0, [sp, #260]	; 0x104
 8010f4a:	465d      	mov	r5, fp
 8010f4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010f50:	2b78      	cmp	r3, #120	; 0x78
 8010f52:	d806      	bhi.n	8010f62 <__ssvfiscanf_r+0xd2>
 8010f54:	2b57      	cmp	r3, #87	; 0x57
 8010f56:	d810      	bhi.n	8010f7a <__ssvfiscanf_r+0xea>
 8010f58:	2b25      	cmp	r3, #37	; 0x25
 8010f5a:	d05c      	beq.n	8011016 <__ssvfiscanf_r+0x186>
 8010f5c:	d856      	bhi.n	801100c <__ssvfiscanf_r+0x17c>
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d074      	beq.n	801104c <__ssvfiscanf_r+0x1bc>
 8010f62:	2303      	movs	r3, #3
 8010f64:	9347      	str	r3, [sp, #284]	; 0x11c
 8010f66:	230a      	movs	r3, #10
 8010f68:	9342      	str	r3, [sp, #264]	; 0x108
 8010f6a:	e081      	b.n	8011070 <__ssvfiscanf_r+0x1e0>
 8010f6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010f6e:	fb02 1303 	mla	r3, r2, r3, r1
 8010f72:	3b30      	subs	r3, #48	; 0x30
 8010f74:	9343      	str	r3, [sp, #268]	; 0x10c
 8010f76:	465d      	mov	r5, fp
 8010f78:	e7d3      	b.n	8010f22 <__ssvfiscanf_r+0x92>
 8010f7a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010f7e:	2a20      	cmp	r2, #32
 8010f80:	d8ef      	bhi.n	8010f62 <__ssvfiscanf_r+0xd2>
 8010f82:	a101      	add	r1, pc, #4	; (adr r1, 8010f88 <__ssvfiscanf_r+0xf8>)
 8010f84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010f88:	0801105b 	.word	0x0801105b
 8010f8c:	08010f63 	.word	0x08010f63
 8010f90:	08010f63 	.word	0x08010f63
 8010f94:	080110b9 	.word	0x080110b9
 8010f98:	08010f63 	.word	0x08010f63
 8010f9c:	08010f63 	.word	0x08010f63
 8010fa0:	08010f63 	.word	0x08010f63
 8010fa4:	08010f63 	.word	0x08010f63
 8010fa8:	08010f63 	.word	0x08010f63
 8010fac:	08010f63 	.word	0x08010f63
 8010fb0:	08010f63 	.word	0x08010f63
 8010fb4:	080110cf 	.word	0x080110cf
 8010fb8:	080110a5 	.word	0x080110a5
 8010fbc:	08011013 	.word	0x08011013
 8010fc0:	08011013 	.word	0x08011013
 8010fc4:	08011013 	.word	0x08011013
 8010fc8:	08010f63 	.word	0x08010f63
 8010fcc:	080110a9 	.word	0x080110a9
 8010fd0:	08010f63 	.word	0x08010f63
 8010fd4:	08010f63 	.word	0x08010f63
 8010fd8:	08010f63 	.word	0x08010f63
 8010fdc:	08010f63 	.word	0x08010f63
 8010fe0:	080110df 	.word	0x080110df
 8010fe4:	080110b1 	.word	0x080110b1
 8010fe8:	08011053 	.word	0x08011053
 8010fec:	08010f63 	.word	0x08010f63
 8010ff0:	08010f63 	.word	0x08010f63
 8010ff4:	080110db 	.word	0x080110db
 8010ff8:	08010f63 	.word	0x08010f63
 8010ffc:	080110a5 	.word	0x080110a5
 8011000:	08010f63 	.word	0x08010f63
 8011004:	08010f63 	.word	0x08010f63
 8011008:	0801105b 	.word	0x0801105b
 801100c:	3b45      	subs	r3, #69	; 0x45
 801100e:	2b02      	cmp	r3, #2
 8011010:	d8a7      	bhi.n	8010f62 <__ssvfiscanf_r+0xd2>
 8011012:	2305      	movs	r3, #5
 8011014:	e02b      	b.n	801106e <__ssvfiscanf_r+0x1de>
 8011016:	6863      	ldr	r3, [r4, #4]
 8011018:	2b00      	cmp	r3, #0
 801101a:	dd0d      	ble.n	8011038 <__ssvfiscanf_r+0x1a8>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	781a      	ldrb	r2, [r3, #0]
 8011020:	4552      	cmp	r2, sl
 8011022:	f040 80a1 	bne.w	8011168 <__ssvfiscanf_r+0x2d8>
 8011026:	3301      	adds	r3, #1
 8011028:	6862      	ldr	r2, [r4, #4]
 801102a:	6023      	str	r3, [r4, #0]
 801102c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801102e:	3a01      	subs	r2, #1
 8011030:	3301      	adds	r3, #1
 8011032:	6062      	str	r2, [r4, #4]
 8011034:	9345      	str	r3, [sp, #276]	; 0x114
 8011036:	e755      	b.n	8010ee4 <__ssvfiscanf_r+0x54>
 8011038:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801103a:	4621      	mov	r1, r4
 801103c:	4630      	mov	r0, r6
 801103e:	4798      	blx	r3
 8011040:	2800      	cmp	r0, #0
 8011042:	d0eb      	beq.n	801101c <__ssvfiscanf_r+0x18c>
 8011044:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011046:	2800      	cmp	r0, #0
 8011048:	f040 8084 	bne.w	8011154 <__ssvfiscanf_r+0x2c4>
 801104c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011050:	e086      	b.n	8011160 <__ssvfiscanf_r+0x2d0>
 8011052:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011054:	f042 0220 	orr.w	r2, r2, #32
 8011058:	9241      	str	r2, [sp, #260]	; 0x104
 801105a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801105c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011060:	9241      	str	r2, [sp, #260]	; 0x104
 8011062:	2210      	movs	r2, #16
 8011064:	2b6f      	cmp	r3, #111	; 0x6f
 8011066:	9242      	str	r2, [sp, #264]	; 0x108
 8011068:	bf34      	ite	cc
 801106a:	2303      	movcc	r3, #3
 801106c:	2304      	movcs	r3, #4
 801106e:	9347      	str	r3, [sp, #284]	; 0x11c
 8011070:	6863      	ldr	r3, [r4, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	dd41      	ble.n	80110fa <__ssvfiscanf_r+0x26a>
 8011076:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011078:	0659      	lsls	r1, r3, #25
 801107a:	d404      	bmi.n	8011086 <__ssvfiscanf_r+0x1f6>
 801107c:	6823      	ldr	r3, [r4, #0]
 801107e:	781a      	ldrb	r2, [r3, #0]
 8011080:	5cba      	ldrb	r2, [r7, r2]
 8011082:	0712      	lsls	r2, r2, #28
 8011084:	d440      	bmi.n	8011108 <__ssvfiscanf_r+0x278>
 8011086:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011088:	2b02      	cmp	r3, #2
 801108a:	dc4f      	bgt.n	801112c <__ssvfiscanf_r+0x29c>
 801108c:	466b      	mov	r3, sp
 801108e:	4622      	mov	r2, r4
 8011090:	a941      	add	r1, sp, #260	; 0x104
 8011092:	4630      	mov	r0, r6
 8011094:	f000 f874 	bl	8011180 <_scanf_chars>
 8011098:	2801      	cmp	r0, #1
 801109a:	d065      	beq.n	8011168 <__ssvfiscanf_r+0x2d8>
 801109c:	2802      	cmp	r0, #2
 801109e:	f47f af21 	bne.w	8010ee4 <__ssvfiscanf_r+0x54>
 80110a2:	e7cf      	b.n	8011044 <__ssvfiscanf_r+0x1b4>
 80110a4:	220a      	movs	r2, #10
 80110a6:	e7dd      	b.n	8011064 <__ssvfiscanf_r+0x1d4>
 80110a8:	2300      	movs	r3, #0
 80110aa:	9342      	str	r3, [sp, #264]	; 0x108
 80110ac:	2303      	movs	r3, #3
 80110ae:	e7de      	b.n	801106e <__ssvfiscanf_r+0x1de>
 80110b0:	2308      	movs	r3, #8
 80110b2:	9342      	str	r3, [sp, #264]	; 0x108
 80110b4:	2304      	movs	r3, #4
 80110b6:	e7da      	b.n	801106e <__ssvfiscanf_r+0x1de>
 80110b8:	4629      	mov	r1, r5
 80110ba:	4640      	mov	r0, r8
 80110bc:	f000 f9be 	bl	801143c <__sccl>
 80110c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110c6:	9341      	str	r3, [sp, #260]	; 0x104
 80110c8:	4605      	mov	r5, r0
 80110ca:	2301      	movs	r3, #1
 80110cc:	e7cf      	b.n	801106e <__ssvfiscanf_r+0x1de>
 80110ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80110d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110d4:	9341      	str	r3, [sp, #260]	; 0x104
 80110d6:	2300      	movs	r3, #0
 80110d8:	e7c9      	b.n	801106e <__ssvfiscanf_r+0x1de>
 80110da:	2302      	movs	r3, #2
 80110dc:	e7c7      	b.n	801106e <__ssvfiscanf_r+0x1de>
 80110de:	9841      	ldr	r0, [sp, #260]	; 0x104
 80110e0:	06c3      	lsls	r3, r0, #27
 80110e2:	f53f aeff 	bmi.w	8010ee4 <__ssvfiscanf_r+0x54>
 80110e6:	9b00      	ldr	r3, [sp, #0]
 80110e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80110ea:	1d19      	adds	r1, r3, #4
 80110ec:	9100      	str	r1, [sp, #0]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	07c0      	lsls	r0, r0, #31
 80110f2:	bf4c      	ite	mi
 80110f4:	801a      	strhmi	r2, [r3, #0]
 80110f6:	601a      	strpl	r2, [r3, #0]
 80110f8:	e6f4      	b.n	8010ee4 <__ssvfiscanf_r+0x54>
 80110fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80110fc:	4621      	mov	r1, r4
 80110fe:	4630      	mov	r0, r6
 8011100:	4798      	blx	r3
 8011102:	2800      	cmp	r0, #0
 8011104:	d0b7      	beq.n	8011076 <__ssvfiscanf_r+0x1e6>
 8011106:	e79d      	b.n	8011044 <__ssvfiscanf_r+0x1b4>
 8011108:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801110a:	3201      	adds	r2, #1
 801110c:	9245      	str	r2, [sp, #276]	; 0x114
 801110e:	6862      	ldr	r2, [r4, #4]
 8011110:	3a01      	subs	r2, #1
 8011112:	2a00      	cmp	r2, #0
 8011114:	6062      	str	r2, [r4, #4]
 8011116:	dd02      	ble.n	801111e <__ssvfiscanf_r+0x28e>
 8011118:	3301      	adds	r3, #1
 801111a:	6023      	str	r3, [r4, #0]
 801111c:	e7ae      	b.n	801107c <__ssvfiscanf_r+0x1ec>
 801111e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011120:	4621      	mov	r1, r4
 8011122:	4630      	mov	r0, r6
 8011124:	4798      	blx	r3
 8011126:	2800      	cmp	r0, #0
 8011128:	d0a8      	beq.n	801107c <__ssvfiscanf_r+0x1ec>
 801112a:	e78b      	b.n	8011044 <__ssvfiscanf_r+0x1b4>
 801112c:	2b04      	cmp	r3, #4
 801112e:	dc06      	bgt.n	801113e <__ssvfiscanf_r+0x2ae>
 8011130:	466b      	mov	r3, sp
 8011132:	4622      	mov	r2, r4
 8011134:	a941      	add	r1, sp, #260	; 0x104
 8011136:	4630      	mov	r0, r6
 8011138:	f000 f87a 	bl	8011230 <_scanf_i>
 801113c:	e7ac      	b.n	8011098 <__ssvfiscanf_r+0x208>
 801113e:	4b0f      	ldr	r3, [pc, #60]	; (801117c <__ssvfiscanf_r+0x2ec>)
 8011140:	2b00      	cmp	r3, #0
 8011142:	f43f aecf 	beq.w	8010ee4 <__ssvfiscanf_r+0x54>
 8011146:	466b      	mov	r3, sp
 8011148:	4622      	mov	r2, r4
 801114a:	a941      	add	r1, sp, #260	; 0x104
 801114c:	4630      	mov	r0, r6
 801114e:	f3af 8000 	nop.w
 8011152:	e7a1      	b.n	8011098 <__ssvfiscanf_r+0x208>
 8011154:	89a3      	ldrh	r3, [r4, #12]
 8011156:	f013 0f40 	tst.w	r3, #64	; 0x40
 801115a:	bf18      	it	ne
 801115c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8011160:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8011164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011168:	9844      	ldr	r0, [sp, #272]	; 0x110
 801116a:	e7f9      	b.n	8011160 <__ssvfiscanf_r+0x2d0>
 801116c:	08010ddd 	.word	0x08010ddd
 8011170:	08010e57 	.word	0x08010e57
 8011174:	08012750 	.word	0x08012750
 8011178:	08012722 	.word	0x08012722
 801117c:	00000000 	.word	0x00000000

08011180 <_scanf_chars>:
 8011180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011184:	4615      	mov	r5, r2
 8011186:	688a      	ldr	r2, [r1, #8]
 8011188:	4680      	mov	r8, r0
 801118a:	460c      	mov	r4, r1
 801118c:	b932      	cbnz	r2, 801119c <_scanf_chars+0x1c>
 801118e:	698a      	ldr	r2, [r1, #24]
 8011190:	2a00      	cmp	r2, #0
 8011192:	bf0c      	ite	eq
 8011194:	2201      	moveq	r2, #1
 8011196:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 801119a:	608a      	str	r2, [r1, #8]
 801119c:	6822      	ldr	r2, [r4, #0]
 801119e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801122c <_scanf_chars+0xac>
 80111a2:	06d1      	lsls	r1, r2, #27
 80111a4:	bf5f      	itttt	pl
 80111a6:	681a      	ldrpl	r2, [r3, #0]
 80111a8:	1d11      	addpl	r1, r2, #4
 80111aa:	6019      	strpl	r1, [r3, #0]
 80111ac:	6816      	ldrpl	r6, [r2, #0]
 80111ae:	2700      	movs	r7, #0
 80111b0:	69a0      	ldr	r0, [r4, #24]
 80111b2:	b188      	cbz	r0, 80111d8 <_scanf_chars+0x58>
 80111b4:	2801      	cmp	r0, #1
 80111b6:	d107      	bne.n	80111c8 <_scanf_chars+0x48>
 80111b8:	682b      	ldr	r3, [r5, #0]
 80111ba:	781a      	ldrb	r2, [r3, #0]
 80111bc:	6963      	ldr	r3, [r4, #20]
 80111be:	5c9b      	ldrb	r3, [r3, r2]
 80111c0:	b953      	cbnz	r3, 80111d8 <_scanf_chars+0x58>
 80111c2:	bb27      	cbnz	r7, 801120e <_scanf_chars+0x8e>
 80111c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111c8:	2802      	cmp	r0, #2
 80111ca:	d120      	bne.n	801120e <_scanf_chars+0x8e>
 80111cc:	682b      	ldr	r3, [r5, #0]
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80111d4:	071b      	lsls	r3, r3, #28
 80111d6:	d41a      	bmi.n	801120e <_scanf_chars+0x8e>
 80111d8:	6823      	ldr	r3, [r4, #0]
 80111da:	06da      	lsls	r2, r3, #27
 80111dc:	bf5e      	ittt	pl
 80111de:	682b      	ldrpl	r3, [r5, #0]
 80111e0:	781b      	ldrbpl	r3, [r3, #0]
 80111e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80111e6:	682a      	ldr	r2, [r5, #0]
 80111e8:	686b      	ldr	r3, [r5, #4]
 80111ea:	3201      	adds	r2, #1
 80111ec:	602a      	str	r2, [r5, #0]
 80111ee:	68a2      	ldr	r2, [r4, #8]
 80111f0:	3b01      	subs	r3, #1
 80111f2:	3a01      	subs	r2, #1
 80111f4:	606b      	str	r3, [r5, #4]
 80111f6:	3701      	adds	r7, #1
 80111f8:	60a2      	str	r2, [r4, #8]
 80111fa:	b142      	cbz	r2, 801120e <_scanf_chars+0x8e>
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	dcd7      	bgt.n	80111b0 <_scanf_chars+0x30>
 8011200:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011204:	4629      	mov	r1, r5
 8011206:	4640      	mov	r0, r8
 8011208:	4798      	blx	r3
 801120a:	2800      	cmp	r0, #0
 801120c:	d0d0      	beq.n	80111b0 <_scanf_chars+0x30>
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	f013 0310 	ands.w	r3, r3, #16
 8011214:	d105      	bne.n	8011222 <_scanf_chars+0xa2>
 8011216:	68e2      	ldr	r2, [r4, #12]
 8011218:	3201      	adds	r2, #1
 801121a:	60e2      	str	r2, [r4, #12]
 801121c:	69a2      	ldr	r2, [r4, #24]
 801121e:	b102      	cbz	r2, 8011222 <_scanf_chars+0xa2>
 8011220:	7033      	strb	r3, [r6, #0]
 8011222:	6923      	ldr	r3, [r4, #16]
 8011224:	441f      	add	r7, r3
 8011226:	6127      	str	r7, [r4, #16]
 8011228:	2000      	movs	r0, #0
 801122a:	e7cb      	b.n	80111c4 <_scanf_chars+0x44>
 801122c:	08012750 	.word	0x08012750

08011230 <_scanf_i>:
 8011230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011234:	4698      	mov	r8, r3
 8011236:	4b74      	ldr	r3, [pc, #464]	; (8011408 <_scanf_i+0x1d8>)
 8011238:	460c      	mov	r4, r1
 801123a:	4682      	mov	sl, r0
 801123c:	4616      	mov	r6, r2
 801123e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011242:	b087      	sub	sp, #28
 8011244:	ab03      	add	r3, sp, #12
 8011246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801124a:	4b70      	ldr	r3, [pc, #448]	; (801140c <_scanf_i+0x1dc>)
 801124c:	69a1      	ldr	r1, [r4, #24]
 801124e:	4a70      	ldr	r2, [pc, #448]	; (8011410 <_scanf_i+0x1e0>)
 8011250:	2903      	cmp	r1, #3
 8011252:	bf18      	it	ne
 8011254:	461a      	movne	r2, r3
 8011256:	68a3      	ldr	r3, [r4, #8]
 8011258:	9201      	str	r2, [sp, #4]
 801125a:	1e5a      	subs	r2, r3, #1
 801125c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011260:	bf88      	it	hi
 8011262:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011266:	4627      	mov	r7, r4
 8011268:	bf82      	ittt	hi
 801126a:	eb03 0905 	addhi.w	r9, r3, r5
 801126e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011272:	60a3      	strhi	r3, [r4, #8]
 8011274:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011278:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801127c:	bf98      	it	ls
 801127e:	f04f 0900 	movls.w	r9, #0
 8011282:	6023      	str	r3, [r4, #0]
 8011284:	463d      	mov	r5, r7
 8011286:	f04f 0b00 	mov.w	fp, #0
 801128a:	6831      	ldr	r1, [r6, #0]
 801128c:	ab03      	add	r3, sp, #12
 801128e:	7809      	ldrb	r1, [r1, #0]
 8011290:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011294:	2202      	movs	r2, #2
 8011296:	f7ef f83b 	bl	8000310 <memchr>
 801129a:	b328      	cbz	r0, 80112e8 <_scanf_i+0xb8>
 801129c:	f1bb 0f01 	cmp.w	fp, #1
 80112a0:	d159      	bne.n	8011356 <_scanf_i+0x126>
 80112a2:	6862      	ldr	r2, [r4, #4]
 80112a4:	b92a      	cbnz	r2, 80112b2 <_scanf_i+0x82>
 80112a6:	6822      	ldr	r2, [r4, #0]
 80112a8:	2308      	movs	r3, #8
 80112aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80112ae:	6063      	str	r3, [r4, #4]
 80112b0:	6022      	str	r2, [r4, #0]
 80112b2:	6822      	ldr	r2, [r4, #0]
 80112b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80112b8:	6022      	str	r2, [r4, #0]
 80112ba:	68a2      	ldr	r2, [r4, #8]
 80112bc:	1e51      	subs	r1, r2, #1
 80112be:	60a1      	str	r1, [r4, #8]
 80112c0:	b192      	cbz	r2, 80112e8 <_scanf_i+0xb8>
 80112c2:	6832      	ldr	r2, [r6, #0]
 80112c4:	1c51      	adds	r1, r2, #1
 80112c6:	6031      	str	r1, [r6, #0]
 80112c8:	7812      	ldrb	r2, [r2, #0]
 80112ca:	f805 2b01 	strb.w	r2, [r5], #1
 80112ce:	6872      	ldr	r2, [r6, #4]
 80112d0:	3a01      	subs	r2, #1
 80112d2:	2a00      	cmp	r2, #0
 80112d4:	6072      	str	r2, [r6, #4]
 80112d6:	dc07      	bgt.n	80112e8 <_scanf_i+0xb8>
 80112d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80112dc:	4631      	mov	r1, r6
 80112de:	4650      	mov	r0, sl
 80112e0:	4790      	blx	r2
 80112e2:	2800      	cmp	r0, #0
 80112e4:	f040 8085 	bne.w	80113f2 <_scanf_i+0x1c2>
 80112e8:	f10b 0b01 	add.w	fp, fp, #1
 80112ec:	f1bb 0f03 	cmp.w	fp, #3
 80112f0:	d1cb      	bne.n	801128a <_scanf_i+0x5a>
 80112f2:	6863      	ldr	r3, [r4, #4]
 80112f4:	b90b      	cbnz	r3, 80112fa <_scanf_i+0xca>
 80112f6:	230a      	movs	r3, #10
 80112f8:	6063      	str	r3, [r4, #4]
 80112fa:	6863      	ldr	r3, [r4, #4]
 80112fc:	4945      	ldr	r1, [pc, #276]	; (8011414 <_scanf_i+0x1e4>)
 80112fe:	6960      	ldr	r0, [r4, #20]
 8011300:	1ac9      	subs	r1, r1, r3
 8011302:	f000 f89b 	bl	801143c <__sccl>
 8011306:	f04f 0b00 	mov.w	fp, #0
 801130a:	68a3      	ldr	r3, [r4, #8]
 801130c:	6822      	ldr	r2, [r4, #0]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d03d      	beq.n	801138e <_scanf_i+0x15e>
 8011312:	6831      	ldr	r1, [r6, #0]
 8011314:	6960      	ldr	r0, [r4, #20]
 8011316:	f891 c000 	ldrb.w	ip, [r1]
 801131a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801131e:	2800      	cmp	r0, #0
 8011320:	d035      	beq.n	801138e <_scanf_i+0x15e>
 8011322:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011326:	d124      	bne.n	8011372 <_scanf_i+0x142>
 8011328:	0510      	lsls	r0, r2, #20
 801132a:	d522      	bpl.n	8011372 <_scanf_i+0x142>
 801132c:	f10b 0b01 	add.w	fp, fp, #1
 8011330:	f1b9 0f00 	cmp.w	r9, #0
 8011334:	d003      	beq.n	801133e <_scanf_i+0x10e>
 8011336:	3301      	adds	r3, #1
 8011338:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801133c:	60a3      	str	r3, [r4, #8]
 801133e:	6873      	ldr	r3, [r6, #4]
 8011340:	3b01      	subs	r3, #1
 8011342:	2b00      	cmp	r3, #0
 8011344:	6073      	str	r3, [r6, #4]
 8011346:	dd1b      	ble.n	8011380 <_scanf_i+0x150>
 8011348:	6833      	ldr	r3, [r6, #0]
 801134a:	3301      	adds	r3, #1
 801134c:	6033      	str	r3, [r6, #0]
 801134e:	68a3      	ldr	r3, [r4, #8]
 8011350:	3b01      	subs	r3, #1
 8011352:	60a3      	str	r3, [r4, #8]
 8011354:	e7d9      	b.n	801130a <_scanf_i+0xda>
 8011356:	f1bb 0f02 	cmp.w	fp, #2
 801135a:	d1ae      	bne.n	80112ba <_scanf_i+0x8a>
 801135c:	6822      	ldr	r2, [r4, #0]
 801135e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011362:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011366:	d1bf      	bne.n	80112e8 <_scanf_i+0xb8>
 8011368:	2310      	movs	r3, #16
 801136a:	6063      	str	r3, [r4, #4]
 801136c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011370:	e7a2      	b.n	80112b8 <_scanf_i+0x88>
 8011372:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011376:	6022      	str	r2, [r4, #0]
 8011378:	780b      	ldrb	r3, [r1, #0]
 801137a:	f805 3b01 	strb.w	r3, [r5], #1
 801137e:	e7de      	b.n	801133e <_scanf_i+0x10e>
 8011380:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011384:	4631      	mov	r1, r6
 8011386:	4650      	mov	r0, sl
 8011388:	4798      	blx	r3
 801138a:	2800      	cmp	r0, #0
 801138c:	d0df      	beq.n	801134e <_scanf_i+0x11e>
 801138e:	6823      	ldr	r3, [r4, #0]
 8011390:	05d9      	lsls	r1, r3, #23
 8011392:	d50d      	bpl.n	80113b0 <_scanf_i+0x180>
 8011394:	42bd      	cmp	r5, r7
 8011396:	d909      	bls.n	80113ac <_scanf_i+0x17c>
 8011398:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801139c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113a0:	4632      	mov	r2, r6
 80113a2:	4650      	mov	r0, sl
 80113a4:	4798      	blx	r3
 80113a6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80113aa:	464d      	mov	r5, r9
 80113ac:	42bd      	cmp	r5, r7
 80113ae:	d028      	beq.n	8011402 <_scanf_i+0x1d2>
 80113b0:	6822      	ldr	r2, [r4, #0]
 80113b2:	f012 0210 	ands.w	r2, r2, #16
 80113b6:	d113      	bne.n	80113e0 <_scanf_i+0x1b0>
 80113b8:	702a      	strb	r2, [r5, #0]
 80113ba:	6863      	ldr	r3, [r4, #4]
 80113bc:	9e01      	ldr	r6, [sp, #4]
 80113be:	4639      	mov	r1, r7
 80113c0:	4650      	mov	r0, sl
 80113c2:	47b0      	blx	r6
 80113c4:	f8d8 3000 	ldr.w	r3, [r8]
 80113c8:	6821      	ldr	r1, [r4, #0]
 80113ca:	1d1a      	adds	r2, r3, #4
 80113cc:	f8c8 2000 	str.w	r2, [r8]
 80113d0:	f011 0f20 	tst.w	r1, #32
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	d00f      	beq.n	80113f8 <_scanf_i+0x1c8>
 80113d8:	6018      	str	r0, [r3, #0]
 80113da:	68e3      	ldr	r3, [r4, #12]
 80113dc:	3301      	adds	r3, #1
 80113de:	60e3      	str	r3, [r4, #12]
 80113e0:	1bed      	subs	r5, r5, r7
 80113e2:	44ab      	add	fp, r5
 80113e4:	6925      	ldr	r5, [r4, #16]
 80113e6:	445d      	add	r5, fp
 80113e8:	6125      	str	r5, [r4, #16]
 80113ea:	2000      	movs	r0, #0
 80113ec:	b007      	add	sp, #28
 80113ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f2:	f04f 0b00 	mov.w	fp, #0
 80113f6:	e7ca      	b.n	801138e <_scanf_i+0x15e>
 80113f8:	07ca      	lsls	r2, r1, #31
 80113fa:	bf4c      	ite	mi
 80113fc:	8018      	strhmi	r0, [r3, #0]
 80113fe:	6018      	strpl	r0, [r3, #0]
 8011400:	e7eb      	b.n	80113da <_scanf_i+0x1aa>
 8011402:	2001      	movs	r0, #1
 8011404:	e7f2      	b.n	80113ec <_scanf_i+0x1bc>
 8011406:	bf00      	nop
 8011408:	08012130 	.word	0x08012130
 801140c:	080106fd 	.word	0x080106fd
 8011410:	08011641 	.word	0x08011641
 8011414:	080128c9 	.word	0x080128c9

08011418 <_read_r>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	4d07      	ldr	r5, [pc, #28]	; (8011438 <_read_r+0x20>)
 801141c:	4604      	mov	r4, r0
 801141e:	4608      	mov	r0, r1
 8011420:	4611      	mov	r1, r2
 8011422:	2200      	movs	r2, #0
 8011424:	602a      	str	r2, [r5, #0]
 8011426:	461a      	mov	r2, r3
 8011428:	f7f0 fedc 	bl	80021e4 <_read>
 801142c:	1c43      	adds	r3, r0, #1
 801142e:	d102      	bne.n	8011436 <_read_r+0x1e>
 8011430:	682b      	ldr	r3, [r5, #0]
 8011432:	b103      	cbz	r3, 8011436 <_read_r+0x1e>
 8011434:	6023      	str	r3, [r4, #0]
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	20008e04 	.word	0x20008e04

0801143c <__sccl>:
 801143c:	b570      	push	{r4, r5, r6, lr}
 801143e:	780b      	ldrb	r3, [r1, #0]
 8011440:	4604      	mov	r4, r0
 8011442:	2b5e      	cmp	r3, #94	; 0x5e
 8011444:	bf0b      	itete	eq
 8011446:	784b      	ldrbeq	r3, [r1, #1]
 8011448:	1c48      	addne	r0, r1, #1
 801144a:	1c88      	addeq	r0, r1, #2
 801144c:	2200      	movne	r2, #0
 801144e:	bf08      	it	eq
 8011450:	2201      	moveq	r2, #1
 8011452:	1e61      	subs	r1, r4, #1
 8011454:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011458:	f801 2f01 	strb.w	r2, [r1, #1]!
 801145c:	42a9      	cmp	r1, r5
 801145e:	d1fb      	bne.n	8011458 <__sccl+0x1c>
 8011460:	b90b      	cbnz	r3, 8011466 <__sccl+0x2a>
 8011462:	3801      	subs	r0, #1
 8011464:	bd70      	pop	{r4, r5, r6, pc}
 8011466:	f082 0101 	eor.w	r1, r2, #1
 801146a:	54e1      	strb	r1, [r4, r3]
 801146c:	1c42      	adds	r2, r0, #1
 801146e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8011472:	2d2d      	cmp	r5, #45	; 0x2d
 8011474:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8011478:	4610      	mov	r0, r2
 801147a:	d006      	beq.n	801148a <__sccl+0x4e>
 801147c:	2d5d      	cmp	r5, #93	; 0x5d
 801147e:	d0f1      	beq.n	8011464 <__sccl+0x28>
 8011480:	b90d      	cbnz	r5, 8011486 <__sccl+0x4a>
 8011482:	4630      	mov	r0, r6
 8011484:	e7ee      	b.n	8011464 <__sccl+0x28>
 8011486:	462b      	mov	r3, r5
 8011488:	e7ef      	b.n	801146a <__sccl+0x2e>
 801148a:	7816      	ldrb	r6, [r2, #0]
 801148c:	2e5d      	cmp	r6, #93	; 0x5d
 801148e:	d0fa      	beq.n	8011486 <__sccl+0x4a>
 8011490:	42b3      	cmp	r3, r6
 8011492:	dcf8      	bgt.n	8011486 <__sccl+0x4a>
 8011494:	4618      	mov	r0, r3
 8011496:	3001      	adds	r0, #1
 8011498:	4286      	cmp	r6, r0
 801149a:	5421      	strb	r1, [r4, r0]
 801149c:	dcfb      	bgt.n	8011496 <__sccl+0x5a>
 801149e:	43d8      	mvns	r0, r3
 80114a0:	4430      	add	r0, r6
 80114a2:	1c5d      	adds	r5, r3, #1
 80114a4:	42b3      	cmp	r3, r6
 80114a6:	bfa8      	it	ge
 80114a8:	2000      	movge	r0, #0
 80114aa:	182b      	adds	r3, r5, r0
 80114ac:	3202      	adds	r2, #2
 80114ae:	e7de      	b.n	801146e <__sccl+0x32>

080114b0 <_raise_r>:
 80114b0:	291f      	cmp	r1, #31
 80114b2:	b538      	push	{r3, r4, r5, lr}
 80114b4:	4604      	mov	r4, r0
 80114b6:	460d      	mov	r5, r1
 80114b8:	d904      	bls.n	80114c4 <_raise_r+0x14>
 80114ba:	2316      	movs	r3, #22
 80114bc:	6003      	str	r3, [r0, #0]
 80114be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114c2:	bd38      	pop	{r3, r4, r5, pc}
 80114c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114c6:	b112      	cbz	r2, 80114ce <_raise_r+0x1e>
 80114c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114cc:	b94b      	cbnz	r3, 80114e2 <_raise_r+0x32>
 80114ce:	4620      	mov	r0, r4
 80114d0:	f000 f830 	bl	8011534 <_getpid_r>
 80114d4:	462a      	mov	r2, r5
 80114d6:	4601      	mov	r1, r0
 80114d8:	4620      	mov	r0, r4
 80114da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114de:	f000 b817 	b.w	8011510 <_kill_r>
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	d00a      	beq.n	80114fc <_raise_r+0x4c>
 80114e6:	1c59      	adds	r1, r3, #1
 80114e8:	d103      	bne.n	80114f2 <_raise_r+0x42>
 80114ea:	2316      	movs	r3, #22
 80114ec:	6003      	str	r3, [r0, #0]
 80114ee:	2001      	movs	r0, #1
 80114f0:	e7e7      	b.n	80114c2 <_raise_r+0x12>
 80114f2:	2400      	movs	r4, #0
 80114f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114f8:	4628      	mov	r0, r5
 80114fa:	4798      	blx	r3
 80114fc:	2000      	movs	r0, #0
 80114fe:	e7e0      	b.n	80114c2 <_raise_r+0x12>

08011500 <raise>:
 8011500:	4b02      	ldr	r3, [pc, #8]	; (801150c <raise+0xc>)
 8011502:	4601      	mov	r1, r0
 8011504:	6818      	ldr	r0, [r3, #0]
 8011506:	f7ff bfd3 	b.w	80114b0 <_raise_r>
 801150a:	bf00      	nop
 801150c:	20000030 	.word	0x20000030

08011510 <_kill_r>:
 8011510:	b538      	push	{r3, r4, r5, lr}
 8011512:	4d07      	ldr	r5, [pc, #28]	; (8011530 <_kill_r+0x20>)
 8011514:	2300      	movs	r3, #0
 8011516:	4604      	mov	r4, r0
 8011518:	4608      	mov	r0, r1
 801151a:	4611      	mov	r1, r2
 801151c:	602b      	str	r3, [r5, #0]
 801151e:	f7f0 fe47 	bl	80021b0 <_kill>
 8011522:	1c43      	adds	r3, r0, #1
 8011524:	d102      	bne.n	801152c <_kill_r+0x1c>
 8011526:	682b      	ldr	r3, [r5, #0]
 8011528:	b103      	cbz	r3, 801152c <_kill_r+0x1c>
 801152a:	6023      	str	r3, [r4, #0]
 801152c:	bd38      	pop	{r3, r4, r5, pc}
 801152e:	bf00      	nop
 8011530:	20008e04 	.word	0x20008e04

08011534 <_getpid_r>:
 8011534:	f7f0 be34 	b.w	80021a0 <_getpid>

08011538 <_strtol_l.isra.0>:
 8011538:	2b01      	cmp	r3, #1
 801153a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801153e:	d001      	beq.n	8011544 <_strtol_l.isra.0+0xc>
 8011540:	2b24      	cmp	r3, #36	; 0x24
 8011542:	d906      	bls.n	8011552 <_strtol_l.isra.0+0x1a>
 8011544:	f7fd fda2 	bl	800f08c <__errno>
 8011548:	2316      	movs	r3, #22
 801154a:	6003      	str	r3, [r0, #0]
 801154c:	2000      	movs	r0, #0
 801154e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011552:	4f3a      	ldr	r7, [pc, #232]	; (801163c <_strtol_l.isra.0+0x104>)
 8011554:	468e      	mov	lr, r1
 8011556:	4676      	mov	r6, lr
 8011558:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801155c:	5de5      	ldrb	r5, [r4, r7]
 801155e:	f015 0508 	ands.w	r5, r5, #8
 8011562:	d1f8      	bne.n	8011556 <_strtol_l.isra.0+0x1e>
 8011564:	2c2d      	cmp	r4, #45	; 0x2d
 8011566:	d134      	bne.n	80115d2 <_strtol_l.isra.0+0x9a>
 8011568:	f89e 4000 	ldrb.w	r4, [lr]
 801156c:	f04f 0801 	mov.w	r8, #1
 8011570:	f106 0e02 	add.w	lr, r6, #2
 8011574:	2b00      	cmp	r3, #0
 8011576:	d05c      	beq.n	8011632 <_strtol_l.isra.0+0xfa>
 8011578:	2b10      	cmp	r3, #16
 801157a:	d10c      	bne.n	8011596 <_strtol_l.isra.0+0x5e>
 801157c:	2c30      	cmp	r4, #48	; 0x30
 801157e:	d10a      	bne.n	8011596 <_strtol_l.isra.0+0x5e>
 8011580:	f89e 4000 	ldrb.w	r4, [lr]
 8011584:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011588:	2c58      	cmp	r4, #88	; 0x58
 801158a:	d14d      	bne.n	8011628 <_strtol_l.isra.0+0xf0>
 801158c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011590:	2310      	movs	r3, #16
 8011592:	f10e 0e02 	add.w	lr, lr, #2
 8011596:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801159a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801159e:	2600      	movs	r6, #0
 80115a0:	fbbc f9f3 	udiv	r9, ip, r3
 80115a4:	4635      	mov	r5, r6
 80115a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80115aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80115ae:	2f09      	cmp	r7, #9
 80115b0:	d818      	bhi.n	80115e4 <_strtol_l.isra.0+0xac>
 80115b2:	463c      	mov	r4, r7
 80115b4:	42a3      	cmp	r3, r4
 80115b6:	dd24      	ble.n	8011602 <_strtol_l.isra.0+0xca>
 80115b8:	2e00      	cmp	r6, #0
 80115ba:	db1f      	blt.n	80115fc <_strtol_l.isra.0+0xc4>
 80115bc:	45a9      	cmp	r9, r5
 80115be:	d31d      	bcc.n	80115fc <_strtol_l.isra.0+0xc4>
 80115c0:	d101      	bne.n	80115c6 <_strtol_l.isra.0+0x8e>
 80115c2:	45a2      	cmp	sl, r4
 80115c4:	db1a      	blt.n	80115fc <_strtol_l.isra.0+0xc4>
 80115c6:	fb05 4503 	mla	r5, r5, r3, r4
 80115ca:	2601      	movs	r6, #1
 80115cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80115d0:	e7eb      	b.n	80115aa <_strtol_l.isra.0+0x72>
 80115d2:	2c2b      	cmp	r4, #43	; 0x2b
 80115d4:	bf08      	it	eq
 80115d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80115da:	46a8      	mov	r8, r5
 80115dc:	bf08      	it	eq
 80115de:	f106 0e02 	addeq.w	lr, r6, #2
 80115e2:	e7c7      	b.n	8011574 <_strtol_l.isra.0+0x3c>
 80115e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80115e8:	2f19      	cmp	r7, #25
 80115ea:	d801      	bhi.n	80115f0 <_strtol_l.isra.0+0xb8>
 80115ec:	3c37      	subs	r4, #55	; 0x37
 80115ee:	e7e1      	b.n	80115b4 <_strtol_l.isra.0+0x7c>
 80115f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80115f4:	2f19      	cmp	r7, #25
 80115f6:	d804      	bhi.n	8011602 <_strtol_l.isra.0+0xca>
 80115f8:	3c57      	subs	r4, #87	; 0x57
 80115fa:	e7db      	b.n	80115b4 <_strtol_l.isra.0+0x7c>
 80115fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011600:	e7e4      	b.n	80115cc <_strtol_l.isra.0+0x94>
 8011602:	2e00      	cmp	r6, #0
 8011604:	da05      	bge.n	8011612 <_strtol_l.isra.0+0xda>
 8011606:	2322      	movs	r3, #34	; 0x22
 8011608:	6003      	str	r3, [r0, #0]
 801160a:	4665      	mov	r5, ip
 801160c:	b942      	cbnz	r2, 8011620 <_strtol_l.isra.0+0xe8>
 801160e:	4628      	mov	r0, r5
 8011610:	e79d      	b.n	801154e <_strtol_l.isra.0+0x16>
 8011612:	f1b8 0f00 	cmp.w	r8, #0
 8011616:	d000      	beq.n	801161a <_strtol_l.isra.0+0xe2>
 8011618:	426d      	negs	r5, r5
 801161a:	2a00      	cmp	r2, #0
 801161c:	d0f7      	beq.n	801160e <_strtol_l.isra.0+0xd6>
 801161e:	b10e      	cbz	r6, 8011624 <_strtol_l.isra.0+0xec>
 8011620:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8011624:	6011      	str	r1, [r2, #0]
 8011626:	e7f2      	b.n	801160e <_strtol_l.isra.0+0xd6>
 8011628:	2430      	movs	r4, #48	; 0x30
 801162a:	2b00      	cmp	r3, #0
 801162c:	d1b3      	bne.n	8011596 <_strtol_l.isra.0+0x5e>
 801162e:	2308      	movs	r3, #8
 8011630:	e7b1      	b.n	8011596 <_strtol_l.isra.0+0x5e>
 8011632:	2c30      	cmp	r4, #48	; 0x30
 8011634:	d0a4      	beq.n	8011580 <_strtol_l.isra.0+0x48>
 8011636:	230a      	movs	r3, #10
 8011638:	e7ad      	b.n	8011596 <_strtol_l.isra.0+0x5e>
 801163a:	bf00      	nop
 801163c:	08012750 	.word	0x08012750

08011640 <_strtol_r>:
 8011640:	f7ff bf7a 	b.w	8011538 <_strtol_l.isra.0>

08011644 <__submore>:
 8011644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011648:	460c      	mov	r4, r1
 801164a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801164c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011650:	4299      	cmp	r1, r3
 8011652:	d11d      	bne.n	8011690 <__submore+0x4c>
 8011654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011658:	f7fd fecc 	bl	800f3f4 <_malloc_r>
 801165c:	b918      	cbnz	r0, 8011666 <__submore+0x22>
 801165e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801166a:	63a3      	str	r3, [r4, #56]	; 0x38
 801166c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011670:	6360      	str	r0, [r4, #52]	; 0x34
 8011672:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011676:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801167a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801167e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011682:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011686:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801168a:	6020      	str	r0, [r4, #0]
 801168c:	2000      	movs	r0, #0
 801168e:	e7e8      	b.n	8011662 <__submore+0x1e>
 8011690:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011692:	0077      	lsls	r7, r6, #1
 8011694:	463a      	mov	r2, r7
 8011696:	f7ff fb7b 	bl	8010d90 <_realloc_r>
 801169a:	4605      	mov	r5, r0
 801169c:	2800      	cmp	r0, #0
 801169e:	d0de      	beq.n	801165e <__submore+0x1a>
 80116a0:	eb00 0806 	add.w	r8, r0, r6
 80116a4:	4601      	mov	r1, r0
 80116a6:	4632      	mov	r2, r6
 80116a8:	4640      	mov	r0, r8
 80116aa:	f7fd fe3d 	bl	800f328 <memcpy>
 80116ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80116b2:	f8c4 8000 	str.w	r8, [r4]
 80116b6:	e7e9      	b.n	801168c <__submore+0x48>

080116b8 <_fstat_r>:
 80116b8:	b538      	push	{r3, r4, r5, lr}
 80116ba:	4d07      	ldr	r5, [pc, #28]	; (80116d8 <_fstat_r+0x20>)
 80116bc:	2300      	movs	r3, #0
 80116be:	4604      	mov	r4, r0
 80116c0:	4608      	mov	r0, r1
 80116c2:	4611      	mov	r1, r2
 80116c4:	602b      	str	r3, [r5, #0]
 80116c6:	f7f0 fdd2 	bl	800226e <_fstat>
 80116ca:	1c43      	adds	r3, r0, #1
 80116cc:	d102      	bne.n	80116d4 <_fstat_r+0x1c>
 80116ce:	682b      	ldr	r3, [r5, #0]
 80116d0:	b103      	cbz	r3, 80116d4 <_fstat_r+0x1c>
 80116d2:	6023      	str	r3, [r4, #0]
 80116d4:	bd38      	pop	{r3, r4, r5, pc}
 80116d6:	bf00      	nop
 80116d8:	20008e04 	.word	0x20008e04

080116dc <_isatty_r>:
 80116dc:	b538      	push	{r3, r4, r5, lr}
 80116de:	4d06      	ldr	r5, [pc, #24]	; (80116f8 <_isatty_r+0x1c>)
 80116e0:	2300      	movs	r3, #0
 80116e2:	4604      	mov	r4, r0
 80116e4:	4608      	mov	r0, r1
 80116e6:	602b      	str	r3, [r5, #0]
 80116e8:	f7f0 fdd1 	bl	800228e <_isatty>
 80116ec:	1c43      	adds	r3, r0, #1
 80116ee:	d102      	bne.n	80116f6 <_isatty_r+0x1a>
 80116f0:	682b      	ldr	r3, [r5, #0]
 80116f2:	b103      	cbz	r3, 80116f6 <_isatty_r+0x1a>
 80116f4:	6023      	str	r3, [r4, #0]
 80116f6:	bd38      	pop	{r3, r4, r5, pc}
 80116f8:	20008e04 	.word	0x20008e04

080116fc <_malloc_usable_size_r>:
 80116fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011700:	1f18      	subs	r0, r3, #4
 8011702:	2b00      	cmp	r3, #0
 8011704:	bfbc      	itt	lt
 8011706:	580b      	ldrlt	r3, [r1, r0]
 8011708:	18c0      	addlt	r0, r0, r3
 801170a:	4770      	bx	lr

0801170c <_init>:
 801170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801170e:	bf00      	nop
 8011710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011712:	bc08      	pop	{r3}
 8011714:	469e      	mov	lr, r3
 8011716:	4770      	bx	lr

08011718 <_fini>:
 8011718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801171a:	bf00      	nop
 801171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801171e:	bc08      	pop	{r3}
 8011720:	469e      	mov	lr, r3
 8011722:	4770      	bx	lr
