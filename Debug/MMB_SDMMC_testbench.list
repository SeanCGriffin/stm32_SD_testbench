
MMB_SDMMC_testbench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec7c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  0800ef1c  0800ef1c  0001ef1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fb34  0800fb34  0001fb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fb3c  0800fb3c  0001fb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fb40  0800fb40  0001fb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800fb44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ba8  24000078  0800fbb8  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001c20  0800fbb8  00021c20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004537a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000065b9  00000000  00000000  0006541c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019e0  00000000  00000000  0006b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001858  00000000  00000000  0006d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000bdc9  00000000  00000000  0006ec10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025e9d  00000000  00000000  0007a9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017548e  00000000  00000000  000a0876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00215d04  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007474  00000000  00000000  00215d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ef04 	.word	0x0800ef04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800ef04 	.word	0x0800ef04

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN8hitspool15get_system_timeEv>:
#include "hs_time.h"
#include <sys/time.h>

namespace hitspool {

    u64 get_system_time(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

        return HAL_GetTick();
 800068c:	f001 fde2 	bl	8002254 <HAL_GetTick>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	f04f 0300 	mov.w	r3, #0
    }
 8000698:	4610      	mov	r0, r2
 800069a:	4619      	mov	r1, r3
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print(const char *fmt, ...) {
 80006a0:	b40f      	push	{r0, r1, r2, r3}
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b6:	480a      	ldr	r0, [pc, #40]	; (80006e0 <print+0x40>)
 80006b8:	f00e f8ea 	bl	800e890 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), -1);
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <print+0x40>)
 80006be:	f7ff fe5f 	bl	8000380 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ca:	4905      	ldr	r1, [pc, #20]	; (80006e0 <print+0x40>)
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <print+0x44>)
 80006ce:	f007 fb21 	bl	8007d14 <HAL_UART_Transmit>

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr
 80006e0:	240001ec 	.word	0x240001ec
 80006e4:	2400015c 	.word	0x2400015c

080006e8 <_Z11flash_errorv>:

void flash_error() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80006ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <_Z11flash_errorv+0x2c>)
 80006f2:	f002 f8dc 	bl	80028ae <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80006f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006fa:	f001 fdb7 	bl	800226c <HAL_Delay>
	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <_Z11flash_errorv+0x2c>)
 8000704:	f002 f8d3 	bl	80028ae <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f001 fdaf 	bl	800226c <HAL_Delay>

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	58020400 	.word	0x58020400

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f001 fd14 	bl	8002148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f818 	bl	8000754 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f98c 	bl	8000a40 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000728:	f000 f92a 	bl	8000980 <_ZL19MX_USART3_UART_Initv>
  MX_SDMMC1_SD_Init();
 800072c:	f000 f89a 	bl	8000864 <_ZL17MX_SDMMC1_SD_Initv>
  MX_FATFS_Init();
 8000730:	f009 f920 	bl	8009974 <MX_FATFS_Init>
  MX_TIM5_Init();
 8000734:	f000 f8c6 	bl	80008c4 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

	//Start timers.
	HAL_TIM_Base_Start_IT(&htim5); //1 MHz; 32 bit
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <main+0x34>)
 800073a:	f006 fe11 	bl	8007360 <HAL_TIM_Base_Start_IT>

	run_SDMMC_testbench();
 800073e:	f000 fb51 	bl	8000de4 <_Z19run_SDMMC_testbenchv>


	print("Testbench done.\r\n");
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <main+0x38>)
 8000744:	f7ff ffac 	bl	80006a0 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000748:	e7fe      	b.n	8000748 <main+0x30>
 800074a:	bf00      	nop
 800074c:	24000110 	.word	0x24000110
 8000750:	0800ef1c 	.word	0x0800ef1c

08000754 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b09c      	sub	sp, #112	; 0x70
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	224c      	movs	r2, #76	; 0x4c
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00d ff42 	bl	800e5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2220      	movs	r2, #32
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f00d ff3c 	bl	800e5ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000774:	2002      	movs	r0, #2
 8000776:	f002 f8b5 	bl	80028e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <_Z18SystemClock_Configv+0x108>)
 8000780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000782:	4a36      	ldr	r2, [pc, #216]	; (800085c <_Z18SystemClock_Configv+0x108>)
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	62d3      	str	r3, [r2, #44]	; 0x2c
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <_Z18SystemClock_Configv+0x108>)
 800078c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	4b32      	ldr	r3, [pc, #200]	; (8000860 <_Z18SystemClock_Configv+0x10c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a31      	ldr	r2, [pc, #196]	; (8000860 <_Z18SystemClock_Configv+0x10c>)
 800079a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <_Z18SystemClock_Configv+0x10c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <_Z18SystemClock_Configv+0x10c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b8:	bf14      	ite	ne
 80007ba:	2301      	movne	r3, #1
 80007bc:	2300      	moveq	r3, #0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d000      	beq.n	80007c6 <_Z18SystemClock_Configv+0x72>
 80007c4:	e7f2      	b.n	80007ac <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80007dc:	2319      	movs	r3, #25
 80007de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007e4:	2308      	movs	r3, #8
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ec:	230c      	movs	r3, #12
 80007ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f8ab 	bl	8002958 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf14      	ite	ne
 8000808:	2301      	movne	r3, #1
 800080a:	2300      	moveq	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000812:	f000 fa2b 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	233f      	movs	r3, #63	; 0x3f
 8000818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2303      	movs	r3, #3
 800081c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2101      	movs	r1, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fc9c 	bl	8003178 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_Z18SystemClock_Configv+0x100>
  {
    Error_Handler();
 8000850:	f000 fa0c 	bl	8000c6c <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3770      	adds	r7, #112	; 0x70
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58000400 	.word	0x58000400
 8000860:	58024800 	.word	0x58024800

08000864 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDMMC1_Init 0 */
	__HAL_RCC_SDMMC1_CLK_ENABLE();
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800086c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000870:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8000872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000876:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800087c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 800088a:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <_ZL17MX_SDMMC1_SD_Initv+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 80008a8:	2205      	movs	r2, #5
 80008aa:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	58024400 	.word	0x58024400
 80008bc:	24000094 	.word	0x24000094
 80008c0:	52007000 	.word	0x52007000

080008c4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 80008e4:	4a24      	ldr	r2, [pc, #144]	; (8000978 <_ZL12MX_TIM5_Initv+0xb4>)
 80008e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 80008ea:	2263      	movs	r2, #99	; 0x63
 80008ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000000-1;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 80008f6:	4a21      	ldr	r2, [pc, #132]	; (800097c <_ZL12MX_TIM5_Initv+0xb8>)
 80008f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000906:	481b      	ldr	r0, [pc, #108]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 8000908:	f006 fcd2 	bl	80072b0 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 800091c:	f000 f9a6 	bl	8000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 800092e:	f006 fea7 	bl	8007680 <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf14      	ite	ne
 8000938:	2301      	movne	r3, #1
 800093a:	2300      	moveq	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <_ZL12MX_TIM5_Initv+0x82>
  {
    Error_Handler();
 8000942:	f000 f993 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <_ZL12MX_TIM5_Initv+0xb0>)
 8000954:	f007 f8e8 	bl	8007b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	bf14      	ite	ne
 800095e:	2301      	movne	r3, #1
 8000960:	2300      	moveq	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <_ZL12MX_TIM5_Initv+0xa8>
  {
    Error_Handler();
 8000968:	f000 f980 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24000110 	.word	0x24000110
 8000978:	40000c00 	.word	0x40000c00
 800097c:	000f423f 	.word	0x000f423f

08000980 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000986:	4a2d      	ldr	r2, [pc, #180]	; (8000a3c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c8:	481b      	ldr	r0, [pc, #108]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ca:	f007 f953 	bl	8007c74 <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bf14      	ite	ne
 80009d4:	2301      	movne	r3, #1
 80009d6:	2300      	moveq	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80009de:	f000 f945 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4814      	ldr	r0, [pc, #80]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009e6:	f008 f931 	bl	8008c4c <HAL_UARTEx_SetTxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80009fa:	f000 f937 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a02:	f008 f961 	bl	8008cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf14      	ite	ne
 8000a0c:	2301      	movne	r3, #1
 8000a0e:	2300      	moveq	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000a16:	f000 f929 	bl	8000c6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a1c:	f008 f8dd 	bl	8008bda <HAL_UARTEx_DisableFifoMode>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf14      	ite	ne
 8000a26:	2301      	movne	r3, #1
 8000a28:	2300      	moveq	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000a30:	f000 f91c 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	2400015c 	.word	0x2400015c
 8000a3c:	40004800 	.word	0x40004800

08000a40 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b7f      	ldr	r3, [pc, #508]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5c:	4a7d      	ldr	r2, [pc, #500]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a66:	4b7b      	ldr	r3, [pc, #492]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a74:	4b77      	ldr	r3, [pc, #476]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7a:	4a76      	ldr	r2, [pc, #472]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a84:	4b73      	ldr	r3, [pc, #460]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b70      	ldr	r3, [pc, #448]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a98:	4a6e      	ldr	r2, [pc, #440]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa2:	4b6c      	ldr	r3, [pc, #432]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b68      	ldr	r3, [pc, #416]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a67      	ldr	r2, [pc, #412]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b64      	ldr	r3, [pc, #400]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4b61      	ldr	r3, [pc, #388]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a5f      	ldr	r2, [pc, #380]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b5d      	ldr	r3, [pc, #372]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aec:	4b59      	ldr	r3, [pc, #356]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a58      	ldr	r2, [pc, #352]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b55      	ldr	r3, [pc, #340]	; (8000c54 <_ZL12MX_GPIO_Initv+0x214>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b10:	4851      	ldr	r0, [pc, #324]	; (8000c58 <_ZL12MX_GPIO_Initv+0x218>)
 8000b12:	f001 feb3 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	4850      	ldr	r0, [pc, #320]	; (8000c5c <_ZL12MX_GPIO_Initv+0x21c>)
 8000b1c:	f001 feae 	bl	800287c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b26:	4b4e      	ldr	r3, [pc, #312]	; (8000c60 <_ZL12MX_GPIO_Initv+0x220>)
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	484b      	ldr	r0, [pc, #300]	; (8000c64 <_ZL12MX_GPIO_Initv+0x224>)
 8000b36:	f001 fcd9 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b3a:	2332      	movs	r3, #50	; 0x32
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4843      	ldr	r0, [pc, #268]	; (8000c64 <_ZL12MX_GPIO_Initv+0x224>)
 8000b56:	f001 fcc9 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b5a:	2386      	movs	r3, #134	; 0x86
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	483c      	ldr	r0, [pc, #240]	; (8000c68 <_ZL12MX_GPIO_Initv+0x228>)
 8000b76:	f001 fcb9 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b7a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4831      	ldr	r0, [pc, #196]	; (8000c58 <_ZL12MX_GPIO_Initv+0x218>)
 8000b94:	f001 fcaa 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000baa:	230b      	movs	r3, #11
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4828      	ldr	r0, [pc, #160]	; (8000c58 <_ZL12MX_GPIO_Initv+0x218>)
 8000bb6:	f001 fc99 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bba:	2340      	movs	r3, #64	; 0x40
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4822      	ldr	r0, [pc, #136]	; (8000c5c <_ZL12MX_GPIO_Initv+0x21c>)
 8000bd2:	f001 fc8b 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	481c      	ldr	r0, [pc, #112]	; (8000c5c <_ZL12MX_GPIO_Initv+0x21c>)
 8000bea:	f001 fc7f 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c00:	230a      	movs	r3, #10
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4817      	ldr	r0, [pc, #92]	; (8000c68 <_ZL12MX_GPIO_Initv+0x228>)
 8000c0c:	f001 fc6e 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <_ZL12MX_GPIO_Initv+0x224>)
 8000c26:	f001 fc61 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3c:	230b      	movs	r3, #11
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <_ZL12MX_GPIO_Initv+0x21c>)
 8000c48:	f001 fc50 	bl	80024ec <HAL_GPIO_Init>

}
 8000c4c:	bf00      	nop
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	58024400 	.word	0x58024400
 8000c58:	58020400 	.word	0x58020400
 8000c5c:	58021800 	.word	0x58021800
 8000c60:	11110000 	.word	0x11110000
 8000c64:	58020800 	.word	0x58020800
 8000c68:	58020000 	.word	0x58020000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		flash_error();
 8000c74:	f7ff fd38 	bl	80006e8 <_Z11flash_errorv>
 8000c78:	e7fc      	b.n	8000c74 <Error_Handler+0x8>

08000c7a <_ZN8hitspool3HitC1E13PayloadType_tth>:

    //Base hit constructor/destructor
    Hit::Hit(){
        this->pl_type = PL_INVALID;
    }
    Hit::Hit(PayloadType_t pl_type, u16 launch_time, u8 tdc){
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	4608      	mov	r0, r1
 8000c84:	4611      	mov	r1, r2
 8000c86:	461a      	mov	r2, r3
 8000c88:	4603      	mov	r3, r0
 8000c8a:	70fb      	strb	r3, [r7, #3]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	803b      	strh	r3, [r7, #0]
 8000c90:	4613      	mov	r3, r2
 8000c92:	70bb      	strb	r3, [r7, #2]
        this->pl_type = pl_type;
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	b2d9      	uxtb	r1, r3
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	7813      	ldrb	r3, [r2, #0]
 8000ca0:	f361 0301 	bfi	r3, r1, #0, #2
 8000ca4:	7013      	strb	r3, [r2, #0]
        this->launch_time = launch_time;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	883a      	ldrh	r2, [r7, #0]
 8000caa:	f8a3 2001 	strh.w	r2, [r3, #1]
        this->tdc = tdc;
 8000cae:	78bb      	ldrb	r3, [r7, #2]
 8000cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cb4:	b2d9      	uxtb	r1, r3
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	7813      	ldrb	r3, [r2, #0]
 8000cba:	f361 0387 	bfi	r3, r1, #2, #6
 8000cbe:	7013      	strb	r3, [r2, #0]
    }
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_ZN8hitspool6SPEHitC1Eyhht>:

    SPEHit::SPEHit() : Hit(PL_SPE, 0, 0){

    }
    //SPEHit constructor/destructor
    SPEHit::SPEHit(u64 launch_time, u8 tdc, u8 subsample, u16 charge) : Hit(PL_SPE, launch_time, tdc){
 8000cce:	b590      	push	{r4, r7, lr}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	e9c7 2300 	strd	r2, r3, [r7]
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	883a      	ldrh	r2, [r7, #0]
 8000cde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f7ff ffc9 	bl	8000c7a <_ZN8hitspool3HitC1E13PayloadType_tth>

        this->subsample = subsample;
 8000ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cf0:	b2d9      	uxtb	r1, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	78d3      	ldrb	r3, [r2, #3]
 8000cf6:	f361 0306 	bfi	r3, r1, #0, #7
 8000cfa:	70d3      	strb	r3, [r2, #3]
        this->charge = charge;
 8000cfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f002 0101 	and.w	r1, r2, #1
 8000d0a:	01cc      	lsls	r4, r1, #7
 8000d0c:	78d9      	ldrb	r1, [r3, #3]
 8000d0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000d12:	4608      	mov	r0, r1
 8000d14:	4621      	mov	r1, r4
 8000d16:	4301      	orrs	r1, r0
 8000d18:	70d9      	strb	r1, [r3, #3]
 8000d1a:	0851      	lsrs	r1, r2, #1
 8000d1c:	b289      	uxth	r1, r1
 8000d1e:	b2c9      	uxtb	r1, r1
 8000d20:	2000      	movs	r0, #0
 8000d22:	4301      	orrs	r1, r0
 8000d24:	7119      	strb	r1, [r3, #4]
 8000d26:	0a52      	lsrs	r2, r2, #9
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	f002 0207 	and.w	r2, r2, #7
 8000d2e:	f002 0007 	and.w	r0, r2, #7
 8000d32:	795a      	ldrb	r2, [r3, #5]
 8000d34:	f022 0207 	bic.w	r2, r2, #7
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	715a      	strb	r2, [r3, #5]

    }
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}

08000d4a <_ZN8hitspool6SPEHit9calc_sizeEv>:
    
    SPEHit::~SPEHit(){}

    size_t SPEHit::calc_size(){
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
        return sizeof(SPEHit);
 8000d52:	2306      	movs	r3, #6
    }
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_ZN8hitspool6MPEHitC1EyhtPh>:

    //MPEHit constructor/destructor
    MPEHit::MPEHit() : Hit(PL_MPE, 0, 0){

    }
    MPEHit::MPEHit(u64 launch_time, u8 tdc, u16 nsamples, u8 *waveform) : Hit(PL_MPE, launch_time, tdc){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	e9c7 2300 	strd	r2, r3, [r7]
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	883a      	ldrh	r2, [r7, #0]
 8000d70:	7e3b      	ldrb	r3, [r7, #24]
 8000d72:	2101      	movs	r1, #1
 8000d74:	f7ff ff81 	bl	8000c7a <_ZN8hitspool3HitC1E13PayloadType_tth>
            this->nsamples = nsamples;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	8bba      	ldrh	r2, [r7, #28]
 8000d7c:	f8a3 2003 	strh.w	r2, [r3, #3]
            //this->waveform = new u8(2 * 2 * nsamples); //nsamples, 2 bytes / sample, 2 traces
            memcpy(&this->waveform[0], waveform, 2 * 2 * nsamples);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	1d58      	adds	r0, r3, #5
 8000d84:	8bbb      	ldrh	r3, [r7, #28]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	6a39      	ldr	r1, [r7, #32]
 8000d8c:	f00d fc06 	bl	800e59c <memcpy>

    }
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_ZN8hitspool6MPEHitnwEjt>:
        //delete this->waveform;
        free(this);
    }

    //Overload the new operator so that the malloc will handle 
    void* MPEHit::operator new(size_t size, u16 nsamples){
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	807b      	strh	r3, [r7, #2]
        void* p = ::operator new(size + 2*nsamples * sizeof(u16));     
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	009a      	lsls	r2, r3, #2
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00d fb98 	bl	800e4e4 <_Znwj>
 8000db4:	4603      	mov	r3, r0
 8000db6:	60fb      	str	r3, [r7, #12]

        return p;
 8000db8:	68fb      	ldr	r3, [r7, #12]
    };
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_ZN8hitspool6MPEHit9calc_sizeEv>:
    }




    size_t MPEHit::calc_size(){
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
        //-1 is so we don't double count the first byte. 
        return sizeof(MPEHit) + sizeof(u16) * (2*this->nsamples) -1;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	3305      	adds	r3, #5
    }
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <_Z19run_SDMMC_testbenchv>:
#include <cstdio>//sprintf


using namespace hitspool;

void run_SDMMC_testbench(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0b8      	sub	sp, #224	; 0xe0
 8000de8:	af00      	add	r7, sp, #0

	print("-----------------------------------\r\n");
 8000dea:	484c      	ldr	r0, [pc, #304]	; (8000f1c <_Z19run_SDMMC_testbenchv+0x138>)
 8000dec:	f7ff fc58 	bl	80006a0 <print>
	print("---- SDMMC Interface Testbench ----\r\n");
 8000df0:	484b      	ldr	r0, [pc, #300]	; (8000f20 <_Z19run_SDMMC_testbenchv+0x13c>)
 8000df2:	f7ff fc55 	bl	80006a0 <print>
	print("-----------------------------------\r\n\n");
 8000df6:	484b      	ldr	r0, [pc, #300]	; (8000f24 <_Z19run_SDMMC_testbenchv+0x140>)
 8000df8:	f7ff fc52 	bl	80006a0 <print>

	for (int i = 0; i < 10; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e06:	2b09      	cmp	r3, #9
 8000e08:	dc1b      	bgt.n	8000e42 <_Z19run_SDMMC_testbenchv+0x5e>

		HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	4846      	ldr	r0, [pc, #280]	; (8000f28 <_Z19run_SDMMC_testbenchv+0x144>)
 8000e0e:	f001 fd4e 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000e12:	2064      	movs	r0, #100	; 0x64
 8000e14:	f001 fa2a 	bl	800226c <HAL_Delay>
		HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4843      	ldr	r0, [pc, #268]	; (8000f28 <_Z19run_SDMMC_testbenchv+0x144>)
 8000e1c:	f001 fd47 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	; 0x64
 8000e22:	f001 fa23 	bl	800226c <HAL_Delay>
		HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8000e26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2a:	483f      	ldr	r0, [pc, #252]	; (8000f28 <_Z19run_SDMMC_testbenchv+0x144>)
 8000e2c:	f001 fd3f 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000e30:	2064      	movs	r0, #100	; 0x64
 8000e32:	f001 fa1b 	bl	800226c <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 8000e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e40:	e7df      	b.n	8000e02 <_Z19run_SDMMC_testbenchv+0x1e>

	}
	HAL_Delay(500);
 8000e42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e46:	f001 fa11 	bl	800226c <HAL_Delay>

	FIL *fil = (FIL*) malloc(sizeof(FIL));		       //File handle
 8000e4a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000e4e:	f00d fb95 	bl	800e57c <malloc>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	FILINFO *finfo = (FILINFO*) malloc(sizeof(FILINFO));  //File information hanle
 8000e58:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000e5c:	f00d fb8e 	bl	800e57c <malloc>
 8000e60:	4603      	mov	r3, r0
 8000e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	FRESULT fres = FR_OK;   				   //Result after operati ons
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	FATFS *fs = (FATFS*) malloc(sizeof(FATFS)); 	       //Filesystem handle
 8000e6c:	f44f 7012 	mov.w	r0, #584	; 0x248
 8000e70:	f00d fb84 	bl	800e57c <malloc>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	UNUSED(fres);

	char fs_buffer[200];

	//Mount the filesystem.
	print("Mounting filesystem.\r\n");
 8000e7a:	482c      	ldr	r0, [pc, #176]	; (8000f2c <_Z19run_SDMMC_testbenchv+0x148>)
 8000e7c:	f7ff fc10 	bl	80006a0 <print>
	sprintf(fs_buffer, "/");
 8000e80:	463b      	mov	r3, r7
 8000e82:	492b      	ldr	r1, [pc, #172]	; (8000f30 <_Z19run_SDMMC_testbenchv+0x14c>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00d fcb7 	bl	800e7f8 <siprintf>
	fres = f_mount(fs, fs_buffer, 1);
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000e94:	f00c fa96 	bl	800d3c4 <f_mount>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	if (fres != FR_OK){
 8000e9e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <_Z19run_SDMMC_testbenchv+0xcc>
		print("Failed to mount filesystem!!!\r\n");
 8000ea6:	4823      	ldr	r0, [pc, #140]	; (8000f34 <_Z19run_SDMMC_testbenchv+0x150>)
 8000ea8:	f7ff fbfa 	bl	80006a0 <print>
		Error_Handler();
 8000eac:	f7ff fede 	bl	8000c6c <Error_Handler>
	}
	print("Done.\r\n");
 8000eb0:	4821      	ldr	r0, [pc, #132]	; (8000f38 <_Z19run_SDMMC_testbenchv+0x154>)
 8000eb2:	f7ff fbf5 	bl	80006a0 <print>

	//f_ls(fs_buffer);
    G_STATUS gres = G_NOTOK;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

    gres = hs_hit_io_unit_test();
 8000ebc:	f000 fda8 	bl	8001a10 <_ZN8hitspool19hs_hit_io_unit_testEv>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    print("hs_unit_write_loop()\t %s (%d)\r\n", gres == G_OK ? "PASSED" : "FAILED", gres);
 8000ec6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <_Z19run_SDMMC_testbenchv+0xee>
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <_Z19run_SDMMC_testbenchv+0x158>)
 8000ed0:	e000      	b.n	8000ed4 <_Z19run_SDMMC_testbenchv+0xf0>
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <_Z19run_SDMMC_testbenchv+0x15c>)
 8000ed4:	f897 20cb 	ldrb.w	r2, [r7, #203]	; 0xcb
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481a      	ldr	r0, [pc, #104]	; (8000f44 <_Z19run_SDMMC_testbenchv+0x160>)
 8000edc:	f7ff fbe0 	bl	80006a0 <print>

	print("Unmounting filesystem.\r\n");
 8000ee0:	4819      	ldr	r0, [pc, #100]	; (8000f48 <_Z19run_SDMMC_testbenchv+0x164>)
 8000ee2:	f7ff fbdd 	bl	80006a0 <print>
	sprintf(fs_buffer, "/");
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4911      	ldr	r1, [pc, #68]	; (8000f30 <_Z19run_SDMMC_testbenchv+0x14c>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00d fc84 	bl	800e7f8 <siprintf>
	fres = f_mount(0, fs_buffer, 0);
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f00c fa64 	bl	800d3c4 <f_mount>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	if(fres != FR_OK)
 8000f02:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <_Z19run_SDMMC_testbenchv+0x12a>
		Error_Handler();
 8000f0a:	f7ff feaf 	bl	8000c6c <Error_Handler>

	print("Done.\r\n");
 8000f0e:	480a      	ldr	r0, [pc, #40]	; (8000f38 <_Z19run_SDMMC_testbenchv+0x154>)
 8000f10:	f7ff fbc6 	bl	80006a0 <print>


}
 8000f14:	bf00      	nop
 8000f16:	37e0      	adds	r7, #224	; 0xe0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0800ef30 	.word	0x0800ef30
 8000f20:	0800ef58 	.word	0x0800ef58
 8000f24:	0800ef80 	.word	0x0800ef80
 8000f28:	58020400 	.word	0x58020400
 8000f2c:	0800efa8 	.word	0x0800efa8
 8000f30:	0800efc0 	.word	0x0800efc0
 8000f34:	0800efc4 	.word	0x0800efc4
 8000f38:	0800efe4 	.word	0x0800efe4
 8000f3c:	0800efec 	.word	0x0800efec
 8000f40:	0800eff4 	.word	0x0800eff4
 8000f44:	0800effc 	.word	0x0800effc
 8000f48:	0800f01c 	.word	0x0800f01c

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_MspInit+0x30>)
 8000f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_MspInit+0x30>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_MspInit+0x30>)
 8000f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	58024400 	.word	0x58024400

08000f80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0ba      	sub	sp, #232	; 0xe8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f107 0318 	add.w	r3, r7, #24
 8000f9c:	22bc      	movs	r2, #188	; 0xbc
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00d fb23 	bl	800e5ec <memset>
  if(hsd->Instance==SDMMC1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a37      	ldr	r2, [pc, #220]	; (8001088 <HAL_SD_MspInit+0x108>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d166      	bne.n	800107e <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fc66 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000fca:	f7ff fe4f 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_SD_MspInit+0x10c>)
 8000fd0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	; (800108c <HAL_SD_MspInit+0x10c>)
 8000fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fda:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_SD_MspInit+0x10c>)
 8000fe0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <HAL_SD_MspInit+0x10c>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_SD_MspInit+0x10c>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_SD_MspInit+0x10c>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_SD_MspInit+0x10c>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	4a1e      	ldr	r2, [pc, #120]	; (800108c <HAL_SD_MspInit+0x10c>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_SD_MspInit+0x10c>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001028:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800102c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001042:	230c      	movs	r3, #12
 8001044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800104c:	4619      	mov	r1, r3
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <HAL_SD_MspInit+0x110>)
 8001050:	f001 fa4c 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001054:	2304      	movs	r3, #4
 8001056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800106c:	230c      	movs	r3, #12
 800106e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001072:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001076:	4619      	mov	r1, r3
 8001078:	4806      	ldr	r0, [pc, #24]	; (8001094 <HAL_SD_MspInit+0x114>)
 800107a:	f001 fa37 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	37e8      	adds	r7, #232	; 0xe8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	52007000 	.word	0x52007000
 800108c:	58024400 	.word	0x58024400
 8001090:	58020800 	.word	0x58020800
 8001094:	58020c00 	.word	0x58020c00

08001098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_TIM_Base_MspInit+0x48>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d116      	bne.n	80010d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_TIM_Base_MspInit+0x4c>)
 80010ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b0:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <HAL_TIM_Base_MspInit+0x4c>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_TIM_Base_MspInit+0x4c>)
 80010bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2101      	movs	r1, #1
 80010cc:	2032      	movs	r0, #50	; 0x32
 80010ce:	f001 f9d8 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010d2:	2032      	movs	r0, #50	; 0x32
 80010d4:	f001 f9ef 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40000c00 	.word	0x40000c00
 80010e4:	58024400 	.word	0x58024400

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0b8      	sub	sp, #224	; 0xe0
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	22bc      	movs	r2, #188	; 0xbc
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f00d fa6f 	bl	800e5ec <memset>
  if(huart->Instance==USART3)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <HAL_UART_MspInit+0xc0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d142      	bne.n	800119e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fbb2 	bl	8003890 <HAL_RCCEx_PeriphCLKConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001132:	f7ff fd9b 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_UART_MspInit+0xc4>)
 8001138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_UART_MspInit+0xc4>)
 800113e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001142:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_UART_MspInit+0xc4>)
 8001148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800114c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_MspInit+0xc4>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_UART_MspInit+0xc4>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_UART_MspInit+0xc4>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001176:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800118c:	2307      	movs	r3, #7
 800118e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001192:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_UART_MspInit+0xc8>)
 800119a:	f001 f9a7 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	37e0      	adds	r7, #224	; 0xe0
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40004800 	.word	0x40004800
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58020c00 	.word	0x58020c00

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f001 f814 	bl	800222c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM5_IRQHandler+0x10>)
 800120e:	f006 f917 	bl	8007440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	24000110 	.word	0x24000110

0800121c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
//
//	 HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
//
//  }

}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_ZN8hitspool8streamerC1Ev>:

namespace hitspool {

// streamer class members

streamer::streamer() {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

    init_io_buffers();
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f809 	bl	8001250 <_ZN8hitspool8streamer15init_io_buffersEv>
    init_write_heads();
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f870 	bl	8001324 <_ZN8hitspool8streamer16init_write_headsEv>

}
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <_ZN8hitspool8streamer15init_io_buffersEv>:
	// free(spep);
	// free(mpep);
	// free(wubp);
}

void streamer::init_io_buffers(){
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < NUM_PMT; i++) {
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dc59      	bgt.n	8001316 <_ZN8hitspool8streamer15init_io_buffersEv+0xc6>
        nhits_inbuff[i] = 0;
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	2200      	movs	r2, #0
 800126c:	805a      	strh	r2, [r3, #2]
        sprintf(live_filenames[i], "NULL");
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	3304      	adds	r3, #4
 8001278:	4929      	ldr	r1, [pc, #164]	; (8001320 <_ZN8hitspool8streamer15init_io_buffersEv+0xd0>)
 800127a:	4618      	mov	r0, r3
 800127c:	f00d fabc 	bl	800e7f8 <siprintf>
        handler_active[i] = false;
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4413      	add	r3, r2
 8001286:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
        handler_open[i] = false;
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	f203 1305 	addw	r3, r3, #261	; 0x105
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]

        n_consumed[i] = 0;
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
        buffer_full[i] = false;
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	441a      	add	r2, r3
 80012b2:	f241 5368 	movw	r3, #5480	; 0x1568
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

        n_written[i] = 0; 
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
        n_written_thisfile[i] = 0;
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	18d1      	adds	r1, r2, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9c1 2300 	strd	r2, r3, [r1]
        n_written_thisPMT[i] = 0;
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f203 23af 	addw	r3, r3, #687	; 0x2af
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	18d1      	adds	r1, r2, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9c1 2300 	strd	r2, r3, [r1]

        total_bytes_written = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f503 51ac 	add.w	r1, r3, #5504	; 0x1580
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < NUM_PMT; i++) {
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e7a2      	b.n	800125c <_ZN8hitspool8streamer15init_io_buffersEv+0xc>
    }
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	0800f0a8 	.word	0x0800f0a8

08001324 <_ZN8hitspool8streamer16init_write_headsEv>:

void streamer::init_write_heads() {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_PMT; i++) {
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	dc27      	bgt.n	8001386 <_ZN8hitspool8streamer16init_write_headsEv+0x62>
		sprintf((char *)write_buff[i], "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	025b      	lsls	r3, r3, #9
 8001340:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	4911      	ldr	r1, [pc, #68]	; (8001390 <_ZN8hitspool8streamer16init_write_headsEv+0x6c>)
 800134a:	4618      	mov	r0, r3
 800134c:	f00d fa54 	bl	800e7f8 <siprintf>
		n_consumed[i] = 0;
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
		write_head[i] = (u8 *)write_buff[i];
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4613      	mov	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4413      	add	r3, r2
 8001368:	025b      	lsls	r3, r3, #9
 800136a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	18d1      	adds	r1, r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < NUM_PMT; i++) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e7d4      	b.n	8001330 <_ZN8hitspool8streamer16init_write_headsEv+0xc>
	}
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	0800f0b0 	.word	0x0800f0b0

08001394 <_ZN8hitspool8streamer18init_file_handlersEy>:

void streamer::init_file_handlers(u64 inittime) {
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	e9c7 2300 	strd	r2, r3, [r7]
    //Check if any PMTs are already open; if so close them. 
    for(int i = 0; i < NUM_PMT; i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dc0f      	bgt.n	80013ca <_ZN8hitspool8streamer18init_file_handlersEy+0x36>
        if(handler_open[i]){
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	4413      	add	r3, r2
 80013b0:	f203 1305 	addw	r3, r3, #261	; 0x105
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <_ZN8hitspool8streamer18init_file_handlersEy+0x2e>
            close_file_handlers();
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f8cc 	bl	8001558 <_ZN8hitspool8streamer19close_file_handlersEv>
            break; //All four happen at the same time.
 80013c0:	e003      	b.n	80013ca <_ZN8hitspool8streamer18init_file_handlersEy+0x36>
    for(int i = 0; i < NUM_PMT; i++){
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e7ec      	b.n	80013a4 <_ZN8hitspool8streamer18init_file_handlersEy+0x10>
        }
    }

	for (int i = 0; i < NUM_PMT; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dc5a      	bgt.n	800148a <_ZN8hitspool8streamer18init_file_handlersEy+0xf6>
		nhits_inbuff[i] = 0;
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	2200      	movs	r2, #0
 80013de:	805a      	strh	r2, [r3, #2]
		handler_active[i] = FALSE;
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
		buffer_full[i] = FALSE;
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	441a      	add	r2, r3
 80013f4:	f241 5368 	movw	r3, #5480	; 0x1568
 80013f8:	4413      	add	r3, r2
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
        //Filename is inittime/1000000, i.e. seconds.
		sprintf(live_filenames[i], "hitspool/PMT%02d/0x%08llX.spool", i, (u64)inittime/1000000);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	1d1c      	adds	r4, r3, #4
 8001408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800140c:	4a21      	ldr	r2, [pc, #132]	; (8001494 <_ZN8hitspool8streamer18init_file_handlersEy+0x100>)
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	f7fe ffbd 	bl	8000390 <__aeabi_uldivmod>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	e9cd 2300 	strd	r2, r3, [sp]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	491d      	ldr	r1, [pc, #116]	; (8001498 <_ZN8hitspool8streamer18init_file_handlersEy+0x104>)
 8001422:	4620      	mov	r0, r4
 8001424:	f00d f9e8 	bl	800e7f8 <siprintf>

		f_op_res[i] =
			f_open(&file_handlers[i], live_filenames[i], 
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	18d0      	adds	r0, r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4413      	add	r3, r2
 8001442:	3304      	adds	r3, #4
 8001444:	220b      	movs	r2, #11
 8001446:	4619      	mov	r1, r3
 8001448:	f00c f802 	bl	800d450 <f_open>
 800144c:	4603      	mov	r3, r0
 800144e:	4619      	mov	r1, r3
		f_op_res[i] =
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4413      	add	r3, r2
 8001456:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800145a:	460a      	mov	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
				FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
		print("PMT%02d file opened with fres=(%d)\r\n", i, f_op_res[i]);
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4413      	add	r3, r2
 8001464:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	6939      	ldr	r1, [r7, #16]
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <_ZN8hitspool8streamer18init_file_handlersEy+0x108>)
 8001470:	f7ff f916 	bl	80006a0 <print>
        handler_open[i] = true;
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4413      	add	r3, r2
 800147a:	f203 1305 	addw	r3, r3, #261	; 0x105
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_PMT; i++) {
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3301      	adds	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	e7a1      	b.n	80013ce <_ZN8hitspool8streamer18init_file_handlersEy+0x3a>
	}
	// print("\n");
}
 800148a:	bf00      	nop
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	000f4240 	.word	0x000f4240
 8001498:	0800f0e8 	.word	0x0800f0e8
 800149c:	0800f108 	.word	0x0800f108

080014a0 <_ZN8hitspool8streamer18print_buffer_headsEv>:


// Print the first 12 bytes of the write buffer and the write head.
void streamer::print_buffer_heads() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    print("Buffer contents\r\n");
 80014a8:	4825      	ldr	r0, [pc, #148]	; (8001540 <_ZN8hitspool8streamer18print_buffer_headsEv+0xa0>)
 80014aa:	f7ff f8f9 	bl	80006a0 <print>
    print("-----------------------------------\r\n");
 80014ae:	4825      	ldr	r0, [pc, #148]	; (8001544 <_ZN8hitspool8streamer18print_buffer_headsEv+0xa4>)
 80014b0:	f7ff f8f6 	bl	80006a0 <print>
    char buff[6];
    for (int i = 0; i < NUM_PMT; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	dc3b      	bgt.n	8001536 <_ZN8hitspool8streamer18print_buffer_headsEv+0x96>
        print("PMT%02d:\r\n", i);
 80014be:	6979      	ldr	r1, [r7, #20]
 80014c0:	4821      	ldr	r0, [pc, #132]	; (8001548 <_ZN8hitspool8streamer18print_buffer_headsEv+0xa8>)
 80014c2:	f7ff f8ed 	bl	80006a0 <print>
        print("Address of buffer[%02d] is %p\n", i, (void *)write_buff[i]);
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	025b      	lsls	r3, r3, #9
 80014d0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	6979      	ldr	r1, [r7, #20]
 80014dc:	481b      	ldr	r0, [pc, #108]	; (800154c <_ZN8hitspool8streamer18print_buffer_headsEv+0xac>)
 80014de:	f7ff f8df 	bl	80006a0 <print>
        print("Address of head[%02d]   is %p\n", i, (void *)write_head[i]);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 80014ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ee:	461a      	mov	r2, r3
 80014f0:	6979      	ldr	r1, [r7, #20]
 80014f2:	4817      	ldr	r0, [pc, #92]	; (8001550 <_ZN8hitspool8streamer18print_buffer_headsEv+0xb0>)
 80014f4:	f7ff f8d4 	bl	80006a0 <print>
        memcpy(buff, write_head[i], 6);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8001500:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	6810      	ldr	r0, [r2, #0]
 800150a:	6018      	str	r0, [r3, #0]
 800150c:	8892      	ldrh	r2, [r2, #4]
 800150e:	809a      	strh	r2, [r3, #4]
        print("\tBuffer: %s\r\n"
              "\tHead:   %s\r\n",
              write_buff[i], buff);
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	025b      	lsls	r3, r3, #9
 800151a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
        print("\tBuffer: %s\r\n"
 8001522:	f107 020c 	add.w	r2, r7, #12
 8001526:	4619      	mov	r1, r3
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <_ZN8hitspool8streamer18print_buffer_headsEv+0xb4>)
 800152a:	f7ff f8b9 	bl	80006a0 <print>
    for (int i = 0; i < NUM_PMT; i++) {
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e7c0      	b.n	80014b8 <_ZN8hitspool8streamer18print_buffer_headsEv+0x18>
    }
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	0800f130 	.word	0x0800f130
 8001544:	0800f144 	.word	0x0800f144
 8001548:	0800f16c 	.word	0x0800f16c
 800154c:	0800f178 	.word	0x0800f178
 8001550:	0800f198 	.word	0x0800f198
 8001554:	0800f1b8 	.word	0x0800f1b8

08001558 <_ZN8hitspool8streamer19close_file_handlersEv>:
		if (f_op_res[i] != FR_OK)
			print("ERROR syncing file %s; fres = %d\r\n", live_filenames[i], f_op_res[i]);
	}
}

void streamer::close_file_handlers() {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NUM_PMT; i++) {
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	dc36      	bgt.n	80015d8 <_ZN8hitspool8streamer19close_file_handlersEv+0x80>
		f_op_res[i] = f_close(&file_handlers[i]);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f00c fe65 	bl	800e24c <f_close>
 8001582:	4603      	mov	r3, r0
 8001584:	4619      	mov	r1, r3
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001590:	460a      	mov	r2, r1
 8001592:	701a      	strb	r2, [r3, #0]
        handler_open[i] = false;
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	f203 1305 	addw	r3, r3, #261	; 0x105
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
		if (f_op_res[i] != FR_OK)
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00e      	beq.n	80015d0 <_ZN8hitspool8streamer19close_file_handlersEv+0x78>
			print("ERROR closing file %s; fres = %d\r\n", live_filenames[i], f_op_res[i]);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	1d19      	adds	r1, r3, #4
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <_ZN8hitspool8streamer19close_file_handlersEv+0x88>)
 80015cc:	f7ff f868 	bl	80006a0 <print>
	for (int i = 0; i < NUM_PMT; i++) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e7c5      	b.n	8001564 <_ZN8hitspool8streamer19close_file_handlersEv+0xc>
	}
	//print("Done closing all file handlers.\r\n");
}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	0800f1f8 	.word	0x0800f1f8

080015e4 <_ZN8hitspool8streamer22check_and_write_bufferEhb>:
	// print_SPEPacket(spep);
	// print_MPEPacket(mpep);
	// print_WUBPacket(wubp);
}

FRESULT streamer::check_and_write_buffer(u8 PMT, bool force) {
 80015e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015e8:	b089      	sub	sp, #36	; 0x24
 80015ea:	af04      	add	r7, sp, #16
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	460b      	mov	r3, r1
 80015f0:	72fb      	strb	r3, [r7, #11]
 80015f2:	4613      	mov	r3, r2
 80015f4:	72bb      	strb	r3, [r7, #10]

	if ((n_consumed[PMT] >= TARGET_BLOCKSIZE) || force) {
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001608:	d203      	bcs.n	8001612 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x2e>
 800160a:	7abb      	ldrb	r3, [r7, #10]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8118 	beq.w	8001842 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x25e>
		// Kick off the file write process.
		if (force) {
 8001612:	7abb      	ldrb	r3, [r7, #10]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x4e>
			print("Forcing write of PMT%02d buffer.\r\n"
 8001618:	7af9      	ldrb	r1, [r7, #11]
				  "\t n_consumed: 0x%04X\r\n",
				  PMT, n_consumed[PMT]);
 800161a:	7afb      	ldrb	r3, [r7, #11]
			print("Forcing write of PMT%02d buffer.\r\n"
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	461a      	mov	r2, r3
 800162a:	488b      	ldr	r0, [pc, #556]	; (8001858 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x274>)
 800162c:	f7ff f838 	bl	80006a0 <print>
 8001630:	e00b      	b.n	800164a <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x66>
		} else {
			print("PMT%02d buffer meets threshold.\r\n"
 8001632:	7af9      	ldrb	r1, [r7, #11]
				  "\t n_consumed: 0x%04X\r\n",
				  PMT, n_consumed[PMT]);
 8001634:	7afb      	ldrb	r3, [r7, #11]
			print("PMT%02d buffer meets threshold.\r\n"
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	461a      	mov	r2, r3
 8001644:	4885      	ldr	r0, [pc, #532]	; (800185c <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x278>)
 8001646:	f7ff f82b 	bl	80006a0 <print>
		}

		// do some writing things
		buffer_full[PMT]    = TRUE;
 800164a:	7afb      	ldrb	r3, [r7, #11]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	441a      	add	r2, r3
 8001650:	f241 5368 	movw	r3, #5480	; 0x1568
 8001654:	4413      	add	r3, r2
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
		handler_active[PMT] = TRUE;
 800165a:	7afb      	ldrb	r3, [r7, #11]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		f_op_res[PMT] =
			f_write(&file_handlers[PMT], write_buff[PMT], n_consumed[PMT], &n_written[PMT]);
 8001666:	7afb      	ldrb	r3, [r7, #11]
 8001668:	f44f 7216 	mov.w	r2, #600	; 0x258
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	18d0      	adds	r0, r2, r3
 8001678:	7afa      	ldrb	r2, [r7, #11]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	025b      	lsls	r3, r3, #9
 8001682:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	18d1      	adds	r1, r2, r3
 800168a:	7afb      	ldrb	r3, [r7, #11]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	3304      	adds	r3, #4
		f_op_res[PMT] =
 80016a8:	7afe      	ldrb	r6, [r7, #11]
			f_write(&file_handlers[PMT], write_buff[PMT], n_consumed[PMT], &n_written[PMT]);
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	f00c faf7 	bl	800dc9e <f_write>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
		f_op_res[PMT] =
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4433      	add	r3, r6
 80016b8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		if (f_op_res[PMT] != FR_OK) {
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01a      	beq.n	8001700 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x11c>
			print("ERROR writing file %s!\r\n", live_filenames[PMT]);
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	3304      	adds	r3, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4862      	ldr	r0, [pc, #392]	; (8001860 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x27c>)
 80016d8:	f7fe ffe2 	bl	80006a0 <print>
            print("Expected write: 0x%04X, actual  write: 0x%04X\r\n", 
                n_consumed[PMT], n_written[PMT]);
 80016dc:	7afb      	ldrb	r3, [r7, #11]
            print("Expected write: 0x%04X, actual  write: 0x%04X\r\n", 
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	6859      	ldr	r1, [r3, #4]
                n_consumed[PMT], n_written[PMT]);
 80016ea:	7afb      	ldrb	r3, [r7, #11]
            print("Expected write: 0x%04X, actual  write: 0x%04X\r\n", 
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	461a      	mov	r2, r3
 80016fa:	485a      	ldr	r0, [pc, #360]	; (8001864 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x280>)
 80016fc:	f7fe ffd0 	bl	80006a0 <print>
		}

		n_written_thisfile[PMT] += n_written[PMT];
 8001700:	7afb      	ldrb	r3, [r7, #11]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001710:	7afb      	ldrb	r3, [r7, #11]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	461a      	mov	r2, r3
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	7afe      	ldrb	r6, [r7, #11]
 8001726:	eb10 0a02 	adds.w	sl, r0, r2
 800172a:	eb41 0b03 	adc.w	fp, r1, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f206 23ae 	addw	r3, r6, #686	; 0x2ae
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	e9c3 ab00 	strd	sl, fp, [r3]
        n_written_thisPMT[PMT]  += n_written[PMT];
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f203 23af 	addw	r3, r3, #687	; 0x2af
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	461a      	mov	r2, r3
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	7afe      	ldrb	r6, [r7, #11]
 8001762:	eb10 0802 	adds.w	r8, r0, r2
 8001766:	eb41 0903 	adc.w	r9, r1, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f206 23af 	addw	r3, r6, #687	; 0x2af
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	e9c3 8900 	strd	r8, r9, [r3]
		total_bytes_written     += n_written[PMT];
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 800177e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	461a      	mov	r2, r3
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	1884      	adds	r4, r0, r2
 8001798:	eb41 0503 	adc.w	r5, r1, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
 80017a2:	e9c3 4500 	strd	r4, r5, [r3]

        print("\tn_written           = 0x%04x\r\n"
              "\tn_written_thisfile  = 0x%04x\r\n"
              "\tn_written_thisPMT   = 0x%04x\r\n"
              "\ttotal_bytes_written = 0x%04x\r\n",
              n_written[PMT],
 80017a6:	7afb      	ldrb	r3, [r7, #11]
        print("\tn_written           = 0x%04x\r\n"
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	685e      	ldr	r6, [r3, #4]
              n_written_thisfile[PMT],
 80017b4:	7afb      	ldrb	r3, [r7, #11]
        print("\tn_written           = 0x%04x\r\n"
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	e9d3 4500 	ldrd	r4, r5, [r3]
              n_written_thisPMT[PMT],
 80017c4:	7afb      	ldrb	r3, [r7, #11]
        print("\tn_written           = 0x%04x\r\n"
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	f203 23af 	addw	r3, r3, #687	; 0x2af
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	68f9      	ldr	r1, [r7, #12]
 80017d6:	f501 51ac 	add.w	r1, r1, #5504	; 0x1580
 80017da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017e2:	e9cd 2300 	strd	r2, r3, [sp]
 80017e6:	4622      	mov	r2, r4
 80017e8:	462b      	mov	r3, r5
 80017ea:	4631      	mov	r1, r6
 80017ec:	481e      	ldr	r0, [pc, #120]	; (8001868 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x284>)
 80017ee:	f7fe ff57 	bl	80006a0 <print>
              total_bytes_written);

		// reset write heads
		n_consumed[PMT] = 0;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
		write_head[PMT] = write_buff[PMT];
 8001802:	7afa      	ldrb	r2, [r7, #11]
 8001804:	7af8      	ldrb	r0, [r7, #11]
 8001806:	4613      	mov	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4413      	add	r3, r2
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	18d1      	adds	r1, r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f500 62ab 	add.w	r2, r0, #1368	; 0x558
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// release the file handler
		buffer_full[PMT]    = FALSE;
 8001820:	7afb      	ldrb	r3, [r7, #11]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	441a      	add	r2, r3
 8001826:	f241 5368 	movw	r3, #5480	; 0x1568
 800182a:	4413      	add	r3, r2
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
		handler_active[PMT] = FALSE;
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4413      	add	r3, r2
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        print("----------------------------\r\n");    
 800183c:	480b      	ldr	r0, [pc, #44]	; (800186c <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x288>)
 800183e:	f7fe ff2f 	bl	80006a0 <print>
	}
    


	return f_op_res[PMT];
 8001842:	7afb      	ldrb	r3, [r7, #11]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001856:	bf00      	nop
 8001858:	0800f29c 	.word	0x0800f29c
 800185c:	0800f2d8 	.word	0x0800f2d8
 8001860:	0800f310 	.word	0x0800f310
 8001864:	0800f32c 	.word	0x0800f32c
 8001868:	0800f35c 	.word	0x0800f35c
 800186c:	0800f3dc 	.word	0x0800f3dc

08001870 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh>:

Streamer_RC_t streamer::read_next_hit(FIL *file, PayloadType_t *type, u8 *hitbuffer) {
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8001876:	af00      	add	r7, sp, #0
 8001878:	f107 040c 	add.w	r4, r7, #12
 800187c:	6020      	str	r0, [r4, #0]
 800187e:	f107 0008 	add.w	r0, r7, #8
 8001882:	6001      	str	r1, [r0, #0]
 8001884:	1d39      	adds	r1, r7, #4
 8001886:	600a      	str	r2, [r1, #0]
 8001888:	463a      	mov	r2, r7
 800188a:	6013      	str	r3, [r2, #0]
	 * Read the next hit from the filename buffer.
	 */

    //print("read_next_hit()\r\n");
	FRESULT fres;
	Streamer_RC_t SMR_RC = STREAMER_RC_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
	u8 lead[sizeof(SPEHit)]; // this is the size of a SPEHit and MPEHit base unit.
	u8 data[1024];			 // FIXME: Make this match the maximum number of samples in an MPEHit.
	UINT br = 0;
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
	UINT btr = 6; // or sizeof(MPEHit)
 800189a:	2306      	movs	r3, #6
 800189c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430

	fres = f_read(file, lead, btr, &br);
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	f207 4114 	addw	r1, r7, #1044	; 0x414
 80018a8:	f107 0008 	add.w	r0, r7, #8
 80018ac:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 80018b0:	6800      	ldr	r0, [r0, #0]
 80018b2:	f00c f87e 	bl	800d9b2 <f_read>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
	if (fres != FR_OK) {
 80018bc:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d011      	beq.n	80018e8 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x78>
		if (br == 0) // EOF          
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x62>
			return STREAMER_RC_EOF;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e095      	b.n	80019fe <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x18e>
		else{ // We read out fewer bytes than expected.
            print("Error reading from file; br=%d btr=%d\r\n", br, btr);
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 80018dc:	4619      	mov	r1, r3
 80018de:	484a      	ldr	r0, [pc, #296]	; (8001a08 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x198>)
 80018e0:	f7fe fede 	bl	80006a0 <print>
			return STREAMER_RC_DISK_ERR;
 80018e4:	2302      	movs	r3, #2
 80018e6:	e08a      	b.n	80019fe <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x18e>
	}
	// for(int i = 0; i < sizeof(SPEHit); i++){
	//    print("%s ", toBinaryString(lead[i]).c_str());
	// }
	// print("\n");
	memcpy(data, lead, 6); // the rest of data will be filled with event data.
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80018f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f4:	6018      	str	r0, [r3, #0]
 80018f6:	3304      	adds	r3, #4
 80018f8:	8019      	strh	r1, [r3, #0]
	// data[7] = '\0';
	// print("%s\r\n", data);
	*type = static_cast<PayloadType_t>(lead[0] & 0x3);
 80018fa:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	b2da      	uxtb	r2, r3
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	701a      	strb	r2, [r3, #0]

	size_t s = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	u16 nsamples = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
	MPEHit *mpe;
	SPEHit *spe;

	switch (*type) {
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xb6>
 8001920:	2b01      	cmp	r3, #1
 8001922:	d01a      	beq.n	800195a <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xea>
 8001924:	e060      	b.n	80019e8 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x178>
	case PL_SPE:
		s = sizeof(SPEHit);
 8001926:	2306      	movs	r3, #6
 8001928:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
		hitbuffer = (u8 *)malloc(s);
 800192c:	463c      	mov	r4, r7
 800192e:	f8d7 0428 	ldr.w	r0, [r7, #1064]	; 0x428
 8001932:	f00c fe23 	bl	800e57c <malloc>
 8001936:	4603      	mov	r3, r0
 8001938:	6023      	str	r3, [r4, #0]
		memcpy(hitbuffer, lead, s);
 800193a:	f207 4114 	addw	r1, r7, #1044	; 0x414
 800193e:	463b      	mov	r3, r7
 8001940:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f00c fe29 	bl	800e59c <memcpy>
		SMR_RC = STREAMER_RC_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
        spe = (SPEHit*)hitbuffer;
 8001950:	463b      	mov	r3, r7
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        //print("%s\r\n", spe->tostring().c_str());
		break;
 8001958:	e04f      	b.n	80019fa <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x18a>

	case PL_MPE:
		//print("Read type: %s\r\n", PLNameText[*type]);
		nsamples = ((MPEHit *)lead)->nsamples;
 800195a:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800195e:	78da      	ldrb	r2, [r3, #3]
 8001960:	791b      	ldrb	r3, [r3, #4]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	4313      	orrs	r3, r2
 8001966:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
		//print("nsamples from cast: %d\r\n", nsamples);

		s = sizeof(MPEHit) + sizeof(u16) * 2 * ((MPEHit *)lead)->nsamples;
 800196a:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800196e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001972:	b29b      	uxth	r3, r3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	3306      	adds	r3, #6
 8001978:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
		s--; // subtract 1 because the first data byte is built into MPEHit already.
 800197c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001980:	3b01      	subs	r3, #1
 8001982:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
		//print("Total size: 0x%X\r\n", s);
		btr = s - sizeof(MPEHit);
 8001986:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 800198a:	3b06      	subs	r3, #6
 800198c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430

		fres = f_read(file, data + 6, btr, &br);
 8001990:	f107 0114 	add.w	r1, r7, #20
 8001994:	3106      	adds	r1, #6
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	f107 0008 	add.w	r0, r7, #8
 800199e:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 80019a2:	6800      	ldr	r0, [r0, #0]
 80019a4:	f00c f805 	bl	800d9b2 <f_read>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f887 342f 	strb.w	r3, [r7, #1071]	; 0x42f
		//print("btr = %d\t br= %d\r\n", btr, br);
		if (fres != FR_OK) {
 80019ae:	f897 342f 	ldrb.w	r3, [r7, #1071]	; 0x42f
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x14a>
			// We read out fewer bytes than expected.
			return STREAMER_RC_DISK_ERR;
 80019b6:	2302      	movs	r3, #2
 80019b8:	e021      	b.n	80019fe <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x18e>
		}
		hitbuffer = (u8 *)malloc(s);
 80019ba:	463c      	mov	r4, r7
 80019bc:	f8d7 0428 	ldr.w	r0, [r7, #1064]	; 0x428
 80019c0:	f00c fddc 	bl	800e57c <malloc>
 80019c4:	4603      	mov	r3, r0
 80019c6:	6023      	str	r3, [r4, #0]
		memcpy(hitbuffer, data, s);
 80019c8:	f107 0114 	add.w	r1, r7, #20
 80019cc:	463b      	mov	r3, r7
 80019ce:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f00c fde2 	bl	800e59c <memcpy>
		mpe = (MPEHit *)hitbuffer;
 80019d8:	463b      	mov	r3, r7
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
		//print("%s\r\n", mpe->tostring().c_str());
		//mpe->print_samples(200);

		SMR_RC = STREAMER_RC_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
		break;
 80019e6:	e008      	b.n	80019fa <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x18a>

	default:
		mpe = NULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
		spe = NULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		SMR_RC = STEAMER_RC_TYPE_ERR;
 80019f4:	2303      	movs	r3, #3
 80019f6:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
	}
	//print("%d\r\n", SMR_RC);
	return SMR_RC;
 80019fa:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	0800f3fc 	.word	0x0800f3fc
 8001a0c:	00000000 	.word	0x00000000

08001a10 <_ZN8hitspool19hs_hit_io_unit_testEv>:

    SPEHit *speh = new SPEHit(0xABCD, 0x5, 0xA, 0xF);
    MPEHit *mpeh = new (nsamples) MPEHit(0xCDEF, 0x4, nsamples, (u8 *)waveform_buffer); 
}

G_STATUS hs_hit_io_unit_test() {
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8001a16:	af04      	add	r7, sp, #16
			free(next_hit_contants);
	}
	if (nhits_read == nhits_written)
		return G_OK;
	else
		return G_NOTOK;
 8001a18:	466b      	mov	r3, sp
 8001a1a:	461d      	mov	r5, r3
	print("-----------------------------------\r\n");
 8001a1c:	48d6      	ldr	r0, [pc, #856]	; (8001d78 <_ZN8hitspool19hs_hit_io_unit_testEv+0x368>)
 8001a1e:	f7fe fe3f 	bl	80006a0 <print>
	print("---- hs_hit_io_unit_test() ----\r\n");
 8001a22:	48d6      	ldr	r0, [pc, #856]	; (8001d7c <_ZN8hitspool19hs_hit_io_unit_testEv+0x36c>)
 8001a24:	f7fe fe3c 	bl	80006a0 <print>
	print("-----------------------------------\r\n\n");
 8001a28:	48d5      	ldr	r0, [pc, #852]	; (8001d80 <_ZN8hitspool19hs_hit_io_unit_testEv+0x370>)
 8001a2a:	f7fe fe39 	bl	80006a0 <print>
	streamer *s = new streamer();
 8001a2e:	f241 5098 	movw	r0, #5528	; 0x1598
 8001a32:	f00c fd57 	bl	800e4e4 <_Znwj>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461c      	mov	r4, r3
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff fbf8 	bl	8001230 <_ZN8hitspool8streamerC1Ev>
 8001a40:	f8c7 4448 	str.w	r4, [r7, #1096]	; 0x448
	print("Initializing file handlers...\r\n");
 8001a44:	48cf      	ldr	r0, [pc, #828]	; (8001d84 <_ZN8hitspool19hs_hit_io_unit_testEv+0x374>)
 8001a46:	f7fe fe2b 	bl	80006a0 <print>
	s->init_file_handlers(get_system_time());
 8001a4a:	f7fe fe1d 	bl	8000688 <_ZN8hitspool15get_system_timeEv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8001a56:	f7ff fc9d 	bl	8001394 <_ZN8hitspool8streamer18init_file_handlersEy>
	print("File handlers done.\r\n");
 8001a5a:	48cb      	ldr	r0, [pc, #812]	; (8001d88 <_ZN8hitspool19hs_hit_io_unit_testEv+0x378>)
 8001a5c:	f7fe fe20 	bl	80006a0 <print>
	print("-----------------------------------\r\n");
 8001a60:	48c5      	ldr	r0, [pc, #788]	; (8001d78 <_ZN8hitspool19hs_hit_io_unit_testEv+0x368>)
 8001a62:	f7fe fe1d 	bl	80006a0 <print>
	s->print_buffer_heads();
 8001a66:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8001a6a:	f7ff fd19 	bl	80014a0 <_ZN8hitspool8streamer18print_buffer_headsEv>
	print("-----------------------------------\r\n");
 8001a6e:	48c2      	ldr	r0, [pc, #776]	; (8001d78 <_ZN8hitspool19hs_hit_io_unit_testEv+0x368>)
 8001a70:	f7fe fe16 	bl	80006a0 <print>
    print("Hit: %d\t SPEHit size: %d\t MPEHit size: %d\r\n", sizeof(Hit), sizeof(SPEHit), sizeof(MPEHit) - 1);
 8001a74:	2305      	movs	r3, #5
 8001a76:	2206      	movs	r2, #6
 8001a78:	2103      	movs	r1, #3
 8001a7a:	48c4      	ldr	r0, [pc, #784]	; (8001d8c <_ZN8hitspool19hs_hit_io_unit_testEv+0x37c>)
 8001a7c:	f7fe fe10 	bl	80006a0 <print>
	u16 nsamples = 10;
 8001a80:	230a      	movs	r3, #10
 8001a82:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446
	u16 waveform_buffer[2 * nsamples];
 8001a86:	f8b7 3446 	ldrh.w	r3, [r7, #1094]	; 0x446
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	1e5c      	subs	r4, r3, #1
 8001a8e:	f8c7 4440 	str.w	r4, [r7, #1088]	; 0x440
 8001a92:	4623      	mov	r3, r4
 8001a94:	3301      	adds	r3, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	010b      	lsls	r3, r1, #4
 8001aa6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001aaa:	0102      	lsls	r2, r0, #4
 8001aac:	4623      	mov	r3, r4
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	010b      	lsls	r3, r1, #4
 8001ac0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001ac4:	0102      	lsls	r2, r0, #4
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	3301      	adds	r3, #1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	3307      	adds	r3, #7
 8001ace:	08db      	lsrs	r3, r3, #3
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ad6:	ab04      	add	r3, sp, #16
 8001ad8:	3301      	adds	r3, #1
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
	for (int i = 0; i < 2 * nsamples; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001ae8:	f8b7 3446 	ldrh.w	r3, [r7, #1094]	; 0x446
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8001af2:	429a      	cmp	r2, r3
 8001af4:	da0e      	bge.n	8001b14 <_ZN8hitspool19hs_hit_io_unit_testEv+0x104>
		waveform_buffer[i] = i; //2 * nsamples - i;
 8001af6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001afa:	b299      	uxth	r1, r3
 8001afc:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001b00:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8001b04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 2 * nsamples; i++)
 8001b08:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001b12:	e7e9      	b.n	8001ae8 <_ZN8hitspool19hs_hit_io_unit_testEv+0xd8>
	sprintf(pattern, "SCGPHD");
 8001b14:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001b18:	499d      	ldr	r1, [pc, #628]	; (8001d90 <_ZN8hitspool19hs_hit_io_unit_testEv+0x380>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00c fe6c 	bl	800e7f8 <siprintf>
    SPEHit *spe_pattern = (SPEHit *)pattern;
 8001b20:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001b24:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
	SPEHit *speh = new SPEHit(0xA, 0xB, 0xC, 0xD);
 8001b28:	2006      	movs	r0, #6
 8001b2a:	f00c fcdb 	bl	800e4e4 <_Znwj>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461c      	mov	r4, r3
 8001b32:	230d      	movs	r3, #13
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	230c      	movs	r3, #12
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	230b      	movs	r3, #11
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	f04f 020a 	mov.w	r2, #10
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff f8c1 	bl	8000cce <_ZN8hitspool6SPEHitC1Eyhht>
 8001b4c:	f8c7 4434 	str.w	r4, [r7, #1076]	; 0x434
	MPEHit *mpeh = new (nsamples) MPEHit(0xCDEF, 0x4, nsamples, (u8 *)waveform_buffer);
 8001b50:	f8b7 3446 	ldrh.w	r3, [r7, #1094]	; 0x446
 8001b54:	4619      	mov	r1, r3
 8001b56:	2006      	movs	r0, #6
 8001b58:	f7ff f91f 	bl	8000d9a <_ZN8hitspool6MPEHitnwEjt>
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	f8b7 3446 	ldrh.w	r3, [r7, #1094]	; 0x446
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	f64c 52ef 	movw	r2, #52719	; 0xcdef
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff f8f2 	bl	8000d60 <_ZN8hitspool6MPEHitC1EyhtPh>
 8001b7c:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
	hitpacket<SPEHit> *spep = new hitpacket<SPEHit>(0, 0x1234ABCD, speh);
 8001b80:	200b      	movs	r0, #11
 8001b82:	f00c fcaf 	bl	800e4e4 <_Znwj>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461c      	mov	r4, r3
 8001b8a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	a377      	add	r3, pc, #476	; (adr r3, 8001d70 <_ZN8hitspool19hs_hit_io_unit_testEv+0x360>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	2100      	movs	r1, #0
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f000 f905 	bl	8001da8 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>
 8001b9e:	f8c7 442c 	str.w	r4, [r7, #1068]	; 0x42c
	hitpacket<MPEHit> *mpep = new hitpacket<MPEHit>(0, 0x1234ABCD, mpeh);
 8001ba2:	200b      	movs	r0, #11
 8001ba4:	f00c fc9e 	bl	800e4e4 <_Znwj>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461c      	mov	r4, r3
 8001bac:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	a36f      	add	r3, pc, #444	; (adr r3, 8001d70 <_ZN8hitspool19hs_hit_io_unit_testEv+0x360>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f000 f92c 	bl	8001e18 <_ZN8hitspool9hitpacketINS_6MPEHitEEC1EhyPS1_>
 8001bc0:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
	hitpacket<SPEHit> *spep_pattern = new hitpacket<SPEHit>(0, 0x1234ABCD, spe_pattern);
 8001bc4:	200b      	movs	r0, #11
 8001bc6:	f00c fc8d 	bl	800e4e4 <_Znwj>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461c      	mov	r4, r3
 8001bce:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	a366      	add	r3, pc, #408	; (adr r3, 8001d70 <_ZN8hitspool19hs_hit_io_unit_testEv+0x360>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f000 f8e3 	bl	8001da8 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>
 8001be2:	f8c7 4424 	str.w	r4, [r7, #1060]	; 0x424
	spep_pattern->hit->pl_type = PL_SPE;
 8001be6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001bea:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8001bee:	7813      	ldrb	r3, [r2, #0]
 8001bf0:	f36f 0301 	bfc	r3, #0, #2
 8001bf4:	7013      	strb	r3, [r2, #0]
	int nhits_to_write = 5000;
 8001bf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bfa:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
	int nhits_written = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
	for (int i = 0; i < nhits_to_write; i++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001c0a:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001c0e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001c12:	429a      	cmp	r2, r3
 8001c14:	da20      	bge.n	8001c58 <_ZN8hitspool19hs_hit_io_unit_testEv+0x248>
		spep->hit->tdc++;
 8001c16:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001c1a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001c1e:	781a      	ldrb	r2, [r3, #0]
 8001c20:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	3201      	adds	r2, #1
 8001c28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001c2c:	b2d1      	uxtb	r1, r2
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	f361 0287 	bfi	r2, r1, #2, #6
 8001c34:	701a      	strb	r2, [r3, #0]
		s->add_hit(spep);
 8001c36:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 8001c3a:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8001c3e:	f000 f923 	bl	8001e88 <_ZN8hitspool8streamer7add_hitINS_9hitpacketINS_6SPEHitEEEEEmPT_>
		nhits_written++;
 8001c42:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001c46:	3301      	adds	r3, #1
 8001c48:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
	for (int i = 0; i < nhits_to_write; i++) {
 8001c4c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001c50:	3301      	adds	r3, #1
 8001c52:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001c56:	e7d8      	b.n	8001c0a <_ZN8hitspool19hs_hit_io_unit_testEv+0x1fa>
	for (int i = 0; i < NUM_PMT; i++) {
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8001c5e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dc0e      	bgt.n	8001c84 <_ZN8hitspool19hs_hit_io_unit_testEv+0x274>
		s->check_and_write_buffer(i, true);
 8001c66:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8001c74:	f7ff fcb6 	bl	80015e4 <_ZN8hitspool8streamer22check_and_write_bufferEhb>
	for (int i = 0; i < NUM_PMT; i++) {
 8001c78:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8001c82:	e7ec      	b.n	8001c5e <_ZN8hitspool19hs_hit_io_unit_testEv+0x24e>
	s->close_file_handlers();
 8001c84:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8001c88:	f7ff fc66 	bl	8001558 <_ZN8hitspool8streamer19close_file_handlersEv>
	print("-----------------------------------\r\n");
 8001c8c:	483a      	ldr	r0, [pc, #232]	; (8001d78 <_ZN8hitspool19hs_hit_io_unit_testEv+0x368>)
 8001c8e:	f7fe fd07 	bl	80006a0 <print>
	print("Opening PMT0 file for reading.\r\n");
 8001c92:	4840      	ldr	r0, [pc, #256]	; (8001d94 <_ZN8hitspool19hs_hit_io_unit_testEv+0x384>)
 8001c94:	f7fe fd04 	bl	80006a0 <print>
	FRESULT fres = f_open(&(s->file_handlers[0]), s->live_filenames[0], FA_READ);
 8001c98:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001c9c:	f503 7084 	add.w	r0, r3, #264	; 0x108
 8001ca0:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f00b fbd1 	bl	800d450 <f_open>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	if (fres != FR_OK)
 8001cb4:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <_ZN8hitspool19hs_hit_io_unit_testEv+0x2b2>
		print("Error opening file for reading.\r\n");
 8001cbc:	4836      	ldr	r0, [pc, #216]	; (8001d98 <_ZN8hitspool19hs_hit_io_unit_testEv+0x388>)
 8001cbe:	f7fe fcef 	bl	80006a0 <print>
	print("Reading hits...\r\n");
 8001cc2:	4836      	ldr	r0, [pc, #216]	; (8001d9c <_ZN8hitspool19hs_hit_io_unit_testEv+0x38c>)
 8001cc4:	f7fe fcec 	bl	80006a0 <print>
	print("-----------------------------------\r\n");
 8001cc8:	482b      	ldr	r0, [pc, #172]	; (8001d78 <_ZN8hitspool19hs_hit_io_unit_testEv+0x368>)
 8001cca:	f7fe fce9 	bl	80006a0 <print>
	Streamer_RC_t read_status = STREAMER_RC_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
	u8 *next_hit_contants = NULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	UINT br = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	UINT btr = 6; // or sizeof(MPEHit)
 8001ce0:	2306      	movs	r3, #6
 8001ce2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	int nhits_read = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
		read_status = s->read_next_hit(&(s->file_handlers[0]), &next_hit_type, next_hit_contants);
 8001cec:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001cf0:	f503 7184 	add.w	r1, r3, #264	; 0x108
 8001cf4:	f207 4207 	addw	r2, r7, #1031	; 0x407
 8001cf8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001cfc:	f8d7 0448 	ldr.w	r0, [r7, #1096]	; 0x448
 8001d00:	f7ff fdb6 	bl	8001870 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
		if (read_status != STREAMER_RC_OK) {
 8001d0a:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00e      	beq.n	8001d30 <_ZN8hitspool19hs_hit_io_unit_testEv+0x320>
			if (read_status == STREAMER_RC_EOF) {
 8001d12:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d103      	bne.n	8001d22 <_ZN8hitspool19hs_hit_io_unit_testEv+0x312>
				print("Reached EOF; exiting read.\r\n");
 8001d1a:	4821      	ldr	r0, [pc, #132]	; (8001da0 <_ZN8hitspool19hs_hit_io_unit_testEv+0x390>)
 8001d1c:	f7fe fcc0 	bl	80006a0 <print>
			break;
 8001d20:	e014      	b.n	8001d4c <_ZN8hitspool19hs_hit_io_unit_testEv+0x33c>
				print("Streamer exited with code %d\r\n", read_status);
 8001d22:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 8001d26:	4619      	mov	r1, r3
 8001d28:	481e      	ldr	r0, [pc, #120]	; (8001da4 <_ZN8hitspool19hs_hit_io_unit_testEv+0x394>)
 8001d2a:	f7fe fcb9 	bl	80006a0 <print>
			break;
 8001d2e:	e00d      	b.n	8001d4c <_ZN8hitspool19hs_hit_io_unit_testEv+0x33c>
			nhits_read++;
 8001d30:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001d34:	3301      	adds	r3, #1
 8001d36:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
		if (next_hit_contants != NULL)
 8001d3a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0d4      	beq.n	8001cec <_ZN8hitspool19hs_hit_io_unit_testEv+0x2dc>
			free(next_hit_contants);
 8001d42:	f8d7 0418 	ldr.w	r0, [r7, #1048]	; 0x418
 8001d46:	f00c fc21 	bl	800e58c <free>
		read_status = s->read_next_hit(&(s->file_handlers[0]), &next_hit_type, next_hit_contants);
 8001d4a:	e7cf      	b.n	8001cec <_ZN8hitspool19hs_hit_io_unit_testEv+0x2dc>
	if (nhits_read == nhits_written)
 8001d4c:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 8001d50:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d101      	bne.n	8001d5c <_ZN8hitspool19hs_hit_io_unit_testEv+0x34c>
		return G_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <_ZN8hitspool19hs_hit_io_unit_testEv+0x34e>
		return G_NOTOK;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	46ad      	mov	sp, r5
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	f3af 8000 	nop.w
 8001d70:	1234abcd 	.word	0x1234abcd
 8001d74:	00000000 	.word	0x00000000
 8001d78:	0800f144 	.word	0x0800f144
 8001d7c:	0800f494 	.word	0x0800f494
 8001d80:	0800f448 	.word	0x0800f448
 8001d84:	0800f4b8 	.word	0x0800f4b8
 8001d88:	0800f4d8 	.word	0x0800f4d8
 8001d8c:	0800f4f0 	.word	0x0800f4f0
 8001d90:	0800f51c 	.word	0x0800f51c
 8001d94:	0800f524 	.word	0x0800f524
 8001d98:	0800f548 	.word	0x0800f548
 8001d9c:	0800f56c 	.word	0x0800f56c
 8001da0:	0800f580 	.word	0x0800f580
 8001da4:	0800f5a0 	.word	0x0800f5a0

08001da8 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>:

            u8 PMT : 8;
            u64 trecv : 48;
            T* hit; //SPEHit, MPEHit, WUBBuf

        hitpacket(u8 PMT, u64 trecv, T* h){
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	e9c7 2300 	strd	r2, r3, [r7]
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
        	this->PMT = PMT;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	7afa      	ldrb	r2, [r7, #11]
 8001dbc:	701a      	strb	r2, [r3, #0]
        	this->trecv = trecv;
 8001dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001dca:	ea02 0400 	and.w	r4, r2, r0
 8001dce:	ea03 0501 	and.w	r5, r3, r1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f8c3 4001 	str.w	r4, [r3, #1]
 8001dd8:	462a      	mov	r2, r5
 8001dda:	f8a3 2005 	strh.w	r2, [r3, #5]
            this->hit = (T*)malloc(h->calc_size());
 8001dde:	6a38      	ldr	r0, [r7, #32]
 8001de0:	f7fe ffb3 	bl	8000d4a <_ZN8hitspool6SPEHit9calc_sizeEv>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f00c fbc8 	bl	800e57c <malloc>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f8c3 2007 	str.w	r2, [r3, #7]
            memcpy((void*)this->hit, (void*)h, h->calc_size());
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f8d3 4007 	ldr.w	r4, [r3, #7]
 8001dfc:	6a38      	ldr	r0, [r7, #32]
 8001dfe:	f7fe ffa4 	bl	8000d4a <_ZN8hitspool6SPEHit9calc_sizeEv>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	6a39      	ldr	r1, [r7, #32]
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f00c fbc7 	bl	800e59c <memcpy>
        };
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bdb0      	pop	{r4, r5, r7, pc}

08001e18 <_ZN8hitspool9hitpacketINS_6MPEHitEEC1EhyPS1_>:
        hitpacket(u8 PMT, u64 trecv, T* h){
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	e9c7 2300 	strd	r2, r3, [r7]
 8001e24:	460b      	mov	r3, r1
 8001e26:	72fb      	strb	r3, [r7, #11]
        	this->PMT = PMT;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	7afa      	ldrb	r2, [r7, #11]
 8001e2c:	701a      	strb	r2, [r3, #0]
        	this->trecv = trecv;
 8001e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e3a:	ea02 0400 	and.w	r4, r2, r0
 8001e3e:	ea03 0501 	and.w	r5, r3, r1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f8c3 4001 	str.w	r4, [r3, #1]
 8001e48:	462a      	mov	r2, r5
 8001e4a:	f8a3 2005 	strh.w	r2, [r3, #5]
            this->hit = (T*)malloc(h->calc_size());
 8001e4e:	6a38      	ldr	r0, [r7, #32]
 8001e50:	f7fe ffb7 	bl	8000dc2 <_ZN8hitspool6MPEHit9calc_sizeEv>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00c fb90 	bl	800e57c <malloc>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8c3 2007 	str.w	r2, [r3, #7]
            memcpy((void*)this->hit, (void*)h, h->calc_size());
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f8d3 4007 	ldr.w	r4, [r3, #7]
 8001e6c:	6a38      	ldr	r0, [r7, #32]
 8001e6e:	f7fe ffa8 	bl	8000dc2 <_ZN8hitspool6MPEHit9calc_sizeEv>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	6a39      	ldr	r1, [r7, #32]
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f00c fb8f 	bl	800e59c <memcpy>
        };
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdb0      	pop	{r4, r5, r7, pc}

08001e88 <_ZN8hitspool8streamer7add_hitINS_9hitpacketINS_6SPEHitEEEEEmPT_>:

            Streamer_RC_t read_next_hit(FIL* file, PayloadType_t *type, u8* hitbuffer);

            FRESULT check_and_write_buffer(u8 PMT, bool force);            

            template <typename T> u32 add_hit(T* hit_packet){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
                u8 PMT = hit_packet->PMT; 
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	73fb      	strb	r3, [r7, #15]
                u16 write_size = hit_packet->hit->calc_size();
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ff53 	bl	8000d4a <_ZN8hitspool6SPEHit9calc_sizeEv>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	81bb      	strh	r3, [r7, #12]
                memcpy(write_head[PMT], (u8*)hit_packet->hit, write_size);
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8001eb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001eba:	89ba      	ldrh	r2, [r7, #12]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f00c fb6d 	bl	800e59c <memcpy>
                write_head[PMT]+=write_size;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8001eca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ece:	89bb      	ldrh	r3, [r7, #12]
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	4419      	add	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8001eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_consumed[PMT]+=write_size;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	89ba      	ldrh	r2, [r7, #12]
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	440a      	add	r2, r1
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	605a      	str	r2, [r3, #4]
                nhits_inbuff[PMT]++;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	0053      	lsls	r3, r2, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	885b      	ldrh	r3, [r3, #2]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b298      	uxth	r0, r3
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	0053      	lsls	r3, r2, #1
 8001f10:	440b      	add	r3, r1
 8001f12:	4602      	mov	r2, r0
 8001f14:	805a      	strh	r2, [r3, #2]
                
                check_and_write_buffer(PMT, false);
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fb61 	bl	80015e4 <_ZN8hitspool8streamer22check_and_write_bufferEhb>
                return 0;
 8001f22:	2300      	movs	r3, #0
            };
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	return 1;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_kill>:

int _kill(int pid, int sig)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f46:	f00c faef 	bl	800e528 <__errno>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2216      	movs	r2, #22
 8001f4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_exit>:

void _exit (int status)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ffe7 	bl	8001f3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f6e:	e7fe      	b.n	8001f6e <_exit+0x12>

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f00c fac2 	bl	800e528 <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	24080000 	.word	0x24080000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	240002ec 	.word	0x240002ec
 8001fd8:	24001c20 	.word	0x24001c20

08001fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <SystemInit+0xec>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <SystemInit+0xec>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <SystemInit+0xf0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	2b06      	cmp	r3, #6
 8001ffa:	d807      	bhi.n	800200c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ffc:	4b33      	ldr	r3, [pc, #204]	; (80020cc <SystemInit+0xf0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 030f 	bic.w	r3, r3, #15
 8002004:	4a31      	ldr	r2, [pc, #196]	; (80020cc <SystemInit+0xf0>)
 8002006:	f043 0307 	orr.w	r3, r3, #7
 800200a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800200c:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <SystemInit+0xf4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2f      	ldr	r2, [pc, #188]	; (80020d0 <SystemInit+0xf4>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <SystemInit+0xf4>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <SystemInit+0xf4>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	492b      	ldr	r1, [pc, #172]	; (80020d0 <SystemInit+0xf4>)
 8002024:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <SystemInit+0xf8>)
 8002026:	4013      	ands	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800202a:	4b28      	ldr	r3, [pc, #160]	; (80020cc <SystemInit+0xf0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <SystemInit+0xf0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 030f 	bic.w	r3, r3, #15
 800203e:	4a23      	ldr	r2, [pc, #140]	; (80020cc <SystemInit+0xf0>)
 8002040:	f043 0307 	orr.w	r3, r3, #7
 8002044:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <SystemInit+0xf4>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <SystemInit+0xf4>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <SystemInit+0xf4>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <SystemInit+0xf4>)
 800205a:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <SystemInit+0xfc>)
 800205c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <SystemInit+0xf4>)
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <SystemInit+0x100>)
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <SystemInit+0xf4>)
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <SystemInit+0x104>)
 8002068:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <SystemInit+0xf4>)
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <SystemInit+0xf4>)
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <SystemInit+0x104>)
 8002074:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <SystemInit+0xf4>)
 8002078:	2200      	movs	r2, #0
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <SystemInit+0xf4>)
 800207e:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <SystemInit+0x104>)
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <SystemInit+0xf4>)
 8002084:	2200      	movs	r2, #0
 8002086:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <SystemInit+0xf4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a10      	ldr	r2, [pc, #64]	; (80020d0 <SystemInit+0xf4>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <SystemInit+0xf4>)
 8002096:	2200      	movs	r2, #0
 8002098:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <SystemInit+0x108>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <SystemInit+0x10c>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020a6:	d202      	bcs.n	80020ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <SystemInit+0x110>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <SystemInit+0x114>)
 80020b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80020b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SystemInit+0xec>)
 80020b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020bc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00
 80020cc:	52002000 	.word	0x52002000
 80020d0:	58024400 	.word	0x58024400
 80020d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80020d8:	02020200 	.word	0x02020200
 80020dc:	01ff0000 	.word	0x01ff0000
 80020e0:	01010280 	.word	0x01010280
 80020e4:	5c001000 	.word	0x5c001000
 80020e8:	ffff0000 	.word	0xffff0000
 80020ec:	51008108 	.word	0x51008108
 80020f0:	52004000 	.word	0x52004000

080020f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800212c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020f8:	f7ff ff70 	bl	8001fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f00c fa07 	bl	800e534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002126:	f7fe faf7 	bl	8000718 <main>
  bx  lr
 800212a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800212c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002130:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002134:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002138:	0800fb44 	.word	0x0800fb44
  ldr r2, =_sbss
 800213c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002140:	24001c20 	.word	0x24001c20

08002144 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC3_IRQHandler>
	...

08002148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214e:	2003      	movs	r0, #3
 8002150:	f000 f98c 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002154:	f001 f9c6 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_Init+0x68>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	4913      	ldr	r1, [pc, #76]	; (80021b4 <HAL_Init+0x6c>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_Init+0x68>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_Init+0x6c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <HAL_Init+0x70>)
 800218a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_Init+0x74>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002192:	2000      	movs	r0, #0
 8002194:	f000 f814 	bl	80021c0 <HAL_InitTick>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e002      	b.n	80021a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021a2:	f7fe fed3 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	58024400 	.word	0x58024400
 80021b4:	0800f614 	.word	0x0800f614
 80021b8:	24000004 	.word	0x24000004
 80021bc:	24000000 	.word	0x24000000

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_InitTick+0x60>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e021      	b.n	8002218 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_InitTick+0x64>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_InitTick+0x60>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f971 	bl	80024d2 <HAL_SYSTICK_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00e      	b.n	8002218 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d80a      	bhi.n	8002216 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002200:	2200      	movs	r2, #0
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002208:	f000 f93b 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800220c:	4a06      	ldr	r2, [pc, #24]	; (8002228 <HAL_InitTick+0x68>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2400000c 	.word	0x2400000c
 8002224:	24000000 	.word	0x24000000
 8002228:	24000008 	.word	0x24000008

0800222c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_IncTick+0x20>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_IncTick+0x24>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4413      	add	r3, r2
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_IncTick+0x24>)
 800223e:	6013      	str	r3, [r2, #0]
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	2400000c 	.word	0x2400000c
 8002250:	24001760 	.word	0x24001760

08002254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return uwTick;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_GetTick+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	24001760 	.word	0x24001760

0800226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff ffee 	bl	8002254 <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002284:	d005      	beq.n	8002292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_Delay+0x44>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002292:	bf00      	nop
 8002294:	f7ff ffde 	bl	8002254 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d8f7      	bhi.n	8002294 <HAL_Delay+0x28>
  {
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2400000c 	.word	0x2400000c

080022b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_GetREVID+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0c1b      	lsrs	r3, r3, #16
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	5c001000 	.word	0x5c001000

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00
 8002310:	05fa0000 	.word	0x05fa0000

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff40 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff90 	bl	80023c0 <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5f 	bl	800236c <__NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff33 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa4 	bl	8002428 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024fa:	4b89      	ldr	r3, [pc, #548]	; (8002720 <HAL_GPIO_Init+0x234>)
 80024fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024fe:	e194      	b.n	800282a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 8186 	beq.w	8002824 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d00b      	beq.n	8002538 <HAL_GPIO_Init+0x4c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d007      	beq.n	8002538 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800252c:	2b11      	cmp	r3, #17
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b12      	cmp	r3, #18
 8002536:	d130      	bne.n	800259a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256e:	2201      	movs	r2, #1
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 0201 	and.w	r2, r3, #1
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0xee>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b12      	cmp	r3, #18
 80025d8:	d123      	bne.n	8002622 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	69b9      	ldr	r1, [r7, #24]
 800261e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0203 	and.w	r2, r3, #3
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80e0 	beq.w	8002824 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002664:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <HAL_GPIO_Init+0x238>)
 8002666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800266a:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <HAL_GPIO_Init+0x238>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_GPIO_Init+0x238>)
 8002676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002682:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_GPIO_Init+0x23c>)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	220f      	movs	r2, #15
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_GPIO_Init+0x240>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d052      	beq.n	8002754 <HAL_GPIO_Init+0x268>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <HAL_GPIO_Init+0x244>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d031      	beq.n	800271a <HAL_GPIO_Init+0x22e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <HAL_GPIO_Init+0x248>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d02b      	beq.n	8002716 <HAL_GPIO_Init+0x22a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_GPIO_Init+0x24c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d025      	beq.n	8002712 <HAL_GPIO_Init+0x226>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_GPIO_Init+0x250>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d01f      	beq.n	800270e <HAL_GPIO_Init+0x222>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_GPIO_Init+0x254>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d019      	beq.n	800270a <HAL_GPIO_Init+0x21e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_GPIO_Init+0x258>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_GPIO_Init+0x21a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_GPIO_Init+0x25c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00d      	beq.n	8002702 <HAL_GPIO_Init+0x216>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_GPIO_Init+0x260>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x212>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_GPIO_Init+0x264>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_GPIO_Init+0x20e>
 80026f6:	2309      	movs	r3, #9
 80026f8:	e02d      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 80026fa:	230a      	movs	r3, #10
 80026fc:	e02b      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 80026fe:	2308      	movs	r3, #8
 8002700:	e029      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 8002702:	2307      	movs	r3, #7
 8002704:	e027      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 8002706:	2306      	movs	r3, #6
 8002708:	e025      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 800270a:	2305      	movs	r3, #5
 800270c:	e023      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 800270e:	2304      	movs	r3, #4
 8002710:	e021      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 8002712:	2303      	movs	r3, #3
 8002714:	e01f      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 8002716:	2302      	movs	r3, #2
 8002718:	e01d      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 800271a:	2301      	movs	r3, #1
 800271c:	e01b      	b.n	8002756 <HAL_GPIO_Init+0x26a>
 800271e:	bf00      	nop
 8002720:	58000080 	.word	0x58000080
 8002724:	58024400 	.word	0x58024400
 8002728:	58000400 	.word	0x58000400
 800272c:	58020000 	.word	0x58020000
 8002730:	58020400 	.word	0x58020400
 8002734:	58020800 	.word	0x58020800
 8002738:	58020c00 	.word	0x58020c00
 800273c:	58021000 	.word	0x58021000
 8002740:	58021400 	.word	0x58021400
 8002744:	58021800 	.word	0x58021800
 8002748:	58021c00 	.word	0x58021c00
 800274c:	58022000 	.word	0x58022000
 8002750:	58022400 	.word	0x58022400
 8002754:	2300      	movs	r3, #0
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	f002 0203 	and.w	r2, r2, #3
 800275c:	0092      	lsls	r2, r2, #2
 800275e:	4093      	lsls	r3, r2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002766:	4938      	ldr	r1, [pc, #224]	; (8002848 <HAL_GPIO_Init+0x35c>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800281c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f ae63 	bne.w	8002500 <HAL_GPIO_Init+0x14>
  }
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	3724      	adds	r7, #36	; 0x24
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	58000400 	.word	0x58000400

0800284c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e001      	b.n	800286e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	807b      	strh	r3, [r7, #2]
 8002888:	4613      	mov	r3, r2
 800288a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288c:	787b      	ldrb	r3, [r7, #1]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002892:	887a      	ldrh	r2, [r7, #2]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002898:	e003      	b.n	80028a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800289a:	887b      	ldrh	r3, [r7, #2]
 800289c:	041a      	lsls	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	619a      	str	r2, [r3, #24]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c0:	887a      	ldrh	r2, [r7, #2]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	400b      	ands	r3, r1
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	619a      	str	r2, [r3, #24]
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_PWREx_ConfigSupply+0x70>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d00a      	beq.n	800290e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_PWREx_ConfigSupply+0x70>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	d001      	beq.n	800290a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e01f      	b.n	800294a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e01d      	b.n	800294a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_PWREx_ConfigSupply+0x70>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 0207 	bic.w	r2, r3, #7
 8002916:	490f      	ldr	r1, [pc, #60]	; (8002954 <HAL_PWREx_ConfigSupply+0x70>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4313      	orrs	r3, r2
 800291c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800291e:	f7ff fc99 	bl	8002254 <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002924:	e009      	b.n	800293a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002926:	f7ff fc95 	bl	8002254 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002934:	d901      	bls.n	800293a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e007      	b.n	800294a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_PWREx_ConfigSupply+0x70>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002946:	d1ee      	bne.n	8002926 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	58024800 	.word	0x58024800

08002958 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	; 0x30
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e3ff      	b.n	800316a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8087 	beq.w	8002a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002978:	4b99      	ldr	r3, [pc, #612]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002982:	4b97      	ldr	r3, [pc, #604]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298a:	2b10      	cmp	r3, #16
 800298c:	d007      	beq.n	800299e <HAL_RCC_OscConfig+0x46>
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	2b18      	cmp	r3, #24
 8002992:	d110      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5e>
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d10b      	bne.n	80029b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299e:	4b90      	ldr	r3, [pc, #576]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d06c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x12c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d168      	bne.n	8002a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e3d9      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x76>
 80029c0:	4b87      	ldr	r3, [pc, #540]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a86      	ldr	r2, [pc, #536]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e02e      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b82      	ldr	r3, [pc, #520]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a81      	ldr	r2, [pc, #516]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b7f      	ldr	r3, [pc, #508]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7e      	ldr	r2, [pc, #504]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e01d      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0xbc>
 80029fa:	4b79      	ldr	r3, [pc, #484]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a78      	ldr	r2, [pc, #480]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b76      	ldr	r3, [pc, #472]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a75      	ldr	r2, [pc, #468]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0xd4>
 8002a14:	4b72      	ldr	r3, [pc, #456]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a71      	ldr	r2, [pc, #452]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a6e      	ldr	r2, [pc, #440]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff fc0e 	bl	8002254 <HAL_GetTick>
 8002a38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff fc0a 	bl	8002254 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e38d      	b.n	800316a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a4e:	4b64      	ldr	r3, [pc, #400]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0xe4>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fbfa 	bl	8002254 <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff fbf6 	bl	8002254 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e379      	b.n	800316a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a76:	4b5a      	ldr	r3, [pc, #360]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x10c>
 8002a82:	e000      	b.n	8002a86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80ae 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a94:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a9e:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_RCC_OscConfig+0x162>
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b18      	cmp	r3, #24
 8002aae:	d13a      	bne.n	8002b26 <HAL_RCC_OscConfig+0x1ce>
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d135      	bne.n	8002b26 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aba:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x17a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e34b      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	f7ff fbef 	bl	80022b4 <HAL_GetREVID>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d817      	bhi.n	8002b10 <HAL_RCC_OscConfig+0x1b8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b40      	cmp	r3, #64	; 0x40
 8002ae6:	d108      	bne.n	8002afa <HAL_RCC_OscConfig+0x1a2>
 8002ae8:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002af0:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af8:	e07a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	031b      	lsls	r3, r3, #12
 8002b08:	4935      	ldr	r1, [pc, #212]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0e:	e06f      	b.n	8002bf0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	4930      	ldr	r1, [pc, #192]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b24:	e064      	b.n	8002bf0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d045      	beq.n	8002bba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0219 	bic.w	r2, r3, #25
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4929      	ldr	r1, [pc, #164]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7ff fb88 	bl	8002254 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b48:	f7ff fb84 	bl	8002254 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e307      	b.n	800316a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	f7ff fba5 	bl	80022b4 <HAL_GetREVID>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d817      	bhi.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d108      	bne.n	8002b8e <HAL_RCC_OscConfig+0x236>
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b84:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8a:	6053      	str	r3, [r2, #4]
 8002b8c:	e030      	b.n	8002bf0 <HAL_RCC_OscConfig+0x298>
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	031b      	lsls	r3, r3, #12
 8002b9c:	4910      	ldr	r1, [pc, #64]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
 8002ba2:	e025      	b.n	8002bf0 <HAL_RCC_OscConfig+0x298>
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	061b      	lsls	r3, r3, #24
 8002bb2:	490b      	ldr	r1, [pc, #44]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
 8002bb8:	e01a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_RCC_OscConfig+0x288>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7ff fb45 	bl	8002254 <HAL_GetTick>
 8002bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7ff fb41 	bl	8002254 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d903      	bls.n	8002be4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e2c4      	b.n	800316a <HAL_RCC_OscConfig+0x812>
 8002be0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be4:	4ba4      	ldr	r3, [pc, #656]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ee      	bne.n	8002bce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80a9 	beq.w	8002d50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	4b9e      	ldr	r3, [pc, #632]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c08:	4b9b      	ldr	r3, [pc, #620]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d007      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2cc>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b18      	cmp	r3, #24
 8002c18:	d13a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x338>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d135      	bne.n	8002c90 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c24:	4b94      	ldr	r3, [pc, #592]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2e4>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e296      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c3c:	f7ff fb3a 	bl	80022b4 <HAL_GetREVID>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d817      	bhi.n	8002c7a <HAL_RCC_OscConfig+0x322>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d108      	bne.n	8002c64 <HAL_RCC_OscConfig+0x30c>
 8002c52:	4b89      	ldr	r3, [pc, #548]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c5a:	4a87      	ldr	r2, [pc, #540]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c62:	e075      	b.n	8002d50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c64:	4b84      	ldr	r3, [pc, #528]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	069b      	lsls	r3, r3, #26
 8002c72:	4981      	ldr	r1, [pc, #516]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c78:	e06a      	b.n	8002d50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	061b      	lsls	r3, r3, #24
 8002c88:	497b      	ldr	r1, [pc, #492]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c8e:	e05f      	b.n	8002d50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d042      	beq.n	8002d1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c98:	4b77      	ldr	r3, [pc, #476]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a76      	ldr	r2, [pc, #472]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7ff fad6 	bl	8002254 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cac:	f7ff fad2 	bl	8002254 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e255      	b.n	800316a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cbe:	4b6e      	ldr	r3, [pc, #440]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cca:	f7ff faf3 	bl	80022b4 <HAL_GetREVID>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d817      	bhi.n	8002d08 <HAL_RCC_OscConfig+0x3b0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d108      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x39a>
 8002ce0:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ce8:	4a63      	ldr	r2, [pc, #396]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cee:	6053      	str	r3, [r2, #4]
 8002cf0:	e02e      	b.n	8002d50 <HAL_RCC_OscConfig+0x3f8>
 8002cf2:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	069b      	lsls	r3, r3, #26
 8002d00:	495d      	ldr	r1, [pc, #372]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	604b      	str	r3, [r1, #4]
 8002d06:	e023      	b.n	8002d50 <HAL_RCC_OscConfig+0x3f8>
 8002d08:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	4958      	ldr	r1, [pc, #352]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60cb      	str	r3, [r1, #12]
 8002d1c:	e018      	b.n	8002d50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d1e:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a55      	ldr	r2, [pc, #340]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7ff fa93 	bl	8002254 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d32:	f7ff fa8f 	bl	8002254 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e212      	b.n	800316a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d44:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d036      	beq.n	8002dca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d019      	beq.n	8002d98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d64:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d68:	4a43      	ldr	r2, [pc, #268]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7ff fa70 	bl	8002254 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d78:	f7ff fa6c 	bl	8002254 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1ef      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d8a:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x420>
 8002d96:	e018      	b.n	8002dca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d98:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	4a36      	ldr	r2, [pc, #216]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7ff fa56 	bl	8002254 <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7ff fa52 	bl	8002254 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1d5      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dbe:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dde:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002de8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dea:	f7ff fa33 	bl	8002254 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002df2:	f7ff fa2f 	bl	8002254 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1b2      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e04:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x49a>
 8002e10:	e018      	b.n	8002e44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e1e:	f7ff fa19 	bl	8002254 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e26:	f7ff fa15 	bl	8002254 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e198      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_RCC_OscConfig+0x520>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8085 	beq.w	8002f5c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCC_OscConfig+0x524>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_RCC_OscConfig+0x524>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e5e:	f7ff f9f9 	bl	8002254 <HAL_GetTick>
 8002e62:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e64:	e00c      	b.n	8002e80 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7ff f9f5 	bl	8002254 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d905      	bls.n	8002e80 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e178      	b.n	800316a <HAL_RCC_OscConfig+0x812>
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e80:	4b96      	ldr	r3, [pc, #600]	; (80030dc <HAL_RCC_OscConfig+0x784>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ec      	beq.n	8002e66 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x54a>
 8002e94:	4b92      	ldr	r3, [pc, #584]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a91      	ldr	r2, [pc, #580]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	e02d      	b.n	8002efe <HAL_RCC_OscConfig+0x5a6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x56c>
 8002eaa:	4b8d      	ldr	r3, [pc, #564]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a8c      	ldr	r2, [pc, #560]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	4b8a      	ldr	r3, [pc, #552]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a89      	ldr	r2, [pc, #548]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	e01c      	b.n	8002efe <HAL_RCC_OscConfig+0x5a6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d10c      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x58e>
 8002ecc:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a83      	ldr	r2, [pc, #524]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	4b81      	ldr	r3, [pc, #516]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a80      	ldr	r2, [pc, #512]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	e00b      	b.n	8002efe <HAL_RCC_OscConfig+0x5a6>
 8002ee6:	4b7e      	ldr	r3, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a7d      	ldr	r2, [pc, #500]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	4b7b      	ldr	r3, [pc, #492]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a7a      	ldr	r2, [pc, #488]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d015      	beq.n	8002f32 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7ff f9a5 	bl	8002254 <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7ff f9a1 	bl	8002254 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e122      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f24:	4b6e      	ldr	r3, [pc, #440]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ee      	beq.n	8002f0e <HAL_RCC_OscConfig+0x5b6>
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7ff f98f 	bl	8002254 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7ff f98b 	bl	8002254 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e10c      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f50:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ee      	bne.n	8002f3a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8101 	beq.w	8003168 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f66:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6e:	2b18      	cmp	r3, #24
 8002f70:	f000 80bc 	beq.w	80030ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	f040 8095 	bne.w	80030a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a57      	ldr	r2, [pc, #348]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7ff f963 	bl	8002254 <HAL_GetTick>
 8002f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f92:	f7ff f95f 	bl	8002254 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0e2      	b.n	800316a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa4:	4b4e      	ldr	r3, [pc, #312]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb4:	4b4b      	ldr	r3, [pc, #300]	; (80030e4 <HAL_RCC_OscConfig+0x78c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	4946      	ldr	r1, [pc, #280]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	628b      	str	r3, [r1, #40]	; 0x28
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	025b      	lsls	r3, r3, #9
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ffa:	4939      	ldr	r1, [pc, #228]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003000:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4a36      	ldr	r2, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800300c:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800300e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003010:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <HAL_RCC_OscConfig+0x790>)
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003018:	00d2      	lsls	r2, r2, #3
 800301a:	4931      	ldr	r1, [pc, #196]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800301c:	4313      	orrs	r3, r2
 800301e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003020:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	f023 020c 	bic.w	r2, r3, #12
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	492c      	ldr	r1, [pc, #176]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800302e:	4313      	orrs	r3, r2
 8003030:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	f023 0202 	bic.w	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4928      	ldr	r1, [pc, #160]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003040:	4313      	orrs	r3, r2
 8003042:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003044:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	4a25      	ldr	r2, [pc, #148]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7ff f8e8 	bl	8002254 <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7ff f8e4 	bl	8002254 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e067      	b.n	800316a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x730>
 80030a6:	e05f      	b.n	8003168 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0c      	ldr	r2, [pc, #48]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 80030ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7ff f8ce 	bl	8002254 <HAL_GetTick>
 80030b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7ff f8ca 	bl	8002254 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e04d      	b.n	800316a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <HAL_RCC_OscConfig+0x788>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x764>
 80030da:	e045      	b.n	8003168 <HAL_RCC_OscConfig+0x810>
 80030dc:	58024800 	.word	0x58024800
 80030e0:	58024400 	.word	0x58024400
 80030e4:	fffffc0c 	.word	0xfffffc0c
 80030e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x81c>)
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_RCC_OscConfig+0x81c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d031      	beq.n	8003164 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0203 	and.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d12a      	bne.n	8003164 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d122      	bne.n	8003164 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d11a      	bne.n	8003164 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	0a5b      	lsrs	r3, r3, #9
 8003132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d111      	bne.n	8003164 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d108      	bne.n	8003164 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0e1b      	lsrs	r3, r3, #24
 8003156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3730      	adds	r7, #48	; 0x30
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	58024400 	.word	0x58024400

08003178 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e19c      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b8a      	ldr	r3, [pc, #552]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d910      	bls.n	80031bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b87      	ldr	r3, [pc, #540]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 020f 	bic.w	r2, r3, #15
 80031a2:	4985      	ldr	r1, [pc, #532]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b83      	ldr	r3, [pc, #524]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e184      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	4b7b      	ldr	r3, [pc, #492]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d908      	bls.n	80031ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031d8:	4b78      	ldr	r3, [pc, #480]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4975      	ldr	r1, [pc, #468]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d010      	beq.n	8003218 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	4b70      	ldr	r3, [pc, #448]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003202:	429a      	cmp	r2, r3
 8003204:	d908      	bls.n	8003218 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	496a      	ldr	r1, [pc, #424]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003214:	4313      	orrs	r3, r2
 8003216:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	4b64      	ldr	r3, [pc, #400]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003230:	429a      	cmp	r2, r3
 8003232:	d908      	bls.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003234:	4b61      	ldr	r3, [pc, #388]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	495e      	ldr	r1, [pc, #376]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003242:	4313      	orrs	r3, r2
 8003244:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800325e:	429a      	cmp	r2, r3
 8003260:	d908      	bls.n	8003274 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003262:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	4953      	ldr	r1, [pc, #332]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003270:	4313      	orrs	r3, r2
 8003272:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	4b4d      	ldr	r3, [pc, #308]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	429a      	cmp	r2, r3
 800328e:	d908      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f023 020f 	bic.w	r2, r3, #15
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4947      	ldr	r1, [pc, #284]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d055      	beq.n	800335a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4940      	ldr	r1, [pc, #256]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032c8:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d121      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0f6      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032e0:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d115      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0ea      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032f8:	4b30      	ldr	r3, [pc, #192]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0de      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003308:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0d6      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f023 0207 	bic.w	r2, r3, #7
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4925      	ldr	r1, [pc, #148]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003326:	4313      	orrs	r3, r2
 8003328:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fe ff93 	bl	8002254 <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003330:	e00a      	b.n	8003348 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003332:	f7fe ff8f 	bl	8002254 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0be      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003348:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	429a      	cmp	r2, r3
 8003358:	d1eb      	bne.n	8003332 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d010      	beq.n	8003388 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	429a      	cmp	r2, r3
 8003374:	d208      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	490e      	ldr	r1, [pc, #56]	; (80033bc <HAL_RCC_ClockConfig+0x244>)
 8003384:	4313      	orrs	r3, r2
 8003386:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d214      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 020f 	bic.w	r2, r3, #15
 800339e:	4906      	ldr	r1, [pc, #24]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_RCC_ClockConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e086      	b.n	80034c6 <HAL_RCC_ClockConfig+0x34e>
 80033b8:	52002000 	.word	0x52002000
 80033bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d8:	429a      	cmp	r2, r3
 80033da:	d208      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033dc:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	4939      	ldr	r1, [pc, #228]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003406:	429a      	cmp	r2, r3
 8003408:	d208      	bcs.n	800341c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800340a:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	492e      	ldr	r1, [pc, #184]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003418:	4313      	orrs	r3, r2
 800341a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699a      	ldr	r2, [r3, #24]
 800342c:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003434:	429a      	cmp	r2, r3
 8003436:	d208      	bcs.n	800344a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003438:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4922      	ldr	r1, [pc, #136]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003446:	4313      	orrs	r3, r2
 8003448:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d010      	beq.n	8003478 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003462:	429a      	cmp	r2, r3
 8003464:	d208      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4917      	ldr	r1, [pc, #92]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003474:	4313      	orrs	r3, r2
 8003476:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003478:	f000 f834 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	4912      	ldr	r1, [pc, #72]	; (80034d4 <HAL_RCC_ClockConfig+0x35c>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x358>)
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <HAL_RCC_ClockConfig+0x35c>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <HAL_RCC_ClockConfig+0x360>)
 80034ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034b0:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <HAL_RCC_ClockConfig+0x364>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x368>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fe80 	bl	80021c0 <HAL_InitTick>
 80034c0:	4603      	mov	r3, r0
 80034c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	58024400 	.word	0x58024400
 80034d4:	0800f614 	.word	0x0800f614
 80034d8:	24000004 	.word	0x24000004
 80034dc:	24000000 	.word	0x24000000
 80034e0:	24000008 	.word	0x24000008

080034e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034ea:	4bb3      	ldr	r3, [pc, #716]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034f2:	2b18      	cmp	r3, #24
 80034f4:	f200 8155 	bhi.w	80037a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80034f8:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003565 	.word	0x08003565
 8003504:	080037a3 	.word	0x080037a3
 8003508:	080037a3 	.word	0x080037a3
 800350c:	080037a3 	.word	0x080037a3
 8003510:	080037a3 	.word	0x080037a3
 8003514:	080037a3 	.word	0x080037a3
 8003518:	080037a3 	.word	0x080037a3
 800351c:	080037a3 	.word	0x080037a3
 8003520:	0800358b 	.word	0x0800358b
 8003524:	080037a3 	.word	0x080037a3
 8003528:	080037a3 	.word	0x080037a3
 800352c:	080037a3 	.word	0x080037a3
 8003530:	080037a3 	.word	0x080037a3
 8003534:	080037a3 	.word	0x080037a3
 8003538:	080037a3 	.word	0x080037a3
 800353c:	080037a3 	.word	0x080037a3
 8003540:	08003591 	.word	0x08003591
 8003544:	080037a3 	.word	0x080037a3
 8003548:	080037a3 	.word	0x080037a3
 800354c:	080037a3 	.word	0x080037a3
 8003550:	080037a3 	.word	0x080037a3
 8003554:	080037a3 	.word	0x080037a3
 8003558:	080037a3 	.word	0x080037a3
 800355c:	080037a3 	.word	0x080037a3
 8003560:	08003597 	.word	0x08003597
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003564:	4b94      	ldr	r3, [pc, #592]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003570:	4b91      	ldr	r3, [pc, #580]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	4a90      	ldr	r2, [pc, #576]	; (80037bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
 8003580:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003582:	e111      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003584:	4b8d      	ldr	r3, [pc, #564]	; (80037bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003586:	61bb      	str	r3, [r7, #24]
    break;
 8003588:	e10e      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800358a:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800358c:	61bb      	str	r3, [r7, #24]
    break;
 800358e:	e10b      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003590:	4b8c      	ldr	r3, [pc, #560]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003592:	61bb      	str	r3, [r7, #24]
    break;
 8003594:	e108      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80035a0:	4b85      	ldr	r3, [pc, #532]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035ac:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035b6:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	08db      	lsrs	r3, r3, #3
 80035bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80e1 	beq.w	800379c <HAL_RCC_GetSysClockFreq+0x2b8>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	f000 8083 	beq.w	80036e8 <HAL_RCC_GetSysClockFreq+0x204>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	f200 80a1 	bhi.w	800372c <HAL_RCC_GetSysClockFreq+0x248>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x114>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d056      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80035f6:	e099      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035f8:	4b6f      	ldr	r3, [pc, #444]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d02d      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003604:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	4a6b      	ldr	r2, [pc, #428]	; (80037bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362e:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800363e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003642:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800364a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800364e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800365e:	e087      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800366e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003672:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003682:	ed97 6a02 	vldr	s12, [r7, #8]
 8003686:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800368a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036a2:	e065      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b6:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036e6:	e043      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80036f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370a:	ed97 6a02 	vldr	s12, [r7, #8]
 800370e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800372a:	e021      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800373a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800373e:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800374e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003752:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800375e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800376e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	0a5b      	lsrs	r3, r3, #9
 8003776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800377a:	3301      	adds	r3, #1
 800377c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	ee07 3a90 	vmov	s15, r3
 8003784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003788:	edd7 6a07 	vldr	s13, [r7, #28]
 800378c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003794:	ee17 3a90 	vmov	r3, s15
 8003798:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800379a:	e005      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
    break;
 80037a0:	e002      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037a4:	61bb      	str	r3, [r7, #24]
    break;
 80037a6:	bf00      	nop
  }

  return sysclockfreq;
 80037a8:	69bb      	ldr	r3, [r7, #24]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3724      	adds	r7, #36	; 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	58024400 	.word	0x58024400
 80037bc:	03d09000 	.word	0x03d09000
 80037c0:	003d0900 	.word	0x003d0900
 80037c4:	007a1200 	.word	0x007a1200
 80037c8:	46000000 	.word	0x46000000
 80037cc:	4c742400 	.word	0x4c742400
 80037d0:	4a742400 	.word	0x4a742400
 80037d4:	4af42400 	.word	0x4af42400

080037d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037de:	f7ff fe81 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <HAL_RCC_GetHCLKFreq+0x50>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	490f      	ldr	r1, [pc, #60]	; (800382c <HAL_RCC_GetHCLKFreq+0x54>)
 80037f0:	5ccb      	ldrb	r3, [r1, r3]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	fa22 f303 	lsr.w	r3, r2, r3
 80037fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCC_GetHCLKFreq+0x50>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCC_GetHCLKFreq+0x54>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <HAL_RCC_GetHCLKFreq+0x58>)
 8003814:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003816:	4a07      	ldr	r2, [pc, #28]	; (8003834 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_RCC_GetHCLKFreq+0x58>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	58024400 	.word	0x58024400
 800382c:	0800f614 	.word	0x0800f614
 8003830:	24000004 	.word	0x24000004
 8003834:	24000000 	.word	0x24000000

08003838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800383c:	f7ff ffcc 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 8003840:	4602      	mov	r2, r0
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4904      	ldr	r1, [pc, #16]	; (8003860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800384e:	5ccb      	ldrb	r3, [r1, r3]
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	58024400 	.word	0x58024400
 8003860:	0800f614 	.word	0x0800f614

08003864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003868:	f7ff ffb6 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	0a1b      	lsrs	r3, r3, #8
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4904      	ldr	r1, [pc, #16]	; (800388c <HAL_RCC_GetPCLK2Freq+0x28>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	58024400 	.word	0x58024400
 800388c:	0800f614 	.word	0x0800f614

08003890 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800389c:	2300      	movs	r3, #0
 800389e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d03f      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b4:	d02a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ba:	d824      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c0:	d018      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c6:	d81e      	bhi.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d0:	d007      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038d2:	e018      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d4:	4bab      	ldr	r3, [pc, #684]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4aaa      	ldr	r2, [pc, #680]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038e0:	e015      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2102      	movs	r1, #2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 fff3 	bl	80058d4 <RCCEx_PLL2_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038f2:	e00c      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3324      	adds	r3, #36	; 0x24
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f002 f89c 	bl	8005a38 <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
      break;
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800390c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003914:	4b9b      	ldr	r3, [pc, #620]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003920:	4998      	ldr	r1, [pc, #608]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003922:	4313      	orrs	r3, r2
 8003924:	650b      	str	r3, [r1, #80]	; 0x50
 8003926:	e001      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03d      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	2b04      	cmp	r3, #4
 800393e:	d826      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800395d 	.word	0x0800395d
 800394c:	0800396b 	.word	0x0800396b
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003995 	.word	0x08003995
 8003958:	08003995 	.word	0x08003995
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800395c:	4b89      	ldr	r3, [pc, #548]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4a88      	ldr	r2, [pc, #544]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003968:	e015      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f001 ffaf 	bl	80058d4 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800397a:	e00c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3324      	adds	r3, #36	; 0x24
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f002 f858 	bl	8005a38 <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
      break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800399c:	4b79      	ldr	r3, [pc, #484]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	f023 0207 	bic.w	r2, r3, #7
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	4976      	ldr	r1, [pc, #472]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	650b      	str	r3, [r1, #80]	; 0x50
 80039ae:	e001      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d042      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c8:	d02b      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d825      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039d0:	2bc0      	cmp	r3, #192	; 0xc0
 80039d2:	d028      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039d4:	2bc0      	cmp	r3, #192	; 0xc0
 80039d6:	d821      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d016      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d81d      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d007      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80039e8:	e018      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ea:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039f6:	e017      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 ff68 	bl	80058d4 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a08:	e00e      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3324      	adds	r3, #36	; 0x24
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f002 f811 	bl	8005a38 <RCCEx_PLL3_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	e002      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a2e:	4b55      	ldr	r3, [pc, #340]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4952      	ldr	r1, [pc, #328]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	650b      	str	r3, [r1, #80]	; 0x50
 8003a40:	e001      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d049      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5c:	d030      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003a5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a62:	d82a      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a68:	d02c      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a6e:	d824      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a74:	d018      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7a:	d81e      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a84:	d007      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a86:	e018      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a88:	4b3e      	ldr	r3, [pc, #248]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a3d      	ldr	r2, [pc, #244]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a94:	e017      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 ff19 	bl	80058d4 <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003aa6:	e00e      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3324      	adds	r3, #36	; 0x24
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 ffc2 	bl	8005a38 <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ab8:	e005      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
      break;
 8003abe:	e002      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003acc:	4b2d      	ldr	r3, [pc, #180]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ada:	492a      	ldr	r1, [pc, #168]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	658b      	str	r3, [r1, #88]	; 0x58
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04c      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003af8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003afc:	d030      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003afe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b02:	d82a      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b08:	d02c      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003b0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b0e:	d824      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b14:	d018      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b1a:	d81e      	bhi.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b24:	d007      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003b26:	e018      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b28:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b34:	e017      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fec9 	bl	80058d4 <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b46:	e00e      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3324      	adds	r3, #36	; 0x24
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 ff72 	bl	8005a38 <RCCEx_PLL3_Config>
 8003b54:	4603      	mov	r3, r0
 8003b56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b58:	e005      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10d      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b7a:	4902      	ldr	r1, [pc, #8]	; (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	658b      	str	r3, [r1, #88]	; 0x58
 8003b80:	e004      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003b82:	bf00      	nop
 8003b84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d032      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	2b30      	cmp	r3, #48	; 0x30
 8003b9e:	d01c      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ba0:	2b30      	cmp	r3, #48	; 0x30
 8003ba2:	d817      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d00c      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d813      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d016      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb4:	4baf      	ldr	r3, [pc, #700]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4aae      	ldr	r2, [pc, #696]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003bc0:	e00e      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fe83 	bl	80058d4 <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003bd2:	e005      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd8:	e002      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003be6:	4ba3      	ldr	r3, [pc, #652]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	49a0      	ldr	r1, [pc, #640]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bf8:	e001      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d047      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c12:	d030      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c18:	d82a      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c1e:	d02c      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003c20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c24:	d824      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2a:	d018      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c30:	d81e      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	d007      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003c3c:	e018      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3e:	4b8d      	ldr	r3, [pc, #564]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	4a8c      	ldr	r2, [pc, #560]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c4a:	e017      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 fe3e 	bl	80058d4 <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c5c:	e00e      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3324      	adds	r3, #36	; 0x24
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fee7 	bl	8005a38 <RCCEx_PLL3_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c6e:	e005      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
      break;
 8003c74:	e002      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c82:	4b7c      	ldr	r3, [pc, #496]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	4979      	ldr	r1, [pc, #484]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	650b      	str	r3, [r1, #80]	; 0x50
 8003c94:	e001      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d049      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cae:	d02e      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d828      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cba:	d02a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003cbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cc0:	d822      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc6:	d026      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ccc:	d81c      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd2:	d010      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd8:	d816      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01d      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 fdf2 	bl	80058d4 <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cf4:	e012      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3324      	adds	r3, #36	; 0x24
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fe9b 	bl	8005a38 <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d06:	e009      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d22:	4b54      	ldr	r3, [pc, #336]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2e:	4951      	ldr	r1, [pc, #324]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	650b      	str	r3, [r1, #80]	; 0x50
 8003d34:	e001      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04b      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d50:	d02e      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d56:	d828      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d02a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d62:	d822      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d68:	d026      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003d6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d6e:	d81c      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d74:	d010      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7a:	d816      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01d      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d84:	d111      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 fda1 	bl	80058d4 <RCCEx_PLL2_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d96:	e012      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3324      	adds	r3, #36	; 0x24
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 fe4a 	bl	8005a38 <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003da8:	e009      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	75fb      	strb	r3, [r7, #23]
      break;
 8003dae:	e006      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003db0:	bf00      	nop
 8003db2:	e004      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003db4:	bf00      	nop
 8003db6:	e002      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dd2:	4928      	ldr	r1, [pc, #160]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	658b      	str	r3, [r1, #88]	; 0x58
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02f      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df2:	d00e      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df8:	d814      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d015      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e02:	d10f      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e04:	4b1b      	ldr	r3, [pc, #108]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e10:	e00c      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	2101      	movs	r1, #1
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fd5b 	bl	80058d4 <RCCEx_PLL2_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e22:	e003      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3e:	490d      	ldr	r1, [pc, #52]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	650b      	str	r3, [r1, #80]	; 0x50
 8003e44:	e001      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d033      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d81c      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e9f 	.word	0x08003e9f
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e87 	.word	0x08003e87
 8003e70:	08003e9f 	.word	0x08003e9f
 8003e74:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e78:	4bb8      	ldr	r3, [pc, #736]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4ab7      	ldr	r2, [pc, #732]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e84:	e00c      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 fd21 	bl	80058d4 <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ea6:	4bad      	ldr	r3, [pc, #692]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	f023 0203 	bic.w	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	49aa      	ldr	r1, [pc, #680]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003eb8:	e001      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8086 	beq.w	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ecc:	4ba4      	ldr	r3, [pc, #656]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4aa3      	ldr	r2, [pc, #652]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ed8:	f7fe f9bc 	bl	8002254 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ede:	e009      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fe f9b8 	bl	8002254 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d902      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ef2:	e005      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef4:	4b9a      	ldr	r3, [pc, #616]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ef      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d166      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f06:	4b95      	ldr	r3, [pc, #596]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f10:	4053      	eors	r3, r2
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d013      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1a:	4b90      	ldr	r3, [pc, #576]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f24:	4b8d      	ldr	r3, [pc, #564]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	4a8c      	ldr	r2, [pc, #560]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f30:	4b8a      	ldr	r3, [pc, #552]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a89      	ldr	r2, [pc, #548]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f3c:	4a87      	ldr	r2, [pc, #540]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4c:	d115      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fe f981 	bl	8002254 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f54:	e00b      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fe f97d 	bl	8002254 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d902      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f6c:	e005      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6e:	4b7b      	ldr	r3, [pc, #492]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ed      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d126      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8e:	d10d      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f90:	4b72      	ldr	r3, [pc, #456]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f9e:	0919      	lsrs	r1, r3, #4
 8003fa0:	4b70      	ldr	r3, [pc, #448]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	496d      	ldr	r1, [pc, #436]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	610b      	str	r3, [r1, #16]
 8003faa:	e005      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003fac:	4b6b      	ldr	r3, [pc, #428]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	4a6a      	ldr	r2, [pc, #424]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fb6:	6113      	str	r3, [r2, #16]
 8003fb8:	4b68      	ldr	r3, [pc, #416]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc6:	4965      	ldr	r1, [pc, #404]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	670b      	str	r3, [r1, #112]	; 0x70
 8003fcc:	e004      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	75bb      	strb	r3, [r7, #22]
 8003fd2:	e001      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d07e      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe8:	2b28      	cmp	r3, #40	; 0x28
 8003fea:	d867      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	080040c3 	.word	0x080040c3
 8003ff8:	080040bd 	.word	0x080040bd
 8003ffc:	080040bd 	.word	0x080040bd
 8004000:	080040bd 	.word	0x080040bd
 8004004:	080040bd 	.word	0x080040bd
 8004008:	080040bd 	.word	0x080040bd
 800400c:	080040bd 	.word	0x080040bd
 8004010:	080040bd 	.word	0x080040bd
 8004014:	08004099 	.word	0x08004099
 8004018:	080040bd 	.word	0x080040bd
 800401c:	080040bd 	.word	0x080040bd
 8004020:	080040bd 	.word	0x080040bd
 8004024:	080040bd 	.word	0x080040bd
 8004028:	080040bd 	.word	0x080040bd
 800402c:	080040bd 	.word	0x080040bd
 8004030:	080040bd 	.word	0x080040bd
 8004034:	080040ab 	.word	0x080040ab
 8004038:	080040bd 	.word	0x080040bd
 800403c:	080040bd 	.word	0x080040bd
 8004040:	080040bd 	.word	0x080040bd
 8004044:	080040bd 	.word	0x080040bd
 8004048:	080040bd 	.word	0x080040bd
 800404c:	080040bd 	.word	0x080040bd
 8004050:	080040bd 	.word	0x080040bd
 8004054:	080040c3 	.word	0x080040c3
 8004058:	080040bd 	.word	0x080040bd
 800405c:	080040bd 	.word	0x080040bd
 8004060:	080040bd 	.word	0x080040bd
 8004064:	080040bd 	.word	0x080040bd
 8004068:	080040bd 	.word	0x080040bd
 800406c:	080040bd 	.word	0x080040bd
 8004070:	080040bd 	.word	0x080040bd
 8004074:	080040c3 	.word	0x080040c3
 8004078:	080040bd 	.word	0x080040bd
 800407c:	080040bd 	.word	0x080040bd
 8004080:	080040bd 	.word	0x080040bd
 8004084:	080040bd 	.word	0x080040bd
 8004088:	080040bd 	.word	0x080040bd
 800408c:	080040bd 	.word	0x080040bd
 8004090:	080040bd 	.word	0x080040bd
 8004094:	080040c3 	.word	0x080040c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 fc18 	bl	80058d4 <RCCEx_PLL2_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040a8:	e00c      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3324      	adds	r3, #36	; 0x24
 80040ae:	2101      	movs	r1, #1
 80040b0:	4618      	mov	r0, r3
 80040b2:	f001 fcc1 	bl	8005a38 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
      break;
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80040c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d109      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d6:	4921      	ldr	r1, [pc, #132]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	654b      	str	r3, [r1, #84]	; 0x54
 80040dc:	e001      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	7dfb      	ldrb	r3, [r7, #23]
 80040e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d03e      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d820      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80040f6:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	0800413f 	.word	0x0800413f
 8004100:	08004115 	.word	0x08004115
 8004104:	08004127 	.word	0x08004127
 8004108:	0800413f 	.word	0x0800413f
 800410c:	0800413f 	.word	0x0800413f
 8004110:	0800413f 	.word	0x0800413f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fbda 	bl	80058d4 <RCCEx_PLL2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004124:	e00c      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3324      	adds	r3, #36	; 0x24
 800412a:	2101      	movs	r1, #1
 800412c:	4618      	mov	r0, r3
 800412e:	f001 fc83 	bl	8005a38 <RCCEx_PLL3_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004136:	e003      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	75fb      	strb	r3, [r7, #23]
      break;
 800413c:	e000      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800413e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d110      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f023 0207 	bic.w	r2, r3, #7
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004152:	4902      	ldr	r1, [pc, #8]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	654b      	str	r3, [r1, #84]	; 0x54
 8004158:	e008      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800415a:	bf00      	nop
 800415c:	58024400 	.word	0x58024400
 8004160:	58024800 	.word	0x58024800
 8004164:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d039      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	2b05      	cmp	r3, #5
 8004180:	d820      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004182:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004188:	080041cb 	.word	0x080041cb
 800418c:	080041a1 	.word	0x080041a1
 8004190:	080041b3 	.word	0x080041b3
 8004194:	080041cb 	.word	0x080041cb
 8004198:	080041cb 	.word	0x080041cb
 800419c:	080041cb 	.word	0x080041cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 fb94 	bl	80058d4 <RCCEx_PLL2_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041b0:	e00c      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3324      	adds	r3, #36	; 0x24
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 fc3d 	bl	8005a38 <RCCEx_PLL3_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041c2:	e003      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]
      break;
 80041c8:	e000      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80041ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d2:	4bb7      	ldr	r3, [pc, #732]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f023 0207 	bic.w	r2, r3, #7
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	49b3      	ldr	r1, [pc, #716]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	658b      	str	r3, [r1, #88]	; 0x58
 80041e6:	e001      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d04b      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004202:	d02e      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004208:	d828      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d02a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d822      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004216:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800421a:	d026      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800421c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004220:	d81c      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004226:	d010      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800422c:	d816      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01d      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004236:	d111      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fb48 	bl	80058d4 <RCCEx_PLL2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004248:	e012      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3324      	adds	r3, #36	; 0x24
 800424e:	2102      	movs	r1, #2
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fbf1 	bl	8005a38 <RCCEx_PLL3_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800425a:	e009      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
      break;
 8004260:	e006      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004262:	bf00      	nop
 8004264:	e004      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004266:	bf00      	nop
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800426e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004276:	4b8e      	ldr	r3, [pc, #568]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004284:	498a      	ldr	r1, [pc, #552]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004286:	4313      	orrs	r3, r2
 8004288:	654b      	str	r3, [r1, #84]	; 0x54
 800428a:	e001      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d04b      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042a6:	d02e      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80042a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042ac:	d828      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b2:	d02a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d822      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042be:	d026      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80042c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c4:	d81c      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ca:	d010      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80042cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d0:	d816      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01d      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d111      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 faf6 	bl	80058d4 <RCCEx_PLL2_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042ec:	e012      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3324      	adds	r3, #36	; 0x24
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 fb9f 	bl	8005a38 <RCCEx_PLL3_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042fe:	e009      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
      break;
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004306:	bf00      	nop
 8004308:	e004      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800430a:	bf00      	nop
 800430c:	e002      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004312:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800431a:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004328:	4961      	ldr	r1, [pc, #388]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800432a:	4313      	orrs	r3, r2
 800432c:	658b      	str	r3, [r1, #88]	; 0x58
 800432e:	e001      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b00      	cmp	r3, #0
 800433e:	d04b      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004346:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800434a:	d02e      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800434c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004350:	d828      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004356:	d02a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435c:	d822      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800435e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004362:	d026      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004364:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004368:	d81c      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800436a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800436e:	d010      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004374:	d816      	bhi.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01d      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437e:	d111      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	2100      	movs	r1, #0
 8004386:	4618      	mov	r0, r3
 8004388:	f001 faa4 	bl	80058d4 <RCCEx_PLL2_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004390:	e012      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3324      	adds	r3, #36	; 0x24
 8004396:	2102      	movs	r1, #2
 8004398:	4618      	mov	r0, r3
 800439a:	f001 fb4d 	bl	8005a38 <RCCEx_PLL3_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043a2:	e009      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	75fb      	strb	r3, [r7, #23]
      break;
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043aa:	bf00      	nop
 80043ac:	e004      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043ae:	bf00      	nop
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043be:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043cc:	4938      	ldr	r1, [pc, #224]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	658b      	str	r3, [r1, #88]	; 0x58
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d10a      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3324      	adds	r3, #36	; 0x24
 80043f4:	2102      	movs	r1, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 fb1e 	bl	8005a38 <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004406:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004414:	4926      	ldr	r1, [pc, #152]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004416:	4313      	orrs	r3, r2
 8004418:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004430:	d10a      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3324      	adds	r3, #36	; 0x24
 8004436:	2102      	movs	r1, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fafd 	bl	8005a38 <RCCEx_PLL3_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004448:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004456:	4916      	ldr	r1, [pc, #88]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004458:	4313      	orrs	r3, r2
 800445a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d036      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800446e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004472:	d01f      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004478:	d817      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004482:	d009      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004484:	e011      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f001 fa21 	bl	80058d4 <RCCEx_PLL2_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004496:	e00e      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	2102      	movs	r1, #2
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 faca 	bl	8005a38 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044a8:	e005      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
      break;
 80044ae:	e002      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80044b0:	58024400 	.word	0x58024400
      break;
 80044b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044bc:	4b93      	ldr	r3, [pc, #588]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044ca:	4990      	ldr	r1, [pc, #576]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	658b      	str	r3, [r1, #88]	; 0x58
 80044d0:	e001      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d033      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ec:	d01c      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80044ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044f2:	d816      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f8:	d003      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80044fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044fe:	d007      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004500:	e00f      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004502:	4b82      	ldr	r3, [pc, #520]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	4a81      	ldr	r2, [pc, #516]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800450e:	e00c      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3324      	adds	r3, #36	; 0x24
 8004514:	2101      	movs	r1, #1
 8004516:	4618      	mov	r0, r3
 8004518:	f001 fa8e 	bl	8005a38 <RCCEx_PLL3_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
      break;
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004530:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453e:	4973      	ldr	r1, [pc, #460]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004540:	4313      	orrs	r3, r2
 8004542:	654b      	str	r3, [r1, #84]	; 0x54
 8004544:	e001      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d029      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800455e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004562:	d007      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004564:	e00f      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004566:	4b69      	ldr	r3, [pc, #420]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	4a68      	ldr	r2, [pc, #416]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800456c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004572:	e00b      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	2102      	movs	r1, #2
 800457a:	4618      	mov	r0, r3
 800457c:	f001 f9aa 	bl	80058d4 <RCCEx_PLL2_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	75fb      	strb	r3, [r7, #23]
      break;
 800458a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004592:	4b5e      	ldr	r3, [pc, #376]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	495b      	ldr	r1, [pc, #364]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045a4:	e001      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3324      	adds	r3, #36	; 0x24
 80045ba:	2102      	movs	r1, #2
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 fa3b 	bl	8005a38 <RCCEx_PLL3_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d030      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e0:	d017      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80045e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e6:	d811      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d013      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80045ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f2:	d80b      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80045f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fc:	d106      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	4a42      	ldr	r2, [pc, #264]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800460a:	e007      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
      break;
 8004610:	e004      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004612:	bf00      	nop
 8004614:	e002      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800461a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004622:	4b3a      	ldr	r3, [pc, #232]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462e:	4937      	ldr	r1, [pc, #220]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	654b      	str	r3, [r1, #84]	; 0x54
 8004634:	e001      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004646:	4b31      	ldr	r3, [pc, #196]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	492e      	ldr	r1, [pc, #184]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004664:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004672:	4926      	ldr	r1, [pc, #152]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004684:	4b21      	ldr	r3, [pc, #132]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004690:	491e      	ldr	r1, [pc, #120]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	4a19      	ldr	r2, [pc, #100]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046ac:	6113      	str	r3, [r2, #16]
 80046ae:	4b17      	ldr	r3, [pc, #92]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046b0:	691a      	ldr	r2, [r3, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046b8:	4914      	ldr	r1, [pc, #80]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da08      	bge.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d2:	490e      	ldr	r1, [pc, #56]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	4906      	ldr	r1, [pc, #24]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80046f8:	7dbb      	ldrb	r3, [r7, #22]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	58024400 	.word	0x58024400

08004710 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b090      	sub	sp, #64	; 0x40
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471e:	f040 8095 	bne.w	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004722:	4bae      	ldr	r3, [pc, #696]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	2b04      	cmp	r3, #4
 8004730:	f200 8088 	bhi.w	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	08004751 	.word	0x08004751
 8004740:	08004779 	.word	0x08004779
 8004744:	080047a1 	.word	0x080047a1
 8004748:	0800483d 	.word	0x0800483d
 800474c:	080047c9 	.word	0x080047c9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004750:	4ba2      	ldr	r3, [pc, #648]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800475c:	d108      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800475e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004762:	4618      	mov	r0, r3
 8004764:	f000 ff64 	bl	8005630 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800476c:	f000 bc95 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004774:	f000 bc91 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004778:	4b98      	ldr	r3, [pc, #608]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004784:	d108      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004786:	f107 0318 	add.w	r3, r7, #24
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fca8 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004794:	f000 bc81 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800479c:	f000 bc7d 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047a0:	4b8e      	ldr	r3, [pc, #568]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ac:	d108      	bne.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047ae:	f107 030c 	add.w	r3, r7, #12
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fde8 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047bc:	f000 bc6d 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047c4:	f000 bc69 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047c8:	4b84      	ldr	r3, [pc, #528]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047d2:	4b82      	ldr	r3, [pc, #520]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047e4:	4b7d      	ldr	r3, [pc, #500]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	4a7c      	ldr	r2, [pc, #496]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f6:	e01f      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80047f8:	4b78      	ldr	r3, [pc, #480]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004804:	d106      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480c:	d102      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800480e:	4b75      	ldr	r3, [pc, #468]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004812:	e011      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004814:	4b71      	ldr	r3, [pc, #452]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004820:	d106      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004828:	d102      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800482a:	4b6f      	ldr	r3, [pc, #444]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004834:	f000 bc31 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004838:	f000 bc2f 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800483c:	4b6b      	ldr	r3, [pc, #428]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004840:	f000 bc2b 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004848:	f000 bc27 	b.w	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004852:	f040 8095 	bne.w	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004856:	4b61      	ldr	r3, [pc, #388]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800485e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004866:	d04d      	beq.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486e:	f200 8084 	bhi.w	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	2bc0      	cmp	r3, #192	; 0xc0
 8004876:	d07d      	beq.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	2bc0      	cmp	r3, #192	; 0xc0
 800487c:	d87d      	bhi.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	2b80      	cmp	r3, #128	; 0x80
 8004882:	d02d      	beq.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d877      	bhi.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d012      	beq.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004896:	e070      	b.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004898:	4b50      	ldr	r3, [pc, #320]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a4:	d107      	bne.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fec0 	bl	8005630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048b4:	e3f1      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048ba:	e3ee      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048bc:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c8:	d107      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048ca:	f107 0318 	add.w	r3, r7, #24
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fc06 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048d8:	e3df      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048de:	e3dc      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048e0:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ec:	d107      	bne.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ee:	f107 030c 	add.w	r3, r7, #12
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fd48 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048fc:	e3cd      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004902:	e3ca      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004904:	4b35      	ldr	r3, [pc, #212]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800490c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800490e:	4b33      	ldr	r3, [pc, #204]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b04      	cmp	r3, #4
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004920:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	4a2d      	ldr	r2, [pc, #180]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004932:	e01e      	b.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004934:	4b29      	ldr	r3, [pc, #164]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004940:	d106      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004948:	d102      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800494a:	4b26      	ldr	r3, [pc, #152]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494e:	e010      	b.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004950:	4b22      	ldr	r3, [pc, #136]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800495c:	d106      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004964:	d102      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496a:	e002      	b.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004970:	e393      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004972:	e392      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004978:	e38f      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800497e:	e38c      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	f040 80a7 	bne.w	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004992:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800499a:	d05f      	beq.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049a2:	f200 8096 	bhi.w	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049ac:	f000 808e 	beq.w	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80049b6:	f200 808c 	bhi.w	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c0:	d03a      	beq.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c8:	f200 8083 	bhi.w	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00e      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049d8:	d01c      	beq.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80049da:	e07a      	b.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80049dc:	58024400 	.word	0x58024400
 80049e0:	03d09000 	.word	0x03d09000
 80049e4:	003d0900 	.word	0x003d0900
 80049e8:	007a1200 	.word	0x007a1200
 80049ec:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049f0:	4baa      	ldr	r3, [pc, #680]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fc:	d107      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fe14 	bl	8005630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a0c:	e345      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a12:	e342      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a14:	4ba1      	ldr	r3, [pc, #644]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a20:	d107      	bne.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a22:	f107 0318 	add.w	r3, r7, #24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fb5a 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a30:	e333      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a36:	e330      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a38:	4b98      	ldr	r3, [pc, #608]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a44:	d107      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a46:	f107 030c 	add.w	r3, r7, #12
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fc9c 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a54:	e321      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a5a:	e31e      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a5c:	4b8f      	ldr	r3, [pc, #572]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a66:	4b8d      	ldr	r3, [pc, #564]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a78:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	08db      	lsrs	r3, r3, #3
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	4a87      	ldr	r2, [pc, #540]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a8a:	e01e      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a8c:	4b83      	ldr	r3, [pc, #524]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa0:	d102      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004aa2:	4b80      	ldr	r3, [pc, #512]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa6:	e010      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004aa8:	4b7c      	ldr	r3, [pc, #496]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004abc:	d102      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004abe:	4b7a      	ldr	r3, [pc, #488]	; (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac2:	e002      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ac8:	e2e7      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004aca:	e2e6      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004acc:	4b77      	ldr	r3, [pc, #476]	; (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad0:	e2e3      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad6:	e2e0      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ade:	f040 809c 	bne.w	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004ae2:	4b6e      	ldr	r3, [pc, #440]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af2:	d054      	beq.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004afa:	f200 808b 	bhi.w	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b04:	f000 8083 	beq.w	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b0e:	f200 8081 	bhi.w	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b18:	d02f      	beq.n	8004b7a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b20:	d878      	bhi.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b2e:	d012      	beq.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004b30:	e070      	b.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b32:	4b5a      	ldr	r3, [pc, #360]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b3e:	d107      	bne.n	8004b50 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fd73 	bl	8005630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b4e:	e2a4      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b54:	e2a1      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b56:	4b51      	ldr	r3, [pc, #324]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b62:	d107      	bne.n	8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b64:	f107 0318 	add.w	r3, r7, #24
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fab9 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004b72:	e292      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b78:	e28f      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b7a:	4b48      	ldr	r3, [pc, #288]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b86:	d107      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fbfb 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b96:	e280      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b9c:	e27d      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ba8:	4b3c      	ldr	r3, [pc, #240]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bba:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	08db      	lsrs	r3, r3, #3
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	4a36      	ldr	r2, [pc, #216]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bcc:	e01e      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bce:	4b33      	ldr	r3, [pc, #204]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bda:	d106      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be2:	d102      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004be4:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be8:	e010      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bea:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bf6:	d106      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c00:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c04:	e002      	b.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c0a:	e246      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c0c:	e245      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c0e:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c12:	e242      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c18:	e23f      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c20:	f040 80a8 	bne.w	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c28:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c34:	d060      	beq.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c3c:	f200 8097 	bhi.w	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c46:	f000 808f 	beq.w	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c50:	f200 808d 	bhi.w	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5a:	d03b      	beq.n	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c62:	f200 8084 	bhi.w	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	d01d      	beq.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004c74:	e07b      	b.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c82:	d107      	bne.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fcd1 	bl	8005630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c92:	e202      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c98:	e1ff      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	03d09000 	.word	0x03d09000
 8004ca4:	003d0900 	.word	0x003d0900
 8004ca8:	007a1200 	.word	0x007a1200
 8004cac:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cb0:	4ba3      	ldr	r3, [pc, #652]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cbc:	d107      	bne.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cbe:	f107 0318 	add.w	r3, r7, #24
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fa0c 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ccc:	e1e5      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cd2:	e1e2      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cd4:	4b9a      	ldr	r3, [pc, #616]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fb4e 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cf0:	e1d3      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cf6:	e1d0      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cf8:	4b91      	ldr	r3, [pc, #580]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d02:	4b8f      	ldr	r3, [pc, #572]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d14:	4b8a      	ldr	r3, [pc, #552]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	4a89      	ldr	r2, [pc, #548]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d26:	e01e      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d28:	4b85      	ldr	r3, [pc, #532]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d34:	d106      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d3c:	d102      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d3e:	4b82      	ldr	r3, [pc, #520]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d42:	e010      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d44:	4b7e      	ldr	r3, [pc, #504]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d50:	d106      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d58:	d102      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d5a:	4b7c      	ldr	r3, [pc, #496]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5e:	e002      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d64:	e199      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004d66:	e198      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d68:	4b79      	ldr	r3, [pc, #484]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d6c:	e195      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d72:	e192      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d7a:	d173      	bne.n	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004d7c:	4b70      	ldr	r3, [pc, #448]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d84:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8c:	d02f      	beq.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d94:	d863      	bhi.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da2:	d012      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004da4:	e05b      	b.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004da6:	4b66      	ldr	r3, [pc, #408]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004db4:	f107 0318 	add.w	r3, r7, #24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 f991 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dc2:	e16a      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dc8:	e167      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dca:	4b5d      	ldr	r3, [pc, #372]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dd8:	f107 030c 	add.w	r3, r7, #12
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fad3 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004de6:	e158      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dec:	e155      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004dee:	4b54      	ldr	r3, [pc, #336]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004df8:	4b51      	ldr	r3, [pc, #324]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e0a:	4b4d      	ldr	r3, [pc, #308]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	4a4b      	ldr	r2, [pc, #300]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004e16:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e1c:	e01e      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e1e:	4b48      	ldr	r3, [pc, #288]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e32:	d102      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e34:	4b44      	ldr	r3, [pc, #272]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	e010      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e3a:	4b41      	ldr	r3, [pc, #260]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e46:	d106      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e4e:	d102      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e50:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e54:	e002      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e5a:	e11e      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004e5c:	e11d      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e62:	e11a      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6a:	d133      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004e6c:	4b34      	ldr	r3, [pc, #208]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	d012      	beq.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004e84:	e023      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e86:	4b2e      	ldr	r3, [pc, #184]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fbc9 	bl	8005630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ea2:	e0fa      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea8:	e0f7      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004eaa:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eb8:	f107 0318 	add.w	r3, r7, #24
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f90f 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ec6:	e0e8      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ecc:	e0e5      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed2:	e0e2      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eda:	f040 808f 	bne.w	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004ede:	4b18      	ldr	r3, [pc, #96]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004ee6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eee:	d075      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ef6:	d87e      	bhi.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d060      	beq.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d876      	bhi.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f0e:	d045      	beq.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f16:	d86e      	bhi.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f1e:	d02b      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f26:	d866      	bhi.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f34:	d00e      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004f36:	e05e      	b.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004f38:	f000 f8bc 	bl	80050b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004f3c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004f3e:	e0ac      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004f40:	58024400 	.word	0x58024400
 8004f44:	03d09000 	.word	0x03d09000
 8004f48:	003d0900 	.word	0x003d0900
 8004f4c:	007a1200 	.word	0x007a1200
 8004f50:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f54:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f60:	d107      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f62:	f107 0318 	add.w	r3, r7, #24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f8ba 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f70:	e093      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f76:	e090      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f78:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f84:	d107      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f9fc 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f94:	e081      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f9a:	e07e      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f9c:	4b41      	ldr	r3, [pc, #260]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d109      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fa8:	4b3e      	ldr	r3, [pc, #248]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	08db      	lsrs	r3, r3, #3
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	4a3d      	ldr	r2, [pc, #244]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fba:	e06e      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fc0:	e06b      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004fc2:	4b38      	ldr	r3, [pc, #224]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004fd0:	4b36      	ldr	r3, [pc, #216]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004fd4:	e061      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fda:	e05e      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fdc:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe8:	d102      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8004fea:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fee:	e054      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ff4:	e051      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ffa:	e04e      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	d148      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005004:	4b27      	ldr	r3, [pc, #156]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005008:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800500c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005014:	d02a      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501c:	d838      	bhi.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d004      	beq.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800502a:	d00d      	beq.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800502c:	e030      	b.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800502e:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800503a:	d102      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800503c:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005040:	e02b      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005046:	e028      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005048:	4b16      	ldr	r3, [pc, #88]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005054:	d107      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fae8 	bl	8005630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005064:	e019      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800506a:	e016      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800506c:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005078:	d107      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800507a:	f107 0318 	add.w	r3, r7, #24
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f82e 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005088:	e007      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800508e:	e004      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005094:	e001      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800509c:	4618      	mov	r0, r3
 800509e:	3740      	adds	r7, #64	; 0x40
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	58024400 	.word	0x58024400
 80050a8:	03d09000 	.word	0x03d09000
 80050ac:	003d0900 	.word	0x003d0900
 80050b0:	007a1200 	.word	0x007a1200

080050b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050b8:	f7fe fb8e 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4904      	ldr	r1, [pc, #16]	; (80050dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	58024400 	.word	0x58024400
 80050dc:	0800f614 	.word	0x0800f614

080050e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050e8:	4ba1      	ldr	r3, [pc, #644]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80050f2:	4b9f      	ldr	r3, [pc, #636]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	0b1b      	lsrs	r3, r3, #12
 80050f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050fe:	4b9c      	ldr	r3, [pc, #624]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800510a:	4b99      	ldr	r3, [pc, #612]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	08db      	lsrs	r3, r3, #3
 8005110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8111 	beq.w	8005350 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b02      	cmp	r3, #2
 8005132:	f000 8083 	beq.w	800523c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b02      	cmp	r3, #2
 800513a:	f200 80a1 	bhi.w	8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d056      	beq.n	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800514a:	e099      	b.n	8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800514c:	4b88      	ldr	r3, [pc, #544]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d02d      	beq.n	80051b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005158:	4b85      	ldr	r3, [pc, #532]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	08db      	lsrs	r3, r3, #3
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	4a84      	ldr	r2, [pc, #528]	; (8005374 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	ee07 3a90 	vmov	s15, r3
 8005170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005182:	4b7b      	ldr	r3, [pc, #492]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005192:	ed97 6a03 	vldr	s12, [r7, #12]
 8005196:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800519a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051b2:	e087      	b.n	80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800537c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c6:	4b6a      	ldr	r3, [pc, #424]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051f6:	e065      	b.n	80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520a:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521a:	ed97 6a03 	vldr	s12, [r7, #12]
 800521e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800522e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800523a:	e043      	b.n	80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005384 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800524a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524e:	4b48      	ldr	r3, [pc, #288]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005262:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800527e:	e021      	b.n	80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	4b37      	ldr	r3, [pc, #220]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80052c4:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	0a5b      	lsrs	r3, r3, #9
 80052ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052de:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ea:	ee17 2a90 	vmov	r2, s15
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80052f2:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800530c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005318:	ee17 2a90 	vmov	r2, s15
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005320:	4b13      	ldr	r3, [pc, #76]	; (8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	0e1b      	lsrs	r3, r3, #24
 8005326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800533a:	edd7 6a07 	vldr	s13, [r7, #28]
 800533e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005346:	ee17 2a90 	vmov	r2, s15
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800534e:	e008      	b.n	8005362 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	609a      	str	r2, [r3, #8]
}
 8005362:	bf00      	nop
 8005364:	3724      	adds	r7, #36	; 0x24
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	58024400 	.word	0x58024400
 8005374:	03d09000 	.word	0x03d09000
 8005378:	46000000 	.word	0x46000000
 800537c:	4c742400 	.word	0x4c742400
 8005380:	4a742400 	.word	0x4a742400
 8005384:	4af42400 	.word	0x4af42400

08005388 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005390:	4ba1      	ldr	r3, [pc, #644]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800539a:	4b9f      	ldr	r3, [pc, #636]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	0d1b      	lsrs	r3, r3, #20
 80053a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80053a6:	4b9c      	ldr	r3, [pc, #624]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	0a1b      	lsrs	r3, r3, #8
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80053b2:	4b99      	ldr	r3, [pc, #612]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	08db      	lsrs	r3, r3, #3
 80053b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8111 	beq.w	80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	f000 8083 	beq.w	80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	f200 80a1 	bhi.w	8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d056      	beq.n	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80053f2:	e099      	b.n	8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053f4:	4b88      	ldr	r3, [pc, #544]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d02d      	beq.n	800545c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005400:	4b85      	ldr	r3, [pc, #532]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	08db      	lsrs	r3, r3, #3
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	4a84      	ldr	r2, [pc, #528]	; (800561c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800540c:	fa22 f303 	lsr.w	r3, r2, r3
 8005410:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	ee07 3a90 	vmov	s15, r3
 8005418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542a:	4b7b      	ldr	r3, [pc, #492]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543a:	ed97 6a03 	vldr	s12, [r7, #12]
 800543e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800544e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005456:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800545a:	e087      	b.n	800556c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005624 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800546a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546e:	4b6a      	ldr	r3, [pc, #424]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005482:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800549e:	e065      	b.n	800556c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b2:	4b59      	ldr	r3, [pc, #356]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054e2:	e043      	b.n	800556c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800562c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f6:	4b48      	ldr	r3, [pc, #288]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005506:	ed97 6a03 	vldr	s12, [r7, #12]
 800550a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800550e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800551a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005526:	e021      	b.n	800556c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553a:	4b37      	ldr	r3, [pc, #220]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554a:	ed97 6a03 	vldr	s12, [r7, #12]
 800554e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800555e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800556a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800556c:	4b2a      	ldr	r3, [pc, #168]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	0a5b      	lsrs	r3, r3, #9
 8005572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005586:	edd7 6a07 	vldr	s13, [r7, #28]
 800558a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005592:	ee17 2a90 	vmov	r2, s15
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800559a:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	0c1b      	lsrs	r3, r3, #16
 80055a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a4:	ee07 3a90 	vmov	s15, r3
 80055a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80055b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c0:	ee17 2a90 	vmov	r2, s15
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	0e1b      	lsrs	r3, r3, #24
 80055ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ee:	ee17 2a90 	vmov	r2, s15
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055f6:	e008      	b.n	800560a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	609a      	str	r2, [r3, #8]
}
 800560a:	bf00      	nop
 800560c:	3724      	adds	r7, #36	; 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	58024400 	.word	0x58024400
 800561c:	03d09000 	.word	0x03d09000
 8005620:	46000000 	.word	0x46000000
 8005624:	4c742400 	.word	0x4c742400
 8005628:	4a742400 	.word	0x4a742400
 800562c:	4af42400 	.word	0x4af42400

08005630 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	; 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005638:	4ba0      	ldr	r3, [pc, #640]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	f003 0303 	and.w	r3, r3, #3
 8005640:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005642:	4b9e      	ldr	r3, [pc, #632]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800564c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800564e:	4b9b      	ldr	r3, [pc, #620]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005658:	4b98      	ldr	r3, [pc, #608]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005670:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8111 	beq.w	800589e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b02      	cmp	r3, #2
 8005680:	f000 8083 	beq.w	800578a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b02      	cmp	r3, #2
 8005688:	f200 80a1 	bhi.w	80057ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d056      	beq.n	8005746 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005698:	e099      	b.n	80057ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800569a:	4b88      	ldr	r3, [pc, #544]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d02d      	beq.n	8005702 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056a6:	4b85      	ldr	r3, [pc, #532]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	08db      	lsrs	r3, r3, #3
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	4a83      	ldr	r2, [pc, #524]	; (80058c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80056b2:	fa22 f303 	lsr.w	r3, r2, r3
 80056b6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d0:	4b7a      	ldr	r3, [pc, #488]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005700:	e087      	b.n	8005812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	ee07 3a90 	vmov	s15, r3
 8005708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005714:	4b69      	ldr	r3, [pc, #420]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571c:	ee07 3a90 	vmov	s15, r3
 8005720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005724:	ed97 6a03 	vldr	s12, [r7, #12]
 8005728:	eddf 5a66 	vldr	s11, [pc, #408]	; 80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800572c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800573c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005740:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005744:	e065      	b.n	8005812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005750:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80058cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005758:	4b58      	ldr	r3, [pc, #352]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005768:	ed97 6a03 	vldr	s12, [r7, #12]
 800576c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800577c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005784:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005788:	e043      	b.n	8005812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	ee07 3a90 	vmov	s15, r3
 8005790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005794:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80058d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579c:	4b47      	ldr	r3, [pc, #284]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80057b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057cc:	e021      	b.n	8005812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	ee07 3a90 	vmov	s15, r3
 80057d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80058c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80057dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e0:	4b36      	ldr	r3, [pc, #216]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80057f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80058c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80057f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005810:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005812:	4b2a      	ldr	r3, [pc, #168]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	0a5b      	lsrs	r3, r3, #9
 8005818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800581c:	ee07 3a90 	vmov	s15, r3
 8005820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800582c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005838:	ee17 2a90 	vmov	r2, s15
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005840:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800585a:	edd7 6a07 	vldr	s13, [r7, #28]
 800585e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005866:	ee17 2a90 	vmov	r2, s15
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	0e1b      	lsrs	r3, r3, #24
 8005874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005888:	edd7 6a07 	vldr	s13, [r7, #28]
 800588c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005894:	ee17 2a90 	vmov	r2, s15
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800589c:	e008      	b.n	80058b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	3724      	adds	r7, #36	; 0x24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	58024400 	.word	0x58024400
 80058c0:	03d09000 	.word	0x03d09000
 80058c4:	46000000 	.word	0x46000000
 80058c8:	4c742400 	.word	0x4c742400
 80058cc:	4a742400 	.word	0x4a742400
 80058d0:	4af42400 	.word	0x4af42400

080058d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058e2:	4b53      	ldr	r3, [pc, #332]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d101      	bne.n	80058f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e099      	b.n	8005a26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058f2:	4b4f      	ldr	r3, [pc, #316]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a4e      	ldr	r2, [pc, #312]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fe:	f7fc fca9 	bl	8002254 <HAL_GetTick>
 8005902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005904:	e008      	b.n	8005918 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005906:	f7fc fca5 	bl	8002254 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e086      	b.n	8005a26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005918:	4b45      	ldr	r3, [pc, #276]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1f0      	bne.n	8005906 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005924:	4b42      	ldr	r3, [pc, #264]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	031b      	lsls	r3, r3, #12
 8005932:	493f      	ldr	r1, [pc, #252]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	628b      	str	r3, [r1, #40]	; 0x28
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	3b01      	subs	r3, #1
 800593e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	3b01      	subs	r3, #1
 8005948:	025b      	lsls	r3, r3, #9
 800594a:	b29b      	uxth	r3, r3
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	3b01      	subs	r3, #1
 8005954:	041b      	lsls	r3, r3, #16
 8005956:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	3b01      	subs	r3, #1
 8005962:	061b      	lsls	r3, r3, #24
 8005964:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005968:	4931      	ldr	r1, [pc, #196]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 800596a:	4313      	orrs	r3, r2
 800596c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800596e:	4b30      	ldr	r3, [pc, #192]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	492d      	ldr	r1, [pc, #180]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 800597c:	4313      	orrs	r3, r2
 800597e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005980:	4b2b      	ldr	r3, [pc, #172]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	f023 0220 	bic.w	r2, r3, #32
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	4928      	ldr	r1, [pc, #160]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005992:	4b27      	ldr	r3, [pc, #156]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 8005998:	f023 0310 	bic.w	r3, r3, #16
 800599c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800599e:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <RCCEx_PLL2_Config+0x160>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	69d2      	ldr	r2, [r2, #28]
 80059aa:	00d2      	lsls	r2, r2, #3
 80059ac:	4920      	ldr	r1, [pc, #128]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059b2:	4b1f      	ldr	r3, [pc, #124]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059b8:	f043 0310 	orr.w	r3, r3, #16
 80059bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059c4:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	4a19      	ldr	r2, [pc, #100]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059d0:	e00f      	b.n	80059f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d106      	bne.n	80059e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80059d8:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	4a14      	ldr	r2, [pc, #80]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059e4:	e005      	b.n	80059f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	4a11      	ldr	r2, [pc, #68]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059f2:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a0e      	ldr	r2, [pc, #56]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 80059f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059fe:	f7fc fc29 	bl	8002254 <HAL_GetTick>
 8005a02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a04:	e008      	b.n	8005a18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a06:	f7fc fc25 	bl	8002254 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e006      	b.n	8005a26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <RCCEx_PLL2_Config+0x15c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	58024400 	.word	0x58024400
 8005a34:	ffff0007 	.word	0xffff0007

08005a38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a46:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d101      	bne.n	8005a56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e099      	b.n	8005b8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a56:	4b4f      	ldr	r3, [pc, #316]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a4e      	ldr	r2, [pc, #312]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a62:	f7fc fbf7 	bl	8002254 <HAL_GetTick>
 8005a66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a68:	e008      	b.n	8005a7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a6a:	f7fc fbf3 	bl	8002254 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e086      	b.n	8005b8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a7c:	4b45      	ldr	r3, [pc, #276]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a88:	4b42      	ldr	r3, [pc, #264]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	051b      	lsls	r3, r3, #20
 8005a96:	493f      	ldr	r1, [pc, #252]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	628b      	str	r3, [r1, #40]	; 0x28
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	025b      	lsls	r3, r3, #9
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	041b      	lsls	r3, r3, #16
 8005aba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	061b      	lsls	r3, r3, #24
 8005ac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005acc:	4931      	ldr	r1, [pc, #196]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ad2:	4b30      	ldr	r3, [pc, #192]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	492d      	ldr	r1, [pc, #180]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	4928      	ldr	r1, [pc, #160]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b02:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b06:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <RCCEx_PLL3_Config+0x160>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	69d2      	ldr	r2, [r2, #28]
 8005b0e:	00d2      	lsls	r2, r2, #3
 8005b10:	4920      	ldr	r1, [pc, #128]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b16:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b34:	e00f      	b.n	8005b56 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d106      	bne.n	8005b4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b3c:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a14      	ldr	r2, [pc, #80]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b48:	e005      	b.n	8005b56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b62:	f7fc fb77 	bl	8002254 <HAL_GetTick>
 8005b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b68:	e008      	b.n	8005b7c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b6a:	f7fc fb73 	bl	8002254 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e006      	b.n	8005b8a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <RCCEx_PLL3_Config+0x15c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f0      	beq.n	8005b6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	58024400 	.word	0x58024400
 8005b98:	ffff0007 	.word	0xffff0007

08005b9c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	; 0x28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e075      	b.n	8005c9a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fb f9dd 	bl	8000f80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f868 	bl	8005ca4 <HAL_SD_InitCard>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e05d      	b.n	8005c9a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fdad 	bl	8006744 <HAL_SD_GetCardStatus>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e052      	b.n	8005c9a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005bf4:	7e3b      	ldrb	r3, [r7, #24]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005bfa:	7e7b      	ldrb	r3, [r7, #25]
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d10a      	bne.n	8005c1e <HAL_SD_Init+0x82>
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <HAL_SD_Init+0x78>
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d004      	beq.n	8005c1e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8005c1c:	e00b      	b.n	8005c36 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d104      	bne.n	8005c30 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8005c2e:	e002      	b.n	8005c36 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fe63 	bl	8006908 <HAL_SD_ConfigWideBusOperation>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e026      	b.n	8005c9a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005c4c:	f7fc fb02 	bl	8002254 <HAL_GetTick>
 8005c50:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c52:	e011      	b.n	8005c78 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005c54:	f7fc fafe 	bl	8002254 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c62:	d109      	bne.n	8005c78 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c6a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e010      	b.n	8005c9a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 ff55 	bl	8006b28 <HAL_SD_GetCardState>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d1e7      	bne.n	8005c54 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3728      	adds	r7, #40	; 0x28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b08d      	sub	sp, #52	; 0x34
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005cbc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005cc0:	f7fe fd26 	bl	8004710 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cc4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cda:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e06a      	b.n	8005db6 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	4a36      	ldr	r2, [pc, #216]	; (8005dc0 <HAL_SD_InitCard+0x11c>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	091b      	lsrs	r3, r3, #4
 8005cec:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681c      	ldr	r4, [r3, #0]
 8005cf2:	466a      	mov	r2, sp
 8005cf4:	f107 0318 	add.w	r3, r7, #24
 8005cf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005cfc:	e882 0003 	stmia.w	r2, {r0, r1}
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d06:	4620      	mov	r0, r4
 8005d08:	f003 f86a 	bl	8008de0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f003 f8ad 	bl	8008e70 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005d22:	4a28      	ldr	r2, [pc, #160]	; (8005dc4 <HAL_SD_InitCard+0x120>)
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fc fa9d 	bl	800226c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 ffd4 	bl	8006ce0 <SD_PowerON>
 8005d38:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e02e      	b.n	8005db6 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 ff05 	bl	8006b68 <SD_InitCard>
 8005d5e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00b      	beq.n	8005d7e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e01b      	b.n	8005db6 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d86:	4618      	mov	r0, r3
 8005d88:	f003 f908 	bl	8008f9c <SDMMC_CmdBlockLength>
 8005d8c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00f      	beq.n	8005db4 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a0b      	ldr	r2, [pc, #44]	; (8005dc8 <HAL_SD_InitCard+0x124>)
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	372c      	adds	r7, #44	; 0x2c
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd90      	pop	{r4, r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	014f8b59 	.word	0x014f8b59
 8005dc4:	00012110 	.word	0x00012110
 8005dc8:	1fe00fff 	.word	0x1fe00fff

08005dcc <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b092      	sub	sp, #72	; 0x48
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005dda:	f7fc fa3b 	bl	8002254 <HAL_GetTick>
 8005dde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d107      	bne.n	8005dfe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e167      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	f040 815a 	bne.w	80060c0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	441a      	add	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d907      	bls.n	8005e30 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e14e      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2203      	movs	r2, #3
 8005e34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d002      	beq.n	8005e4e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	025b      	lsls	r3, r3, #9
 8005e4c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e52:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	025b      	lsls	r3, r3, #9
 8005e58:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e5a:	2390      	movs	r3, #144	; 0x90
 8005e5c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f107 0214 	add.w	r2, r7, #20
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f003 f865 	bl	8008f44 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e88:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d90a      	bls.n	8005ea6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2202      	movs	r2, #2
 8005e94:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f003 f8c3 	bl	8009028 <SDMMC_CmdReadMultiBlock>
 8005ea2:	6478      	str	r0, [r7, #68]	; 0x44
 8005ea4:	e009      	b.n	8005eba <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f003 f895 	bl	8008fe2 <SDMMC_CmdReadSingleBlock>
 8005eb8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d012      	beq.n	8005ee6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a84      	ldr	r2, [pc, #528]	; (80060d8 <HAL_SD_ReadBlocks+0x30c>)
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e0f3      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005eea:	e058      	b.n	8005f9e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d033      	beq.n	8005f62 <HAL_SD_ReadBlocks+0x196>
 8005efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efc:	2b1f      	cmp	r3, #31
 8005efe:	d930      	bls.n	8005f62 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005f00:	2300      	movs	r3, #0
 8005f02:	643b      	str	r3, [r7, #64]	; 0x40
 8005f04:	e027      	b.n	8005f56 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f002 ff92 	bl	8008e34 <SDMMC_ReadFIFO>
 8005f10:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	0a1b      	lsrs	r3, r3, #8
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f28:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	0c1b      	lsrs	r3, r3, #16
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f42:	0e1b      	lsrs	r3, r3, #24
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f52:	3301      	adds	r3, #1
 8005f54:	643b      	str	r3, [r7, #64]	; 0x40
 8005f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f58:	2b07      	cmp	r3, #7
 8005f5a:	d9d4      	bls.n	8005f06 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5e:	3b20      	subs	r3, #32
 8005f60:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005f62:	f7fc f977 	bl	8002254 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d902      	bls.n	8005f78 <HAL_SD_ReadBlocks+0x1ac>
 8005f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d112      	bne.n	8005f9e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a56      	ldr	r2, [pc, #344]	; (80060d8 <HAL_SD_ReadBlocks+0x30c>)
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e097      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d09f      	beq.n	8005eec <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fba:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d022      	beq.n	8006010 <HAL_SD_ReadBlocks+0x244>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d91f      	bls.n	8006010 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d01b      	beq.n	8006010 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f003 f88d 	bl	80090fc <SDMMC_CmdStopTransfer>
 8005fe2:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d012      	beq.n	8006010 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a3a      	ldr	r2, [pc, #232]	; (80060d8 <HAL_SD_ReadBlocks+0x30c>)
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e05e      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	f003 0308 	and.w	r3, r3, #8
 800601a:	2b00      	cmp	r3, #0
 800601c:	d012      	beq.n	8006044 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2d      	ldr	r2, [pc, #180]	; (80060d8 <HAL_SD_ReadBlocks+0x30c>)
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602a:	f043 0208 	orr.w	r2, r3, #8
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e044      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d012      	beq.n	8006078 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a20      	ldr	r2, [pc, #128]	; (80060d8 <HAL_SD_ReadBlocks+0x30c>)
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605e:	f043 0202 	orr.w	r2, r3, #2
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e02a      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d012      	beq.n	80060ac <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <HAL_SD_ReadBlocks+0x30c>)
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e010      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <HAL_SD_ReadBlocks+0x310>)
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	e006      	b.n	80060ce <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3748      	adds	r7, #72	; 0x48
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	1fe00fff 	.word	0x1fe00fff
 80060dc:	18000f3a 	.word	0x18000f3a

080060e0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b092      	sub	sp, #72	; 0x48
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80060ee:	f7fc f8b1 	bl	8002254 <HAL_GetTick>
 80060f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d107      	bne.n	8006112 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006106:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e16b      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	f040 815e 	bne.w	80063dc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	441a      	add	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	429a      	cmp	r2, r3
 8006132:	d907      	bls.n	8006144 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006138:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e152      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2203      	movs	r2, #3
 8006148:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2200      	movs	r2, #0
 8006152:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	2b01      	cmp	r3, #1
 800615a:	d002      	beq.n	8006162 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	025b      	lsls	r3, r3, #9
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006166:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	025b      	lsls	r3, r3, #9
 800616c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800616e:	2390      	movs	r3, #144	; 0x90
 8006170:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006172:	2300      	movs	r3, #0
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006176:	2300      	movs	r3, #0
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800617a:	2300      	movs	r3, #0
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f107 0218 	add.w	r2, r7, #24
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f002 fedb 	bl	8008f44 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d90a      	bls.n	80061ba <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061b0:	4618      	mov	r0, r3
 80061b2:	f002 ff7f 	bl	80090b4 <SDMMC_CmdWriteMultiBlock>
 80061b6:	6478      	str	r0, [r7, #68]	; 0x44
 80061b8:	e009      	b.n	80061ce <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2210      	movs	r2, #16
 80061be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061c6:	4618      	mov	r0, r3
 80061c8:	f002 ff51 	bl	800906e <SDMMC_CmdWriteSingleBlock>
 80061cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80061ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d012      	beq.n	80061fa <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a86      	ldr	r2, [pc, #536]	; (80063f4 <HAL_SD_WriteBlocks+0x314>)
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e0f7      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80061fe:	e05c      	b.n	80062ba <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d037      	beq.n	800627e <HAL_SD_WriteBlocks+0x19e>
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	2b1f      	cmp	r3, #31
 8006212:	d934      	bls.n	800627e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006214:	2300      	movs	r3, #0
 8006216:	643b      	str	r3, [r7, #64]	; 0x40
 8006218:	e02b      	b.n	8006272 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006222:	3301      	adds	r3, #1
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	021a      	lsls	r2, r3, #8
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	3301      	adds	r3, #1
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	041a      	lsls	r2, r3, #16
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	3301      	adds	r3, #1
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	061a      	lsls	r2, r3, #24
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	3301      	adds	r3, #1
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f107 0214 	add.w	r2, r7, #20
 8006264:	4611      	mov	r1, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f002 fdf1 	bl	8008e4e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800626c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626e:	3301      	adds	r3, #1
 8006270:	643b      	str	r3, [r7, #64]	; 0x40
 8006272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006274:	2b07      	cmp	r3, #7
 8006276:	d9d0      	bls.n	800621a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627a:	3b20      	subs	r3, #32
 800627c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800627e:	f7fb ffe9 	bl	8002254 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800628a:	429a      	cmp	r2, r3
 800628c:	d902      	bls.n	8006294 <HAL_SD_WriteBlocks+0x1b4>
 800628e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006290:	2b00      	cmp	r3, #0
 8006292:	d112      	bne.n	80062ba <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a56      	ldr	r2, [pc, #344]	; (80063f4 <HAL_SD_WriteBlocks+0x314>)
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a2:	431a      	orrs	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e097      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d09b      	beq.n	8006200 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d022      	beq.n	800632c <HAL_SD_WriteBlocks+0x24c>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d91f      	bls.n	800632c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d01b      	beq.n	800632c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f002 feff 	bl	80090fc <SDMMC_CmdStopTransfer>
 80062fe:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006302:	2b00      	cmp	r3, #0
 8006304:	d012      	beq.n	800632c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a3a      	ldr	r2, [pc, #232]	; (80063f4 <HAL_SD_WriteBlocks+0x314>)
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e05e      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d012      	beq.n	8006360 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <HAL_SD_WriteBlocks+0x314>)
 8006340:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006346:	f043 0208 	orr.w	r2, r3, #8
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e044      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d012      	beq.n	8006394 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a20      	ldr	r2, [pc, #128]	; (80063f4 <HAL_SD_WriteBlocks+0x314>)
 8006374:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	f043 0202 	orr.w	r2, r3, #2
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e02a      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d012      	beq.n	80063c8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a13      	ldr	r2, [pc, #76]	; (80063f4 <HAL_SD_WriteBlocks+0x314>)
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	f043 0210 	orr.w	r2, r3, #16
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e010      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a0a      	ldr	r2, [pc, #40]	; (80063f8 <HAL_SD_WriteBlocks+0x318>)
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e006      	b.n	80063ea <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3748      	adds	r7, #72	; 0x48
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	1fe00fff 	.word	0x1fe00fff
 80063f8:	18000f3a 	.word	0x18000f3a

080063fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640a:	0f9b      	lsrs	r3, r3, #30
 800640c:	b2da      	uxtb	r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006416:	0e9b      	lsrs	r3, r3, #26
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	b2da      	uxtb	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006428:	0e1b      	lsrs	r3, r3, #24
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	b2da      	uxtb	r2, r3
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643a:	0c1b      	lsrs	r3, r3, #16
 800643c:	b2da      	uxtb	r2, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	0a1b      	lsrs	r3, r3, #8
 8006448:	b2da      	uxtb	r2, r3
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006452:	b2da      	uxtb	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645c:	0d1b      	lsrs	r3, r3, #20
 800645e:	b29a      	uxth	r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	b2da      	uxtb	r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800647a:	0bdb      	lsrs	r3, r3, #15
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	b2da      	uxtb	r2, r3
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	0b9b      	lsrs	r3, r3, #14
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	b2da      	uxtb	r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800649e:	0b5b      	lsrs	r3, r3, #13
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b0:	0b1b      	lsrs	r3, r3, #12
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2200      	movs	r2, #0
 80064c2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d163      	bne.n	8006594 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d0:	009a      	lsls	r2, r3, #2
 80064d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064d6:	4013      	ands	r3, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80064dc:	0f92      	lsrs	r2, r2, #30
 80064de:	431a      	orrs	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e8:	0edb      	lsrs	r3, r3, #27
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064fa:	0e1b      	lsrs	r3, r3, #24
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	b2da      	uxtb	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650c:	0d5b      	lsrs	r3, r3, #21
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	b2da      	uxtb	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800651e:	0c9b      	lsrs	r3, r3, #18
 8006520:	b2db      	uxtb	r3, r3
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	b2da      	uxtb	r2, r3
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006530:	0bdb      	lsrs	r3, r3, #15
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	b2da      	uxtb	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	7e1b      	ldrb	r3, [r3, #24]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	3302      	adds	r3, #2
 8006554:	2201      	movs	r2, #1
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800655e:	fb02 f203 	mul.w	r2, r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	7a1b      	ldrb	r3, [r3, #8]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	2201      	movs	r2, #1
 8006572:	409a      	lsls	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006580:	0a52      	lsrs	r2, r2, #9
 8006582:	fb02 f203 	mul.w	r2, r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
 8006592:	e031      	b.n	80065f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	2b01      	cmp	r3, #1
 800659a:	d11d      	bne.n	80065d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	431a      	orrs	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	3301      	adds	r3, #1
 80065b8:	029a      	lsls	r2, r3, #10
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54
 80065d6:	e00f      	b.n	80065f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a58      	ldr	r2, [pc, #352]	; (8006740 <HAL_SD_GetCardCSD+0x344>)
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e09d      	b.n	8006734 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fc:	0b9b      	lsrs	r3, r3, #14
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	b2da      	uxtb	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006616:	b2da      	uxtb	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006626:	b2da      	uxtb	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006630:	0fdb      	lsrs	r3, r3, #31
 8006632:	b2da      	uxtb	r2, r3
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800663c:	0f5b      	lsrs	r3, r3, #29
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	b2da      	uxtb	r2, r3
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800664e:	0e9b      	lsrs	r3, r3, #26
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	b2da      	uxtb	r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006660:	0d9b      	lsrs	r3, r3, #22
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	b2da      	uxtb	r2, r3
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006672:	0d5b      	lsrs	r3, r3, #21
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	b2da      	uxtb	r2, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a2:	0bdb      	lsrs	r3, r3, #15
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b6:	0b9b      	lsrs	r3, r3, #14
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ca:	0b5b      	lsrs	r3, r3, #13
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066de:	0b1b      	lsrs	r3, r3, #12
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f2:	0a9b      	lsrs	r3, r3, #10
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	b2da      	uxtb	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006722:	b2da      	uxtb	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	1fe00fff 	.word	0x1fe00fff

08006744 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b094      	sub	sp, #80	; 0x50
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006754:	f107 0308 	add.w	r3, r7, #8
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fb4a 	bl	8006df4 <SD_SendSDStatus>
 8006760:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006764:	2b00      	cmp	r3, #0
 8006766:	d011      	beq.n	800678c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a4f      	ldr	r2, [pc, #316]	; (80068ac <HAL_SD_GetCardStatus+0x168>)
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800678a:	e070      	b.n	800686e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	099b      	lsrs	r3, r3, #6
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	b2da      	uxtb	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	0a1b      	lsrs	r3, r3, #8
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	0e1b      	lsrs	r3, r3, #24
 80067bc:	b29b      	uxth	r3, r3
 80067be:	4313      	orrs	r3, r2
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	061a      	lsls	r2, r3, #24
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067d2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	0a1b      	lsrs	r3, r3, #8
 80067d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80067dc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	0e1b      	lsrs	r3, r3, #24
 80067e2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	0d1b      	lsrs	r3, r3, #20
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	b2da      	uxtb	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	b29b      	uxth	r3, r3
 8006810:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006814:	b29a      	uxth	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	b29b      	uxth	r3, r3
 800681a:	b2db      	uxtb	r3, r3
 800681c:	b29b      	uxth	r3, r3
 800681e:	4313      	orrs	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	0a9b      	lsrs	r3, r3, #10
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006830:	b2da      	uxtb	r2, r3
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 0303 	and.w	r3, r3, #3
 8006840:	b2da      	uxtb	r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	b2da      	uxtb	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	b2da      	uxtb	r2, r3
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	0e1b      	lsrs	r3, r3, #24
 8006868:	b2da      	uxtb	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006876:	4618      	mov	r0, r3
 8006878:	f002 fb90 	bl	8008f9c <SDMMC_CmdBlockLength>
 800687c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800687e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00d      	beq.n	80068a0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a08      	ldr	r2, [pc, #32]	; (80068ac <HAL_SD_GetCardStatus+0x168>)
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006890:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80068a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3750      	adds	r7, #80	; 0x50
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	1fe00fff 	.word	0x1fe00fff

080068b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b08d      	sub	sp, #52	; 0x34
 800690c:	af02      	add	r7, sp, #8
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2203      	movs	r2, #3
 800691c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	2b03      	cmp	r3, #3
 8006926:	d02e      	beq.n	8006986 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692e:	d106      	bne.n	800693e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	635a      	str	r2, [r3, #52]	; 0x34
 800693c:	e029      	b.n	8006992 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006944:	d10a      	bne.n	800695c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fb4c 	bl	8006fe4 <SD_WideBus_Enable>
 800694c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	635a      	str	r2, [r3, #52]	; 0x34
 800695a:	e01a      	b.n	8006992 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb89 	bl	800707a <SD_WideBus_Disable>
 8006968:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	635a      	str	r2, [r3, #52]	; 0x34
 8006976:	e00c      	b.n	8006992 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	635a      	str	r2, [r3, #52]	; 0x34
 8006984:	e005      	b.n	8006992 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a5e      	ldr	r2, [pc, #376]	; (8006b18 <HAL_SD_ConfigWideBusOperation+0x210>)
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069a8:	e094      	b.n	8006ad4 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80069aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80069ae:	f7fd feaf 	bl	8004710 <HAL_RCCEx_GetPeriphCLKFreq>
 80069b2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8083 	beq.w	8006ac2 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4950      	ldr	r1, [pc, #320]	; (8006b1c <HAL_SD_ConfigWideBusOperation+0x214>)
 80069da:	fba1 1303 	umull	r1, r3, r1, r3
 80069de:	0e1b      	lsrs	r3, r3, #24
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d303      	bcc.n	80069ec <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	e05a      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f4:	d103      	bne.n	80069fe <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	e051      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a06:	d126      	bne.n	8006a56 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10e      	bne.n	8006a2e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	4a43      	ldr	r2, [pc, #268]	; (8006b20 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d906      	bls.n	8006a26 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4a40      	ldr	r2, [pc, #256]	; (8006b1c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a20:	0e5b      	lsrs	r3, r3, #25
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	e03d      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e039      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3a:	4a39      	ldr	r2, [pc, #228]	; (8006b20 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d906      	bls.n	8006a4e <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4a36      	ldr	r2, [pc, #216]	; (8006b1c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006a44:	fba2 2303 	umull	r2, r3, r2, r3
 8006a48:	0e5b      	lsrs	r3, r3, #25
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	e029      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e025      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10e      	bne.n	8006a7c <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4a30      	ldr	r2, [pc, #192]	; (8006b24 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d906      	bls.n	8006a74 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4a2c      	ldr	r2, [pc, #176]	; (8006b1c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6e:	0e1b      	lsrs	r3, r3, #24
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e016      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	e012      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	4a26      	ldr	r2, [pc, #152]	; (8006b24 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d906      	bls.n	8006a9c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4a22      	ldr	r2, [pc, #136]	; (8006b1c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	0e1b      	lsrs	r3, r3, #24
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	e002      	b.n	8006aa2 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681c      	ldr	r4, [r3, #0]
 8006aa6:	466a      	mov	r2, sp
 8006aa8:	f107 0314 	add.w	r3, r7, #20
 8006aac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ab0:	e882 0003 	stmia.w	r2, {r0, r1}
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006aba:	4620      	mov	r0, r4
 8006abc:	f002 f990 	bl	8008de0 <SDMMC_Init>
 8006ac0:	e008      	b.n	8006ad4 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006adc:	4618      	mov	r0, r3
 8006ade:	f002 fa5d 	bl	8008f9c <SDMMC_CmdBlockLength>
 8006ae2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a0a      	ldr	r2, [pc, #40]	; (8006b18 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	372c      	adds	r7, #44	; 0x2c
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd90      	pop	{r4, r7, pc}
 8006b18:	1fe00fff 	.word	0x1fe00fff
 8006b1c:	55e63b89 	.word	0x55e63b89
 8006b20:	02faf080 	.word	0x02faf080
 8006b24:	017d7840 	.word	0x017d7840

08006b28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006b34:	f107 030c 	add.w	r3, r7, #12
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa2a 	bl	8006f94 <SD_SendStatus>
 8006b40:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	0a5b      	lsrs	r3, r3, #9
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006b5e:	693b      	ldr	r3, [r7, #16]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b090      	sub	sp, #64	; 0x40
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006b70:	2301      	movs	r3, #1
 8006b72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 f98a 	bl	8008e92 <SDMMC_GetPowerState>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b88:	e0a5      	b.n	8006cd6 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d02e      	beq.n	8006bf0 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f002 fbd5 	bl	8009346 <SDMMC_CmdSendCID>
 8006b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <SD_InitCard+0x40>
    {
      return errorstate;
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	e096      	b.n	8006cd6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f002 f9b5 	bl	8008f1e <SDMMC_GetResponse>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2104      	movs	r1, #4
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f002 f9ac 	bl	8008f1e <SDMMC_GetResponse>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2108      	movs	r1, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 f9a3 	bl	8008f1e <SDMMC_GetResponse>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	210c      	movs	r1, #12
 8006be4:	4618      	mov	r0, r3
 8006be6:	f002 f99a 	bl	8008f1e <SDMMC_GetResponse>
 8006bea:	4602      	mov	r2, r0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d00d      	beq.n	8006c14 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f107 020e 	add.w	r2, r7, #14
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f002 fbde 	bl	80093c4 <SDMMC_CmdSetRelAdd>
 8006c08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <SD_InitCard+0xac>
    {
      return errorstate;
 8006c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c12:	e060      	b.n	8006cd6 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d036      	beq.n	8006c8a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f002 fba7 	bl	8009384 <SDMMC_CmdSendCSD>
 8006c36:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <SD_InitCard+0xda>
    {
      return errorstate;
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	e049      	b.n	8006cd6 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2100      	movs	r1, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f002 f968 	bl	8008f1e <SDMMC_GetResponse>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2104      	movs	r1, #4
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f002 f95f 	bl	8008f1e <SDMMC_GetResponse>
 8006c60:	4602      	mov	r2, r0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2108      	movs	r1, #8
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f002 f956 	bl	8008f1e <SDMMC_GetResponse>
 8006c72:	4602      	mov	r2, r0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	210c      	movs	r1, #12
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f002 f94d 	bl	8008f1e <SDMMC_GetResponse>
 8006c84:	4602      	mov	r2, r0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2104      	movs	r1, #4
 8006c90:	4618      	mov	r0, r3
 8006c92:	f002 f944 	bl	8008f1e <SDMMC_GetResponse>
 8006c96:	4603      	mov	r3, r0
 8006c98:	0d1a      	lsrs	r2, r3, #20
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006c9e:	f107 0310 	add.w	r3, r7, #16
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff fba9 	bl	80063fc <HAL_SD_GetCardCSD>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cb4:	e00f      	b.n	8006cd6 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f002 fa56 	bl	8009174 <SDMMC_CmdSelDesel>
 8006cc8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <SD_InitCard+0x16c>
  {
    return errorstate;
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd2:	e000      	b.n	8006cd6 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3740      	adds	r7, #64	; 0x40
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f002 fa5e 	bl	80091ba <SDMMC_CmdGoIdleState>
 8006cfe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	e06e      	b.n	8006de8 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f002 fa71 	bl	80091f6 <SDMMC_CmdOperCond>
 8006d14:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00d      	beq.n	8006d38 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f002 fa47 	bl	80091ba <SDMMC_CmdGoIdleState>
 8006d2c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d004      	beq.n	8006d3e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	e057      	b.n	8006de8 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d137      	bne.n	8006db6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f002 fa72 	bl	8009236 <SDMMC_CmdAppCommand>
 8006d52:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02d      	beq.n	8006db6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d5e:	e043      	b.n	8006de8 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2100      	movs	r1, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	f002 fa65 	bl	8009236 <SDMMC_CmdAppCommand>
 8006d6c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <SD_PowerON+0x98>
    {
      return errorstate;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	e037      	b.n	8006de8 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	491c      	ldr	r1, [pc, #112]	; (8006df0 <SD_PowerON+0x110>)
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f002 fa7c 	bl	800927c <SDMMC_CmdAppOperCommand>
 8006d84:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d90:	e02a      	b.n	8006de8 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f002 f8c0 	bl	8008f1e <SDMMC_GetResponse>
 8006d9e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	0fdb      	lsrs	r3, r3, #31
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d101      	bne.n	8006dac <SD_PowerON+0xcc>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <SD_PowerON+0xce>
 8006dac:	2300      	movs	r3, #0
 8006dae:	613b      	str	r3, [r7, #16]

    count++;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d802      	bhi.n	8006dc6 <SD_PowerON+0xe6>
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0cc      	beq.n	8006d60 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d902      	bls.n	8006dd6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dd4:	e008      	b.n	8006de8 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	c1100000 	.word	0xc1100000

08006df4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08c      	sub	sp, #48	; 0x30
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006dfe:	f7fb fa29 	bl	8002254 <HAL_GetTick>
 8006e02:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f002 f885 	bl	8008f1e <SDMMC_GetResponse>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e1e:	d102      	bne.n	8006e26 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e24:	e0b0      	b.n	8006f88 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2140      	movs	r1, #64	; 0x40
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f002 f8b5 	bl	8008f9c <SDMMC_CmdBlockLength>
 8006e32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	e0a0      	b.n	8006f88 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f002 f9ef 	bl	8009236 <SDMMC_CmdAppCommand>
 8006e58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e08d      	b.n	8006f88 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e70:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006e72:	2340      	movs	r3, #64	; 0x40
 8006e74:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006e76:	2360      	movs	r3, #96	; 0x60
 8006e78:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f107 0208 	add.w	r2, r7, #8
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4618      	mov	r0, r3
 8006e92:	f002 f857 	bl	8008f44 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f002 fad7 	bl	800944e <SDMMC_CmdStatusRegister>
 8006ea0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d02b      	beq.n	8006f00 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	e069      	b.n	8006f88 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d013      	beq.n	8006eea <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec6:	e00d      	b.n	8006ee4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 ffb1 	bl	8008e34 <SDMMC_ReadFIFO>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	601a      	str	r2, [r3, #0]
        pData++;
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	3304      	adds	r3, #4
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	2b07      	cmp	r3, #7
 8006ee8:	d9ee      	bls.n	8006ec8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006eea:	f7fb f9b3 	bl	8002254 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef8:	d102      	bne.n	8006f00 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006efa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006efe:	e043      	b.n	8006f88 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0d2      	beq.n	8006eb4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	e033      	b.n	8006f88 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e02a      	b.n	8006f88 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d017      	beq.n	8006f70 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006f40:	2320      	movs	r3, #32
 8006f42:	e021      	b.n	8006f88 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 ff73 	bl	8008e34 <SDMMC_ReadFIFO>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	601a      	str	r2, [r3, #0]
    pData++;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	3304      	adds	r3, #4
 8006f58:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f5a:	f7fb f97b 	bl	8002254 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f68:	d102      	bne.n	8006f70 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006f6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f6e:	e00b      	b.n	8006f88 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e2      	bne.n	8006f44 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a03      	ldr	r2, [pc, #12]	; (8006f90 <SD_SendSDStatus+0x19c>)
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3730      	adds	r7, #48	; 0x30
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	18000f3a 	.word	0x18000f3a

08006f94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006fa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fa8:	e018      	b.n	8006fdc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	041b      	lsls	r3, r3, #16
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f002 fa26 	bl	8009408 <SDMMC_CmdSendStatus>
 8006fbc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	e009      	b.n	8006fdc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 ffa5 	bl	8008f1e <SDMMC_GetResponse>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 ff8f 	bl	8008f1e <SDMMC_GetResponse>
 8007000:	4603      	mov	r3, r0
 8007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800700a:	d102      	bne.n	8007012 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800700c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007010:	e02f      	b.n	8007072 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007012:	f107 030c 	add.w	r3, r7, #12
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f879 	bl	8007110 <SD_FindSCR>
 800701e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	e023      	b.n	8007072 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01c      	beq.n	800706e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703c:	041b      	lsls	r3, r3, #16
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f002 f8f8 	bl	8009236 <SDMMC_CmdAppCommand>
 8007046:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	e00f      	b.n	8007072 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2102      	movs	r1, #2
 8007058:	4618      	mov	r0, r3
 800705a:	f002 f92f 	bl	80092bc <SDMMC_CmdBusWidth>
 800705e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	e003      	b.n	8007072 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800706a:	2300      	movs	r3, #0
 800706c:	e001      	b.n	8007072 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800706e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b086      	sub	sp, #24
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	2300      	movs	r3, #0
 8007088:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2100      	movs	r1, #0
 8007090:	4618      	mov	r0, r3
 8007092:	f001 ff44 	bl	8008f1e <SDMMC_GetResponse>
 8007096:	4603      	mov	r3, r0
 8007098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070a0:	d102      	bne.n	80070a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070a6:	e02f      	b.n	8007108 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80070a8:	f107 030c 	add.w	r3, r7, #12
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f82e 	bl	8007110 <SD_FindSCR>
 80070b4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	e023      	b.n	8007108 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01c      	beq.n	8007104 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d2:	041b      	lsls	r3, r3, #16
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f002 f8ad 	bl	8009236 <SDMMC_CmdAppCommand>
 80070dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	e00f      	b.n	8007108 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f002 f8e4 	bl	80092bc <SDMMC_CmdBusWidth>
 80070f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	e003      	b.n	8007108 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007100:	2300      	movs	r3, #0
 8007102:	e001      	b.n	8007108 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007104:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08e      	sub	sp, #56	; 0x38
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800711a:	f7fb f89b 	bl	8002254 <HAL_GetTick>
 800711e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007124:	2300      	movs	r3, #0
 8007126:	60bb      	str	r3, [r7, #8]
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2108      	movs	r1, #8
 8007136:	4618      	mov	r0, r3
 8007138:	f001 ff30 	bl	8008f9c <SDMMC_CmdBlockLength>
 800713c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	e0ad      	b.n	80072a4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f002 f86e 	bl	8009236 <SDMMC_CmdAppCommand>
 800715a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	e09e      	b.n	80072a4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800716a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800716c:	2308      	movs	r3, #8
 800716e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007170:	2330      	movs	r3, #48	; 0x30
 8007172:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007174:	2302      	movs	r3, #2
 8007176:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007178:	2300      	movs	r3, #0
 800717a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800717c:	2301      	movs	r3, #1
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f107 0210 	add.w	r2, r7, #16
 8007188:	4611      	mov	r1, r2
 800718a:	4618      	mov	r0, r3
 800718c:	f001 feda 	bl	8008f44 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f002 f8b4 	bl	8009302 <SDMMC_CmdSendSCR>
 800719a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d027      	beq.n	80071f2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	e07e      	b.n	80072a4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d113      	bne.n	80071dc <SD_FindSCR+0xcc>
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d110      	bne.n	80071dc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 fe38 	bl	8008e34 <SDMMC_ReadFIFO>
 80071c4:	4603      	mov	r3, r0
 80071c6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fe31 	bl	8008e34 <SDMMC_ReadFIFO>
 80071d2:	4603      	mov	r3, r0
 80071d4:	60fb      	str	r3, [r7, #12]
      index++;
 80071d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d8:	3301      	adds	r3, #1
 80071da:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071dc:	f7fb f83a 	bl	8002254 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ea:	d102      	bne.n	80071f2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071f0:	e058      	b.n	80072a4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f8:	f240 532a 	movw	r3, #1322	; 0x52a
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0d1      	beq.n	80071a6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2208      	movs	r2, #8
 8007216:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007218:	2308      	movs	r3, #8
 800721a:	e043      	b.n	80072a4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2202      	movs	r2, #2
 8007230:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	e036      	b.n	80072a4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2220      	movs	r2, #32
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800724c:	2320      	movs	r3, #32
 800724e:	e029      	b.n	80072a4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a15      	ldr	r2, [pc, #84]	; (80072ac <SD_FindSCR+0x19c>)
 8007256:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	061a      	lsls	r2, r3, #24
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007264:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	0a1b      	lsrs	r3, r3, #8
 800726a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800726e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	0e1b      	lsrs	r3, r3, #24
 8007274:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	601a      	str	r2, [r3, #0]
    scr++;
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	3304      	adds	r3, #4
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	061a      	lsls	r2, r3, #24
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800728c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	0a1b      	lsrs	r3, r3, #8
 8007292:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007296:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	0e1b      	lsrs	r3, r3, #24
 800729c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3738      	adds	r7, #56	; 0x38
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	18000f3a 	.word	0x18000f3a

080072b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e049      	b.n	8007356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7f9 fede 	bl	8001098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f000 fae2 	bl	80078b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d001      	beq.n	8007378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e04f      	b.n	8007418 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a23      	ldr	r2, [pc, #140]	; (8007424 <HAL_TIM_Base_Start_IT+0xc4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d01d      	beq.n	80073d6 <HAL_TIM_Base_Start_IT+0x76>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a2:	d018      	beq.n	80073d6 <HAL_TIM_Base_Start_IT+0x76>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1f      	ldr	r2, [pc, #124]	; (8007428 <HAL_TIM_Base_Start_IT+0xc8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <HAL_TIM_Base_Start_IT+0x76>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1e      	ldr	r2, [pc, #120]	; (800742c <HAL_TIM_Base_Start_IT+0xcc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00e      	beq.n	80073d6 <HAL_TIM_Base_Start_IT+0x76>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <HAL_TIM_Base_Start_IT+0xd0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d009      	beq.n	80073d6 <HAL_TIM_Base_Start_IT+0x76>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1b      	ldr	r2, [pc, #108]	; (8007434 <HAL_TIM_Base_Start_IT+0xd4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_TIM_Base_Start_IT+0x76>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a19      	ldr	r2, [pc, #100]	; (8007438 <HAL_TIM_Base_Start_IT+0xd8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d115      	bne.n	8007402 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	4b17      	ldr	r3, [pc, #92]	; (800743c <HAL_TIM_Base_Start_IT+0xdc>)
 80073de:	4013      	ands	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b06      	cmp	r3, #6
 80073e6:	d015      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0xb4>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ee:	d011      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007400:	e008      	b.n	8007414 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0201 	orr.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	e000      	b.n	8007416 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007414:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40010000 	.word	0x40010000
 8007428:	40000400 	.word	0x40000400
 800742c:	40000800 	.word	0x40000800
 8007430:	40000c00 	.word	0x40000c00
 8007434:	40010400 	.word	0x40010400
 8007438:	40001800 	.word	0x40001800
 800743c:	00010007 	.word	0x00010007

08007440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	d122      	bne.n	800749c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b02      	cmp	r3, #2
 8007462:	d11b      	bne.n	800749c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0202 	mvn.w	r2, #2
 800746c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f9fa 	bl	800787c <HAL_TIM_IC_CaptureCallback>
 8007488:	e005      	b.n	8007496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9ec 	bl	8007868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f9fd 	bl	8007890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d122      	bne.n	80074f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d11b      	bne.n	80074f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0204 	mvn.w	r2, #4
 80074c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f9d0 	bl	800787c <HAL_TIM_IC_CaptureCallback>
 80074dc:	e005      	b.n	80074ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f9c2 	bl	8007868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f9d3 	bl	8007890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d122      	bne.n	8007544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d11b      	bne.n	8007544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f06f 0208 	mvn.w	r2, #8
 8007514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2204      	movs	r2, #4
 800751a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9a6 	bl	800787c <HAL_TIM_IC_CaptureCallback>
 8007530:	e005      	b.n	800753e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f998 	bl	8007868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f9a9 	bl	8007890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	2b10      	cmp	r3, #16
 8007550:	d122      	bne.n	8007598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b10      	cmp	r3, #16
 800755e:	d11b      	bne.n	8007598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0210 	mvn.w	r2, #16
 8007568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2208      	movs	r2, #8
 800756e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f97c 	bl	800787c <HAL_TIM_IC_CaptureCallback>
 8007584:	e005      	b.n	8007592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f96e 	bl	8007868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f97f 	bl	8007890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d10e      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d107      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0201 	mvn.w	r2, #1
 80075bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7f9 fe2c 	bl	800121c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ce:	2b80      	cmp	r3, #128	; 0x80
 80075d0:	d10e      	bne.n	80075f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075dc:	2b80      	cmp	r3, #128	; 0x80
 80075de:	d107      	bne.n	80075f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fb2e 	bl	8007c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fe:	d10e      	bne.n	800761e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760a:	2b80      	cmp	r3, #128	; 0x80
 800760c:	d107      	bne.n	800761e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fb21 	bl	8007c60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b40      	cmp	r3, #64	; 0x40
 800762a:	d10e      	bne.n	800764a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d107      	bne.n	800764a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f92d 	bl	80078a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f003 0320 	and.w	r3, r3, #32
 8007654:	2b20      	cmp	r3, #32
 8007656:	d10e      	bne.n	8007676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b20      	cmp	r3, #32
 8007664:	d107      	bne.n	8007676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f06f 0220 	mvn.w	r2, #32
 800766e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fae1 	bl	8007c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007676:	bf00      	nop
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_TIM_ConfigClockSource+0x18>
 8007694:	2302      	movs	r3, #2
 8007696:	e0db      	b.n	8007850 <HAL_TIM_ConfigClockSource+0x1d0>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4b69      	ldr	r3, [pc, #420]	; (8007858 <HAL_TIM_ConfigClockSource+0x1d8>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a63      	ldr	r2, [pc, #396]	; (800785c <HAL_TIM_ConfigClockSource+0x1dc>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	f000 80a9 	beq.w	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
 80076d4:	4a61      	ldr	r2, [pc, #388]	; (800785c <HAL_TIM_ConfigClockSource+0x1dc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	f200 80ae 	bhi.w	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 80076dc:	4a60      	ldr	r2, [pc, #384]	; (8007860 <HAL_TIM_ConfigClockSource+0x1e0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	f000 80a1 	beq.w	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
 80076e4:	4a5e      	ldr	r2, [pc, #376]	; (8007860 <HAL_TIM_ConfigClockSource+0x1e0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	f200 80a6 	bhi.w	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 80076ec:	4a5d      	ldr	r2, [pc, #372]	; (8007864 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	f000 8099 	beq.w	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
 80076f4:	4a5b      	ldr	r2, [pc, #364]	; (8007864 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	f200 809e 	bhi.w	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 80076fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007700:	f000 8091 	beq.w	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
 8007704:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007708:	f200 8096 	bhi.w	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 800770c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007710:	f000 8089 	beq.w	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
 8007714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007718:	f200 808e 	bhi.w	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 800771c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007720:	d03e      	beq.n	80077a0 <HAL_TIM_ConfigClockSource+0x120>
 8007722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007726:	f200 8087 	bhi.w	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 800772a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772e:	f000 8085 	beq.w	800783c <HAL_TIM_ConfigClockSource+0x1bc>
 8007732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007736:	d87f      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 8007738:	2b70      	cmp	r3, #112	; 0x70
 800773a:	d01a      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0xf2>
 800773c:	2b70      	cmp	r3, #112	; 0x70
 800773e:	d87b      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 8007740:	2b60      	cmp	r3, #96	; 0x60
 8007742:	d050      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x166>
 8007744:	2b60      	cmp	r3, #96	; 0x60
 8007746:	d877      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 8007748:	2b50      	cmp	r3, #80	; 0x50
 800774a:	d03c      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x146>
 800774c:	2b50      	cmp	r3, #80	; 0x50
 800774e:	d873      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 8007750:	2b40      	cmp	r3, #64	; 0x40
 8007752:	d058      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x186>
 8007754:	2b40      	cmp	r3, #64	; 0x40
 8007756:	d86f      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 8007758:	2b30      	cmp	r3, #48	; 0x30
 800775a:	d064      	beq.n	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
 800775c:	2b30      	cmp	r3, #48	; 0x30
 800775e:	d86b      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 8007760:	2b20      	cmp	r3, #32
 8007762:	d060      	beq.n	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
 8007764:	2b20      	cmp	r3, #32
 8007766:	d867      	bhi.n	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d05c      	beq.n	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
 800776c:	2b10      	cmp	r3, #16
 800776e:	d05a      	beq.n	8007826 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007770:	e062      	b.n	8007838 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6899      	ldr	r1, [r3, #8]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f000 f9b1 	bl	8007ae8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007794:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	609a      	str	r2, [r3, #8]
      break;
 800779e:	e04e      	b.n	800783e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	6899      	ldr	r1, [r3, #8]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f000 f99a 	bl	8007ae8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077c2:	609a      	str	r2, [r3, #8]
      break;
 80077c4:	e03b      	b.n	800783e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f000 f90a 	bl	80079ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2150      	movs	r1, #80	; 0x50
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f964 	bl	8007aac <TIM_ITRx_SetConfig>
      break;
 80077e4:	e02b      	b.n	800783e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	6859      	ldr	r1, [r3, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f000 f929 	bl	8007a4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2160      	movs	r1, #96	; 0x60
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f954 	bl	8007aac <TIM_ITRx_SetConfig>
      break;
 8007804:	e01b      	b.n	800783e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6859      	ldr	r1, [r3, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	461a      	mov	r2, r3
 8007814:	f000 f8ea 	bl	80079ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2140      	movs	r1, #64	; 0x40
 800781e:	4618      	mov	r0, r3
 8007820:	f000 f944 	bl	8007aac <TIM_ITRx_SetConfig>
      break;
 8007824:	e00b      	b.n	800783e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4619      	mov	r1, r3
 8007830:	4610      	mov	r0, r2
 8007832:	f000 f93b 	bl	8007aac <TIM_ITRx_SetConfig>
        break;
 8007836:	e002      	b.n	800783e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800783c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	ffceff88 	.word	0xffceff88
 800785c:	00100040 	.word	0x00100040
 8007860:	00100030 	.word	0x00100030
 8007864:	00100020 	.word	0x00100020

08007868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a40      	ldr	r2, [pc, #256]	; (80079cc <TIM_Base_SetConfig+0x114>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d013      	beq.n	80078f8 <TIM_Base_SetConfig+0x40>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078d6:	d00f      	beq.n	80078f8 <TIM_Base_SetConfig+0x40>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a3d      	ldr	r2, [pc, #244]	; (80079d0 <TIM_Base_SetConfig+0x118>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00b      	beq.n	80078f8 <TIM_Base_SetConfig+0x40>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a3c      	ldr	r2, [pc, #240]	; (80079d4 <TIM_Base_SetConfig+0x11c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d007      	beq.n	80078f8 <TIM_Base_SetConfig+0x40>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a3b      	ldr	r2, [pc, #236]	; (80079d8 <TIM_Base_SetConfig+0x120>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_Base_SetConfig+0x40>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a3a      	ldr	r2, [pc, #232]	; (80079dc <TIM_Base_SetConfig+0x124>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d108      	bne.n	800790a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	4313      	orrs	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a2f      	ldr	r2, [pc, #188]	; (80079cc <TIM_Base_SetConfig+0x114>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d01f      	beq.n	8007952 <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007918:	d01b      	beq.n	8007952 <TIM_Base_SetConfig+0x9a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a2c      	ldr	r2, [pc, #176]	; (80079d0 <TIM_Base_SetConfig+0x118>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d017      	beq.n	8007952 <TIM_Base_SetConfig+0x9a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a2b      	ldr	r2, [pc, #172]	; (80079d4 <TIM_Base_SetConfig+0x11c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d013      	beq.n	8007952 <TIM_Base_SetConfig+0x9a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a2a      	ldr	r2, [pc, #168]	; (80079d8 <TIM_Base_SetConfig+0x120>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00f      	beq.n	8007952 <TIM_Base_SetConfig+0x9a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a29      	ldr	r2, [pc, #164]	; (80079dc <TIM_Base_SetConfig+0x124>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00b      	beq.n	8007952 <TIM_Base_SetConfig+0x9a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a28      	ldr	r2, [pc, #160]	; (80079e0 <TIM_Base_SetConfig+0x128>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d007      	beq.n	8007952 <TIM_Base_SetConfig+0x9a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a27      	ldr	r2, [pc, #156]	; (80079e4 <TIM_Base_SetConfig+0x12c>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d003      	beq.n	8007952 <TIM_Base_SetConfig+0x9a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a26      	ldr	r2, [pc, #152]	; (80079e8 <TIM_Base_SetConfig+0x130>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d108      	bne.n	8007964 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a10      	ldr	r2, [pc, #64]	; (80079cc <TIM_Base_SetConfig+0x114>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00f      	beq.n	80079b0 <TIM_Base_SetConfig+0xf8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a12      	ldr	r2, [pc, #72]	; (80079dc <TIM_Base_SetConfig+0x124>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d00b      	beq.n	80079b0 <TIM_Base_SetConfig+0xf8>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a11      	ldr	r2, [pc, #68]	; (80079e0 <TIM_Base_SetConfig+0x128>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d007      	beq.n	80079b0 <TIM_Base_SetConfig+0xf8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a10      	ldr	r2, [pc, #64]	; (80079e4 <TIM_Base_SetConfig+0x12c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d003      	beq.n	80079b0 <TIM_Base_SetConfig+0xf8>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a0f      	ldr	r2, [pc, #60]	; (80079e8 <TIM_Base_SetConfig+0x130>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d103      	bne.n	80079b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	691a      	ldr	r2, [r3, #16]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	615a      	str	r2, [r3, #20]
}
 80079be:	bf00      	nop
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40010000 	.word	0x40010000
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800
 80079d8:	40000c00 	.word	0x40000c00
 80079dc:	40010400 	.word	0x40010400
 80079e0:	40014000 	.word	0x40014000
 80079e4:	40014400 	.word	0x40014400
 80079e8:	40014800 	.word	0x40014800

080079ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f023 0201 	bic.w	r2, r3, #1
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f023 030a 	bic.w	r3, r3, #10
 8007a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	621a      	str	r2, [r3, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b087      	sub	sp, #28
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	f023 0210 	bic.w	r2, r3, #16
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <TIM_ITRx_SetConfig+0x38>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f043 0307 	orr.w	r3, r3, #7
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	609a      	str	r2, [r3, #8]
}
 8007ad6:	bf00      	nop
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	ffcfff8f 	.word	0xffcfff8f

08007ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	021a      	lsls	r2, r3, #8
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	609a      	str	r2, [r3, #8]
}
 8007b1c:	bf00      	nop
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e068      	b.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a2e      	ldr	r2, [pc, #184]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d004      	beq.n	8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a2d      	ldr	r2, [pc, #180]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d108      	bne.n	8007b86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d01d      	beq.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb2:	d018      	beq.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1b      	ldr	r2, [pc, #108]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d013      	beq.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1a      	ldr	r2, [pc, #104]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00e      	beq.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a18      	ldr	r2, [pc, #96]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d009      	beq.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a13      	ldr	r2, [pc, #76]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d004      	beq.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a14      	ldr	r2, [pc, #80]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d10c      	bne.n	8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40010000 	.word	0x40010000
 8007c24:	40010400 	.word	0x40010400
 8007c28:	40000400 	.word	0x40000400
 8007c2c:	40000800 	.word	0x40000800
 8007c30:	40000c00 	.word	0x40000c00
 8007c34:	40001800 	.word	0x40001800

08007c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e042      	b.n	8007d0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7f9 fa25 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2224      	movs	r2, #36	; 0x24
 8007ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8c2 	bl	8007e40 <UART_SetConfig>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e022      	b.n	8007d0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fe16 	bl	8008900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fe9d 	bl	8008a44 <UART_CheckIdleState>
 8007d0a:	4603      	mov	r3, r0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08a      	sub	sp, #40	; 0x28
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	4613      	mov	r3, r2
 8007d22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	f040 8083 	bne.w	8007e36 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <HAL_UART_Transmit+0x28>
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e07b      	b.n	8007e38 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Transmit+0x3a>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e074      	b.n	8007e38 <HAL_UART_Transmit+0x124>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2221      	movs	r2, #33	; 0x21
 8007d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d66:	f7fa fa75 	bl	8002254 <HAL_GetTick>
 8007d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	88fa      	ldrh	r2, [r7, #6]
 8007d70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d84:	d108      	bne.n	8007d98 <HAL_UART_Transmit+0x84>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	e003      	b.n	8007da0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007da8:	e02c      	b.n	8007e04 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 fe90 	bl	8008ada <UART_WaitOnFlagUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e039      	b.n	8007e38 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	e007      	b.n	8007df2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3301      	adds	r3, #1
 8007df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1cc      	bne.n	8007daa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2200      	movs	r2, #0
 8007e18:	2140      	movs	r1, #64	; 0x40
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 fe5d 	bl	8008ada <UART_WaitOnFlagUntilTimeout>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e006      	b.n	8007e38 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e000      	b.n	8007e38 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e36:	2302      	movs	r3, #2
  }
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e40:	b5b0      	push	{r4, r5, r7, lr}
 8007e42:	b08e      	sub	sp, #56	; 0x38
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4bbf      	ldr	r3, [pc, #764]	; (800816c <UART_SetConfig+0x32c>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e76:	430b      	orrs	r3, r1
 8007e78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68da      	ldr	r2, [r3, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4ab5      	ldr	r2, [pc, #724]	; (8008170 <UART_SetConfig+0x330>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	4bb0      	ldr	r3, [pc, #704]	; (8008174 <UART_SetConfig+0x334>)
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6812      	ldr	r2, [r2, #0]
 8007eb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	f023 010f 	bic.w	r1, r3, #15
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4aa7      	ldr	r2, [pc, #668]	; (8008178 <UART_SetConfig+0x338>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d176      	bne.n	8007fcc <UART_SetConfig+0x18c>
 8007ede:	4ba7      	ldr	r3, [pc, #668]	; (800817c <UART_SetConfig+0x33c>)
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ee6:	2b28      	cmp	r3, #40	; 0x28
 8007ee8:	d86c      	bhi.n	8007fc4 <UART_SetConfig+0x184>
 8007eea:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <UART_SetConfig+0xb0>)
 8007eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef0:	08007f95 	.word	0x08007f95
 8007ef4:	08007fc5 	.word	0x08007fc5
 8007ef8:	08007fc5 	.word	0x08007fc5
 8007efc:	08007fc5 	.word	0x08007fc5
 8007f00:	08007fc5 	.word	0x08007fc5
 8007f04:	08007fc5 	.word	0x08007fc5
 8007f08:	08007fc5 	.word	0x08007fc5
 8007f0c:	08007fc5 	.word	0x08007fc5
 8007f10:	08007f9d 	.word	0x08007f9d
 8007f14:	08007fc5 	.word	0x08007fc5
 8007f18:	08007fc5 	.word	0x08007fc5
 8007f1c:	08007fc5 	.word	0x08007fc5
 8007f20:	08007fc5 	.word	0x08007fc5
 8007f24:	08007fc5 	.word	0x08007fc5
 8007f28:	08007fc5 	.word	0x08007fc5
 8007f2c:	08007fc5 	.word	0x08007fc5
 8007f30:	08007fa5 	.word	0x08007fa5
 8007f34:	08007fc5 	.word	0x08007fc5
 8007f38:	08007fc5 	.word	0x08007fc5
 8007f3c:	08007fc5 	.word	0x08007fc5
 8007f40:	08007fc5 	.word	0x08007fc5
 8007f44:	08007fc5 	.word	0x08007fc5
 8007f48:	08007fc5 	.word	0x08007fc5
 8007f4c:	08007fc5 	.word	0x08007fc5
 8007f50:	08007fad 	.word	0x08007fad
 8007f54:	08007fc5 	.word	0x08007fc5
 8007f58:	08007fc5 	.word	0x08007fc5
 8007f5c:	08007fc5 	.word	0x08007fc5
 8007f60:	08007fc5 	.word	0x08007fc5
 8007f64:	08007fc5 	.word	0x08007fc5
 8007f68:	08007fc5 	.word	0x08007fc5
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fb5 	.word	0x08007fb5
 8007f74:	08007fc5 	.word	0x08007fc5
 8007f78:	08007fc5 	.word	0x08007fc5
 8007f7c:	08007fc5 	.word	0x08007fc5
 8007f80:	08007fc5 	.word	0x08007fc5
 8007f84:	08007fc5 	.word	0x08007fc5
 8007f88:	08007fc5 	.word	0x08007fc5
 8007f8c:	08007fc5 	.word	0x08007fc5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f9a:	e222      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fa2:	e21e      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007faa:	e21a      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8007fac:	2310      	movs	r3, #16
 8007fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fb2:	e216      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fba:	e212      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc2:	e20e      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8007fc4:	2380      	movs	r3, #128	; 0x80
 8007fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fca:	e20a      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a6b      	ldr	r2, [pc, #428]	; (8008180 <UART_SetConfig+0x340>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d130      	bne.n	8008038 <UART_SetConfig+0x1f8>
 8007fd6:	4b69      	ldr	r3, [pc, #420]	; (800817c <UART_SetConfig+0x33c>)
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d826      	bhi.n	8008030 <UART_SetConfig+0x1f0>
 8007fe2:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <UART_SetConfig+0x1a8>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008001 	.word	0x08008001
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008011 	.word	0x08008011
 8007ff4:	08008019 	.word	0x08008019
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2300      	movs	r3, #0
 8008002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008006:	e1ec      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800800e:	e1e8      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008016:	e1e4      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800801e:	e1e0      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008026:	e1dc      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802e:	e1d8      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e1d4      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a51      	ldr	r2, [pc, #324]	; (8008184 <UART_SetConfig+0x344>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d130      	bne.n	80080a4 <UART_SetConfig+0x264>
 8008042:	4b4e      	ldr	r3, [pc, #312]	; (800817c <UART_SetConfig+0x33c>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b05      	cmp	r3, #5
 800804c:	d826      	bhi.n	800809c <UART_SetConfig+0x25c>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x214>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800807d 	.word	0x0800807d
 8008060:	08008085 	.word	0x08008085
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008095 	.word	0x08008095
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008072:	e1b6      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008074:	2304      	movs	r3, #4
 8008076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800807a:	e1b2      	b.n	80083e2 <UART_SetConfig+0x5a2>
 800807c:	2308      	movs	r3, #8
 800807e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008082:	e1ae      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800808a:	e1aa      	b.n	80083e2 <UART_SetConfig+0x5a2>
 800808c:	2320      	movs	r3, #32
 800808e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008092:	e1a6      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008094:	2340      	movs	r3, #64	; 0x40
 8008096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809a:	e1a2      	b.n	80083e2 <UART_SetConfig+0x5a2>
 800809c:	2380      	movs	r3, #128	; 0x80
 800809e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a2:	e19e      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a37      	ldr	r2, [pc, #220]	; (8008188 <UART_SetConfig+0x348>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d130      	bne.n	8008110 <UART_SetConfig+0x2d0>
 80080ae:	4b33      	ldr	r3, [pc, #204]	; (800817c <UART_SetConfig+0x33c>)
 80080b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d826      	bhi.n	8008108 <UART_SetConfig+0x2c8>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <UART_SetConfig+0x280>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080e1 	.word	0x080080e1
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f9 	.word	0x080080f9
 80080d4:	08008101 	.word	0x08008101
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080de:	e180      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080e6:	e17c      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ee:	e178      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080f6:	e174      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80080f8:	2320      	movs	r3, #32
 80080fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fe:	e170      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008100:	2340      	movs	r3, #64	; 0x40
 8008102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008106:	e16c      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810e:	e168      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1d      	ldr	r2, [pc, #116]	; (800818c <UART_SetConfig+0x34c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d142      	bne.n	80081a0 <UART_SetConfig+0x360>
 800811a:	4b18      	ldr	r3, [pc, #96]	; (800817c <UART_SetConfig+0x33c>)
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b05      	cmp	r3, #5
 8008124:	d838      	bhi.n	8008198 <UART_SetConfig+0x358>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <UART_SetConfig+0x2ec>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008145 	.word	0x08008145
 8008130:	0800814d 	.word	0x0800814d
 8008134:	08008155 	.word	0x08008155
 8008138:	0800815d 	.word	0x0800815d
 800813c:	08008165 	.word	0x08008165
 8008140:	08008191 	.word	0x08008191
 8008144:	2300      	movs	r3, #0
 8008146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800814a:	e14a      	b.n	80083e2 <UART_SetConfig+0x5a2>
 800814c:	2304      	movs	r3, #4
 800814e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008152:	e146      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008154:	2308      	movs	r3, #8
 8008156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815a:	e142      	b.n	80083e2 <UART_SetConfig+0x5a2>
 800815c:	2310      	movs	r3, #16
 800815e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008162:	e13e      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008164:	2320      	movs	r3, #32
 8008166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816a:	e13a      	b.n	80083e2 <UART_SetConfig+0x5a2>
 800816c:	cfff69f3 	.word	0xcfff69f3
 8008170:	58000c00 	.word	0x58000c00
 8008174:	11fff4ff 	.word	0x11fff4ff
 8008178:	40011000 	.word	0x40011000
 800817c:	58024400 	.word	0x58024400
 8008180:	40004400 	.word	0x40004400
 8008184:	40004800 	.word	0x40004800
 8008188:	40004c00 	.word	0x40004c00
 800818c:	40005000 	.word	0x40005000
 8008190:	2340      	movs	r3, #64	; 0x40
 8008192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008196:	e124      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008198:	2380      	movs	r3, #128	; 0x80
 800819a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800819e:	e120      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4acc      	ldr	r2, [pc, #816]	; (80084d8 <UART_SetConfig+0x698>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d176      	bne.n	8008298 <UART_SetConfig+0x458>
 80081aa:	4bcc      	ldr	r3, [pc, #816]	; (80084dc <UART_SetConfig+0x69c>)
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081b2:	2b28      	cmp	r3, #40	; 0x28
 80081b4:	d86c      	bhi.n	8008290 <UART_SetConfig+0x450>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <UART_SetConfig+0x37c>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	08008261 	.word	0x08008261
 80081c0:	08008291 	.word	0x08008291
 80081c4:	08008291 	.word	0x08008291
 80081c8:	08008291 	.word	0x08008291
 80081cc:	08008291 	.word	0x08008291
 80081d0:	08008291 	.word	0x08008291
 80081d4:	08008291 	.word	0x08008291
 80081d8:	08008291 	.word	0x08008291
 80081dc:	08008269 	.word	0x08008269
 80081e0:	08008291 	.word	0x08008291
 80081e4:	08008291 	.word	0x08008291
 80081e8:	08008291 	.word	0x08008291
 80081ec:	08008291 	.word	0x08008291
 80081f0:	08008291 	.word	0x08008291
 80081f4:	08008291 	.word	0x08008291
 80081f8:	08008291 	.word	0x08008291
 80081fc:	08008271 	.word	0x08008271
 8008200:	08008291 	.word	0x08008291
 8008204:	08008291 	.word	0x08008291
 8008208:	08008291 	.word	0x08008291
 800820c:	08008291 	.word	0x08008291
 8008210:	08008291 	.word	0x08008291
 8008214:	08008291 	.word	0x08008291
 8008218:	08008291 	.word	0x08008291
 800821c:	08008279 	.word	0x08008279
 8008220:	08008291 	.word	0x08008291
 8008224:	08008291 	.word	0x08008291
 8008228:	08008291 	.word	0x08008291
 800822c:	08008291 	.word	0x08008291
 8008230:	08008291 	.word	0x08008291
 8008234:	08008291 	.word	0x08008291
 8008238:	08008291 	.word	0x08008291
 800823c:	08008281 	.word	0x08008281
 8008240:	08008291 	.word	0x08008291
 8008244:	08008291 	.word	0x08008291
 8008248:	08008291 	.word	0x08008291
 800824c:	08008291 	.word	0x08008291
 8008250:	08008291 	.word	0x08008291
 8008254:	08008291 	.word	0x08008291
 8008258:	08008291 	.word	0x08008291
 800825c:	08008289 	.word	0x08008289
 8008260:	2301      	movs	r3, #1
 8008262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008266:	e0bc      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008268:	2304      	movs	r3, #4
 800826a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800826e:	e0b8      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008270:	2308      	movs	r3, #8
 8008272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008276:	e0b4      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008278:	2310      	movs	r3, #16
 800827a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800827e:	e0b0      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008280:	2320      	movs	r3, #32
 8008282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008286:	e0ac      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008288:	2340      	movs	r3, #64	; 0x40
 800828a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828e:	e0a8      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008290:	2380      	movs	r3, #128	; 0x80
 8008292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008296:	e0a4      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a90      	ldr	r2, [pc, #576]	; (80084e0 <UART_SetConfig+0x6a0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d130      	bne.n	8008304 <UART_SetConfig+0x4c4>
 80082a2:	4b8e      	ldr	r3, [pc, #568]	; (80084dc <UART_SetConfig+0x69c>)
 80082a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d826      	bhi.n	80082fc <UART_SetConfig+0x4bc>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <UART_SetConfig+0x474>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082d5 	.word	0x080082d5
 80082bc:	080082dd 	.word	0x080082dd
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082ed 	.word	0x080082ed
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2300      	movs	r3, #0
 80082ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082d2:	e086      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082da:	e082      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082e2:	e07e      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ea:	e07a      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f2:	e076      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80082f4:	2340      	movs	r3, #64	; 0x40
 80082f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fa:	e072      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80082fc:	2380      	movs	r3, #128	; 0x80
 80082fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008302:	e06e      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a76      	ldr	r2, [pc, #472]	; (80084e4 <UART_SetConfig+0x6a4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d130      	bne.n	8008370 <UART_SetConfig+0x530>
 800830e:	4b73      	ldr	r3, [pc, #460]	; (80084dc <UART_SetConfig+0x69c>)
 8008310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b05      	cmp	r3, #5
 8008318:	d826      	bhi.n	8008368 <UART_SetConfig+0x528>
 800831a:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <UART_SetConfig+0x4e0>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008339 	.word	0x08008339
 8008324:	08008341 	.word	0x08008341
 8008328:	08008349 	.word	0x08008349
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800833e:	e050      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008346:	e04c      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800834e:	e048      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008356:	e044      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835e:	e040      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008366:	e03c      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008368:	2380      	movs	r3, #128	; 0x80
 800836a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836e:	e038      	b.n	80083e2 <UART_SetConfig+0x5a2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a5c      	ldr	r2, [pc, #368]	; (80084e8 <UART_SetConfig+0x6a8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d130      	bne.n	80083dc <UART_SetConfig+0x59c>
 800837a:	4b58      	ldr	r3, [pc, #352]	; (80084dc <UART_SetConfig+0x69c>)
 800837c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b05      	cmp	r3, #5
 8008384:	d826      	bhi.n	80083d4 <UART_SetConfig+0x594>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0x54c>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	2302      	movs	r3, #2
 80083a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083aa:	e01a      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083b2:	e016      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ba:	e012      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083c2:	e00e      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ca:	e00a      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083d2:	e006      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80083d4:	2380      	movs	r3, #128	; 0x80
 80083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083da:	e002      	b.n	80083e2 <UART_SetConfig+0x5a2>
 80083dc:	2380      	movs	r3, #128	; 0x80
 80083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a40      	ldr	r2, [pc, #256]	; (80084e8 <UART_SetConfig+0x6a8>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	f040 80ef 	bne.w	80085cc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	dc46      	bgt.n	8008484 <UART_SetConfig+0x644>
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	f2c0 8081 	blt.w	80084fe <UART_SetConfig+0x6be>
 80083fc:	3b02      	subs	r3, #2
 80083fe:	2b1e      	cmp	r3, #30
 8008400:	d87d      	bhi.n	80084fe <UART_SetConfig+0x6be>
 8008402:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <UART_SetConfig+0x5c8>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	0800848b 	.word	0x0800848b
 800840c:	080084ff 	.word	0x080084ff
 8008410:	08008493 	.word	0x08008493
 8008414:	080084ff 	.word	0x080084ff
 8008418:	080084ff 	.word	0x080084ff
 800841c:	080084ff 	.word	0x080084ff
 8008420:	080084a3 	.word	0x080084a3
 8008424:	080084ff 	.word	0x080084ff
 8008428:	080084ff 	.word	0x080084ff
 800842c:	080084ff 	.word	0x080084ff
 8008430:	080084ff 	.word	0x080084ff
 8008434:	080084ff 	.word	0x080084ff
 8008438:	080084ff 	.word	0x080084ff
 800843c:	080084ff 	.word	0x080084ff
 8008440:	080084b3 	.word	0x080084b3
 8008444:	080084ff 	.word	0x080084ff
 8008448:	080084ff 	.word	0x080084ff
 800844c:	080084ff 	.word	0x080084ff
 8008450:	080084ff 	.word	0x080084ff
 8008454:	080084ff 	.word	0x080084ff
 8008458:	080084ff 	.word	0x080084ff
 800845c:	080084ff 	.word	0x080084ff
 8008460:	080084ff 	.word	0x080084ff
 8008464:	080084ff 	.word	0x080084ff
 8008468:	080084ff 	.word	0x080084ff
 800846c:	080084ff 	.word	0x080084ff
 8008470:	080084ff 	.word	0x080084ff
 8008474:	080084ff 	.word	0x080084ff
 8008478:	080084ff 	.word	0x080084ff
 800847c:	080084ff 	.word	0x080084ff
 8008480:	080084f1 	.word	0x080084f1
 8008484:	2b40      	cmp	r3, #64	; 0x40
 8008486:	d036      	beq.n	80084f6 <UART_SetConfig+0x6b6>
 8008488:	e039      	b.n	80084fe <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800848a:	f7fc fe13 	bl	80050b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800848e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008490:	e03b      	b.n	800850a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008492:	f107 0314 	add.w	r3, r7, #20
 8008496:	4618      	mov	r0, r3
 8008498:	f7fc fe22 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084a0:	e033      	b.n	800850a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a2:	f107 0308 	add.w	r3, r7, #8
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fc ff6e 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084b0:	e02b      	b.n	800850a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <UART_SetConfig+0x69c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084be:	4b07      	ldr	r3, [pc, #28]	; (80084dc <UART_SetConfig+0x69c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	4a08      	ldr	r2, [pc, #32]	; (80084ec <UART_SetConfig+0x6ac>)
 80084ca:	fa22 f303 	lsr.w	r3, r2, r3
 80084ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084d0:	e01b      	b.n	800850a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <UART_SetConfig+0x6ac>)
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084d6:	e018      	b.n	800850a <UART_SetConfig+0x6ca>
 80084d8:	40011400 	.word	0x40011400
 80084dc:	58024400 	.word	0x58024400
 80084e0:	40007800 	.word	0x40007800
 80084e4:	40007c00 	.word	0x40007c00
 80084e8:	58000c00 	.word	0x58000c00
 80084ec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084f0:	4bc4      	ldr	r3, [pc, #784]	; (8008804 <UART_SetConfig+0x9c4>)
 80084f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084f4:	e009      	b.n	800850a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084fc:	e005      	b.n	800850a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008508:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 81da 	beq.w	80088c6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	4abc      	ldr	r2, [pc, #752]	; (8008808 <UART_SetConfig+0x9c8>)
 8008518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800851c:	461a      	mov	r2, r3
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	fbb3 f3f2 	udiv	r3, r3, r2
 8008524:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	4413      	add	r3, r2
 8008530:	6a3a      	ldr	r2, [r7, #32]
 8008532:	429a      	cmp	r2, r3
 8008534:	d305      	bcc.n	8008542 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800853c:	6a3a      	ldr	r2, [r7, #32]
 800853e:	429a      	cmp	r2, r3
 8008540:	d903      	bls.n	800854a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008548:	e1bd      	b.n	80088c6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	4618      	mov	r0, r3
 800854e:	f04f 0100 	mov.w	r1, #0
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	4aac      	ldr	r2, [pc, #688]	; (8008808 <UART_SetConfig+0x9c8>)
 8008558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800855c:	b29a      	uxth	r2, r3
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	f7f7 ff15 	bl	8000390 <__aeabi_uldivmod>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4610      	mov	r0, r2
 800856c:	4619      	mov	r1, r3
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	020b      	lsls	r3, r1, #8
 8008578:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800857c:	0202      	lsls	r2, r0, #8
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	6849      	ldr	r1, [r1, #4]
 8008582:	0849      	lsrs	r1, r1, #1
 8008584:	4608      	mov	r0, r1
 8008586:	f04f 0100 	mov.w	r1, #0
 800858a:	1814      	adds	r4, r2, r0
 800858c:	eb43 0501 	adc.w	r5, r3, r1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	461a      	mov	r2, r3
 8008596:	f04f 0300 	mov.w	r3, #0
 800859a:	4620      	mov	r0, r4
 800859c:	4629      	mov	r1, r5
 800859e:	f7f7 fef7 	bl	8000390 <__aeabi_uldivmod>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4613      	mov	r3, r2
 80085a8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085b0:	d308      	bcc.n	80085c4 <UART_SetConfig+0x784>
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085b8:	d204      	bcs.n	80085c4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085c0:	60da      	str	r2, [r3, #12]
 80085c2:	e180      	b.n	80088c6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80085ca:	e17c      	b.n	80088c6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d4:	f040 80bf 	bne.w	8008756 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80085d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085dc:	2b20      	cmp	r3, #32
 80085de:	dc49      	bgt.n	8008674 <UART_SetConfig+0x834>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	db7c      	blt.n	80086de <UART_SetConfig+0x89e>
 80085e4:	2b20      	cmp	r3, #32
 80085e6:	d87a      	bhi.n	80086de <UART_SetConfig+0x89e>
 80085e8:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0x7b0>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	0800867b 	.word	0x0800867b
 80085f4:	08008683 	.word	0x08008683
 80085f8:	080086df 	.word	0x080086df
 80085fc:	080086df 	.word	0x080086df
 8008600:	0800868b 	.word	0x0800868b
 8008604:	080086df 	.word	0x080086df
 8008608:	080086df 	.word	0x080086df
 800860c:	080086df 	.word	0x080086df
 8008610:	0800869b 	.word	0x0800869b
 8008614:	080086df 	.word	0x080086df
 8008618:	080086df 	.word	0x080086df
 800861c:	080086df 	.word	0x080086df
 8008620:	080086df 	.word	0x080086df
 8008624:	080086df 	.word	0x080086df
 8008628:	080086df 	.word	0x080086df
 800862c:	080086df 	.word	0x080086df
 8008630:	080086ab 	.word	0x080086ab
 8008634:	080086df 	.word	0x080086df
 8008638:	080086df 	.word	0x080086df
 800863c:	080086df 	.word	0x080086df
 8008640:	080086df 	.word	0x080086df
 8008644:	080086df 	.word	0x080086df
 8008648:	080086df 	.word	0x080086df
 800864c:	080086df 	.word	0x080086df
 8008650:	080086df 	.word	0x080086df
 8008654:	080086df 	.word	0x080086df
 8008658:	080086df 	.word	0x080086df
 800865c:	080086df 	.word	0x080086df
 8008660:	080086df 	.word	0x080086df
 8008664:	080086df 	.word	0x080086df
 8008668:	080086df 	.word	0x080086df
 800866c:	080086df 	.word	0x080086df
 8008670:	080086d1 	.word	0x080086d1
 8008674:	2b40      	cmp	r3, #64	; 0x40
 8008676:	d02e      	beq.n	80086d6 <UART_SetConfig+0x896>
 8008678:	e031      	b.n	80086de <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800867a:	f7fb f8dd 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 800867e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008680:	e033      	b.n	80086ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008682:	f7fb f8ef 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 8008686:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008688:	e02f      	b.n	80086ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800868a:	f107 0314 	add.w	r3, r7, #20
 800868e:	4618      	mov	r0, r3
 8008690:	f7fc fd26 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008698:	e027      	b.n	80086ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800869a:	f107 0308 	add.w	r3, r7, #8
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fc fe72 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086a8:	e01f      	b.n	80086ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086aa:	4b58      	ldr	r3, [pc, #352]	; (800880c <UART_SetConfig+0x9cc>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d009      	beq.n	80086ca <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086b6:	4b55      	ldr	r3, [pc, #340]	; (800880c <UART_SetConfig+0x9cc>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	08db      	lsrs	r3, r3, #3
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	4a53      	ldr	r2, [pc, #332]	; (8008810 <UART_SetConfig+0x9d0>)
 80086c2:	fa22 f303 	lsr.w	r3, r2, r3
 80086c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086c8:	e00f      	b.n	80086ea <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80086ca:	4b51      	ldr	r3, [pc, #324]	; (8008810 <UART_SetConfig+0x9d0>)
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086ce:	e00c      	b.n	80086ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086d0:	4b4c      	ldr	r3, [pc, #304]	; (8008804 <UART_SetConfig+0x9c4>)
 80086d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086d4:	e009      	b.n	80086ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086dc:	e005      	b.n	80086ea <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80086e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 80ea 	beq.w	80088c6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	4a44      	ldr	r2, [pc, #272]	; (8008808 <UART_SetConfig+0x9c8>)
 80086f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	fbb3 f3f2 	udiv	r3, r3, r2
 8008704:	005a      	lsls	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	441a      	add	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	fbb2 f3f3 	udiv	r3, r2, r3
 8008716:	b29b      	uxth	r3, r3
 8008718:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	2b0f      	cmp	r3, #15
 800871e:	d916      	bls.n	800874e <UART_SetConfig+0x90e>
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008726:	d212      	bcs.n	800874e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	b29b      	uxth	r3, r3
 800872c:	f023 030f 	bic.w	r3, r3, #15
 8008730:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	085b      	lsrs	r3, r3, #1
 8008736:	b29b      	uxth	r3, r3
 8008738:	f003 0307 	and.w	r3, r3, #7
 800873c:	b29a      	uxth	r2, r3
 800873e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008740:	4313      	orrs	r3, r2
 8008742:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	e0bb      	b.n	80088c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008754:	e0b7      	b.n	80088c6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800875a:	2b20      	cmp	r3, #32
 800875c:	dc4a      	bgt.n	80087f4 <UART_SetConfig+0x9b4>
 800875e:	2b00      	cmp	r3, #0
 8008760:	f2c0 8086 	blt.w	8008870 <UART_SetConfig+0xa30>
 8008764:	2b20      	cmp	r3, #32
 8008766:	f200 8083 	bhi.w	8008870 <UART_SetConfig+0xa30>
 800876a:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0x930>)
 800876c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008770:	080087fb 	.word	0x080087fb
 8008774:	08008815 	.word	0x08008815
 8008778:	08008871 	.word	0x08008871
 800877c:	08008871 	.word	0x08008871
 8008780:	0800881d 	.word	0x0800881d
 8008784:	08008871 	.word	0x08008871
 8008788:	08008871 	.word	0x08008871
 800878c:	08008871 	.word	0x08008871
 8008790:	0800882d 	.word	0x0800882d
 8008794:	08008871 	.word	0x08008871
 8008798:	08008871 	.word	0x08008871
 800879c:	08008871 	.word	0x08008871
 80087a0:	08008871 	.word	0x08008871
 80087a4:	08008871 	.word	0x08008871
 80087a8:	08008871 	.word	0x08008871
 80087ac:	08008871 	.word	0x08008871
 80087b0:	0800883d 	.word	0x0800883d
 80087b4:	08008871 	.word	0x08008871
 80087b8:	08008871 	.word	0x08008871
 80087bc:	08008871 	.word	0x08008871
 80087c0:	08008871 	.word	0x08008871
 80087c4:	08008871 	.word	0x08008871
 80087c8:	08008871 	.word	0x08008871
 80087cc:	08008871 	.word	0x08008871
 80087d0:	08008871 	.word	0x08008871
 80087d4:	08008871 	.word	0x08008871
 80087d8:	08008871 	.word	0x08008871
 80087dc:	08008871 	.word	0x08008871
 80087e0:	08008871 	.word	0x08008871
 80087e4:	08008871 	.word	0x08008871
 80087e8:	08008871 	.word	0x08008871
 80087ec:	08008871 	.word	0x08008871
 80087f0:	08008863 	.word	0x08008863
 80087f4:	2b40      	cmp	r3, #64	; 0x40
 80087f6:	d037      	beq.n	8008868 <UART_SetConfig+0xa28>
 80087f8:	e03a      	b.n	8008870 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087fa:	f7fb f81d 	bl	8003838 <HAL_RCC_GetPCLK1Freq>
 80087fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008800:	e03c      	b.n	800887c <UART_SetConfig+0xa3c>
 8008802:	bf00      	nop
 8008804:	003d0900 	.word	0x003d0900
 8008808:	0800f624 	.word	0x0800f624
 800880c:	58024400 	.word	0x58024400
 8008810:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008814:	f7fb f826 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 8008818:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800881a:	e02f      	b.n	800887c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	4618      	mov	r0, r3
 8008822:	f7fc fc5d 	bl	80050e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800882a:	e027      	b.n	800887c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800882c:	f107 0308 	add.w	r3, r7, #8
 8008830:	4618      	mov	r0, r3
 8008832:	f7fc fda9 	bl	8005388 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800883a:	e01f      	b.n	800887c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800883c:	4b2c      	ldr	r3, [pc, #176]	; (80088f0 <UART_SetConfig+0xab0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0320 	and.w	r3, r3, #32
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008848:	4b29      	ldr	r3, [pc, #164]	; (80088f0 <UART_SetConfig+0xab0>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	08db      	lsrs	r3, r3, #3
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	4a28      	ldr	r2, [pc, #160]	; (80088f4 <UART_SetConfig+0xab4>)
 8008854:	fa22 f303 	lsr.w	r3, r2, r3
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800885a:	e00f      	b.n	800887c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800885c:	4b25      	ldr	r3, [pc, #148]	; (80088f4 <UART_SetConfig+0xab4>)
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008860:	e00c      	b.n	800887c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008862:	4b25      	ldr	r3, [pc, #148]	; (80088f8 <UART_SetConfig+0xab8>)
 8008864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008866:	e009      	b.n	800887c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800886c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800886e:	e005      	b.n	800887c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800887a:	bf00      	nop
    }

    if (pclk != 0U)
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d021      	beq.n	80088c6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	4a1d      	ldr	r2, [pc, #116]	; (80088fc <UART_SetConfig+0xabc>)
 8008888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800888c:	461a      	mov	r2, r3
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	fbb3 f2f2 	udiv	r2, r3, r2
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	441a      	add	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	2b0f      	cmp	r3, #15
 80088ac:	d908      	bls.n	80088c0 <UART_SetConfig+0xa80>
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b4:	d204      	bcs.n	80088c0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088bc:	60da      	str	r2, [r3, #12]
 80088be:	e002      	b.n	80088c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3738      	adds	r7, #56	; 0x38
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bdb0      	pop	{r4, r5, r7, pc}
 80088ee:	bf00      	nop
 80088f0:	58024400 	.word	0x58024400
 80088f4:	03d09000 	.word	0x03d09000
 80088f8:	003d0900 	.word	0x003d0900
 80088fc:	0800f624 	.word	0x0800f624

08008900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01a      	beq.n	8008a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089fe:	d10a      	bne.n	8008a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00a      	beq.n	8008a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	605a      	str	r2, [r3, #4]
  }
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a54:	f7f9 fbfe 	bl	8002254 <HAL_GetTick>
 8008a58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d10e      	bne.n	8008a86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f82f 	bl	8008ada <UART_WaitOnFlagUntilTimeout>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e025      	b.n	8008ad2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d10e      	bne.n	8008ab2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f819 	bl	8008ada <UART_WaitOnFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e00f      	b.n	8008ad2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aea:	e062      	b.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af2:	d05e      	beq.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af4:	f7f9 fbae 	bl	8002254 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d302      	bcc.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d11d      	bne.n	8008b46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b18:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0201 	bic.w	r2, r2, #1
 8008b28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e045      	b.n	8008bd2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d02e      	beq.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b62:	d126      	bne.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f022 0201 	bic.w	r2, r2, #1
 8008b8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e00f      	b.n	8008bd2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	bf0c      	ite	eq
 8008bc2:	2301      	moveq	r3, #1
 8008bc4:	2300      	movne	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d08d      	beq.n	8008aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b085      	sub	sp, #20
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d101      	bne.n	8008bf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e027      	b.n	8008c40 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2224      	movs	r2, #36	; 0x24
 8008bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0201 	bic.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d101      	bne.n	8008c64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c60:	2302      	movs	r3, #2
 8008c62:	e02d      	b.n	8008cc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2224      	movs	r2, #36	; 0x24
 8008c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0201 	bic.w	r2, r2, #1
 8008c8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f84f 	bl	8008d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d101      	bne.n	8008ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e02d      	b.n	8008d3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2224      	movs	r2, #36	; 0x24
 8008cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0201 	bic.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f811 	bl	8008d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d108      	bne.n	8008d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d64:	e031      	b.n	8008dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d66:	2310      	movs	r3, #16
 8008d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d6a:	2310      	movs	r3, #16
 8008d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	0e5b      	lsrs	r3, r3, #25
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	0f5b      	lsrs	r3, r3, #29
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	7b3a      	ldrb	r2, [r7, #12]
 8008d92:	4911      	ldr	r1, [pc, #68]	; (8008dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8008d94:	5c8a      	ldrb	r2, [r1, r2]
 8008d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d9a:	7b3a      	ldrb	r2, [r7, #12]
 8008d9c:	490f      	ldr	r1, [pc, #60]	; (8008ddc <UARTEx_SetNbDataToProcess+0x98>)
 8008d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	7b7a      	ldrb	r2, [r7, #13]
 8008db0:	4909      	ldr	r1, [pc, #36]	; (8008dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8008db2:	5c8a      	ldrb	r2, [r1, r2]
 8008db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008db8:	7b7a      	ldrb	r2, [r7, #13]
 8008dba:	4908      	ldr	r1, [pc, #32]	; (8008ddc <UARTEx_SetNbDataToProcess+0x98>)
 8008dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008dca:	bf00      	nop
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	0800f63c 	.word	0x0800f63c
 8008ddc:	0800f644 	.word	0x0800f644

08008de0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008de0:	b084      	sub	sp, #16
 8008de2:	b480      	push	{r7}
 8008de4:	b085      	sub	sp, #20
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	f107 001c 	add.w	r0, r7, #28
 8008dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008df6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008df8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008dfa:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008dfe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008e02:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008e06:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <SDMMC_Init+0x50>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	b004      	add	sp, #16
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	ffc02c00 	.word	0xffc02c00

08008e34 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f043 0203 	orr.w	r2, r3, #3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0303 	and.w	r3, r3, #3
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008ece:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008ed4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008eda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	4b06      	ldr	r3, [pc, #24]	; (8008f00 <SDMMC_SendCommand+0x50>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	fffee0c0 	.word	0xfffee0c0

08008f04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	b2db      	uxtb	r3, r3
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3314      	adds	r3, #20
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	4413      	add	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008f6a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008f70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008f76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0

}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008faa:	2310      	movs	r3, #16
 8008fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff ff73 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fce:	2110      	movs	r1, #16
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fa5f 	bl	8009494 <SDMMC_GetCmdResp1>
 8008fd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3720      	adds	r7, #32
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b088      	sub	sp, #32
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008ff0:	2311      	movs	r3, #17
 8008ff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009004:	f107 0308 	add.w	r3, r7, #8
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff ff50 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009010:	f241 3288 	movw	r2, #5000	; 0x1388
 8009014:	2111      	movs	r1, #17
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa3c 	bl	8009494 <SDMMC_GetCmdResp1>
 800901c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800901e:	69fb      	ldr	r3, [r7, #28]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009036:	2312      	movs	r3, #18
 8009038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800903a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800903e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009040:	2300      	movs	r3, #0
 8009042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800904a:	f107 0308 	add.w	r3, r7, #8
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff ff2d 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009056:	f241 3288 	movw	r2, #5000	; 0x1388
 800905a:	2112      	movs	r1, #18
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fa19 	bl	8009494 <SDMMC_GetCmdResp1>
 8009062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009064:	69fb      	ldr	r3, [r7, #28]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3720      	adds	r7, #32
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b088      	sub	sp, #32
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800907c:	2318      	movs	r3, #24
 800907e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800908a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800908e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009090:	f107 0308 	add.w	r3, r7, #8
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff ff0a 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800909c:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a0:	2118      	movs	r1, #24
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f9f6 	bl	8009494 <SDMMC_GetCmdResp1>
 80090a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090aa:	69fb      	ldr	r3, [r7, #28]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80090c2:	2319      	movs	r3, #25
 80090c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fee7 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80090e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e6:	2119      	movs	r1, #25
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f9d3 	bl	8009494 <SDMMC_GetCmdResp1>
 80090ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090f0:	69fb      	ldr	r3, [r7, #28]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3720      	adds	r7, #32
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009108:	230c      	movs	r3, #12
 800910a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800910c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800911a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7ff feb8 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009140:	4a0b      	ldr	r2, [pc, #44]	; (8009170 <SDMMC_CmdStopTransfer+0x74>)
 8009142:	210c      	movs	r1, #12
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f9a5 	bl	8009494 <SDMMC_GetCmdResp1>
 800914a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800915e:	d101      	bne.n	8009164 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009160:	2300      	movs	r3, #0
 8009162:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009164:	69fb      	ldr	r3, [r7, #28]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	05f5e100 	.word	0x05f5e100

08009174 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009182:	2307      	movs	r3, #7
 8009184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800918a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009196:	f107 0308 	add.w	r3, r7, #8
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff fe87 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80091a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a6:	2107      	movs	r1, #7
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f973 	bl	8009494 <SDMMC_GetCmdResp1>
 80091ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091b0:	69fb      	ldr	r3, [r7, #28]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b088      	sub	sp, #32
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80091ca:	2300      	movs	r3, #0
 80091cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091d8:	f107 0308 	add.w	r3, r7, #8
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff fe66 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fb97 	bl	8009918 <SDMMC_GetCmdError>
 80091ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ec:	69fb      	ldr	r3, [r7, #28]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b088      	sub	sp, #32
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80091fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009204:	2308      	movs	r3, #8
 8009206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800920c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009216:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009218:	f107 0308 	add.w	r3, r7, #8
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fe46 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fb29 	bl	800987c <SDMMC_GetCmdResp7>
 800922a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800922c:	69fb      	ldr	r3, [r7, #28]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3720      	adds	r7, #32
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b088      	sub	sp, #32
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009244:	2337      	movs	r3, #55	; 0x37
 8009246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800924c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800924e:	2300      	movs	r3, #0
 8009250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009256:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009258:	f107 0308 	add.w	r3, r7, #8
 800925c:	4619      	mov	r1, r3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff fe26 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009264:	f241 3288 	movw	r2, #5000	; 0x1388
 8009268:	2137      	movs	r1, #55	; 0x37
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f912 	bl	8009494 <SDMMC_GetCmdResp1>
 8009270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009272:	69fb      	ldr	r3, [r7, #28]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3720      	adds	r7, #32
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b088      	sub	sp, #32
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800928a:	2329      	movs	r3, #41	; 0x29
 800928c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800928e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800929c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800929e:	f107 0308 	add.w	r3, r7, #8
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff fe03 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa2e 	bl	800970c <SDMMC_GetCmdResp3>
 80092b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092b2:	69fb      	ldr	r3, [r7, #28]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3720      	adds	r7, #32
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80092ca:	2306      	movs	r3, #6
 80092cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092d4:	2300      	movs	r3, #0
 80092d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092de:	f107 0308 	add.w	r3, r7, #8
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff fde3 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80092ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ee:	2106      	movs	r1, #6
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f8cf 	bl	8009494 <SDMMC_GetCmdResp1>
 80092f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092f8:	69fb      	ldr	r3, [r7, #28]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b088      	sub	sp, #32
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800930e:	2333      	movs	r3, #51	; 0x33
 8009310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800931c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009320:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009322:	f107 0308 	add.w	r3, r7, #8
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff fdc1 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800932e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009332:	2133      	movs	r1, #51	; 0x33
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f8ad 	bl	8009494 <SDMMC_GetCmdResp1>
 800933a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800933c:	69fb      	ldr	r3, [r7, #28]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3720      	adds	r7, #32
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b088      	sub	sp, #32
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009352:	2302      	movs	r3, #2
 8009354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800935a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800935c:	2300      	movs	r3, #0
 800935e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009364:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009366:	f107 0308 	add.w	r3, r7, #8
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7ff fd9f 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f980 	bl	8009678 <SDMMC_GetCmdResp2>
 8009378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800937a:	69fb      	ldr	r3, [r7, #28]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3720      	adds	r7, #32
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009392:	2309      	movs	r3, #9
 8009394:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009396:	f44f 7340 	mov.w	r3, #768	; 0x300
 800939a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093a6:	f107 0308 	add.w	r3, r7, #8
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff fd7f 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f960 	bl	8009678 <SDMMC_GetCmdResp2>
 80093b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ba:	69fb      	ldr	r3, [r7, #28]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80093d2:	2303      	movs	r3, #3
 80093d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093e6:	f107 0308 	add.w	r3, r7, #8
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7ff fd5f 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	2103      	movs	r1, #3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f9c8 	bl	800978c <SDMMC_GetCmdResp6>
 80093fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093fe:	69fb      	ldr	r3, [r7, #28]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3720      	adds	r7, #32
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009416:	230d      	movs	r3, #13
 8009418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800941a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800941e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009420:	2300      	movs	r3, #0
 8009422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800942a:	f107 0308 	add.w	r3, r7, #8
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff fd3d 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009436:	f241 3288 	movw	r2, #5000	; 0x1388
 800943a:	210d      	movs	r1, #13
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f829 	bl	8009494 <SDMMC_GetCmdResp1>
 8009442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009444:	69fb      	ldr	r3, [r7, #28]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3720      	adds	r7, #32
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b088      	sub	sp, #32
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800945a:	230d      	movs	r3, #13
 800945c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800945e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009464:	2300      	movs	r3, #0
 8009466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800946c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800946e:	f107 0308 	add.w	r3, r7, #8
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff fd1b 	bl	8008eb0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800947a:	f241 3288 	movw	r2, #5000	; 0x1388
 800947e:	210d      	movs	r1, #13
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f807 	bl	8009494 <SDMMC_GetCmdResp1>
 8009486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009488:	69fb      	ldr	r3, [r7, #28]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	460b      	mov	r3, r1
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80094a2:	4b70      	ldr	r3, [pc, #448]	; (8009664 <SDMMC_GetCmdResp1+0x1d0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a70      	ldr	r2, [pc, #448]	; (8009668 <SDMMC_GetCmdResp1+0x1d4>)
 80094a8:	fba2 2303 	umull	r2, r3, r2, r3
 80094ac:	0a5a      	lsrs	r2, r3, #9
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	fb02 f303 	mul.w	r3, r2, r3
 80094b4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	1e5a      	subs	r2, r3, #1
 80094ba:	61fa      	str	r2, [r7, #28]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d102      	bne.n	80094c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094c4:	e0c9      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ca:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80094cc:	69ba      	ldr	r2, [r7, #24]
 80094ce:	4b67      	ldr	r3, [pc, #412]	; (800966c <SDMMC_GetCmdResp1+0x1d8>)
 80094d0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0ef      	beq.n	80094b6 <SDMMC_GetCmdResp1+0x22>
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1ea      	bne.n	80094b6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d004      	beq.n	80094f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2204      	movs	r2, #4
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094f2:	2304      	movs	r3, #4
 80094f4:	e0b1      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009508:	2301      	movs	r3, #1
 800950a:	e0a6      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4a58      	ldr	r2, [pc, #352]	; (8009670 <SDMMC_GetCmdResp1+0x1dc>)
 8009510:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7ff fcf6 	bl	8008f04 <SDMMC_GetCommandResponse>
 8009518:	4603      	mov	r3, r0
 800951a:	461a      	mov	r2, r3
 800951c:	7afb      	ldrb	r3, [r7, #11]
 800951e:	4293      	cmp	r3, r2
 8009520:	d001      	beq.n	8009526 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009522:	2301      	movs	r3, #1
 8009524:	e099      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009526:	2100      	movs	r1, #0
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7ff fcf8 	bl	8008f1e <SDMMC_GetResponse>
 800952e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4b50      	ldr	r3, [pc, #320]	; (8009674 <SDMMC_GetCmdResp1+0x1e0>)
 8009534:	4013      	ands	r3, r2
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800953a:	2300      	movs	r3, #0
 800953c:	e08d      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	da02      	bge.n	800954a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009548:	e087      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009554:	2340      	movs	r3, #64	; 0x40
 8009556:	e080      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009562:	2380      	movs	r3, #128	; 0x80
 8009564:	e079      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009574:	e071      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009584:	e069      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009594:	e061      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095a4:	e059      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095b4:	e051      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095c4:	e049      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80095d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095d4:	e041      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80095e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095e4:	e039      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80095f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095f4:	e031      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009600:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009604:	e029      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009614:	e021      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009620:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009624:	e019      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009634:	e011      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009644:	e009      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f003 0308 	and.w	r3, r3, #8
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009650:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009654:	e001      	b.n	800965a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800965a:	4618      	mov	r0, r3
 800965c:	3720      	adds	r7, #32
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	24000000 	.word	0x24000000
 8009668:	10624dd3 	.word	0x10624dd3
 800966c:	00200045 	.word	0x00200045
 8009670:	002000c5 	.word	0x002000c5
 8009674:	fdffe008 	.word	0xfdffe008

08009678 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009680:	4b1f      	ldr	r3, [pc, #124]	; (8009700 <SDMMC_GetCmdResp2+0x88>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a1f      	ldr	r2, [pc, #124]	; (8009704 <SDMMC_GetCmdResp2+0x8c>)
 8009686:	fba2 2303 	umull	r2, r3, r2, r3
 800968a:	0a5b      	lsrs	r3, r3, #9
 800968c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009690:	fb02 f303 	mul.w	r3, r2, r3
 8009694:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	1e5a      	subs	r2, r3, #1
 800969a:	60fa      	str	r2, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096a4:	e026      	b.n	80096f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0ef      	beq.n	8009696 <SDMMC_GetCmdResp2+0x1e>
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1ea      	bne.n	8009696 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d004      	beq.n	80096d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2204      	movs	r2, #4
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096d2:	2304      	movs	r3, #4
 80096d4:	e00e      	b.n	80096f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e003      	b.n	80096f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a06      	ldr	r2, [pc, #24]	; (8009708 <SDMMC_GetCmdResp2+0x90>)
 80096f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	24000000 	.word	0x24000000
 8009704:	10624dd3 	.word	0x10624dd3
 8009708:	002000c5 	.word	0x002000c5

0800970c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009714:	4b1a      	ldr	r3, [pc, #104]	; (8009780 <SDMMC_GetCmdResp3+0x74>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a1a      	ldr	r2, [pc, #104]	; (8009784 <SDMMC_GetCmdResp3+0x78>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	0a5b      	lsrs	r3, r3, #9
 8009720:	f241 3288 	movw	r2, #5000	; 0x1388
 8009724:	fb02 f303 	mul.w	r3, r2, r3
 8009728:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	1e5a      	subs	r2, r3, #1
 800972e:	60fa      	str	r2, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009734:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009738:	e01b      	b.n	8009772 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0ef      	beq.n	800972a <SDMMC_GetCmdResp3+0x1e>
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1ea      	bne.n	800972a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009758:	f003 0304 	and.w	r3, r3, #4
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2204      	movs	r2, #4
 8009764:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009766:	2304      	movs	r3, #4
 8009768:	e003      	b.n	8009772 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a06      	ldr	r2, [pc, #24]	; (8009788 <SDMMC_GetCmdResp3+0x7c>)
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	24000000 	.word	0x24000000
 8009784:	10624dd3 	.word	0x10624dd3
 8009788:	002000c5 	.word	0x002000c5

0800978c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	460b      	mov	r3, r1
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800979a:	4b35      	ldr	r3, [pc, #212]	; (8009870 <SDMMC_GetCmdResp6+0xe4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a35      	ldr	r2, [pc, #212]	; (8009874 <SDMMC_GetCmdResp6+0xe8>)
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	0a5b      	lsrs	r3, r3, #9
 80097a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	1e5a      	subs	r2, r3, #1
 80097b4:	61fa      	str	r2, [r7, #28]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d102      	bne.n	80097c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097be:	e052      	b.n	8009866 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0ef      	beq.n	80097b0 <SDMMC_GetCmdResp6+0x24>
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1ea      	bne.n	80097b0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097de:	f003 0304 	and.w	r3, r3, #4
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d004      	beq.n	80097f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2204      	movs	r2, #4
 80097ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097ec:	2304      	movs	r3, #4
 80097ee:	e03a      	b.n	8009866 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2201      	movs	r2, #1
 8009800:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009802:	2301      	movs	r3, #1
 8009804:	e02f      	b.n	8009866 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff fb7c 	bl	8008f04 <SDMMC_GetCommandResponse>
 800980c:	4603      	mov	r3, r0
 800980e:	461a      	mov	r2, r3
 8009810:	7afb      	ldrb	r3, [r7, #11]
 8009812:	4293      	cmp	r3, r2
 8009814:	d001      	beq.n	800981a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009816:	2301      	movs	r3, #1
 8009818:	e025      	b.n	8009866 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4a16      	ldr	r2, [pc, #88]	; (8009878 <SDMMC_GetCmdResp6+0xec>)
 800981e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009820:	2100      	movs	r1, #0
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f7ff fb7b 	bl	8008f1e <SDMMC_GetResponse>
 8009828:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d106      	bne.n	8009842 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	0c1b      	lsrs	r3, r3, #16
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800983e:	2300      	movs	r3, #0
 8009840:	e011      	b.n	8009866 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800984c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009850:	e009      	b.n	8009866 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800985c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009860:	e001      	b.n	8009866 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009866:	4618      	mov	r0, r3
 8009868:	3720      	adds	r7, #32
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	24000000 	.word	0x24000000
 8009874:	10624dd3 	.word	0x10624dd3
 8009878:	002000c5 	.word	0x002000c5

0800987c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009884:	4b22      	ldr	r3, [pc, #136]	; (8009910 <SDMMC_GetCmdResp7+0x94>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a22      	ldr	r2, [pc, #136]	; (8009914 <SDMMC_GetCmdResp7+0x98>)
 800988a:	fba2 2303 	umull	r2, r3, r2, r3
 800988e:	0a5b      	lsrs	r3, r3, #9
 8009890:	f241 3288 	movw	r2, #5000	; 0x1388
 8009894:	fb02 f303 	mul.w	r3, r2, r3
 8009898:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	1e5a      	subs	r2, r3, #1
 800989e:	60fa      	str	r2, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098a8:	e02c      	b.n	8009904 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0ef      	beq.n	800989a <SDMMC_GetCmdResp7+0x1e>
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1ea      	bne.n	800989a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d004      	beq.n	80098da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2204      	movs	r2, #4
 80098d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098d6:	2304      	movs	r3, #4
 80098d8:	e014      	b.n	8009904 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d004      	beq.n	80098f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e009      	b.n	8009904 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2240      	movs	r2, #64	; 0x40
 8009900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009902:	2300      	movs	r3, #0

}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	24000000 	.word	0x24000000
 8009914:	10624dd3 	.word	0x10624dd3

08009918 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009920:	4b11      	ldr	r3, [pc, #68]	; (8009968 <SDMMC_GetCmdError+0x50>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a11      	ldr	r2, [pc, #68]	; (800996c <SDMMC_GetCmdError+0x54>)
 8009926:	fba2 2303 	umull	r2, r3, r2, r3
 800992a:	0a5b      	lsrs	r3, r3, #9
 800992c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009930:	fb02 f303 	mul.w	r3, r2, r3
 8009934:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	1e5a      	subs	r2, r3, #1
 800993a:	60fa      	str	r2, [r7, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009944:	e009      	b.n	800995a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0f1      	beq.n	8009936 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a06      	ldr	r2, [pc, #24]	; (8009970 <SDMMC_GetCmdError+0x58>)
 8009956:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	24000000 	.word	0x24000000
 800996c:	10624dd3 	.word	0x10624dd3
 8009970:	002000c5 	.word	0x002000c5

08009974 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009978:	4904      	ldr	r1, [pc, #16]	; (800998c <MX_FATFS_Init+0x18>)
 800997a:	4805      	ldr	r0, [pc, #20]	; (8009990 <MX_FATFS_Init+0x1c>)
 800997c:	f004 fcdc 	bl	800e338 <FATFS_LinkDriver>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	4b03      	ldr	r3, [pc, #12]	; (8009994 <MX_FATFS_Init+0x20>)
 8009986:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009988:	bf00      	nop
 800998a:	bd80      	pop	{r7, pc}
 800998c:	2400176c 	.word	0x2400176c
 8009990:	0800f64c 	.word	0x0800f64c
 8009994:	24001768 	.word	0x24001768

08009998 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009998:	b480      	push	{r7}
 800999a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800999c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800999e:	4618      	mov	r0, r3
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80099b2:	f000 f86b 	bl	8009a8c <BSP_SD_IsDetected>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d001      	beq.n	80099c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80099bc:	2302      	movs	r3, #2
 80099be:	e005      	b.n	80099cc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80099c0:	4804      	ldr	r0, [pc, #16]	; (80099d4 <BSP_SD_Init+0x2c>)
 80099c2:	f7fc f8eb 	bl	8005b9c <HAL_SD_Init>
 80099c6:	4603      	mov	r3, r0
 80099c8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80099ca:	79fb      	ldrb	r3, [r7, #7]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	24000094 	.word	0x24000094

080099d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af02      	add	r7, sp, #8
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	68f9      	ldr	r1, [r7, #12]
 80099f4:	4806      	ldr	r0, [pc, #24]	; (8009a10 <BSP_SD_ReadBlocks+0x38>)
 80099f6:	f7fc f9e9 	bl	8005dcc <HAL_SD_ReadBlocks>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	24000094 	.word	0x24000094

08009a14 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	68f9      	ldr	r1, [r7, #12]
 8009a30:	4806      	ldr	r0, [pc, #24]	; (8009a4c <BSP_SD_WriteBlocks+0x38>)
 8009a32:	f7fc fb55 	bl	80060e0 <HAL_SD_WriteBlocks>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	24000094 	.word	0x24000094

08009a50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009a54:	4805      	ldr	r0, [pc, #20]	; (8009a6c <BSP_SD_GetCardState+0x1c>)
 8009a56:	f7fd f867 	bl	8006b28 <HAL_SD_GetCardState>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	bf14      	ite	ne
 8009a60:	2301      	movne	r3, #1
 8009a62:	2300      	moveq	r3, #0
 8009a64:	b2db      	uxtb	r3, r3
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	24000094 	.word	0x24000094

08009a70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	4803      	ldr	r0, [pc, #12]	; (8009a88 <BSP_SD_GetCardInfo+0x18>)
 8009a7c:	f7fc ff18 	bl	80068b0 <HAL_SD_GetCardInfo>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	24000094 	.word	0x24000094

08009a8c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009a92:	2301      	movs	r3, #1
 8009a94:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009a96:	f000 f80b 	bl	8009ab0 <BSP_PlatformIsDetected>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	b2db      	uxtb	r3, r3
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009abe:	4810      	ldr	r0, [pc, #64]	; (8009b00 <BSP_PlatformIsDetected+0x50>)
 8009ac0:	f7f8 fec4 	bl	800284c <HAL_GPIO_ReadPin>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009aca:	2300      	movs	r3, #0
 8009acc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */

    //Stupid that the code is duplicated here but the code generator keps overwriting my fix.
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8009ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ad2:	480b      	ldr	r0, [pc, #44]	; (8009b00 <BSP_PlatformIsDetected+0x50>)
 8009ad4:	f7f8 feba 	bl	800284c <HAL_GPIO_ReadPin>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d001      	beq.n	8009ae2 <BSP_PlatformIsDetected+0x32>
    {
        status = SD_NOT_PRESENT;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	71fb      	strb	r3, [r7, #7]
    }
    return (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET) ? SD_PRESENT : SD_NOT_PRESENT;
 8009ae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ae6:	4806      	ldr	r0, [pc, #24]	; (8009b00 <BSP_PlatformIsDetected+0x50>)
 8009ae8:	f7f8 feb0 	bl	800284c <HAL_GPIO_ReadPin>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	bf0c      	ite	eq
 8009af2:	2301      	moveq	r3, #1
 8009af4:	2300      	movne	r3, #0
 8009af6:	b2db      	uxtb	r3, r3

    /* USER CODE END 1 */
    return status;
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	58020800 	.word	0x58020800

08009b04 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009b0e:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <SD_CheckStatus+0x38>)
 8009b10:	2201      	movs	r2, #1
 8009b12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009b14:	f7ff ff9c 	bl	8009a50 <BSP_SD_GetCardState>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d107      	bne.n	8009b2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009b1e:	4b07      	ldr	r3, [pc, #28]	; (8009b3c <SD_CheckStatus+0x38>)
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	f023 0301 	bic.w	r3, r3, #1
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <SD_CheckStatus+0x38>)
 8009b2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009b2e:	4b03      	ldr	r3, [pc, #12]	; (8009b3c <SD_CheckStatus+0x38>)
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	b2db      	uxtb	r3, r3
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	2400000d 	.word	0x2400000d

08009b40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <SD_initialize+0x38>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009b50:	f7ff ff2a 	bl	80099a8 <BSP_SD_Init>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d107      	bne.n	8009b6a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff ffd1 	bl	8009b04 <SD_CheckStatus>
 8009b62:	4603      	mov	r3, r0
 8009b64:	461a      	mov	r2, r3
 8009b66:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <SD_initialize+0x38>)
 8009b68:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009b6a:	4b03      	ldr	r3, [pc, #12]	; (8009b78 <SD_initialize+0x38>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	b2db      	uxtb	r3, r3
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	2400000d 	.word	0x2400000d

08009b7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff ffbb 	bl	8009b04 <SD_CheckStatus>
 8009b8e:	4603      	mov	r3, r0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	68b8      	ldr	r0, [r7, #8]
 8009bb6:	f7ff ff0f 	bl	80099d8 <BSP_SD_ReadBlocks>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d107      	bne.n	8009bd0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009bc0:	bf00      	nop
 8009bc2:	f7ff ff45 	bl	8009a50 <BSP_SD_GetCardState>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1fa      	bne.n	8009bc2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b086      	sub	sp, #24
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	603b      	str	r3, [r7, #0]
 8009be6:	4603      	mov	r3, r0
 8009be8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	68b8      	ldr	r0, [r7, #8]
 8009bf8:	f7ff ff0c 	bl	8009a14 <BSP_SD_WriteBlocks>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d107      	bne.n	8009c12 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009c02:	bf00      	nop
 8009c04:	f7ff ff24 	bl	8009a50 <BSP_SD_GetCardState>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1fa      	bne.n	8009c04 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08c      	sub	sp, #48	; 0x30
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	603a      	str	r2, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009c32:	4b25      	ldr	r3, [pc, #148]	; (8009cc8 <SD_ioctl+0xac>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <SD_ioctl+0x28>
 8009c40:	2303      	movs	r3, #3
 8009c42:	e03c      	b.n	8009cbe <SD_ioctl+0xa2>

  switch (cmd)
 8009c44:	79bb      	ldrb	r3, [r7, #6]
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d834      	bhi.n	8009cb4 <SD_ioctl+0x98>
 8009c4a:	a201      	add	r2, pc, #4	; (adr r2, 8009c50 <SD_ioctl+0x34>)
 8009c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c50:	08009c61 	.word	0x08009c61
 8009c54:	08009c69 	.word	0x08009c69
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c9b 	.word	0x08009c9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c66:	e028      	b.n	8009cba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c68:	f107 0308 	add.w	r3, r7, #8
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff feff 	bl	8009a70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009c72:	6a3a      	ldr	r2, [r7, #32]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c7e:	e01c      	b.n	8009cba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c80:	f107 0308 	add.w	r3, r7, #8
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff fef3 	bl	8009a70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c98:	e00f      	b.n	8009cba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7ff fee6 	bl	8009a70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	0a5a      	lsrs	r2, r3, #9
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009cb2:	e002      	b.n	8009cba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3730      	adds	r7, #48	; 0x30
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	2400000d 	.word	0x2400000d

08009ccc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	4a08      	ldr	r2, [pc, #32]	; (8009cfc <disk_status+0x30>)
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	79fa      	ldrb	r2, [r7, #7]
 8009ce4:	4905      	ldr	r1, [pc, #20]	; (8009cfc <disk_status+0x30>)
 8009ce6:	440a      	add	r2, r1
 8009ce8:	7a12      	ldrb	r2, [r2, #8]
 8009cea:	4610      	mov	r0, r2
 8009cec:	4798      	blx	r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	24001748 	.word	0x24001748

08009d00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	4603      	mov	r3, r0
 8009d08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	4a0d      	ldr	r2, [pc, #52]	; (8009d48 <disk_initialize+0x48>)
 8009d12:	5cd3      	ldrb	r3, [r2, r3]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d111      	bne.n	8009d3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	4a0b      	ldr	r2, [pc, #44]	; (8009d48 <disk_initialize+0x48>)
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <disk_initialize+0x48>)
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	79fa      	ldrb	r2, [r7, #7]
 8009d2e:	4906      	ldr	r1, [pc, #24]	; (8009d48 <disk_initialize+0x48>)
 8009d30:	440a      	add	r2, r1
 8009d32:	7a12      	ldrb	r2, [r2, #8]
 8009d34:	4610      	mov	r0, r2
 8009d36:	4798      	blx	r3
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	24001748 	.word	0x24001748

08009d4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	607a      	str	r2, [r7, #4]
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	4a0a      	ldr	r2, [pc, #40]	; (8009d88 <disk_read+0x3c>)
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	689c      	ldr	r4, [r3, #8]
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	4a07      	ldr	r2, [pc, #28]	; (8009d88 <disk_read+0x3c>)
 8009d6c:	4413      	add	r3, r2
 8009d6e:	7a18      	ldrb	r0, [r3, #8]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	68b9      	ldr	r1, [r7, #8]
 8009d76:	47a0      	blx	r4
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	371c      	adds	r7, #28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd90      	pop	{r4, r7, pc}
 8009d86:	bf00      	nop
 8009d88:	24001748 	.word	0x24001748

08009d8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
 8009d96:	603b      	str	r3, [r7, #0]
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	4a0a      	ldr	r2, [pc, #40]	; (8009dc8 <disk_write+0x3c>)
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	68dc      	ldr	r4, [r3, #12]
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	4a07      	ldr	r2, [pc, #28]	; (8009dc8 <disk_write+0x3c>)
 8009dac:	4413      	add	r3, r2
 8009dae:	7a18      	ldrb	r0, [r3, #8]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	47a0      	blx	r4
 8009db8:	4603      	mov	r3, r0
 8009dba:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	371c      	adds	r7, #28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd90      	pop	{r4, r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	24001748 	.word	0x24001748

08009dcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	603a      	str	r2, [r7, #0]
 8009dd6:	71fb      	strb	r3, [r7, #7]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ddc:	79fb      	ldrb	r3, [r7, #7]
 8009dde:	4a09      	ldr	r2, [pc, #36]	; (8009e04 <disk_ioctl+0x38>)
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	79fa      	ldrb	r2, [r7, #7]
 8009dea:	4906      	ldr	r1, [pc, #24]	; (8009e04 <disk_ioctl+0x38>)
 8009dec:	440a      	add	r2, r1
 8009dee:	7a10      	ldrb	r0, [r2, #8]
 8009df0:	79b9      	ldrb	r1, [r7, #6]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4798      	blx	r3
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]
  return res;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	24001748 	.word	0x24001748

08009e08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3301      	adds	r3, #1
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e18:	89fb      	ldrh	r3, [r7, #14]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	b21a      	sxth	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	b21b      	sxth	r3, r3
 8009e24:	4313      	orrs	r3, r2
 8009e26:	b21b      	sxth	r3, r3
 8009e28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e2a:	89fb      	ldrh	r3, [r7, #14]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3303      	adds	r3, #3
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	021b      	lsls	r3, r3, #8
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	3202      	adds	r2, #2
 8009e50:	7812      	ldrb	r2, [r2, #0]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	3201      	adds	r2, #1
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	021b      	lsls	r3, r3, #8
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	7812      	ldrb	r2, [r2, #0]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e70:	68fb      	ldr	r3, [r7, #12]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009e7e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009e82:	b08d      	sub	sp, #52	; 0x34
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	3307      	adds	r3, #7
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 8009e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e9c:	f04f 0000 	mov.w	r0, #0
 8009ea0:	f04f 0100 	mov.w	r1, #0
 8009ea4:	0219      	lsls	r1, r3, #8
 8009ea6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009eaa:	0210      	lsls	r0, r2, #8
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	3306      	adds	r3, #6
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	ea40 0402 	orr.w	r4, r0, r2
 8009ebc:	ea41 0503 	orr.w	r5, r1, r3
 8009ec0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 8009ec4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ec8:	f04f 0000 	mov.w	r0, #0
 8009ecc:	f04f 0100 	mov.w	r1, #0
 8009ed0:	0219      	lsls	r1, r3, #8
 8009ed2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009ed6:	0210      	lsls	r0, r2, #8
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	3305      	adds	r3, #5
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	f04f 0300 	mov.w	r3, #0
 8009ee4:	ea40 0802 	orr.w	r8, r0, r2
 8009ee8:	ea41 0903 	orr.w	r9, r1, r3
 8009eec:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 8009ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ef4:	f04f 0000 	mov.w	r0, #0
 8009ef8:	f04f 0100 	mov.w	r1, #0
 8009efc:	0219      	lsls	r1, r3, #8
 8009efe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009f02:	0210      	lsls	r0, r2, #8
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	3304      	adds	r3, #4
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	f04f 0300 	mov.w	r3, #0
 8009f10:	ea40 0402 	orr.w	r4, r0, r2
 8009f14:	61bc      	str	r4, [r7, #24]
 8009f16:	430b      	orrs	r3, r1
 8009f18:	61fb      	str	r3, [r7, #28]
 8009f1a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009f1e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 8009f22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009f26:	f04f 0200 	mov.w	r2, #0
 8009f2a:	f04f 0300 	mov.w	r3, #0
 8009f2e:	020b      	lsls	r3, r1, #8
 8009f30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f34:	0202      	lsls	r2, r0, #8
 8009f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f38:	3103      	adds	r1, #3
 8009f3a:	7809      	ldrb	r1, [r1, #0]
 8009f3c:	b2c8      	uxtb	r0, r1
 8009f3e:	f04f 0100 	mov.w	r1, #0
 8009f42:	ea42 0400 	orr.w	r4, r2, r0
 8009f46:	613c      	str	r4, [r7, #16]
 8009f48:	430b      	orrs	r3, r1
 8009f4a:	617b      	str	r3, [r7, #20]
 8009f4c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009f50:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 8009f54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009f58:	f04f 0200 	mov.w	r2, #0
 8009f5c:	f04f 0300 	mov.w	r3, #0
 8009f60:	020b      	lsls	r3, r1, #8
 8009f62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f66:	0202      	lsls	r2, r0, #8
 8009f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f6a:	3102      	adds	r1, #2
 8009f6c:	7809      	ldrb	r1, [r1, #0]
 8009f6e:	b2c8      	uxtb	r0, r1
 8009f70:	f04f 0100 	mov.w	r1, #0
 8009f74:	ea42 0400 	orr.w	r4, r2, r0
 8009f78:	60bc      	str	r4, [r7, #8]
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009f82:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 8009f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009f8a:	f04f 0200 	mov.w	r2, #0
 8009f8e:	f04f 0300 	mov.w	r3, #0
 8009f92:	020b      	lsls	r3, r1, #8
 8009f94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f98:	0202      	lsls	r2, r0, #8
 8009f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f9c:	3101      	adds	r1, #1
 8009f9e:	7809      	ldrb	r1, [r1, #0]
 8009fa0:	b2c8      	uxtb	r0, r1
 8009fa2:	f04f 0100 	mov.w	r1, #0
 8009fa6:	ea42 0400 	orr.w	r4, r2, r0
 8009faa:	603c      	str	r4, [r7, #0]
 8009fac:	430b      	orrs	r3, r1
 8009fae:	607b      	str	r3, [r7, #4]
 8009fb0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009fb4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 8009fb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009fbc:	f04f 0200 	mov.w	r2, #0
 8009fc0:	f04f 0300 	mov.w	r3, #0
 8009fc4:	020b      	lsls	r3, r1, #8
 8009fc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fca:	0202      	lsls	r2, r0, #8
 8009fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fce:	7809      	ldrb	r1, [r1, #0]
 8009fd0:	b2c8      	uxtb	r0, r1
 8009fd2:	f04f 0100 	mov.w	r1, #0
 8009fd6:	ea42 0a00 	orr.w	sl, r2, r0
 8009fda:	ea43 0b01 	orr.w	fp, r3, r1
 8009fde:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 8009fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	4619      	mov	r1, r3
 8009fea:	3734      	adds	r7, #52	; 0x34
 8009fec:	46bd      	mov	sp, r7
 8009fee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009ff2:	4770      	bx	lr

08009ff4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	607a      	str	r2, [r7, #4]
 800a006:	887a      	ldrh	r2, [r7, #2]
 800a008:	b2d2      	uxtb	r2, r2
 800a00a:	701a      	strb	r2, [r3, #0]
 800a00c:	887b      	ldrh	r3, [r7, #2]
 800a00e:	0a1b      	lsrs	r3, r3, #8
 800a010:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	887a      	ldrh	r2, [r7, #2]
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	701a      	strb	r2, [r3, #0]
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	b2d2      	uxtb	r2, r2
 800a03e:	701a      	strb	r2, [r3, #0]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	0a1b      	lsrs	r3, r3, #8
 800a044:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	701a      	strb	r2, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	0a1b      	lsrs	r3, r3, #8
 800a056:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	607a      	str	r2, [r7, #4]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	0a1b      	lsrs	r3, r3, #8
 800a068:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	b2d2      	uxtb	r2, r2
 800a074:	701a      	strb	r2, [r3, #0]
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a082:	b480      	push	{r7}
 800a084:	b085      	sub	sp, #20
 800a086:	af00      	add	r7, sp, #0
 800a088:	60f8      	str	r0, [r7, #12]
 800a08a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	60fa      	str	r2, [r7, #12]
 800a094:	783a      	ldrb	r2, [r7, #0]
 800a096:	701a      	strb	r2, [r3, #0]
 800a098:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a09c:	f04f 0200 	mov.w	r2, #0
 800a0a0:	f04f 0300 	mov.w	r3, #0
 800a0a4:	0a02      	lsrs	r2, r0, #8
 800a0a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a0aa:	0a0b      	lsrs	r3, r1, #8
 800a0ac:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	60fa      	str	r2, [r7, #12]
 800a0b6:	783a      	ldrb	r2, [r7, #0]
 800a0b8:	701a      	strb	r2, [r3, #0]
 800a0ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	f04f 0300 	mov.w	r3, #0
 800a0c6:	0a02      	lsrs	r2, r0, #8
 800a0c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a0cc:	0a0b      	lsrs	r3, r1, #8
 800a0ce:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	60fa      	str	r2, [r7, #12]
 800a0d8:	783a      	ldrb	r2, [r7, #0]
 800a0da:	701a      	strb	r2, [r3, #0]
 800a0dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0e0:	f04f 0200 	mov.w	r2, #0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	0a02      	lsrs	r2, r0, #8
 800a0ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a0ee:	0a0b      	lsrs	r3, r1, #8
 800a0f0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	60fa      	str	r2, [r7, #12]
 800a0fa:	783a      	ldrb	r2, [r7, #0]
 800a0fc:	701a      	strb	r2, [r3, #0]
 800a0fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a102:	f04f 0200 	mov.w	r2, #0
 800a106:	f04f 0300 	mov.w	r3, #0
 800a10a:	0a02      	lsrs	r2, r0, #8
 800a10c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a110:	0a0b      	lsrs	r3, r1, #8
 800a112:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	60fa      	str	r2, [r7, #12]
 800a11c:	783a      	ldrb	r2, [r7, #0]
 800a11e:	701a      	strb	r2, [r3, #0]
 800a120:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a124:	f04f 0200 	mov.w	r2, #0
 800a128:	f04f 0300 	mov.w	r3, #0
 800a12c:	0a02      	lsrs	r2, r0, #8
 800a12e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a132:	0a0b      	lsrs	r3, r1, #8
 800a134:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	60fa      	str	r2, [r7, #12]
 800a13e:	783a      	ldrb	r2, [r7, #0]
 800a140:	701a      	strb	r2, [r3, #0]
 800a142:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a146:	f04f 0200 	mov.w	r2, #0
 800a14a:	f04f 0300 	mov.w	r3, #0
 800a14e:	0a02      	lsrs	r2, r0, #8
 800a150:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a154:	0a0b      	lsrs	r3, r1, #8
 800a156:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	60fa      	str	r2, [r7, #12]
 800a160:	783a      	ldrb	r2, [r7, #0]
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	0a02      	lsrs	r2, r0, #8
 800a172:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a176:	0a0b      	lsrs	r3, r1, #8
 800a178:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	60fa      	str	r2, [r7, #12]
 800a182:	783a      	ldrb	r2, [r7, #0]
 800a184:	701a      	strb	r2, [r3, #0]
}
 800a186:	bf00      	nop
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a192:	b480      	push	{r7}
 800a194:	b087      	sub	sp, #28
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00d      	beq.n	800a1c8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	1c53      	adds	r3, r2, #1
 800a1b0:	613b      	str	r3, [r7, #16]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	1c59      	adds	r1, r3, #1
 800a1b6:	6179      	str	r1, [r7, #20]
 800a1b8:	7812      	ldrb	r2, [r2, #0]
 800a1ba:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	607b      	str	r3, [r7, #4]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1f1      	bne.n	800a1ac <mem_cpy+0x1a>
	}
}
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	617a      	str	r2, [r7, #20]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	b2d2      	uxtb	r2, r2
 800a1ee:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	607b      	str	r3, [r7, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f3      	bne.n	800a1e4 <mem_set+0x10>
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	371c      	adds	r7, #28
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a20a:	b480      	push	{r7}
 800a20c:	b089      	sub	sp, #36	; 0x24
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	60b9      	str	r1, [r7, #8]
 800a214:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	61fb      	str	r3, [r7, #28]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	61fa      	str	r2, [r7, #28]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	4619      	mov	r1, r3
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	61ba      	str	r2, [r7, #24]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	1acb      	subs	r3, r1, r3
 800a236:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	607b      	str	r3, [r7, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <mem_cmp+0x40>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0eb      	beq.n	800a222 <mem_cmp+0x18>

	return r;
 800a24a:	697b      	ldr	r3, [r7, #20]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3724      	adds	r7, #36	; 0x24
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a262:	e002      	b.n	800a26a <chk_chr+0x12>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3301      	adds	r3, #1
 800a268:	607b      	str	r3, [r7, #4]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d005      	beq.n	800a27e <chk_chr+0x26>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d1f2      	bne.n	800a264 <chk_chr+0xc>
	return *str;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	781b      	ldrb	r3, [r3, #0]
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
	...

0800a290 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a29a:	2300      	movs	r3, #0
 800a29c:	60bb      	str	r3, [r7, #8]
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	e029      	b.n	800a2f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a2a4:	4a27      	ldr	r2, [pc, #156]	; (800a344 <chk_lock+0xb4>)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	4413      	add	r3, r2
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d01d      	beq.n	800a2ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a2b2:	4a24      	ldr	r2, [pc, #144]	; (800a344 <chk_lock+0xb4>)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	4413      	add	r3, r2
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d116      	bne.n	800a2f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a2c4:	4a1f      	ldr	r2, [pc, #124]	; (800a344 <chk_lock+0xb4>)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	011b      	lsls	r3, r3, #4
 800a2ca:	4413      	add	r3, r2
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d10c      	bne.n	800a2f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a2d8:	4a1a      	ldr	r2, [pc, #104]	; (800a344 <chk_lock+0xb4>)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	4413      	add	r3, r2
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d102      	bne.n	800a2f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a2ec:	e007      	b.n	800a2fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2bfe      	cmp	r3, #254	; 0xfe
 800a2fc:	d9d2      	bls.n	800a2a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2bff      	cmp	r3, #255	; 0xff
 800a302:	d109      	bne.n	800a318 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <chk_lock+0x80>
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d101      	bne.n	800a314 <chk_lock+0x84>
 800a310:	2300      	movs	r3, #0
 800a312:	e010      	b.n	800a336 <chk_lock+0xa6>
 800a314:	2312      	movs	r3, #18
 800a316:	e00e      	b.n	800a336 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d108      	bne.n	800a330 <chk_lock+0xa0>
 800a31e:	4a09      	ldr	r2, [pc, #36]	; (800a344 <chk_lock+0xb4>)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	4413      	add	r3, r2
 800a326:	330c      	adds	r3, #12
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a32e:	d101      	bne.n	800a334 <chk_lock+0xa4>
 800a330:	2310      	movs	r3, #16
 800a332:	e000      	b.n	800a336 <chk_lock+0xa6>
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3714      	adds	r7, #20
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	240002f8 	.word	0x240002f8

0800a348 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a34e:	2300      	movs	r3, #0
 800a350:	607b      	str	r3, [r7, #4]
 800a352:	e002      	b.n	800a35a <enq_lock+0x12>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3301      	adds	r3, #1
 800a358:	607b      	str	r3, [r7, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2bfe      	cmp	r3, #254	; 0xfe
 800a35e:	d806      	bhi.n	800a36e <enq_lock+0x26>
 800a360:	4a09      	ldr	r2, [pc, #36]	; (800a388 <enq_lock+0x40>)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	011b      	lsls	r3, r3, #4
 800a366:	4413      	add	r3, r2
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1f2      	bne.n	800a354 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2bff      	cmp	r3, #255	; 0xff
 800a372:	bf14      	ite	ne
 800a374:	2301      	movne	r3, #1
 800a376:	2300      	moveq	r3, #0
 800a378:	b2db      	uxtb	r3, r3
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	240002f8 	.word	0x240002f8

0800a38c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	e01f      	b.n	800a3dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a39c:	4a41      	ldr	r2, [pc, #260]	; (800a4a4 <inc_lock+0x118>)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	011b      	lsls	r3, r3, #4
 800a3a2:	4413      	add	r3, r2
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d113      	bne.n	800a3d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a3ae:	4a3d      	ldr	r2, [pc, #244]	; (800a4a4 <inc_lock+0x118>)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	011b      	lsls	r3, r3, #4
 800a3b4:	4413      	add	r3, r2
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d109      	bne.n	800a3d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a3c2:	4a38      	ldr	r2, [pc, #224]	; (800a4a4 <inc_lock+0x118>)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	4413      	add	r3, r2
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d006      	beq.n	800a3e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2bfe      	cmp	r3, #254	; 0xfe
 800a3e0:	d9dc      	bls.n	800a39c <inc_lock+0x10>
 800a3e2:	e000      	b.n	800a3e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a3e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2bff      	cmp	r3, #255	; 0xff
 800a3ea:	d132      	bne.n	800a452 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	e002      	b.n	800a3f8 <inc_lock+0x6c>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2bfe      	cmp	r3, #254	; 0xfe
 800a3fc:	d806      	bhi.n	800a40c <inc_lock+0x80>
 800a3fe:	4a29      	ldr	r2, [pc, #164]	; (800a4a4 <inc_lock+0x118>)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	4413      	add	r3, r2
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1f2      	bne.n	800a3f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2bff      	cmp	r3, #255	; 0xff
 800a410:	d101      	bne.n	800a416 <inc_lock+0x8a>
 800a412:	2300      	movs	r3, #0
 800a414:	e040      	b.n	800a498 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4922      	ldr	r1, [pc, #136]	; (800a4a4 <inc_lock+0x118>)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	440b      	add	r3, r1
 800a422:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	491e      	ldr	r1, [pc, #120]	; (800a4a4 <inc_lock+0x118>)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	011b      	lsls	r3, r3, #4
 800a42e:	440b      	add	r3, r1
 800a430:	3304      	adds	r3, #4
 800a432:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a438:	491a      	ldr	r1, [pc, #104]	; (800a4a4 <inc_lock+0x118>)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	011b      	lsls	r3, r3, #4
 800a43e:	440b      	add	r3, r1
 800a440:	3308      	adds	r3, #8
 800a442:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a444:	4a17      	ldr	r2, [pc, #92]	; (800a4a4 <inc_lock+0x118>)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	011b      	lsls	r3, r3, #4
 800a44a:	4413      	add	r3, r2
 800a44c:	330c      	adds	r3, #12
 800a44e:	2200      	movs	r2, #0
 800a450:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d009      	beq.n	800a46c <inc_lock+0xe0>
 800a458:	4a12      	ldr	r2, [pc, #72]	; (800a4a4 <inc_lock+0x118>)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	4413      	add	r3, r2
 800a460:	330c      	adds	r3, #12
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <inc_lock+0xe0>
 800a468:	2300      	movs	r3, #0
 800a46a:	e015      	b.n	800a498 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d108      	bne.n	800a484 <inc_lock+0xf8>
 800a472:	4a0c      	ldr	r2, [pc, #48]	; (800a4a4 <inc_lock+0x118>)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	011b      	lsls	r3, r3, #4
 800a478:	4413      	add	r3, r2
 800a47a:	330c      	adds	r3, #12
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	3301      	adds	r3, #1
 800a480:	b29a      	uxth	r2, r3
 800a482:	e001      	b.n	800a488 <inc_lock+0xfc>
 800a484:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a488:	4906      	ldr	r1, [pc, #24]	; (800a4a4 <inc_lock+0x118>)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	011b      	lsls	r3, r3, #4
 800a48e:	440b      	add	r3, r1
 800a490:	330c      	adds	r3, #12
 800a492:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3301      	adds	r3, #1
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	240002f8 	.word	0x240002f8

0800a4a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	607b      	str	r3, [r7, #4]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2bfe      	cmp	r3, #254	; 0xfe
 800a4ba:	d825      	bhi.n	800a508 <dec_lock+0x60>
		n = Files[i].ctr;
 800a4bc:	4a17      	ldr	r2, [pc, #92]	; (800a51c <dec_lock+0x74>)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	011b      	lsls	r3, r3, #4
 800a4c2:	4413      	add	r3, r2
 800a4c4:	330c      	adds	r3, #12
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a4ca:	89fb      	ldrh	r3, [r7, #14]
 800a4cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d0:	d101      	bne.n	800a4d6 <dec_lock+0x2e>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a4d6:	89fb      	ldrh	r3, [r7, #14]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <dec_lock+0x3a>
 800a4dc:	89fb      	ldrh	r3, [r7, #14]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a4e2:	4a0e      	ldr	r2, [pc, #56]	; (800a51c <dec_lock+0x74>)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	011b      	lsls	r3, r3, #4
 800a4e8:	4413      	add	r3, r2
 800a4ea:	330c      	adds	r3, #12
 800a4ec:	89fa      	ldrh	r2, [r7, #14]
 800a4ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a4f0:	89fb      	ldrh	r3, [r7, #14]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <dec_lock+0x5a>
 800a4f6:	4a09      	ldr	r2, [pc, #36]	; (800a51c <dec_lock+0x74>)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	011b      	lsls	r3, r3, #4
 800a4fc:	4413      	add	r3, r2
 800a4fe:	2200      	movs	r2, #0
 800a500:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	737b      	strb	r3, [r7, #13]
 800a506:	e001      	b.n	800a50c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a508:	2302      	movs	r3, #2
 800a50a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a50c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	240002f8 	.word	0x240002f8

0800a520 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a528:	2300      	movs	r3, #0
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	e010      	b.n	800a550 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a52e:	4a0d      	ldr	r2, [pc, #52]	; (800a564 <clear_lock+0x44>)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	011b      	lsls	r3, r3, #4
 800a534:	4413      	add	r3, r2
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d105      	bne.n	800a54a <clear_lock+0x2a>
 800a53e:	4a09      	ldr	r2, [pc, #36]	; (800a564 <clear_lock+0x44>)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	4413      	add	r3, r2
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2bfe      	cmp	r3, #254	; 0xfe
 800a554:	d9eb      	bls.n	800a52e <clear_lock+0xe>
	}
}
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	240002f8 	.word	0x240002f8

0800a568 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	78db      	ldrb	r3, [r3, #3]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d034      	beq.n	800a5e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a580:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	7858      	ldrb	r0, [r3, #1]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a58c:	2301      	movs	r3, #1
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	f7ff fbfc 	bl	8009d8c <disk_write>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	73fb      	strb	r3, [r7, #15]
 800a59e:	e022      	b.n	800a5e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	1ad2      	subs	r2, r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d217      	bcs.n	800a5e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	789b      	ldrb	r3, [r3, #2]
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	e010      	b.n	800a5e0 <sync_window+0x78>
					wsect += fs->fsize;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	7858      	ldrb	r0, [r3, #1]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	f7ff fbd9 	bl	8009d8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	613b      	str	r3, [r7, #16]
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d8eb      	bhi.n	800a5be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	429a      	cmp	r2, r3
 800a606:	d01b      	beq.n	800a640 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ffad 	bl	800a568 <sync_window>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d113      	bne.n	800a640 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	7858      	ldrb	r0, [r3, #1]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a622:	2301      	movs	r3, #1
 800a624:	683a      	ldr	r2, [r7, #0]
 800a626:	f7ff fb91 	bl	8009d4c <disk_read>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d004      	beq.n	800a63a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a634:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a636:	2301      	movs	r3, #1
 800a638:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
	return res;
 800a640:	7bfb      	ldrb	r3, [r7, #15]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff ff87 	bl	800a568 <sync_window>
 800a65a:	4603      	mov	r3, r0
 800a65c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d158      	bne.n	800a716 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d148      	bne.n	800a6fe <sync_fs+0xb2>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	791b      	ldrb	r3, [r3, #4]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d144      	bne.n	800a6fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3348      	adds	r3, #72	; 0x48
 800a678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a67c:	2100      	movs	r1, #0
 800a67e:	4618      	mov	r0, r3
 800a680:	f7ff fda8 	bl	800a1d4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	3348      	adds	r3, #72	; 0x48
 800a688:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a68c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff fcaf 	bl	8009ff4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3348      	adds	r3, #72	; 0x48
 800a69a:	4921      	ldr	r1, [pc, #132]	; (800a720 <sync_fs+0xd4>)
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff fcc4 	bl	800a02a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3348      	adds	r3, #72	; 0x48
 800a6a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6aa:	491e      	ldr	r1, [pc, #120]	; (800a724 <sync_fs+0xd8>)
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff fcbc 	bl	800a02a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3348      	adds	r3, #72	; 0x48
 800a6b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7ff fcb2 	bl	800a02a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3348      	adds	r3, #72	; 0x48
 800a6ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	f7ff fca8 	bl	800a02a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	645a      	str	r2, [r3, #68]	; 0x44
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	7858      	ldrb	r0, [r3, #1]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	f7ff fb4a 	bl	8009d8c <disk_write>
			fs->fsi_flag = 0;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	785b      	ldrb	r3, [r3, #1]
 800a702:	2200      	movs	r2, #0
 800a704:	2100      	movs	r1, #0
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fb60 	bl	8009dcc <disk_ioctl>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <sync_fs+0xca>
 800a712:	2301      	movs	r3, #1
 800a714:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	41615252 	.word	0x41615252
 800a724:	61417272 	.word	0x61417272

0800a728 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	3b02      	subs	r3, #2
 800a736:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73c:	3b02      	subs	r3, #2
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	429a      	cmp	r2, r3
 800a742:	d301      	bcc.n	800a748 <clust2sect+0x20>
 800a744:	2300      	movs	r3, #0
 800a746:	e008      	b.n	800a75a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	895b      	ldrh	r3, [r3, #10]
 800a74c:	461a      	mov	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	fb03 f202 	mul.w	r2, r3, r2
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a758:	4413      	add	r3, r2
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
	...

0800a768 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	6809      	ldr	r1, [r1, #0]
 800a776:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	2901      	cmp	r1, #1
 800a77c:	d904      	bls.n	800a788 <get_fat+0x20>
 800a77e:	69b9      	ldr	r1, [r7, #24]
 800a780:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a782:	6838      	ldr	r0, [r7, #0]
 800a784:	4288      	cmp	r0, r1
 800a786:	d302      	bcc.n	800a78e <get_fat+0x26>
		val = 1;	/* Internal error */
 800a788:	2301      	movs	r3, #1
 800a78a:	61fb      	str	r3, [r7, #28]
 800a78c:	e102      	b.n	800a994 <get_fat+0x22c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a78e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a792:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800a794:	69b9      	ldr	r1, [r7, #24]
 800a796:	7809      	ldrb	r1, [r1, #0]
 800a798:	3901      	subs	r1, #1
 800a79a:	2903      	cmp	r1, #3
 800a79c:	f200 80ee 	bhi.w	800a97c <get_fat+0x214>
 800a7a0:	a001      	add	r0, pc, #4	; (adr r0, 800a7a8 <get_fat+0x40>)
 800a7a2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a7a6:	bf00      	nop
 800a7a8:	0800a7b9 	.word	0x0800a7b9
 800a7ac:	0800a841 	.word	0x0800a841
 800a7b0:	0800a877 	.word	0x0800a877
 800a7b4:	0800a8af 	.word	0x0800a8af
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	085b      	lsrs	r3, r3, #1
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	0a5b      	lsrs	r3, r3, #9
 800a7ce:	4413      	add	r3, r2
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	69b8      	ldr	r0, [r7, #24]
 800a7d4:	f7ff ff0c 	bl	800a5f0 <move_window>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f040 80d1 	bne.w	800a982 <get_fat+0x21a>
			wc = fs->win[bc++ % SS(fs)];
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	1c5a      	adds	r2, r3, #1
 800a7e4:	60fa      	str	r2, [r7, #12]
 800a7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a7f2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	0a5b      	lsrs	r3, r3, #9
 800a7fc:	4413      	add	r3, r2
 800a7fe:	4619      	mov	r1, r3
 800a800:	69b8      	ldr	r0, [r7, #24]
 800a802:	f7ff fef5 	bl	800a5f0 <move_window>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f040 80bc 	bne.w	800a986 <get_fat+0x21e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	4413      	add	r3, r2
 800a818:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a81c:	021b      	lsls	r3, r3, #8
 800a81e:	461a      	mov	r2, r3
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	4313      	orrs	r3, r2
 800a824:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <get_fat+0xce>
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	091b      	lsrs	r3, r3, #4
 800a834:	e002      	b.n	800a83c <get_fat+0xd4>
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a83c:	61fb      	str	r3, [r7, #28]
			break;
 800a83e:	e0a9      	b.n	800a994 <get_fat+0x22c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	0a1b      	lsrs	r3, r3, #8
 800a848:	4413      	add	r3, r2
 800a84a:	4619      	mov	r1, r3
 800a84c:	69b8      	ldr	r0, [r7, #24]
 800a84e:	f7ff fecf 	bl	800a5f0 <move_window>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	f040 8098 	bne.w	800a98a <get_fat+0x222>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a868:	4413      	add	r3, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff facc 	bl	8009e08 <ld_word>
 800a870:	4603      	mov	r3, r0
 800a872:	61fb      	str	r3, [r7, #28]
			break;
 800a874:	e08e      	b.n	800a994 <get_fat+0x22c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	09db      	lsrs	r3, r3, #7
 800a87e:	4413      	add	r3, r2
 800a880:	4619      	mov	r1, r3
 800a882:	69b8      	ldr	r0, [r7, #24]
 800a884:	f7ff feb4 	bl	800a5f0 <move_window>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d17f      	bne.n	800a98e <get_fat+0x226>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a89c:	4413      	add	r3, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff faca 	bl	8009e38 <ld_dword>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a8aa:	61fb      	str	r3, [r7, #28]
			break;
 800a8ac:	e072      	b.n	800a994 <get_fat+0x22c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800a8b4:	4301      	orrs	r1, r0
 800a8b6:	d061      	beq.n	800a97c <get_fat+0x214>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	6889      	ldr	r1, [r1, #8]
 800a8bc:	6838      	ldr	r0, [r7, #0]
 800a8be:	1a41      	subs	r1, r0, r1
 800a8c0:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800a8c8:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
 800a8cc:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 800a8d0:	f04f 0000 	mov.w	r0, #0
 800a8d4:	f04f 0100 	mov.w	r1, #0
 800a8d8:	0a50      	lsrs	r0, r2, #9
 800a8da:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800a8de:	0a59      	lsrs	r1, r3, #9
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	895b      	ldrh	r3, [r3, #10]
 800a8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ea:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	79db      	ldrb	r3, [r3, #7]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d10e      	bne.n	800a912 <get_fat+0x1aa>
					if (cofs <= clen) {
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d80a      	bhi.n	800a912 <get_fat+0x1aa>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	429a      	cmp	r2, r3
 800a902:	d002      	beq.n	800a90a <get_fat+0x1a2>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	3301      	adds	r3, #1
 800a908:	e001      	b.n	800a90e <get_fat+0x1a6>
 800a90a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a90e:	61fb      	str	r3, [r7, #28]
						break;
 800a910:	e040      	b.n	800a994 <get_fat+0x22c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	79db      	ldrb	r3, [r3, #7]
 800a916:	2b03      	cmp	r3, #3
 800a918:	d108      	bne.n	800a92c <get_fat+0x1c4>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	429a      	cmp	r2, r3
 800a922:	d203      	bcs.n	800a92c <get_fat+0x1c4>
					val = clst + 1; 	/* Generate the value */
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	3301      	adds	r3, #1
 800a928:	61fb      	str	r3, [r7, #28]
					break;
 800a92a:	e033      	b.n	800a994 <get_fat+0x22c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	79db      	ldrb	r3, [r3, #7]
 800a930:	2b02      	cmp	r3, #2
 800a932:	d023      	beq.n	800a97c <get_fat+0x214>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	69db      	ldr	r3, [r3, #28]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d003      	beq.n	800a944 <get_fat+0x1dc>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a93c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a940:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a942:	e027      	b.n	800a994 <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	09db      	lsrs	r3, r3, #7
 800a94c:	4413      	add	r3, r2
 800a94e:	4619      	mov	r1, r3
 800a950:	69b8      	ldr	r0, [r7, #24]
 800a952:	f7ff fe4d 	bl	800a5f0 <move_window>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d11a      	bne.n	800a992 <get_fat+0x22a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a96a:	4413      	add	r3, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff fa63 	bl	8009e38 <ld_dword>
 800a972:	4603      	mov	r3, r0
 800a974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a978:	61fb      	str	r3, [r7, #28]
					break;
 800a97a:	e00b      	b.n	800a994 <get_fat+0x22c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a97c:	2301      	movs	r3, #1
 800a97e:	61fb      	str	r3, [r7, #28]
 800a980:	e008      	b.n	800a994 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a982:	bf00      	nop
 800a984:	e006      	b.n	800a994 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a986:	bf00      	nop
 800a988:	e004      	b.n	800a994 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a98a:	bf00      	nop
 800a98c:	e002      	b.n	800a994 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a98e:	bf00      	nop
 800a990:	e000      	b.n	800a994 <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a992:	bf00      	nop
		}
	}

	return val;
 800a994:	69fb      	ldr	r3, [r7, #28]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3720      	adds	r7, #32
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop

0800a9a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	b089      	sub	sp, #36	; 0x24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	f240 80d6 	bls.w	800ab64 <put_fat+0x1c4>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	f080 80d0 	bcs.w	800ab64 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	f300 80d4 	bgt.w	800ab76 <put_fat+0x1d6>
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	f280 8093 	bge.w	800aafa <put_fat+0x15a>
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d002      	beq.n	800a9de <put_fat+0x3e>
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d06e      	beq.n	800aaba <put_fat+0x11a>
 800a9dc:	e0cb      	b.n	800ab76 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	085b      	lsrs	r3, r3, #1
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	0a5b      	lsrs	r3, r3, #9
 800a9f4:	4413      	add	r3, r2
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff fdf9 	bl	800a5f0 <move_window>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa02:	7ffb      	ldrb	r3, [r7, #31]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 80af 	bne.w	800ab68 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	1c59      	adds	r1, r3, #1
 800aa14:	61b9      	str	r1, [r7, #24]
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	4413      	add	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00d      	beq.n	800aa44 <put_fat+0xa4>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	b25b      	sxtb	r3, r3
 800aa2e:	f003 030f 	and.w	r3, r3, #15
 800aa32:	b25a      	sxtb	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	b25b      	sxtb	r3, r3
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	b25b      	sxtb	r3, r3
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	e001      	b.n	800aa48 <put_fat+0xa8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	0a5b      	lsrs	r3, r3, #9
 800aa5a:	4413      	add	r3, r2
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fdc6 	bl	800a5f0 <move_window>
 800aa64:	4603      	mov	r3, r0
 800aa66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa68:	7ffb      	ldrb	r3, [r7, #31]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d17e      	bne.n	800ab6c <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7a:	4413      	add	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <put_fat+0xf0>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	091b      	lsrs	r3, r3, #4
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	e00e      	b.n	800aaae <put_fat+0x10e>
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f023 030f 	bic.w	r3, r3, #15
 800aa9a:	b25a      	sxtb	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	0a1b      	lsrs	r3, r3, #8
 800aaa0:	b25b      	sxtb	r3, r3
 800aaa2:	f003 030f 	and.w	r3, r3, #15
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	70da      	strb	r2, [r3, #3]
			break;
 800aab8:	e05d      	b.n	800ab76 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	0a1b      	lsrs	r3, r3, #8
 800aac2:	4413      	add	r3, r2
 800aac4:	4619      	mov	r1, r3
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff fd92 	bl	800a5f0 <move_window>
 800aacc:	4603      	mov	r3, r0
 800aace:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aad0:	7ffb      	ldrb	r3, [r7, #31]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d14c      	bne.n	800ab70 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aae4:	4413      	add	r3, r2
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	b292      	uxth	r2, r2
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff fa81 	bl	8009ff4 <st_word>
			fs->wflag = 1;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	70da      	strb	r2, [r3, #3]
			break;
 800aaf8:	e03d      	b.n	800ab76 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	09db      	lsrs	r3, r3, #7
 800ab02:	4413      	add	r3, r2
 800ab04:	4619      	mov	r1, r3
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fd72 	bl	800a5f0 <move_window>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab10:	7ffb      	ldrb	r3, [r7, #31]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d12e      	bne.n	800ab74 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2b04      	cmp	r3, #4
 800ab1c:	d012      	beq.n	800ab44 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab32:	4413      	add	r3, r2
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff f97f 	bl	8009e38 <ld_dword>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab40:	4323      	orrs	r3, r4
 800ab42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab52:	4413      	add	r3, r2
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff fa67 	bl	800a02a <st_dword>
			fs->wflag = 1;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	70da      	strb	r2, [r3, #3]
			break;
 800ab62:	e008      	b.n	800ab76 <put_fat+0x1d6>
		}
	}
 800ab64:	bf00      	nop
 800ab66:	e006      	b.n	800ab76 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ab68:	bf00      	nop
 800ab6a:	e004      	b.n	800ab76 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ab6c:	bf00      	nop
 800ab6e:	e002      	b.n	800ab76 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ab70:	bf00      	nop
 800ab72:	e000      	b.n	800ab76 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ab74:	bf00      	nop
	return res;
 800ab76:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3724      	adds	r7, #36	; 0x24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd90      	pop	{r4, r7, pc}

0800ab80 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b08a      	sub	sp, #40	; 0x28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	3b02      	subs	r3, #2
 800ab90:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab96:	3b02      	subs	r3, #2
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d301      	bcc.n	800aba2 <find_bitmap+0x22>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	61fb      	str	r3, [r7, #28]
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	61bb      	str	r3, [r7, #24]
 800abaa:	2300      	movs	r3, #0
 800abac:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	0b1b      	lsrs	r3, r3, #12
 800abb6:	4413      	add	r3, r2
 800abb8:	4619      	mov	r1, r3
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff fd18 	bl	800a5f0 <move_window>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d002      	beq.n	800abcc <find_bitmap+0x4c>
 800abc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abca:	e051      	b.n	800ac70 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	08db      	lsrs	r3, r3, #3
 800abd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd4:	623b      	str	r3, [r7, #32]
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	f003 0307 	and.w	r3, r3, #7
 800abdc:	2201      	movs	r2, #1
 800abde:	fa02 f303 	lsl.w	r3, r2, r3
 800abe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	4413      	add	r3, r2
 800abec:	3348      	adds	r3, #72	; 0x48
 800abee:	781a      	ldrb	r2, [r3, #0]
 800abf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abf4:	4013      	ands	r3, r2
 800abf6:	74fb      	strb	r3, [r7, #19]
 800abf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	3301      	adds	r3, #1
 800ac06:	61fb      	str	r3, [r7, #28]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	3b02      	subs	r3, #2
 800ac0e:	69fa      	ldr	r2, [r7, #28]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d307      	bcc.n	800ac24 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800ac14:	2300      	movs	r3, #0
 800ac16:	61fb      	str	r3, [r7, #28]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac22:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800ac24:	7cfb      	ldrb	r3, [r7, #19]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d109      	bne.n	800ac3e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d106      	bne.n	800ac46 <find_bitmap+0xc6>
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	3302      	adds	r3, #2
 800ac3c:	e018      	b.n	800ac70 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	61bb      	str	r3, [r7, #24]
 800ac42:	2300      	movs	r3, #0
 800ac44:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800ac46:	69fa      	ldr	r2, [r7, #28]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d101      	bne.n	800ac52 <find_bitmap+0xd2>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e00e      	b.n	800ac70 <find_bitmap+0xf0>
			} while (bm);
 800ac52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1c5      	bne.n	800abe6 <find_bitmap+0x66>
			bm = 1;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	3301      	adds	r3, #1
 800ac64:	623b      	str	r3, [r7, #32]
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac6c:	d3bb      	bcc.n	800abe6 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ac6e:	e79e      	b.n	800abae <find_bitmap+0x2e>
	}
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3728      	adds	r7, #40	; 0x28
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	3b02      	subs	r3, #2
 800ac8a:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	0b1b      	lsrs	r3, r3, #12
 800ac94:	4413      	add	r3, r2
 800ac96:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	08db      	lsrs	r3, r3, #3
 800ac9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f003 0307 	and.w	r3, r3, #7
 800aca8:	2201      	movs	r2, #1
 800acaa:	fa02 f303 	lsl.w	r3, r2, r3
 800acae:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	617a      	str	r2, [r7, #20]
 800acb6:	4619      	mov	r1, r3
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7ff fc99 	bl	800a5f0 <move_window>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <change_bitmap+0x50>
 800acc4:	2301      	movs	r3, #1
 800acc6:	e03d      	b.n	800ad44 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	4413      	add	r3, r2
 800acce:	3348      	adds	r3, #72	; 0x48
 800acd0:	781a      	ldrb	r2, [r3, #0]
 800acd2:	7ffb      	ldrb	r3, [r7, #31]
 800acd4:	4013      	ands	r3, r2
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b00      	cmp	r3, #0
 800acda:	bf14      	ite	ne
 800acdc:	2301      	movne	r3, #1
 800acde:	2300      	moveq	r3, #0
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	461a      	mov	r2, r3
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d101      	bne.n	800acee <change_bitmap+0x76>
 800acea:	2302      	movs	r3, #2
 800acec:	e02a      	b.n	800ad44 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	4413      	add	r3, r2
 800acf4:	3348      	adds	r3, #72	; 0x48
 800acf6:	781a      	ldrb	r2, [r3, #0]
 800acf8:	7ffb      	ldrb	r3, [r7, #31]
 800acfa:	4053      	eors	r3, r2
 800acfc:	b2d9      	uxtb	r1, r3
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	4413      	add	r3, r2
 800ad04:	3348      	adds	r3, #72	; 0x48
 800ad06:	460a      	mov	r2, r1
 800ad08:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	607b      	str	r3, [r7, #4]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <change_bitmap+0xa8>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e011      	b.n	800ad44 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800ad20:	7ffb      	ldrb	r3, [r7, #31]
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	77fb      	strb	r3, [r7, #31]
 800ad26:	7ffb      	ldrb	r3, [r7, #31]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1cd      	bne.n	800acc8 <change_bitmap+0x50>
			bm = 1;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	3301      	adds	r3, #1
 800ad34:	61bb      	str	r3, [r7, #24]
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad3c:	d3c4      	bcc.n	800acc8 <change_bitmap+0x50>
		i = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ad42:	e7b5      	b.n	800acb0 <change_bitmap+0x38>
	}
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3720      	adds	r7, #32
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	79db      	ldrb	r3, [r3, #7]
 800ad58:	2b03      	cmp	r3, #3
 800ad5a:	d121      	bne.n	800ada0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	617b      	str	r3, [r7, #20]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	613b      	str	r3, [r7, #16]
 800ad68:	e014      	b.n	800ad94 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6818      	ldr	r0, [r3, #0]
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	3301      	adds	r3, #1
 800ad72:	461a      	mov	r2, r3
 800ad74:	6979      	ldr	r1, [r7, #20]
 800ad76:	f7ff fe13 	bl	800a9a0 <put_fat>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <fill_first_frag+0x3c>
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	e00c      	b.n	800ada2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	617b      	str	r3, [r7, #20]
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	613b      	str	r3, [r7, #16]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e7      	bne.n	800ad6a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b086      	sub	sp, #24
 800adae:	af00      	add	r7, sp, #0
 800adb0:	60f8      	str	r0, [r7, #12]
 800adb2:	60b9      	str	r1, [r7, #8]
 800adb4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800adb6:	e020      	b.n	800adfa <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6818      	ldr	r0, [r3, #0]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	69db      	ldr	r3, [r3, #28]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	1c59      	adds	r1, r3, #1
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d905      	bls.n	800adda <fill_last_frag+0x30>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	68ba      	ldr	r2, [r7, #8]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	3302      	adds	r3, #2
 800add8:	e000      	b.n	800addc <fill_last_frag+0x32>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	461a      	mov	r2, r3
 800adde:	f7ff fddf 	bl	800a9a0 <put_fat>
 800ade2:	4603      	mov	r3, r0
 800ade4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <fill_last_frag+0x46>
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	e009      	b.n	800ae04 <fill_last_frag+0x5a>
		obj->n_frag--;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	1e5a      	subs	r2, r3, #1
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1da      	bne.n	800adb8 <fill_last_frag+0xe>
	}
	return FR_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3718      	adds	r7, #24
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	; 0x28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	627b      	str	r3, [r7, #36]	; 0x24
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d904      	bls.n	800ae3a <remove_chain+0x2e>
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d301      	bcc.n	800ae3e <remove_chain+0x32>
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e096      	b.n	800af6c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d014      	beq.n	800ae6e <remove_chain+0x62>
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d103      	bne.n	800ae54 <remove_chain+0x48>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	79db      	ldrb	r3, [r3, #7]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d00c      	beq.n	800ae6e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ae54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	69b8      	ldr	r0, [r7, #24]
 800ae5c:	f7ff fda0 	bl	800a9a0 <put_fat>
 800ae60:	4603      	mov	r3, r0
 800ae62:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ae64:	7ffb      	ldrb	r3, [r7, #31]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <remove_chain+0x62>
 800ae6a:	7ffb      	ldrb	r3, [r7, #31]
 800ae6c:	e07e      	b.n	800af6c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ae6e:	68b9      	ldr	r1, [r7, #8]
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f7ff fc79 	bl	800a768 <get_fat>
 800ae76:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d055      	beq.n	800af2a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d101      	bne.n	800ae88 <remove_chain+0x7c>
 800ae84:	2302      	movs	r3, #2
 800ae86:	e071      	b.n	800af6c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae8e:	d101      	bne.n	800ae94 <remove_chain+0x88>
 800ae90:	2301      	movs	r3, #1
 800ae92:	e06b      	b.n	800af6c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b04      	cmp	r3, #4
 800ae9a:	d00b      	beq.n	800aeb4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	68b9      	ldr	r1, [r7, #8]
 800aea0:	69b8      	ldr	r0, [r7, #24]
 800aea2:	f7ff fd7d 	bl	800a9a0 <put_fat>
 800aea6:	4603      	mov	r3, r0
 800aea8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aeaa:	7ffb      	ldrb	r3, [r7, #31]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <remove_chain+0xa8>
 800aeb0:	7ffb      	ldrb	r3, [r7, #31]
 800aeb2:	e05b      	b.n	800af6c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	699a      	ldr	r2, [r3, #24]
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	3b02      	subs	r3, #2
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d20b      	bcs.n	800aeda <remove_chain+0xce>
			fs->free_clst++;
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	791b      	ldrb	r3, [r3, #4]
 800aed0:	f043 0301 	orr.w	r3, r3, #1
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	3301      	adds	r3, #1
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d102      	bne.n	800aeea <remove_chain+0xde>
			ecl = nxt;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	623b      	str	r3, [r7, #32]
 800aee8:	e017      	b.n	800af1a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d10f      	bne.n	800af12 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800aef2:	6a3a      	ldr	r2, [r7, #32]
 800aef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	1c5a      	adds	r2, r3, #1
 800aefa:	2300      	movs	r3, #0
 800aefc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aefe:	69b8      	ldr	r0, [r7, #24]
 800af00:	f7ff feba 	bl	800ac78 <change_bitmap>
 800af04:	4603      	mov	r3, r0
 800af06:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800af08:	7ffb      	ldrb	r3, [r7, #31]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <remove_chain+0x106>
 800af0e:	7ffb      	ldrb	r3, [r7, #31]
 800af10:	e02c      	b.n	800af6c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	623b      	str	r3, [r7, #32]
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	429a      	cmp	r2, r3
 800af26:	d3a2      	bcc.n	800ae6e <remove_chain+0x62>
 800af28:	e000      	b.n	800af2c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800af2a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	2b04      	cmp	r3, #4
 800af32:	d11a      	bne.n	800af6a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d103      	bne.n	800af42 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	71da      	strb	r2, [r3, #7]
 800af40:	e013      	b.n	800af6a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	79db      	ldrb	r3, [r3, #7]
 800af46:	2b03      	cmp	r3, #3
 800af48:	d10f      	bne.n	800af6a <remove_chain+0x15e>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d30a      	bcc.n	800af6a <remove_chain+0x15e>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	689a      	ldr	r2, [r3, #8]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	4413      	add	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d802      	bhi.n	800af6a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2202      	movs	r2, #2
 800af68:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3728      	adds	r7, #40	; 0x28
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10d      	bne.n	800afa6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d004      	beq.n	800afa0 <create_chain+0x2c>
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d31b      	bcc.n	800afd8 <create_chain+0x64>
 800afa0:	2301      	movs	r3, #1
 800afa2:	61bb      	str	r3, [r7, #24]
 800afa4:	e018      	b.n	800afd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff fbdd 	bl	800a768 <get_fat>
 800afae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d801      	bhi.n	800afba <create_chain+0x46>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e0d9      	b.n	800b16e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afc0:	d101      	bne.n	800afc6 <create_chain+0x52>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	e0d3      	b.n	800b16e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d201      	bcs.n	800afd4 <create_chain+0x60>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	e0cc      	b.n	800b16e <create_chain+0x1fa>
		scl = clst;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d164      	bne.n	800b0aa <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800afe0:	2201      	movs	r2, #1
 800afe2:	69b9      	ldr	r1, [r7, #24]
 800afe4:	6938      	ldr	r0, [r7, #16]
 800afe6:	f7ff fdcb 	bl	800ab80 <find_bitmap>
 800afea:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <create_chain+0x86>
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aff8:	d101      	bne.n	800affe <create_chain+0x8a>
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	e0b7      	b.n	800b16e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800affe:	2301      	movs	r3, #1
 800b000:	2201      	movs	r2, #1
 800b002:	69f9      	ldr	r1, [r7, #28]
 800b004:	6938      	ldr	r0, [r7, #16]
 800b006:	f7ff fe37 	bl	800ac78 <change_bitmap>
 800b00a:	4603      	mov	r3, r0
 800b00c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d101      	bne.n	800b018 <create_chain+0xa4>
 800b014:	2301      	movs	r3, #1
 800b016:	e0aa      	b.n	800b16e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d102      	bne.n	800b024 <create_chain+0xb0>
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b022:	e0a4      	b.n	800b16e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d103      	bne.n	800b032 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2202      	movs	r2, #2
 800b02e:	71da      	strb	r2, [r3, #7]
 800b030:	e011      	b.n	800b056 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	79db      	ldrb	r3, [r3, #7]
 800b036:	2b02      	cmp	r3, #2
 800b038:	d10d      	bne.n	800b056 <create_chain+0xe2>
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	3301      	adds	r3, #1
 800b03e:	69fa      	ldr	r2, [r7, #28]
 800b040:	429a      	cmp	r2, r3
 800b042:	d008      	beq.n	800b056 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	1ad2      	subs	r2, r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2203      	movs	r2, #3
 800b054:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	79db      	ldrb	r3, [r3, #7]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d064      	beq.n	800b128 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	3301      	adds	r3, #1
 800b062:	69fa      	ldr	r2, [r7, #28]
 800b064:	429a      	cmp	r2, r3
 800b066:	d10b      	bne.n	800b080 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <create_chain+0x104>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	3301      	adds	r3, #1
 800b076:	e000      	b.n	800b07a <create_chain+0x106>
 800b078:	2302      	movs	r3, #2
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	61d3      	str	r3, [r2, #28]
 800b07e:	e053      	b.n	800b128 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d102      	bne.n	800b08e <create_chain+0x11a>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b08e:	69fa      	ldr	r2, [r7, #28]
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff fe89 	bl	800adaa <fill_last_frag>
 800b098:	4603      	mov	r3, r0
 800b09a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d142      	bne.n	800b128 <create_chain+0x1b4>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	61da      	str	r2, [r3, #28]
 800b0a8:	e03e      	b.n	800b128 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	69fa      	ldr	r2, [r7, #28]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d307      	bcc.n	800b0ce <create_chain+0x15a>
				ncl = 2;
 800b0be:	2302      	movs	r3, #2
 800b0c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b0c2:	69fa      	ldr	r2, [r7, #28]
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d901      	bls.n	800b0ce <create_chain+0x15a>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e04f      	b.n	800b16e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b0ce:	69f9      	ldr	r1, [r7, #28]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff fb49 	bl	800a768 <get_fat>
 800b0d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00e      	beq.n	800b0fc <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d003      	beq.n	800b0ec <create_chain+0x178>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ea:	d101      	bne.n	800b0f0 <create_chain+0x17c>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	e03e      	b.n	800b16e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b0f0:	69fa      	ldr	r2, [r7, #28]
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d1da      	bne.n	800b0ae <create_chain+0x13a>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	e038      	b.n	800b16e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b0fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b0fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b102:	69f9      	ldr	r1, [r7, #28]
 800b104:	6938      	ldr	r0, [r7, #16]
 800b106:	f7ff fc4b 	bl	800a9a0 <put_fat>
 800b10a:	4603      	mov	r3, r0
 800b10c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b10e:	7dfb      	ldrb	r3, [r7, #23]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d109      	bne.n	800b128 <create_chain+0x1b4>
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d006      	beq.n	800b128 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b11a:	69fa      	ldr	r2, [r7, #28]
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6938      	ldr	r0, [r7, #16]
 800b120:	f7ff fc3e 	bl	800a9a0 <put_fat>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d116      	bne.n	800b15c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	69fa      	ldr	r2, [r7, #28]
 800b132:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	699a      	ldr	r2, [r3, #24]
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	3b02      	subs	r3, #2
 800b13e:	429a      	cmp	r2, r3
 800b140:	d804      	bhi.n	800b14c <create_chain+0x1d8>
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	1e5a      	subs	r2, r3, #1
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	791b      	ldrb	r3, [r3, #4]
 800b150:	f043 0301 	orr.w	r3, r3, #1
 800b154:	b2da      	uxtb	r2, r3
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	711a      	strb	r2, [r3, #4]
 800b15a:	e007      	b.n	800b16c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d102      	bne.n	800b168 <create_chain+0x1f4>
 800b162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b166:	e000      	b.n	800b16a <create_chain+0x1f6>
 800b168:	2301      	movs	r3, #1
 800b16a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b16c:	69fb      	ldr	r3, [r7, #28]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b088      	sub	sp, #32
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b18c:	3304      	adds	r3, #4
 800b18e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b190:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b194:	f04f 0000 	mov.w	r0, #0
 800b198:	f04f 0100 	mov.w	r1, #0
 800b19c:	0a50      	lsrs	r0, r2, #9
 800b19e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b1a2:	0a59      	lsrs	r1, r3, #9
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	895b      	ldrh	r3, [r3, #10]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	f04f 0300 	mov.w	r3, #0
 800b1ae:	f7f5 f8ef 	bl	8000390 <__aeabi_uldivmod>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	1d1a      	adds	r2, r3, #4
 800b1be:	61ba      	str	r2, [r7, #24]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <clmt_clust+0x58>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e010      	b.n	800b1f0 <clmt_clust+0x7a>
		if (cl < ncl) break;	/* In this fragment? */
 800b1ce:	69fa      	ldr	r2, [r7, #28]
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d307      	bcc.n	800b1e6 <clmt_clust+0x70>
		cl -= ncl; tbl++;		/* Next fragment */
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	61fb      	str	r3, [r7, #28]
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1e4:	e7e9      	b.n	800b1ba <clmt_clust+0x44>
		if (cl < ncl) break;	/* In this fragment? */
 800b1e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	4413      	add	r3, r2
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3720      	adds	r7, #32
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b04      	cmp	r3, #4
 800b20e:	d102      	bne.n	800b216 <dir_sdi+0x1e>
 800b210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b214:	e001      	b.n	800b21a <dir_sdi+0x22>
 800b216:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d904      	bls.n	800b22a <dir_sdi+0x32>
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	f003 031f 	and.w	r3, r3, #31
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <dir_sdi+0x36>
		return FR_INT_ERR;
 800b22a:	2302      	movs	r3, #2
 800b22c:	e066      	b.n	800b2fc <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d109      	bne.n	800b254 <dir_sdi+0x5c>
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b02      	cmp	r3, #2
 800b246:	d905      	bls.n	800b254 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10c      	bne.n	800b274 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	095b      	lsrs	r3, r3, #5
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	8912      	ldrh	r2, [r2, #8]
 800b262:	4293      	cmp	r3, r2
 800b264:	d301      	bcc.n	800b26a <dir_sdi+0x72>
 800b266:	2302      	movs	r3, #2
 800b268:	e048      	b.n	800b2fc <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	639a      	str	r2, [r3, #56]	; 0x38
 800b272:	e029      	b.n	800b2c8 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	895b      	ldrh	r3, [r3, #10]
 800b278:	025b      	lsls	r3, r3, #9
 800b27a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b27c:	e019      	b.n	800b2b2 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6979      	ldr	r1, [r7, #20]
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fa70 	bl	800a768 <get_fat>
 800b288:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b290:	d101      	bne.n	800b296 <dir_sdi+0x9e>
 800b292:	2301      	movs	r3, #1
 800b294:	e032      	b.n	800b2fc <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d904      	bls.n	800b2a6 <dir_sdi+0xae>
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d301      	bcc.n	800b2aa <dir_sdi+0xb2>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e028      	b.n	800b2fc <dir_sdi+0x104>
			ofs -= csz;
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d2e1      	bcs.n	800b27e <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800b2ba:	6979      	ldr	r1, [r7, #20]
 800b2bc:	6938      	ldr	r0, [r7, #16]
 800b2be:	f7ff fa33 	bl	800a728 <clust2sect>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <dir_sdi+0xe2>
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e010      	b.n	800b2fc <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	0a5b      	lsrs	r3, r3, #9
 800b2e2:	441a      	add	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f4:	441a      	add	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b318:	3320      	adds	r3, #32
 800b31a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <dir_next+0x38>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d102      	bne.n	800b332 <dir_next+0x2e>
 800b32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b330:	e001      	b.n	800b336 <dir_next+0x32>
 800b332:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d801      	bhi.n	800b340 <dir_next+0x3c>
 800b33c:	2304      	movs	r3, #4
 800b33e:	e0b2      	b.n	800b4a6 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b346:	2b00      	cmp	r3, #0
 800b348:	f040 80a0 	bne.w	800b48c <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10b      	bne.n	800b376 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	095b      	lsrs	r3, r3, #5
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	8912      	ldrh	r2, [r2, #8]
 800b366:	4293      	cmp	r3, r2
 800b368:	f0c0 8090 	bcc.w	800b48c <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	639a      	str	r2, [r3, #56]	; 0x38
 800b372:	2304      	movs	r3, #4
 800b374:	e097      	b.n	800b4a6 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	0a5b      	lsrs	r3, r3, #9
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	8952      	ldrh	r2, [r2, #10]
 800b37e:	3a01      	subs	r2, #1
 800b380:	4013      	ands	r3, r2
 800b382:	2b00      	cmp	r3, #0
 800b384:	f040 8082 	bne.w	800b48c <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38e:	4619      	mov	r1, r3
 800b390:	4610      	mov	r0, r2
 800b392:	f7ff f9e9 	bl	800a768 <get_fat>
 800b396:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d801      	bhi.n	800b3a2 <dir_next+0x9e>
 800b39e:	2302      	movs	r3, #2
 800b3a0:	e081      	b.n	800b4a6 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3a8:	d101      	bne.n	800b3ae <dir_next+0xaa>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e07b      	b.n	800b4a6 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d35f      	bcc.n	800b478 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d104      	bne.n	800b3c8 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
 800b3c4:	2304      	movs	r3, #4
 800b3c6:	e06e      	b.n	800b4a6 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f7ff fdcf 	bl	800af74 <create_chain>
 800b3d6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <dir_next+0xde>
 800b3de:	2307      	movs	r3, #7
 800b3e0:	e061      	b.n	800b4a6 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d101      	bne.n	800b3ec <dir_next+0xe8>
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	e05c      	b.n	800b4a6 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3f2:	d101      	bne.n	800b3f8 <dir_next+0xf4>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e056      	b.n	800b4a6 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	79db      	ldrb	r3, [r3, #7]
 800b3fc:	f043 0304 	orr.w	r3, r3, #4
 800b400:	b2da      	uxtb	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7ff f8ae 	bl	800a568 <sync_window>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <dir_next+0x112>
 800b412:	2301      	movs	r3, #1
 800b414:	e047      	b.n	800b4a6 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3348      	adds	r3, #72	; 0x48
 800b41a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe fed7 	bl	800a1d4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b426:	2300      	movs	r3, #0
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	6979      	ldr	r1, [r7, #20]
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7ff f97b 	bl	800a728 <clust2sect>
 800b432:	4602      	mov	r2, r0
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	645a      	str	r2, [r3, #68]	; 0x44
 800b438:	e012      	b.n	800b460 <dir_next+0x15c>
						fs->wflag = 1;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2201      	movs	r2, #1
 800b43e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff f891 	bl	800a568 <sync_window>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <dir_next+0x14c>
 800b44c:	2301      	movs	r3, #1
 800b44e:	e02a      	b.n	800b4a6 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3301      	adds	r3, #1
 800b454:	613b      	str	r3, [r7, #16]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	645a      	str	r2, [r3, #68]	; 0x44
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	895b      	ldrh	r3, [r3, #10]
 800b464:	461a      	mov	r2, r3
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	4293      	cmp	r3, r2
 800b46a:	d3e6      	bcc.n	800b43a <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	1ad2      	subs	r2, r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	645a      	str	r2, [r3, #68]	; 0x44
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b47e:	6979      	ldr	r1, [r7, #20]
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f7ff f951 	bl	800a728 <clust2sect>
 800b486:	4602      	mov	r2, r0
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49e:	441a      	add	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b086      	sub	sp, #24
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b4be:	2100      	movs	r1, #0
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7ff fe99 	bl	800b1f8 <dir_sdi>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d140      	bne.n	800b552 <dir_alloc+0xa4>
		n = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	4619      	mov	r1, r3
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f7ff f888 	bl	800a5f0 <move_window>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d132      	bne.n	800b550 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	2b04      	cmp	r3, #4
 800b4f0:	d108      	bne.n	800b504 <dir_alloc+0x56>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	b25b      	sxtb	r3, r3
 800b4fa:	43db      	mvns	r3, r3
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	09db      	lsrs	r3, r3, #7
 800b500:	b2db      	uxtb	r3, r3
 800b502:	e00f      	b.n	800b524 <dir_alloc+0x76>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2be5      	cmp	r3, #229	; 0xe5
 800b50c:	d004      	beq.n	800b518 <dir_alloc+0x6a>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <dir_alloc+0x6e>
 800b518:	2301      	movs	r3, #1
 800b51a:	e000      	b.n	800b51e <dir_alloc+0x70>
 800b51c:	2300      	movs	r3, #0
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d007      	beq.n	800b538 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	3301      	adds	r3, #1
 800b52c:	613b      	str	r3, [r7, #16]
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	429a      	cmp	r2, r3
 800b534:	d102      	bne.n	800b53c <dir_alloc+0x8e>
 800b536:	e00c      	b.n	800b552 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b538:	2300      	movs	r3, #0
 800b53a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b53c:	2101      	movs	r1, #1
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fee0 	bl	800b304 <dir_next>
 800b544:	4603      	mov	r3, r0
 800b546:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b548:	7dfb      	ldrb	r3, [r7, #23]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0c2      	beq.n	800b4d4 <dir_alloc+0x26>
 800b54e:	e000      	b.n	800b552 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b550:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	2b04      	cmp	r3, #4
 800b556:	d101      	bne.n	800b55c <dir_alloc+0xae>
 800b558:	2307      	movs	r3, #7
 800b55a:	75fb      	strb	r3, [r7, #23]
	return res;
 800b55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	331a      	adds	r3, #26
 800b574:	4618      	mov	r0, r3
 800b576:	f7fe fc47 	bl	8009e08 <ld_word>
 800b57a:	4603      	mov	r3, r0
 800b57c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b03      	cmp	r3, #3
 800b584:	d109      	bne.n	800b59a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	3314      	adds	r3, #20
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fe fc3c 	bl	8009e08 <ld_word>
 800b590:	4603      	mov	r3, r0
 800b592:	041b      	lsls	r3, r3, #16
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b59a:	68fb      	ldr	r3, [r7, #12]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	331a      	adds	r3, #26
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	b292      	uxth	r2, r2
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fd1a 	bl	8009ff4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	d109      	bne.n	800b5dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	f103 0214 	add.w	r2, r3, #20
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	0c1b      	lsrs	r3, r3, #16
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	f7fe fd0c 	bl	8009ff4 <st_word>
	}
}
 800b5dc:	bf00      	nop
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b5e4:	b590      	push	{r4, r7, lr}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	331a      	adds	r3, #26
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fe fc08 	bl	8009e08 <ld_word>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <cmp_lfn+0x1e>
 800b5fe:	2300      	movs	r3, #0
 800b600:	e059      	b.n	800b6b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b60a:	1e5a      	subs	r2, r3, #1
 800b60c:	4613      	mov	r3, r2
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b618:	2301      	movs	r3, #1
 800b61a:	81fb      	strh	r3, [r7, #14]
 800b61c:	2300      	movs	r3, #0
 800b61e:	613b      	str	r3, [r7, #16]
 800b620:	e033      	b.n	800b68a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b622:	4a27      	ldr	r2, [pc, #156]	; (800b6c0 <cmp_lfn+0xdc>)
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	4413      	add	r3, r2
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	461a      	mov	r2, r3
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	4413      	add	r3, r2
 800b630:	4618      	mov	r0, r3
 800b632:	f7fe fbe9 	bl	8009e08 <ld_word>
 800b636:	4603      	mov	r3, r0
 800b638:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b63a:	89fb      	ldrh	r3, [r7, #14]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01a      	beq.n	800b676 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2bfe      	cmp	r3, #254	; 0xfe
 800b644:	d812      	bhi.n	800b66c <cmp_lfn+0x88>
 800b646:	89bb      	ldrh	r3, [r7, #12]
 800b648:	4618      	mov	r0, r3
 800b64a:	f002 fec1 	bl	800e3d0 <ff_wtoupper>
 800b64e:	4603      	mov	r3, r0
 800b650:	461c      	mov	r4, r3
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	617a      	str	r2, [r7, #20]
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	4413      	add	r3, r2
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f002 feb5 	bl	800e3d0 <ff_wtoupper>
 800b666:	4603      	mov	r3, r0
 800b668:	429c      	cmp	r4, r3
 800b66a:	d001      	beq.n	800b670 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b66c:	2300      	movs	r3, #0
 800b66e:	e022      	b.n	800b6b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b670:	89bb      	ldrh	r3, [r7, #12]
 800b672:	81fb      	strh	r3, [r7, #14]
 800b674:	e006      	b.n	800b684 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b676:	89bb      	ldrh	r3, [r7, #12]
 800b678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d001      	beq.n	800b684 <cmp_lfn+0xa0>
 800b680:	2300      	movs	r3, #0
 800b682:	e018      	b.n	800b6b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	3301      	adds	r3, #1
 800b688:	613b      	str	r3, [r7, #16]
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b0c      	cmp	r3, #12
 800b68e:	d9c8      	bls.n	800b622 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00b      	beq.n	800b6b4 <cmp_lfn+0xd0>
 800b69c:	89fb      	ldrh	r3, [r7, #14]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d008      	beq.n	800b6b4 <cmp_lfn+0xd0>
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <cmp_lfn+0xd0>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e000      	b.n	800b6b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b6b4:	2301      	movs	r3, #1
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	371c      	adds	r7, #28
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd90      	pop	{r4, r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	0800f6e0 	.word	0x0800f6e0

0800b6c4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	331a      	adds	r3, #26
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fe fb98 	bl	8009e08 <ld_word>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <pick_lfn+0x1e>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e04d      	b.n	800b77e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ea:	1e5a      	subs	r2, r3, #1
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	4413      	add	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	4413      	add	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	81fb      	strh	r3, [r7, #14]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	613b      	str	r3, [r7, #16]
 800b700:	e028      	b.n	800b754 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b702:	4a21      	ldr	r2, [pc, #132]	; (800b788 <pick_lfn+0xc4>)
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	4413      	add	r3, r2
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	4413      	add	r3, r2
 800b710:	4618      	mov	r0, r3
 800b712:	f7fe fb79 	bl	8009e08 <ld_word>
 800b716:	4603      	mov	r3, r0
 800b718:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b71a:	89fb      	ldrh	r3, [r7, #14]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00f      	beq.n	800b740 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	2bfe      	cmp	r3, #254	; 0xfe
 800b724:	d901      	bls.n	800b72a <pick_lfn+0x66>
 800b726:	2300      	movs	r3, #0
 800b728:	e029      	b.n	800b77e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b72a:	89bb      	ldrh	r3, [r7, #12]
 800b72c:	81fb      	strh	r3, [r7, #14]
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	1c5a      	adds	r2, r3, #1
 800b732:	617a      	str	r2, [r7, #20]
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	4413      	add	r3, r2
 800b73a:	89fa      	ldrh	r2, [r7, #14]
 800b73c:	801a      	strh	r2, [r3, #0]
 800b73e:	e006      	b.n	800b74e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b740:	89bb      	ldrh	r3, [r7, #12]
 800b742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b746:	4293      	cmp	r3, r2
 800b748:	d001      	beq.n	800b74e <pick_lfn+0x8a>
 800b74a:	2300      	movs	r3, #0
 800b74c:	e017      	b.n	800b77e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	3301      	adds	r3, #1
 800b752:	613b      	str	r3, [r7, #16]
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2b0c      	cmp	r3, #12
 800b758:	d9d3      	bls.n	800b702 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00a      	beq.n	800b77c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2bfe      	cmp	r3, #254	; 0xfe
 800b76a:	d901      	bls.n	800b770 <pick_lfn+0xac>
 800b76c:	2300      	movs	r3, #0
 800b76e:	e006      	b.n	800b77e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	4413      	add	r3, r2
 800b778:	2200      	movs	r2, #0
 800b77a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b77c:	2301      	movs	r3, #1
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	0800f6e0 	.word	0x0800f6e0

0800b78c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4611      	mov	r1, r2
 800b798:	461a      	mov	r2, r3
 800b79a:	460b      	mov	r3, r1
 800b79c:	71fb      	strb	r3, [r7, #7]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	330d      	adds	r3, #13
 800b7a6:	79ba      	ldrb	r2, [r7, #6]
 800b7a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	330b      	adds	r3, #11
 800b7ae:	220f      	movs	r2, #15
 800b7b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	330c      	adds	r3, #12
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	331a      	adds	r3, #26
 800b7be:	2100      	movs	r1, #0
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fe fc17 	bl	8009ff4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b7c6:	79fb      	ldrb	r3, [r7, #7]
 800b7c8:	1e5a      	subs	r2, r3, #1
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	82fb      	strh	r3, [r7, #22]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b7de:	8afb      	ldrh	r3, [r7, #22]
 800b7e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d007      	beq.n	800b7f8 <put_lfn+0x6c>
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	61fa      	str	r2, [r7, #28]
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b7f8:	4a17      	ldr	r2, [pc, #92]	; (800b858 <put_lfn+0xcc>)
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	4413      	add	r3, r2
 800b806:	8afa      	ldrh	r2, [r7, #22]
 800b808:	4611      	mov	r1, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fbf2 	bl	8009ff4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b810:	8afb      	ldrh	r3, [r7, #22]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d102      	bne.n	800b81c <put_lfn+0x90>
 800b816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b81a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	3301      	adds	r3, #1
 800b820:	61bb      	str	r3, [r7, #24]
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	2b0c      	cmp	r3, #12
 800b826:	d9da      	bls.n	800b7de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b828:	8afb      	ldrh	r3, [r7, #22]
 800b82a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b82e:	4293      	cmp	r3, r2
 800b830:	d006      	beq.n	800b840 <put_lfn+0xb4>
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4413      	add	r3, r2
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d103      	bne.n	800b848 <put_lfn+0xbc>
 800b840:	79fb      	ldrb	r3, [r7, #7]
 800b842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b846:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	79fa      	ldrb	r2, [r7, #7]
 800b84c:	701a      	strb	r2, [r3, #0]
}
 800b84e:	bf00      	nop
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	0800f6e0 	.word	0x0800f6e0

0800b85c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08c      	sub	sp, #48	; 0x30
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
 800b868:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b86a:	220b      	movs	r2, #11
 800b86c:	68b9      	ldr	r1, [r7, #8]
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f7fe fc8f 	bl	800a192 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	2b05      	cmp	r3, #5
 800b878:	d929      	bls.n	800b8ce <gen_numname+0x72>
		sr = seq;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b87e:	e020      	b.n	800b8c2 <gen_numname+0x66>
			wc = *lfn++;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	1c9a      	adds	r2, r3, #2
 800b884:	607a      	str	r2, [r7, #4]
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b88a:	2300      	movs	r3, #0
 800b88c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b88e:	e015      	b.n	800b8bc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	005a      	lsls	r2, r3, #1
 800b894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	4413      	add	r3, r2
 800b89c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b89e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8a0:	085b      	lsrs	r3, r3, #1
 800b8a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <gen_numname+0x5a>
 800b8ae:	69fa      	ldr	r2, [r7, #28]
 800b8b0:	4b31      	ldr	r3, [pc, #196]	; (800b978 <gen_numname+0x11c>)
 800b8b2:	4053      	eors	r3, r2
 800b8b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	2b0f      	cmp	r3, #15
 800b8c0:	d9e6      	bls.n	800b890 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1da      	bne.n	800b880 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b8ce:	2307      	movs	r3, #7
 800b8d0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	f003 030f 	and.w	r3, r3, #15
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	3330      	adds	r3, #48	; 0x30
 800b8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b8e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8e6:	2b39      	cmp	r3, #57	; 0x39
 800b8e8:	d904      	bls.n	800b8f4 <gen_numname+0x98>
 800b8ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b8ee:	3307      	adds	r3, #7
 800b8f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	1e5a      	subs	r2, r3, #1
 800b8f8:	62ba      	str	r2, [r7, #40]	; 0x28
 800b8fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b8fe:	4413      	add	r3, r2
 800b900:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b904:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	091b      	lsrs	r3, r3, #4
 800b90c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1de      	bne.n	800b8d2 <gen_numname+0x76>
	ns[i] = '~';
 800b914:	f107 0214 	add.w	r2, r7, #20
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	4413      	add	r3, r2
 800b91c:	227e      	movs	r2, #126	; 0x7e
 800b91e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b920:	2300      	movs	r3, #0
 800b922:	627b      	str	r3, [r7, #36]	; 0x24
 800b924:	e002      	b.n	800b92c <gen_numname+0xd0>
 800b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b928:	3301      	adds	r3, #1
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24
 800b92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	429a      	cmp	r2, r3
 800b932:	d205      	bcs.n	800b940 <gen_numname+0xe4>
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	4413      	add	r3, r2
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	d1f2      	bne.n	800b926 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	2b07      	cmp	r3, #7
 800b944:	d808      	bhi.n	800b958 <gen_numname+0xfc>
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	62ba      	str	r2, [r7, #40]	; 0x28
 800b94c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b950:	4413      	add	r3, r2
 800b952:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b956:	e000      	b.n	800b95a <gen_numname+0xfe>
 800b958:	2120      	movs	r1, #32
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	627a      	str	r2, [r7, #36]	; 0x24
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4413      	add	r3, r2
 800b964:	460a      	mov	r2, r1
 800b966:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2b07      	cmp	r3, #7
 800b96c:	d9e8      	bls.n	800b940 <gen_numname+0xe4>
}
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	3730      	adds	r7, #48	; 0x30
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	00011021 	.word	0x00011021

0800b97c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b988:	230b      	movs	r3, #11
 800b98a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	0852      	lsrs	r2, r2, #1
 800b992:	01db      	lsls	r3, r3, #7
 800b994:	4313      	orrs	r3, r2
 800b996:	b2da      	uxtb	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	1c59      	adds	r1, r3, #1
 800b99c:	6079      	str	r1, [r7, #4]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	60bb      	str	r3, [r7, #8]
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1ed      	bne.n	800b98c <sum_sfn+0x10>
	return sum;
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b087      	sub	sp, #28
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	015b      	lsls	r3, r3, #5
 800b9d0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	827b      	strh	r3, [r7, #18]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	617b      	str	r3, [r7, #20]
 800b9da:	e018      	b.n	800ba0e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d103      	bne.n	800b9ea <xdir_sum+0x2c>
			i++;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	e00e      	b.n	800ba08 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b9ea:	8a7b      	ldrh	r3, [r7, #18]
 800b9ec:	03db      	lsls	r3, r3, #15
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	8a7b      	ldrh	r3, [r7, #18]
 800b9f2:	085b      	lsrs	r3, r3, #1
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	4413      	add	r3, r2
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	6879      	ldr	r1, [r7, #4]
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	440b      	add	r3, r1
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	4413      	add	r3, r2
 800ba06:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d3e2      	bcc.n	800b9dc <xdir_sum+0x1e>
		}
	}
	return sum;
 800ba16:	8a7b      	ldrh	r3, [r7, #18]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	371c      	adds	r7, #28
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ba30:	e01f      	b.n	800ba72 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ba32:	89bb      	ldrh	r3, [r7, #12]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f002 fccb 	bl	800e3d0 <ff_wtoupper>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ba3e:	89fb      	ldrh	r3, [r7, #14]
 800ba40:	03db      	lsls	r3, r3, #15
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	89fb      	ldrh	r3, [r7, #14]
 800ba46:	085b      	lsrs	r3, r3, #1
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	4413      	add	r3, r2
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	89bb      	ldrh	r3, [r7, #12]
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	4413      	add	r3, r2
 800ba56:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ba58:	89fb      	ldrh	r3, [r7, #14]
 800ba5a:	03db      	lsls	r3, r3, #15
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	89fb      	ldrh	r3, [r7, #14]
 800ba60:	085b      	lsrs	r3, r3, #1
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	4413      	add	r3, r2
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	89bb      	ldrh	r3, [r7, #12]
 800ba6a:	0a1b      	lsrs	r3, r3, #8
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	4413      	add	r3, r2
 800ba70:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	1c9a      	adds	r2, r3, #2
 800ba76:	607a      	str	r2, [r7, #4]
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	81bb      	strh	r3, [r7, #12]
 800ba7c:	89bb      	ldrh	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1d7      	bne.n	800ba32 <xname_sum+0xe>
	}
	return sum;
 800ba82:	89fb      	ldrh	r3, [r7, #14]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ba8c:	b590      	push	{r4, r7, lr}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f7fe fda2 	bl	800a5f0 <move_window>
 800baac:	4603      	mov	r3, r0
 800baae:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <load_xdir+0x2e>
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
 800bab8:	e09f      	b.n	800bbfa <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	2b85      	cmp	r3, #133	; 0x85
 800bac2:	d001      	beq.n	800bac8 <load_xdir+0x3c>
 800bac4:	2302      	movs	r3, #2
 800bac6:	e098      	b.n	800bbfa <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bacc:	2220      	movs	r2, #32
 800bace:	4619      	mov	r1, r3
 800bad0:	6938      	ldr	r0, [r7, #16]
 800bad2:	f7fe fb5e 	bl	800a192 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	3301      	adds	r3, #1
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	3301      	adds	r3, #1
 800bade:	015b      	lsls	r3, r3, #5
 800bae0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b5f      	cmp	r3, #95	; 0x5f
 800bae6:	d903      	bls.n	800baf0 <load_xdir+0x64>
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800baee:	d901      	bls.n	800baf4 <load_xdir+0x68>
 800baf0:	2302      	movs	r3, #2
 800baf2:	e082      	b.n	800bbfa <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800baf4:	2100      	movs	r1, #0
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff fc04 	bl	800b304 <dir_next>
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <load_xdir+0x7e>
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	e077      	b.n	800bbfa <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb12:	4619      	mov	r1, r3
 800bb14:	4610      	mov	r0, r2
 800bb16:	f7fe fd6b 	bl	800a5f0 <move_window>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <load_xdir+0x9c>
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	e068      	b.n	800bbfa <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	2bc0      	cmp	r3, #192	; 0xc0
 800bb30:	d001      	beq.n	800bb36 <load_xdir+0xaa>
 800bb32:	2302      	movs	r3, #2
 800bb34:	e061      	b.n	800bbfa <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f103 0020 	add.w	r0, r3, #32
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb40:	2220      	movs	r2, #32
 800bb42:	4619      	mov	r1, r3
 800bb44:	f7fe fb25 	bl	800a192 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	3323      	adds	r3, #35	; 0x23
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	332c      	adds	r3, #44	; 0x2c
 800bb50:	4a2c      	ldr	r2, [pc, #176]	; (800bc04 <load_xdir+0x178>)
 800bb52:	fba2 2303 	umull	r2, r3, r2, r3
 800bb56:	08db      	lsrs	r3, r3, #3
 800bb58:	015b      	lsls	r3, r3, #5
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d201      	bcs.n	800bb64 <load_xdir+0xd8>
 800bb60:	2302      	movs	r3, #2
 800bb62:	e04a      	b.n	800bbfa <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800bb64:	2340      	movs	r3, #64	; 0x40
 800bb66:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800bb68:	2100      	movs	r1, #0
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fbca 	bl	800b304 <dir_next>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800bb74:	7bfb      	ldrb	r3, [r7, #15]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <load_xdir+0xf2>
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	e03d      	b.n	800bbfa <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f7fe fd31 	bl	800a5f0 <move_window>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <load_xdir+0x110>
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	e02e      	b.n	800bbfa <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2bc1      	cmp	r3, #193	; 0xc1
 800bba4:	d001      	beq.n	800bbaa <load_xdir+0x11e>
 800bba6:	2302      	movs	r3, #2
 800bba8:	e027      	b.n	800bbfa <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800bbb0:	d208      	bcs.n	800bbc4 <load_xdir+0x138>
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	18d0      	adds	r0, r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbbc:	2220      	movs	r2, #32
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	f7fe fae7 	bl	800a192 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	3320      	adds	r3, #32
 800bbc8:	617b      	str	r3, [r7, #20]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d3ca      	bcc.n	800bb68 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800bbd8:	d80e      	bhi.n	800bbf8 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800bbda:	6938      	ldr	r0, [r7, #16]
 800bbdc:	f7ff feef 	bl	800b9be <xdir_sum>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	461c      	mov	r4, r3
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	3302      	adds	r3, #2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fe f90d 	bl	8009e08 <ld_word>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	429c      	cmp	r4, r3
 800bbf2:	d001      	beq.n	800bbf8 <load_xdir+0x16c>
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e000      	b.n	800bbfa <load_xdir+0x16e>
	}
	return FR_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd90      	pop	{r4, r7, pc}
 800bc02:	bf00      	nop
 800bc04:	88888889 	.word	0x88888889

0800bc08 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800bc08:	b5b0      	push	{r4, r5, r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6808      	ldr	r0, [r1, #0]
 800bc16:	6879      	ldr	r1, [r7, #4]
 800bc18:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6a08      	ldr	r0, [r1, #32]
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800bc26:	b2c8      	uxtb	r0, r1
 800bc28:	6879      	ldr	r1, [r7, #4]
 800bc2a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800bc30:	4608      	mov	r0, r1
 800bc32:	f04f 0100 	mov.w	r1, #0
 800bc36:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800bc3a:	f04f 0500 	mov.w	r5, #0
 800bc3e:	ea00 0204 	and.w	r2, r0, r4
 800bc42:	ea01 0305 	and.w	r3, r1, r5
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff facc 	bl	800b1f8 <dir_sdi>
 800bc60:	4603      	mov	r3, r0
 800bc62:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d104      	bne.n	800bc74 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7ff ff0e 	bl	800ba8c <load_xdir>
 800bc70:	4603      	mov	r3, r0
 800bc72:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bdb0      	pop	{r4, r5, r7, pc}

0800bc7e <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800bc7e:	b590      	push	{r4, r7, lr}
 800bc80:	b087      	sub	sp, #28
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	1c9c      	adds	r4, r3, #2
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f7ff fe93 	bl	800b9be <xdir_sum>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f7fe f9a9 	bl	8009ff4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3301      	adds	r3, #1
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff faa0 	bl	800b1f8 <dir_sdi>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bcbc:	e026      	b.n	800bd0c <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	4610      	mov	r0, r2
 800bcca:	f7fe fc91 	bl	800a5f0 <move_window>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d11d      	bne.n	800bd14 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcdc:	2220      	movs	r2, #32
 800bcde:	68f9      	ldr	r1, [r7, #12]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7fe fa56 	bl	800a192 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2201      	movs	r2, #1
 800bcec:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	613b      	str	r3, [r7, #16]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00e      	beq.n	800bd18 <store_xdir+0x9a>
		dirb += SZDIRE;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3320      	adds	r3, #32
 800bcfe:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800bd00:	2100      	movs	r1, #0
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff fafe 	bl	800b304 <dir_next>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0d5      	beq.n	800bcbe <store_xdir+0x40>
 800bd12:	e002      	b.n	800bd1a <store_xdir+0x9c>
		if (res != FR_OK) break;
 800bd14:	bf00      	nop
 800bd16:	e000      	b.n	800bd1a <store_xdir+0x9c>
		if (--nent == 0) break;
 800bd18:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <store_xdir+0xa8>
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d101      	bne.n	800bd2a <store_xdir+0xac>
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	e000      	b.n	800bd2c <store_xdir+0xae>
 800bd2a:	2302      	movs	r3, #2
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	371c      	adds	r7, #28
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd90      	pop	{r4, r7, pc}

0800bd34 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800bd34:	b590      	push	{r4, r7, lr}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800bd3e:	2240      	movs	r2, #64	; 0x40
 800bd40:	2100      	movs	r1, #0
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7fe fa46 	bl	800a1d4 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2285      	movs	r2, #133	; 0x85
 800bd4c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3320      	adds	r3, #32
 800bd52:	22c0      	movs	r2, #192	; 0xc0
 800bd54:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800bd56:	2300      	movs	r3, #0
 800bd58:	72bb      	strb	r3, [r7, #10]
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	72fb      	strb	r3, [r7, #11]
 800bd5e:	2301      	movs	r3, #1
 800bd60:	813b      	strh	r3, [r7, #8]
 800bd62:	2340      	movs	r3, #64	; 0x40
 800bd64:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	1c5a      	adds	r2, r3, #1
 800bd6a:	60fa      	str	r2, [r7, #12]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	4413      	add	r3, r2
 800bd70:	22c1      	movs	r2, #193	; 0xc1
 800bd72:	701a      	strb	r2, [r3, #0]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	60fa      	str	r2, [r7, #12]
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800bd82:	893b      	ldrh	r3, [r7, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00b      	beq.n	800bda0 <create_xdir+0x6c>
 800bd88:	7abb      	ldrb	r3, [r7, #10]
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	4413      	add	r3, r2
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	813b      	strh	r3, [r7, #8]
 800bd94:	893b      	ldrh	r3, [r7, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d002      	beq.n	800bda0 <create_xdir+0x6c>
 800bd9a:	7abb      	ldrb	r3, [r7, #10]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	4413      	add	r3, r2
 800bda6:	893a      	ldrh	r2, [r7, #8]
 800bda8:	4611      	mov	r1, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe f922 	bl	8009ff4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3302      	adds	r3, #2
 800bdb4:	60fb      	str	r3, [r7, #12]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f003 031f 	and.w	r3, r3, #31
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e0      	bne.n	800bd82 <create_xdir+0x4e>
		nb++;
 800bdc0:	7afb      	ldrb	r3, [r7, #11]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800bdc6:	7abb      	ldrb	r3, [r7, #10]
 800bdc8:	005b      	lsls	r3, r3, #1
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	4413      	add	r3, r2
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1c8      	bne.n	800bd66 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	3323      	adds	r3, #35	; 0x23
 800bdd8:	7aba      	ldrb	r2, [r7, #10]
 800bdda:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3301      	adds	r3, #1
 800bde0:	7afa      	ldrb	r2, [r7, #11]
 800bde2:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800bdea:	6838      	ldr	r0, [r7, #0]
 800bdec:	f7ff fe1a 	bl	800ba24 <xname_sum>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7fe f8fd 	bl	8009ff4 <st_word>
}
 800bdfa:	bf00      	nop
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd90      	pop	{r4, r7, pc}

0800be02 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b086      	sub	sp, #24
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800be0c:	2304      	movs	r3, #4
 800be0e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800be16:	23ff      	movs	r3, #255	; 0xff
 800be18:	757b      	strb	r3, [r7, #21]
 800be1a:	23ff      	movs	r3, #255	; 0xff
 800be1c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800be1e:	e09f      	b.n	800bf60 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be24:	4619      	mov	r1, r3
 800be26:	6938      	ldr	r0, [r7, #16]
 800be28:	f7fe fbe2 	bl	800a5f0 <move_window>
 800be2c:	4603      	mov	r3, r0
 800be2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f040 809a 	bne.w	800bf6c <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800be40:	7dbb      	ldrb	r3, [r7, #22]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d102      	bne.n	800be4c <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800be46:	2304      	movs	r3, #4
 800be48:	75fb      	strb	r3, [r7, #23]
 800be4a:	e096      	b.n	800bf7a <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2b04      	cmp	r3, #4
 800be52:	d118      	bne.n	800be86 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800be54:	7dbb      	ldrb	r3, [r7, #22]
 800be56:	2b85      	cmp	r3, #133	; 0x85
 800be58:	d179      	bne.n	800bf4e <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff fe12 	bl	800ba8c <load_xdir>
 800be68:	4603      	mov	r3, r0
 800be6a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800be6c:	7dfb      	ldrb	r3, [r7, #23]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d17e      	bne.n	800bf70 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	3304      	adds	r3, #4
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	719a      	strb	r2, [r3, #6]
					}
					break;
 800be84:	e074      	b.n	800bf70 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8a:	330b      	adds	r3, #11
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be92:	73fb      	strb	r3, [r7, #15]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7bfa      	ldrb	r2, [r7, #15]
 800be98:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800be9a:	7dbb      	ldrb	r3, [r7, #22]
 800be9c:	2be5      	cmp	r3, #229	; 0xe5
 800be9e:	d00e      	beq.n	800bebe <dir_read+0xbc>
 800bea0:	7dbb      	ldrb	r3, [r7, #22]
 800bea2:	2b2e      	cmp	r3, #46	; 0x2e
 800bea4:	d00b      	beq.n	800bebe <dir_read+0xbc>
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	f023 0320 	bic.w	r3, r3, #32
 800beac:	2b08      	cmp	r3, #8
 800beae:	bf0c      	ite	eq
 800beb0:	2301      	moveq	r3, #1
 800beb2:	2300      	movne	r3, #0
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	461a      	mov	r2, r3
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	4293      	cmp	r3, r2
 800bebc:	d002      	beq.n	800bec4 <dir_read+0xc2>
				ord = 0xFF;
 800bebe:	23ff      	movs	r3, #255	; 0xff
 800bec0:	757b      	strb	r3, [r7, #21]
 800bec2:	e044      	b.n	800bf4e <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	2b0f      	cmp	r3, #15
 800bec8:	d12f      	bne.n	800bf2a <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800beca:	7dbb      	ldrb	r3, [r7, #22]
 800becc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00d      	beq.n	800bef0 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed8:	7b5b      	ldrb	r3, [r3, #13]
 800beda:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800bedc:	7dbb      	ldrb	r3, [r7, #22]
 800bede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bee2:	75bb      	strb	r3, [r7, #22]
 800bee4:	7dbb      	ldrb	r3, [r7, #22]
 800bee6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bef0:	7dba      	ldrb	r2, [r7, #22]
 800bef2:	7d7b      	ldrb	r3, [r7, #21]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d115      	bne.n	800bf24 <dir_read+0x122>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800befc:	330d      	adds	r3, #13
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	7d3a      	ldrb	r2, [r7, #20]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d10e      	bne.n	800bf24 <dir_read+0x122>
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf0e:	4619      	mov	r1, r3
 800bf10:	4610      	mov	r0, r2
 800bf12:	f7ff fbd7 	bl	800b6c4 <pick_lfn>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d003      	beq.n	800bf24 <dir_read+0x122>
 800bf1c:	7d7b      	ldrb	r3, [r7, #21]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	e000      	b.n	800bf26 <dir_read+0x124>
 800bf24:	23ff      	movs	r3, #255	; 0xff
 800bf26:	757b      	strb	r3, [r7, #21]
 800bf28:	e011      	b.n	800bf4e <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bf2a:	7d7b      	ldrb	r3, [r7, #21]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d109      	bne.n	800bf44 <dir_read+0x142>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7ff fd21 	bl	800b97c <sum_sfn>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	7d3b      	ldrb	r3, [r7, #20]
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d017      	beq.n	800bf74 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf4a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800bf4c:	e012      	b.n	800bf74 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bf4e:	2100      	movs	r1, #0
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff f9d7 	bl	800b304 <dir_next>
 800bf56:	4603      	mov	r3, r0
 800bf58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d10b      	bne.n	800bf78 <dir_read+0x176>
	while (dp->sect) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f47f af5b 	bne.w	800be20 <dir_read+0x1e>
 800bf6a:	e006      	b.n	800bf7a <dir_read+0x178>
		if (res != FR_OK) break;
 800bf6c:	bf00      	nop
 800bf6e:	e004      	b.n	800bf7a <dir_read+0x178>
					break;
 800bf70:	bf00      	nop
 800bf72:	e002      	b.n	800bf7a <dir_read+0x178>
					break;
 800bf74:	bf00      	nop
 800bf76:	e000      	b.n	800bf7a <dir_read+0x178>
		if (res != FR_OK) break;
 800bf78:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <dir_read+0x184>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b089      	sub	sp, #36	; 0x24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7ff f929 	bl	800b1f8 <dir_sdi>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800bfaa:	7ffb      	ldrb	r3, [r7, #31]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d001      	beq.n	800bfb4 <dir_find+0x24>
 800bfb0:	7ffb      	ldrb	r3, [r7, #31]
 800bfb2:	e112      	b.n	800c1da <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	2b04      	cmp	r3, #4
 800bfba:	d164      	bne.n	800c086 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7ff fd2f 	bl	800ba24 <xname_sum>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bfca:	e04f      	b.n	800c06c <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	3324      	adds	r3, #36	; 0x24
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fd ff18 	bl	8009e08 <ld_word>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	461a      	mov	r2, r3
 800bfdc:	893b      	ldrh	r3, [r7, #8]
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d000      	beq.n	800bfe4 <dir_find+0x54>
 800bfe2:	e043      	b.n	800c06c <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800bfec:	76fb      	strb	r3, [r7, #27]
 800bfee:	2340      	movs	r3, #64	; 0x40
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	2300      	movs	r3, #0
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	e029      	b.n	800c04c <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	f003 031f 	and.w	r3, r3, #31
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d102      	bne.n	800c008 <dir_find+0x78>
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	3302      	adds	r3, #2
 800c006:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	691a      	ldr	r2, [r3, #16]
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	4413      	add	r3, r2
 800c010:	4618      	mov	r0, r3
 800c012:	f7fd fef9 	bl	8009e08 <ld_word>
 800c016:	4603      	mov	r3, r0
 800c018:	4618      	mov	r0, r3
 800c01a:	f002 f9d9 	bl	800e3d0 <ff_wtoupper>
 800c01e:	4603      	mov	r3, r0
 800c020:	461c      	mov	r4, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	68da      	ldr	r2, [r3, #12]
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	005b      	lsls	r3, r3, #1
 800c02a:	4413      	add	r3, r2
 800c02c:	881b      	ldrh	r3, [r3, #0]
 800c02e:	4618      	mov	r0, r3
 800c030:	f002 f9ce 	bl	800e3d0 <ff_wtoupper>
 800c034:	4603      	mov	r3, r0
 800c036:	429c      	cmp	r4, r3
 800c038:	d10c      	bne.n	800c054 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c03a:	7efb      	ldrb	r3, [r7, #27]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	76fb      	strb	r3, [r7, #27]
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	3302      	adds	r3, #2
 800c044:	617b      	str	r3, [r7, #20]
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	3301      	adds	r3, #1
 800c04a:	613b      	str	r3, [r7, #16]
 800c04c:	7efb      	ldrb	r3, [r7, #27]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1d2      	bne.n	800bff8 <dir_find+0x68>
 800c052:	e000      	b.n	800c056 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c054:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c056:	7efb      	ldrb	r3, [r7, #27]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d107      	bne.n	800c06c <dir_find+0xdc>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	68da      	ldr	r2, [r3, #12]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	4413      	add	r3, r2
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d009      	beq.n	800c080 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c06c:	2100      	movs	r1, #0
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff fec7 	bl	800be02 <dir_read>
 800c074:	4603      	mov	r3, r0
 800c076:	77fb      	strb	r3, [r7, #31]
 800c078:	7ffb      	ldrb	r3, [r7, #31]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0a6      	beq.n	800bfcc <dir_find+0x3c>
 800c07e:	e000      	b.n	800c082 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c080:	bf00      	nop
		}
		return res;
 800c082:	7ffb      	ldrb	r3, [r7, #31]
 800c084:	e0a9      	b.n	800c1da <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c086:	23ff      	movs	r3, #255	; 0xff
 800c088:	773b      	strb	r3, [r7, #28]
 800c08a:	7f3b      	ldrb	r3, [r7, #28]
 800c08c:	777b      	strb	r3, [r7, #29]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c094:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09a:	4619      	mov	r1, r3
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7fe faa7 	bl	800a5f0 <move_window>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c0a6:	7ffb      	ldrb	r3, [r7, #31]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f040 8090 	bne.w	800c1ce <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c0b6:	7fbb      	ldrb	r3, [r7, #30]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <dir_find+0x132>
 800c0bc:	2304      	movs	r3, #4
 800c0be:	77fb      	strb	r3, [r7, #31]
 800c0c0:	e08a      	b.n	800c1d8 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c6:	330b      	adds	r3, #11
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0ce:	72fb      	strb	r3, [r7, #11]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	7afa      	ldrb	r2, [r7, #11]
 800c0d4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c0d6:	7fbb      	ldrb	r3, [r7, #30]
 800c0d8:	2be5      	cmp	r3, #229	; 0xe5
 800c0da:	d007      	beq.n	800c0ec <dir_find+0x15c>
 800c0dc:	7afb      	ldrb	r3, [r7, #11]
 800c0de:	f003 0308 	and.w	r3, r3, #8
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d009      	beq.n	800c0fa <dir_find+0x16a>
 800c0e6:	7afb      	ldrb	r3, [r7, #11]
 800c0e8:	2b0f      	cmp	r3, #15
 800c0ea:	d006      	beq.n	800c0fa <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0ec:	23ff      	movs	r3, #255	; 0xff
 800c0ee:	777b      	strb	r3, [r7, #29]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0f6:	64da      	str	r2, [r3, #76]	; 0x4c
 800c0f8:	e05e      	b.n	800c1b8 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c0fa:	7afb      	ldrb	r3, [r7, #11]
 800c0fc:	2b0f      	cmp	r3, #15
 800c0fe:	d136      	bne.n	800c16e <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d154      	bne.n	800c1b8 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c10e:	7fbb      	ldrb	r3, [r7, #30]
 800c110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00d      	beq.n	800c134 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c11c:	7b5b      	ldrb	r3, [r3, #13]
 800c11e:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c120:	7fbb      	ldrb	r3, [r7, #30]
 800c122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c126:	77bb      	strb	r3, [r7, #30]
 800c128:	7fbb      	ldrb	r3, [r7, #30]
 800c12a:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c134:	7fba      	ldrb	r2, [r7, #30]
 800c136:	7f7b      	ldrb	r3, [r7, #29]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d115      	bne.n	800c168 <dir_find+0x1d8>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c140:	330d      	adds	r3, #13
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	7f3a      	ldrb	r2, [r7, #28]
 800c146:	429a      	cmp	r2, r3
 800c148:	d10e      	bne.n	800c168 <dir_find+0x1d8>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	68da      	ldr	r2, [r3, #12]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c152:	4619      	mov	r1, r3
 800c154:	4610      	mov	r0, r2
 800c156:	f7ff fa45 	bl	800b5e4 <cmp_lfn>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <dir_find+0x1d8>
 800c160:	7f7b      	ldrb	r3, [r7, #29]
 800c162:	3b01      	subs	r3, #1
 800c164:	b2db      	uxtb	r3, r3
 800c166:	e000      	b.n	800c16a <dir_find+0x1da>
 800c168:	23ff      	movs	r3, #255	; 0xff
 800c16a:	777b      	strb	r3, [r7, #29]
 800c16c:	e024      	b.n	800c1b8 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c16e:	7f7b      	ldrb	r3, [r7, #29]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d109      	bne.n	800c188 <dir_find+0x1f8>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c178:	4618      	mov	r0, r3
 800c17a:	f7ff fbff 	bl	800b97c <sum_sfn>
 800c17e:	4603      	mov	r3, r0
 800c180:	461a      	mov	r2, r3
 800c182:	7f3b      	ldrb	r3, [r7, #28]
 800c184:	4293      	cmp	r3, r2
 800c186:	d024      	beq.n	800c1d2 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10a      	bne.n	800c1ac <dir_find+0x21c>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	3340      	adds	r3, #64	; 0x40
 800c19e:	220b      	movs	r2, #11
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	f7fe f832 	bl	800a20a <mem_cmp>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d014      	beq.n	800c1d6 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1ac:	23ff      	movs	r3, #255	; 0xff
 800c1ae:	777b      	strb	r3, [r7, #29]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1b6:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff f8a2 	bl	800b304 <dir_next>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c1c4:	7ffb      	ldrb	r3, [r7, #31]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f43f af65 	beq.w	800c096 <dir_find+0x106>
 800c1cc:	e004      	b.n	800c1d8 <dir_find+0x248>
		if (res != FR_OK) break;
 800c1ce:	bf00      	nop
 800c1d0:	e002      	b.n	800c1d8 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c1d2:	bf00      	nop
 800c1d4:	e000      	b.n	800c1d8 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1d6:	bf00      	nop

	return res;
 800c1d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3724      	adds	r7, #36	; 0x24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd90      	pop	{r4, r7, pc}
	...

0800c1e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c1e4:	b5b0      	push	{r4, r5, r7, lr}
 800c1e6:	b0a2      	sub	sp, #136	; 0x88
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	677b      	str	r3, [r7, #116]	; 0x74
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c1f8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <dir_register+0x20>
 800c200:	2306      	movs	r3, #6
 800c202:	e18e      	b.n	800c522 <dir_register+0x33e>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c204:	2300      	movs	r3, #0
 800c206:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c208:	e002      	b.n	800c210 <dir_register+0x2c>
 800c20a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c20c:	3301      	adds	r3, #1
 800c20e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c210:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c212:	68da      	ldr	r2, [r3, #12]
 800c214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c216:	005b      	lsls	r3, r3, #1
 800c218:	4413      	add	r3, r2
 800c21a:	881b      	ldrh	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1f4      	bne.n	800c20a <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	2b04      	cmp	r3, #4
 800c226:	f040 809e 	bne.w	800c366 <dir_register+0x182>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c22a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c22c:	330e      	adds	r3, #14
 800c22e:	4abf      	ldr	r2, [pc, #764]	; (800c52c <dir_register+0x348>)
 800c230:	fba2 2303 	umull	r2, r3, r2, r3
 800c234:	08db      	lsrs	r3, r3, #3
 800c236:	3302      	adds	r3, #2
 800c238:	67bb      	str	r3, [r7, #120]	; 0x78
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c23a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff f936 	bl	800b4ae <dir_alloc>
 800c242:	4603      	mov	r3, r0
 800c244:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res != FR_OK) return res;
 800c248:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <dir_register+0x72>
 800c250:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c254:	e165      	b.n	800c522 <dir_register+0x33e>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c25a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c25c:	3b01      	subs	r3, #1
 800c25e:	015b      	lsls	r3, r3, #5
 800c260:	1ad2      	subs	r2, r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d071      	beq.n	800c352 <dir_register+0x16e>
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	79db      	ldrb	r3, [r3, #7]
 800c272:	f003 0304 	and.w	r3, r3, #4
 800c276:	2b00      	cmp	r3, #0
 800c278:	d06b      	beq.n	800c352 <dir_register+0x16e>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c282:	895b      	ldrh	r3, [r3, #10]
 800c284:	025b      	lsls	r3, r3, #9
 800c286:	461a      	mov	r2, r3
 800c288:	f04f 0300 	mov.w	r3, #0
 800c28c:	1884      	adds	r4, r0, r2
 800c28e:	eb41 0503 	adc.w	r5, r1, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe fd56 	bl	800ad4c <fill_first_frag>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c2a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <dir_register+0xd0>
 800c2ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c2b2:	e136      	b.n	800c522 <dir_register+0x33e>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2be:	4619      	mov	r1, r3
 800c2c0:	f7fe fd73 	bl	800adaa <fill_last_frag>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c2ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <dir_register+0xf4>
 800c2d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c2d6:	e124      	b.n	800c522 <dir_register+0x33e>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	f107 0308 	add.w	r3, r7, #8
 800c2de:	4611      	mov	r1, r2
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7ff fc91 	bl	800bc08 <load_obj_dir>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c2ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <dir_register+0x116>
 800c2f4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c2f8:	e113      	b.n	800c522 <dir_register+0x33e>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c2fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c308:	4608      	mov	r0, r1
 800c30a:	f7fd feba 	bl	800a082 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c30e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c31c:	4608      	mov	r0, r1
 800c31e:	f7fd feb0 	bl	800a082 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	79da      	ldrb	r2, [r3, #7]
 800c326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	3321      	adds	r3, #33	; 0x21
 800c32c:	f042 0201 	orr.w	r2, r2, #1
 800c330:	b2d2      	uxtb	r2, r2
 800c332:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c334:	f107 0308 	add.w	r3, r7, #8
 800c338:	4618      	mov	r0, r3
 800c33a:	f7ff fca0 	bl	800bc7e <store_xdir>
 800c33e:	4603      	mov	r3, r0
 800c340:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c344:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <dir_register+0x16e>
 800c34c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c350:	e0e7      	b.n	800c522 <dir_register+0x33e>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c354:	691a      	ldr	r2, [r3, #16]
 800c356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	4619      	mov	r1, r3
 800c35c:	4610      	mov	r0, r2
 800c35e:	f7ff fce9 	bl	800bd34 <create_xdir>
		return FR_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	e0dd      	b.n	800c522 <dir_register+0x33e>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c36c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c370:	220c      	movs	r2, #12
 800c372:	4618      	mov	r0, r3
 800c374:	f7fd ff0d 	bl	800a192 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c378:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c37c:	f003 0301 	and.w	r3, r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	d039      	beq.n	800c3f8 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2240      	movs	r2, #64	; 0x40
 800c388:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800c38c:	2301      	movs	r3, #1
 800c38e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c392:	e019      	b.n	800c3c8 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c39a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c39c:	68da      	ldr	r2, [r3, #12]
 800c39e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800c3a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3a6:	f7ff fa59 	bl	800b85c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7ff fdf0 	bl	800bf90 <dir_find>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) break;
 800c3b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d109      	bne.n	800c3d2 <dir_register+0x1ee>
		for (n = 1; n < 100; n++) {
 800c3be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3cc:	2b63      	cmp	r3, #99	; 0x63
 800c3ce:	d9e1      	bls.n	800c394 <dir_register+0x1b0>
 800c3d0:	e000      	b.n	800c3d4 <dir_register+0x1f0>
			if (res != FR_OK) break;
 800c3d2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c3d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3d8:	2b64      	cmp	r3, #100	; 0x64
 800c3da:	d101      	bne.n	800c3e0 <dir_register+0x1fc>
 800c3dc:	2307      	movs	r3, #7
 800c3de:	e0a0      	b.n	800c522 <dir_register+0x33e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c3e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c3e4:	2b04      	cmp	r3, #4
 800c3e6:	d002      	beq.n	800c3ee <dir_register+0x20a>
 800c3e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c3ec:	e099      	b.n	800c522 <dir_register+0x33e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c3ee:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c3f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d007      	beq.n	800c414 <dir_register+0x230>
 800c404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c406:	330c      	adds	r3, #12
 800c408:	4a49      	ldr	r2, [pc, #292]	; (800c530 <dir_register+0x34c>)
 800c40a:	fba2 2303 	umull	r2, r3, r2, r3
 800c40e:	089b      	lsrs	r3, r3, #2
 800c410:	3301      	adds	r3, #1
 800c412:	e000      	b.n	800c416 <dir_register+0x232>
 800c414:	2301      	movs	r3, #1
 800c416:	67bb      	str	r3, [r7, #120]	; 0x78
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c418:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7ff f847 	bl	800b4ae <dir_alloc>
 800c420:	4603      	mov	r3, r0
 800c422:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c426:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d14a      	bne.n	800c4c4 <dir_register+0x2e0>
 800c42e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c430:	3b01      	subs	r3, #1
 800c432:	67bb      	str	r3, [r7, #120]	; 0x78
 800c434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c436:	2b00      	cmp	r3, #0
 800c438:	d044      	beq.n	800c4c4 <dir_register+0x2e0>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c43e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c440:	015b      	lsls	r3, r3, #5
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7fe fed6 	bl	800b1f8 <dir_sdi>
 800c44c:	4603      	mov	r3, r0
 800c44e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 800c452:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c456:	2b00      	cmp	r3, #0
 800c458:	d134      	bne.n	800c4c4 <dir_register+0x2e0>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3340      	adds	r3, #64	; 0x40
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff fa8c 	bl	800b97c <sum_sfn>
 800c464:	4603      	mov	r3, r0
 800c466:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46e:	4619      	mov	r1, r3
 800c470:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c472:	f7fe f8bd 	bl	800a5f0 <move_window>
 800c476:	4603      	mov	r3, r0
 800c478:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res != FR_OK) break;
 800c47c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c480:	2b00      	cmp	r3, #0
 800c482:	d11e      	bne.n	800c4c2 <dir_register+0x2de>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c486:	68d8      	ldr	r0, [r3, #12]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c48c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800c494:	f7ff f97a 	bl	800b78c <put_lfn>
				fs->wflag = 1;
 800c498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c49a:	2201      	movs	r2, #1
 800c49c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c49e:	2100      	movs	r1, #0
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7fe ff2f 	bl	800b304 <dir_next>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			} while (res == FR_OK && --nent);
 800c4ac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d107      	bne.n	800c4c4 <dir_register+0x2e0>
 800c4b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1d4      	bne.n	800c46a <dir_register+0x286>
 800c4c0:	e000      	b.n	800c4c4 <dir_register+0x2e0>
				if (res != FR_OK) break;
 800c4c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c4c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d128      	bne.n	800c51e <dir_register+0x33a>
		res = move_window(fs, dp->sect);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c4d4:	f7fe f88c 	bl	800a5f0 <move_window>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 800c4de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d11b      	bne.n	800c51e <dir_register+0x33a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ea:	2220      	movs	r2, #32
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fd fe70 	bl	800a1d4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3340      	adds	r3, #64	; 0x40
 800c4fc:	220b      	movs	r2, #11
 800c4fe:	4619      	mov	r1, r3
 800c500:	f7fd fe47 	bl	800a192 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c50e:	330c      	adds	r3, #12
 800c510:	f002 0218 	and.w	r2, r2, #24
 800c514:	b2d2      	uxtb	r2, r2
 800c516:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c51a:	2201      	movs	r2, #1
 800c51c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c51e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800c522:	4618      	mov	r0, r3
 800c524:	3788      	adds	r7, #136	; 0x88
 800c526:	46bd      	mov	sp, r7
 800c528:	bdb0      	pop	{r4, r5, r7, pc}
 800c52a:	bf00      	nop
 800c52c:	88888889 	.word	0x88888889
 800c530:	4ec4ec4f 	.word	0x4ec4ec4f

0800c534 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08a      	sub	sp, #40	; 0x28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	613b      	str	r3, [r7, #16]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	2300      	movs	r3, #0
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	1c5a      	adds	r2, r3, #1
 800c558:	61ba      	str	r2, [r7, #24]
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c564:	2b1f      	cmp	r3, #31
 800c566:	d940      	bls.n	800c5ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c568:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c56a:	2b2f      	cmp	r3, #47	; 0x2f
 800c56c:	d006      	beq.n	800c57c <create_name+0x48>
 800c56e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c570:	2b5c      	cmp	r3, #92	; 0x5c
 800c572:	d110      	bne.n	800c596 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c574:	e002      	b.n	800c57c <create_name+0x48>
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	3301      	adds	r3, #1
 800c57a:	61bb      	str	r3, [r7, #24]
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	4413      	add	r3, r2
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b2f      	cmp	r3, #47	; 0x2f
 800c586:	d0f6      	beq.n	800c576 <create_name+0x42>
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	4413      	add	r3, r2
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b5c      	cmp	r3, #92	; 0x5c
 800c592:	d0f0      	beq.n	800c576 <create_name+0x42>
			break;
 800c594:	e02a      	b.n	800c5ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2bfe      	cmp	r3, #254	; 0xfe
 800c59a:	d901      	bls.n	800c5a0 <create_name+0x6c>
 800c59c:	2306      	movs	r3, #6
 800c59e:	e1cb      	b.n	800c938 <create_name+0x404>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c5a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c5a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5a8:	2101      	movs	r1, #1
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f001 fed4 	bl	800e358 <ff_convert>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d101      	bne.n	800c5be <create_name+0x8a>
 800c5ba:	2306      	movs	r3, #6
 800c5bc:	e1bc      	b.n	800c938 <create_name+0x404>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5c0:	2b7f      	cmp	r3, #127	; 0x7f
 800c5c2:	d809      	bhi.n	800c5d8 <create_name+0xa4>
 800c5c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	48a5      	ldr	r0, [pc, #660]	; (800c860 <create_name+0x32c>)
 800c5ca:	f7fd fe45 	bl	800a258 <chk_chr>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <create_name+0xa4>
 800c5d4:	2306      	movs	r3, #6
 800c5d6:	e1af      	b.n	800c938 <create_name+0x404>
		lfn[di++] = w;					/* Store the Unicode character */
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	1c5a      	adds	r2, r3, #1
 800c5dc:	617a      	str	r2, [r7, #20]
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c5e8:	e7b4      	b.n	800c554 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c5ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c5ec:	693a      	ldr	r2, [r7, #16]
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	441a      	add	r2, r3
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5f8:	2b1f      	cmp	r3, #31
 800c5fa:	d801      	bhi.n	800c600 <create_name+0xcc>
 800c5fc:	2304      	movs	r3, #4
 800c5fe:	e000      	b.n	800c602 <create_name+0xce>
 800c600:	2300      	movs	r3, #0
 800c602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d109      	bne.n	800c620 <create_name+0xec>
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c612:	4413      	add	r3, r2
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	4413      	add	r3, r2
 800c61a:	881b      	ldrh	r3, [r3, #0]
 800c61c:	2b2e      	cmp	r3, #46	; 0x2e
 800c61e:	d015      	beq.n	800c64c <create_name+0x118>
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2b02      	cmp	r3, #2
 800c624:	d14d      	bne.n	800c6c2 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c62c:	4413      	add	r3, r2
 800c62e:	005b      	lsls	r3, r3, #1
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	4413      	add	r3, r2
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	2b2e      	cmp	r3, #46	; 0x2e
 800c638:	d143      	bne.n	800c6c2 <create_name+0x18e>
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	4b89      	ldr	r3, [pc, #548]	; (800c864 <create_name+0x330>)
 800c63e:	4413      	add	r3, r2
 800c640:	005b      	lsls	r3, r3, #1
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	4413      	add	r3, r2
 800c646:	881b      	ldrh	r3, [r3, #0]
 800c648:	2b2e      	cmp	r3, #46	; 0x2e
 800c64a:	d13a      	bne.n	800c6c2 <create_name+0x18e>
		lfn[di] = 0;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	4413      	add	r3, r2
 800c654:	2200      	movs	r2, #0
 800c656:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c658:	2300      	movs	r3, #0
 800c65a:	623b      	str	r3, [r7, #32]
 800c65c:	e00f      	b.n	800c67e <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800c65e:	6a3a      	ldr	r2, [r7, #32]
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	429a      	cmp	r2, r3
 800c664:	d201      	bcs.n	800c66a <create_name+0x136>
 800c666:	212e      	movs	r1, #46	; 0x2e
 800c668:	e000      	b.n	800c66c <create_name+0x138>
 800c66a:	2120      	movs	r1, #32
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	6a3b      	ldr	r3, [r7, #32]
 800c670:	4413      	add	r3, r2
 800c672:	3340      	adds	r3, #64	; 0x40
 800c674:	460a      	mov	r2, r1
 800c676:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	3301      	adds	r3, #1
 800c67c:	623b      	str	r3, [r7, #32]
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	2b0a      	cmp	r3, #10
 800c682:	d9ec      	bls.n	800c65e <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800c684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c688:	f043 0320 	orr.w	r3, r3, #32
 800c68c:	b2d9      	uxtb	r1, r3
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	6a3b      	ldr	r3, [r7, #32]
 800c692:	4413      	add	r3, r2
 800c694:	3340      	adds	r3, #64	; 0x40
 800c696:	460a      	mov	r2, r1
 800c698:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	e14c      	b.n	800c938 <create_name+0x404>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c6a4:	4413      	add	r3, r2
 800c6a6:	005b      	lsls	r3, r3, #1
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	881b      	ldrh	r3, [r3, #0]
 800c6ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c6b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b2:	2b20      	cmp	r3, #32
 800c6b4:	d002      	beq.n	800c6bc <create_name+0x188>
 800c6b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ba:	d106      	bne.n	800c6ca <create_name+0x196>
		di--;
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1ea      	bne.n	800c69e <create_name+0x16a>
 800c6c8:	e000      	b.n	800c6cc <create_name+0x198>
		if (w != ' ' && w != '.') break;
 800c6ca:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <create_name+0x1ae>
 800c6de:	2306      	movs	r3, #6
 800c6e0:	e12a      	b.n	800c938 <create_name+0x404>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3340      	adds	r3, #64	; 0x40
 800c6e6:	220b      	movs	r2, #11
 800c6e8:	2120      	movs	r1, #32
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fd fd72 	bl	800a1d4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	61bb      	str	r3, [r7, #24]
 800c6f4:	e002      	b.n	800c6fc <create_name+0x1c8>
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	61bb      	str	r3, [r7, #24]
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	4413      	add	r3, r2
 800c704:	881b      	ldrh	r3, [r3, #0]
 800c706:	2b20      	cmp	r3, #32
 800c708:	d0f5      	beq.n	800c6f6 <create_name+0x1c2>
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	4413      	add	r3, r2
 800c712:	881b      	ldrh	r3, [r3, #0]
 800c714:	2b2e      	cmp	r3, #46	; 0x2e
 800c716:	d0ee      	beq.n	800c6f6 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d009      	beq.n	800c732 <create_name+0x1fe>
 800c71e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c722:	f043 0303 	orr.w	r3, r3, #3
 800c726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c72a:	e002      	b.n	800c732 <create_name+0x1fe>
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	3b01      	subs	r3, #1
 800c730:	617b      	str	r3, [r7, #20]
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d009      	beq.n	800c74c <create_name+0x218>
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c73e:	4413      	add	r3, r2
 800c740:	005b      	lsls	r3, r3, #1
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	4413      	add	r3, r2
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	2b2e      	cmp	r3, #46	; 0x2e
 800c74a:	d1ef      	bne.n	800c72c <create_name+0x1f8>

	i = b = 0; ni = 8;
 800c74c:	2300      	movs	r3, #0
 800c74e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c752:	2300      	movs	r3, #0
 800c754:	623b      	str	r3, [r7, #32]
 800c756:	2308      	movs	r3, #8
 800c758:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	1c5a      	adds	r2, r3, #1
 800c75e:	61ba      	str	r2, [r7, #24]
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	4413      	add	r3, r2
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c76a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f000 8099 	beq.w	800c8a4 <create_name+0x370>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c774:	2b20      	cmp	r3, #32
 800c776:	d006      	beq.n	800c786 <create_name+0x252>
 800c778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c77a:	2b2e      	cmp	r3, #46	; 0x2e
 800c77c:	d10a      	bne.n	800c794 <create_name+0x260>
 800c77e:	69ba      	ldr	r2, [r7, #24]
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	429a      	cmp	r2, r3
 800c784:	d006      	beq.n	800c794 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 800c786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c78a:	f043 0303 	orr.w	r3, r3, #3
 800c78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c792:	e086      	b.n	800c8a2 <create_name+0x36e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c794:	6a3a      	ldr	r2, [r7, #32]
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d203      	bcs.n	800c7a4 <create_name+0x270>
 800c79c:	69ba      	ldr	r2, [r7, #24]
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d123      	bne.n	800c7ec <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	2b0b      	cmp	r3, #11
 800c7a8:	d106      	bne.n	800c7b8 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 800c7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7ae:	f043 0303 	orr.w	r3, r3, #3
 800c7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7b6:	e078      	b.n	800c8aa <create_name+0x376>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d005      	beq.n	800c7cc <create_name+0x298>
 800c7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7c4:	f043 0303 	orr.w	r3, r3, #3
 800c7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c7cc:	69ba      	ldr	r2, [r7, #24]
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d869      	bhi.n	800c8a8 <create_name+0x374>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	61bb      	str	r3, [r7, #24]
 800c7d8:	2308      	movs	r3, #8
 800c7da:	623b      	str	r3, [r7, #32]
 800c7dc:	230b      	movs	r3, #11
 800c7de:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c7e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c7ea:	e05a      	b.n	800c8a2 <create_name+0x36e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c7ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7ee:	2b7f      	cmp	r3, #127	; 0x7f
 800c7f0:	d914      	bls.n	800c81c <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f001 fdae 	bl	800e358 <ff_convert>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c802:	2b00      	cmp	r3, #0
 800c804:	d004      	beq.n	800c810 <create_name+0x2dc>
 800c806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c808:	3b80      	subs	r3, #128	; 0x80
 800c80a:	4a17      	ldr	r2, [pc, #92]	; (800c868 <create_name+0x334>)
 800c80c:	5cd3      	ldrb	r3, [r2, r3]
 800c80e:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c814:	f043 0302 	orr.w	r3, r3, #2
 800c818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c81c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d007      	beq.n	800c832 <create_name+0x2fe>
 800c822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c824:	4619      	mov	r1, r3
 800c826:	4811      	ldr	r0, [pc, #68]	; (800c86c <create_name+0x338>)
 800c828:	f7fd fd16 	bl	800a258 <chk_chr>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d008      	beq.n	800c844 <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c832:	235f      	movs	r3, #95	; 0x5f
 800c834:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c83a:	f043 0303 	orr.w	r3, r3, #3
 800c83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c842:	e024      	b.n	800c88e <create_name+0x35a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c846:	2b40      	cmp	r3, #64	; 0x40
 800c848:	d912      	bls.n	800c870 <create_name+0x33c>
 800c84a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c84c:	2b5a      	cmp	r3, #90	; 0x5a
 800c84e:	d80f      	bhi.n	800c870 <create_name+0x33c>
					b |= 2;
 800c850:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c854:	f043 0302 	orr.w	r3, r3, #2
 800c858:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c85c:	e017      	b.n	800c88e <create_name+0x35a>
 800c85e:	bf00      	nop
 800c860:	0800f5c0 	.word	0x0800f5c0
 800c864:	7ffffffe 	.word	0x7ffffffe
 800c868:	0800f660 	.word	0x0800f660
 800c86c:	0800f5cc 	.word	0x0800f5cc
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c872:	2b60      	cmp	r3, #96	; 0x60
 800c874:	d90b      	bls.n	800c88e <create_name+0x35a>
 800c876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c878:	2b7a      	cmp	r3, #122	; 0x7a
 800c87a:	d808      	bhi.n	800c88e <create_name+0x35a>
						b |= 1; w -= 0x20;
 800c87c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c880:	f043 0301 	orr.w	r3, r3, #1
 800c884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c88a:	3b20      	subs	r3, #32
 800c88c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	623a      	str	r2, [r7, #32]
 800c894:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c896:	b2d1      	uxtb	r1, r2
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	4413      	add	r3, r2
 800c89c:	460a      	mov	r2, r1
 800c89e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c8a2:	e75a      	b.n	800c75a <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 800c8a4:	bf00      	nop
 800c8a6:	e000      	b.n	800c8aa <create_name+0x376>
			if (si > di) break;			/* No extension */
 800c8a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8b0:	2be5      	cmp	r3, #229	; 0xe5
 800c8b2:	d103      	bne.n	800c8bc <create_name+0x388>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2205      	movs	r2, #5
 800c8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	2b08      	cmp	r3, #8
 800c8c0:	d104      	bne.n	800c8cc <create_name+0x398>
 800c8c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c8cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8d0:	f003 030c 	and.w	r3, r3, #12
 800c8d4:	2b0c      	cmp	r3, #12
 800c8d6:	d005      	beq.n	800c8e4 <create_name+0x3b0>
 800c8d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8dc:	f003 0303 	and.w	r3, r3, #3
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	d105      	bne.n	800c8f0 <create_name+0x3bc>
 800c8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e8:	f043 0302 	orr.w	r3, r3, #2
 800c8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8f4:	f003 0302 	and.w	r3, r3, #2
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d117      	bne.n	800c92c <create_name+0x3f8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c8fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c900:	f003 0303 	and.w	r3, r3, #3
 800c904:	2b01      	cmp	r3, #1
 800c906:	d105      	bne.n	800c914 <create_name+0x3e0>
 800c908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c90c:	f043 0310 	orr.w	r3, r3, #16
 800c910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c914:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c918:	f003 030c 	and.w	r3, r3, #12
 800c91c:	2b04      	cmp	r3, #4
 800c91e:	d105      	bne.n	800c92c <create_name+0x3f8>
 800c920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c924:	f043 0308 	orr.w	r3, r3, #8
 800c928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c932:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800c936:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3728      	adds	r7, #40	; 0x28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b09c      	sub	sp, #112	; 0x70
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	66bb      	str	r3, [r7, #104]	; 0x68
	FATFS *fs = obj->fs;
 800c94e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	667b      	str	r3, [r7, #100]	; 0x64


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	2b2f      	cmp	r3, #47	; 0x2f
 800c95a:	d00b      	beq.n	800c974 <follow_path+0x34>
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b5c      	cmp	r3, #92	; 0x5c
 800c962:	d007      	beq.n	800c974 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800c964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c966:	69da      	ldr	r2, [r3, #28]
 800c968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c96a:	609a      	str	r2, [r3, #8]
 800c96c:	e00d      	b.n	800c98a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	3301      	adds	r3, #1
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	2b2f      	cmp	r3, #47	; 0x2f
 800c97a:	d0f8      	beq.n	800c96e <follow_path+0x2e>
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b5c      	cmp	r3, #92	; 0x5c
 800c982:	d0f4      	beq.n	800c96e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800c984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c986:	2200      	movs	r2, #0
 800c988:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c98a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c98c:	2200      	movs	r2, #0
 800c98e:	61da      	str	r2, [r3, #28]
#if _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 800c990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2b04      	cmp	r3, #4
 800c996:	d135      	bne.n	800ca04 <follow_path+0xc4>
 800c998:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d031      	beq.n	800ca04 <follow_path+0xc4>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
 800c9a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9a2:	6a1a      	ldr	r2, [r3, #32]
 800c9a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9a6:	621a      	str	r2, [r3, #32]
		obj->c_size = fs->cdc_size;
 800c9a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9ae:	625a      	str	r2, [r3, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 800c9b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9b6:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 800c9b8:	f107 0308 	add.w	r3, r7, #8
 800c9bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff f922 	bl	800bc08 <load_obj_dir>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (res != FR_OK) return res;
 800c9ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <follow_path+0x98>
 800c9d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c9d6:	e0c1      	b.n	800cb5c <follow_path+0x21c>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 800c9d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	3338      	adds	r3, #56	; 0x38
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fd fa2a 	bl	8009e38 <ld_dword>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f04f 0300 	mov.w	r3, #0
 800c9ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c9f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	3321      	adds	r3, #33	; 0x21
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	f003 0302 	and.w	r3, r3, #2
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca02:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	2b1f      	cmp	r3, #31
 800ca0a:	d80b      	bhi.n	800ca24 <follow_path+0xe4>
		dp->fn[NSFLAG] = NS_NONAME;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2280      	movs	r2, #128	; 0x80
 800ca10:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800ca14:	2100      	movs	r1, #0
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7fe fbee 	bl	800b1f8 <dir_sdi>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800ca22:	e099      	b.n	800cb58 <follow_path+0x218>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ca24:	463b      	mov	r3, r7
 800ca26:	4619      	mov	r1, r3
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7ff fd83 	bl	800c534 <create_name>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (res != FR_OK) break;
 800ca34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f040 8088 	bne.w	800cb4e <follow_path+0x20e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff faa6 	bl	800bf90 <dir_find>
 800ca44:	4603      	mov	r3, r0
 800ca46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			ns = dp->fn[NSFLAG];
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ca50:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			if (res != FR_OK) {				/* Failed to find the object */
 800ca54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d021      	beq.n	800caa0 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ca5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	d176      	bne.n	800cb52 <follow_path+0x212>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800ca64:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ca68:	f003 0320 	and.w	r3, r3, #32
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00d      	beq.n	800ca8c <follow_path+0x14c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ca70:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ca74:	f003 0304 	and.w	r3, r3, #4
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d066      	beq.n	800cb4a <follow_path+0x20a>
						dp->fn[NSFLAG] = NS_NONAME;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2280      	movs	r2, #128	; 0x80
 800ca80:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800ca8a:	e062      	b.n	800cb52 <follow_path+0x212>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ca8c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ca90:	f003 0304 	and.w	r3, r3, #4
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d15c      	bne.n	800cb52 <follow_path+0x212>
 800ca98:	2305      	movs	r3, #5
 800ca9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
 800ca9e:	e058      	b.n	800cb52 <follow_path+0x212>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800caa0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d154      	bne.n	800cb56 <follow_path+0x216>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800caac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caae:	799b      	ldrb	r3, [r3, #6]
 800cab0:	f003 0310 	and.w	r3, r3, #16
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d103      	bne.n	800cac0 <follow_path+0x180>
				res = FR_NO_PATH; break;
 800cab8:	2305      	movs	r3, #5
 800caba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800cabe:	e04b      	b.n	800cb58 <follow_path+0x218>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800cac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b04      	cmp	r3, #4
 800cac6:	d130      	bne.n	800cb2a <follow_path+0x1ea>
				obj->c_scl = obj->sclust;
 800cac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caca:	689a      	ldr	r2, [r3, #8]
 800cacc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cace:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800cad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cad2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cad6:	4613      	mov	r3, r2
 800cad8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cadc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cade:	79d2      	ldrb	r2, [r2, #7]
 800cae0:	431a      	orrs	r2, r3
 800cae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cae4:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800caea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caec:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800caee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	3334      	adds	r3, #52	; 0x34
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fd f99f 	bl	8009e38 <ld_dword>
 800cafa:	4602      	mov	r2, r0
 800cafc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cafe:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cb00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	3321      	adds	r3, #33	; 0x21
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	f003 0302 	and.w	r3, r3, #2
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb10:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800cb12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	3338      	adds	r3, #56	; 0x38
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fd f9b0 	bl	8009e7e <ld_qword>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cb24:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800cb28:	e77c      	b.n	800ca24 <follow_path+0xe4>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cb2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb2c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb38:	4413      	add	r3, r2
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cb3e:	f7fe fd12 	bl	800b566 <ld_clust>
 800cb42:	4602      	mov	r2, r0
 800cb44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb46:	609a      	str	r2, [r3, #8]
 800cb48:	e76c      	b.n	800ca24 <follow_path+0xe4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800cb4a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb4c:	e76a      	b.n	800ca24 <follow_path+0xe4>
			if (res != FR_OK) break;
 800cb4e:	bf00      	nop
 800cb50:	e002      	b.n	800cb58 <follow_path+0x218>
				break;
 800cb52:	bf00      	nop
 800cb54:	e000      	b.n	800cb58 <follow_path+0x218>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cb56:	bf00      	nop
			}
		}
	}

	return res;
 800cb58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3770      	adds	r7, #112	; 0x70
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b087      	sub	sp, #28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cb6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb70:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d031      	beq.n	800cbde <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	e002      	b.n	800cb88 <get_ldnumber+0x24>
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	3301      	adds	r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	2b1f      	cmp	r3, #31
 800cb8e:	d903      	bls.n	800cb98 <get_ldnumber+0x34>
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b3a      	cmp	r3, #58	; 0x3a
 800cb96:	d1f4      	bne.n	800cb82 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b3a      	cmp	r3, #58	; 0x3a
 800cb9e:	d11c      	bne.n	800cbda <get_ldnumber+0x76>
			tp = *path;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	1c5a      	adds	r2, r3, #1
 800cbaa:	60fa      	str	r2, [r7, #12]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	3b30      	subs	r3, #48	; 0x30
 800cbb0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b09      	cmp	r3, #9
 800cbb6:	d80e      	bhi.n	800cbd6 <get_ldnumber+0x72>
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d10a      	bne.n	800cbd6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d107      	bne.n	800cbd6 <get_ldnumber+0x72>
					vol = (int)i;
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	617b      	str	r3, [r7, #20]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	e002      	b.n	800cbe0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cbda:	2300      	movs	r3, #0
 800cbdc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cbde:	693b      	ldr	r3, [r7, #16]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	371c      	adds	r7, #28
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	70da      	strb	r2, [r3, #3]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc02:	645a      	str	r2, [r3, #68]	; 0x44
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cc04:	6839      	ldr	r1, [r7, #0]
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7fd fcf2 	bl	800a5f0 <move_window>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d001      	beq.n	800cc16 <check_fs+0x2a>
 800cc12:	2304      	movs	r3, #4
 800cc14:	e044      	b.n	800cca0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3348      	adds	r3, #72	; 0x48
 800cc1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fd f8f2 	bl	8009e08 <ld_word>
 800cc24:	4603      	mov	r3, r0
 800cc26:	461a      	mov	r2, r3
 800cc28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d001      	beq.n	800cc34 <check_fs+0x48>
 800cc30:	2303      	movs	r3, #3
 800cc32:	e035      	b.n	800cca0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cc3a:	2be9      	cmp	r3, #233	; 0xe9
 800cc3c:	d009      	beq.n	800cc52 <check_fs+0x66>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cc44:	2beb      	cmp	r3, #235	; 0xeb
 800cc46:	d11e      	bne.n	800cc86 <check_fs+0x9a>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800cc4e:	2b90      	cmp	r3, #144	; 0x90
 800cc50:	d119      	bne.n	800cc86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3348      	adds	r3, #72	; 0x48
 800cc56:	3336      	adds	r3, #54	; 0x36
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fd f8ed 	bl	8009e38 <ld_dword>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc64:	4a10      	ldr	r2, [pc, #64]	; (800cca8 <check_fs+0xbc>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d101      	bne.n	800cc6e <check_fs+0x82>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	e018      	b.n	800cca0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3348      	adds	r3, #72	; 0x48
 800cc72:	3352      	adds	r3, #82	; 0x52
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fd f8df 	bl	8009e38 <ld_dword>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	4a0b      	ldr	r2, [pc, #44]	; (800ccac <check_fs+0xc0>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d101      	bne.n	800cc86 <check_fs+0x9a>
 800cc82:	2300      	movs	r3, #0
 800cc84:	e00c      	b.n	800cca0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3348      	adds	r3, #72	; 0x48
 800cc8a:	220b      	movs	r2, #11
 800cc8c:	4908      	ldr	r1, [pc, #32]	; (800ccb0 <check_fs+0xc4>)
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fd fabb 	bl	800a20a <mem_cmp>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <check_fs+0xb2>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e000      	b.n	800cca0 <check_fs+0xb4>
#endif
	return 2;
 800cc9e:	2302      	movs	r3, #2
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	00544146 	.word	0x00544146
 800ccac:	33544146 	.word	0x33544146
 800ccb0:	0800f5d4 	.word	0x0800f5d4

0800ccb4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ccb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ccb8:	b098      	sub	sp, #96	; 0x60
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	60f8      	str	r0, [r7, #12]
 800ccbe:	60b9      	str	r1, [r7, #8]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7ff ff4a 	bl	800cb64 <get_ldnumber>
 800ccd0:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800ccd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	da01      	bge.n	800ccdc <find_volume+0x28>
 800ccd8:	230b      	movs	r3, #11
 800ccda:	e32e      	b.n	800d33a <find_volume+0x686>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ccdc:	4ab0      	ldr	r2, [pc, #704]	; (800cfa0 <find_volume+0x2ec>)
 800ccde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cce4:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d101      	bne.n	800ccf0 <find_volume+0x3c>
 800ccec:	230c      	movs	r3, #12
 800ccee:	e324      	b.n	800d33a <find_volume+0x686>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccf4:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	f023 0301 	bic.w	r3, r3, #1
 800ccfc:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ccfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d01a      	beq.n	800cd3c <find_volume+0x88>
		stat = disk_status(fs->drv);
 800cd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd08:	785b      	ldrb	r3, [r3, #1]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fc ffde 	bl	8009ccc <disk_status>
 800cd10:	4603      	mov	r3, r0
 800cd12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cd16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10c      	bne.n	800cd3c <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cd22:	79fb      	ldrb	r3, [r7, #7]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d007      	beq.n	800cd38 <find_volume+0x84>
 800cd28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd2c:	f003 0304 	and.w	r3, r3, #4
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800cd34:	230a      	movs	r3, #10
 800cd36:	e300      	b.n	800d33a <find_volume+0x686>
			}
			return FR_OK;				/* The file system object is valid */
 800cd38:	2300      	movs	r3, #0
 800cd3a:	e2fe      	b.n	800d33a <find_volume+0x686>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd3e:	2200      	movs	r2, #0
 800cd40:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cd42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd48:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd4c:	785b      	ldrb	r3, [r3, #1]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fc ffd6 	bl	8009d00 <disk_initialize>
 800cd54:	4603      	mov	r3, r0
 800cd56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cd5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cd66:	2303      	movs	r3, #3
 800cd68:	e2e7      	b.n	800d33a <find_volume+0x686>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d007      	beq.n	800cd80 <find_volume+0xcc>
 800cd70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd74:	f003 0304 	and.w	r3, r3, #4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800cd7c:	230a      	movs	r3, #10
 800cd7e:	e2dc      	b.n	800d33a <find_volume+0x686>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cd84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd86:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cd88:	f7ff ff30 	bl	800cbec <check_fs>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cd92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d14b      	bne.n	800ce32 <find_volume+0x17e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd9e:	e01f      	b.n	800cde0 <find_volume+0x12c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800cda6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cda8:	011b      	lsls	r3, r3, #4
 800cdaa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cdae:	4413      	add	r3, r2
 800cdb0:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d006      	beq.n	800cdca <find_volume+0x116>
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fd f839 	bl	8009e38 <ld_dword>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	e000      	b.n	800cdcc <find_volume+0x118>
 800cdca:	2200      	movs	r2, #0
 800cdcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800cdd4:	440b      	add	r3, r1
 800cdd6:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cdda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cddc:	3301      	adds	r3, #1
 800cdde:	64bb      	str	r3, [r7, #72]	; 0x48
 800cde0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	d9dc      	bls.n	800cda0 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cde6:	2300      	movs	r3, #0
 800cde8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800cdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <find_volume+0x142>
 800cdf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cdf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cdfe:	4413      	add	r3, r2
 800ce00:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ce04:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ce06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d005      	beq.n	800ce18 <find_volume+0x164>
 800ce0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce0e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ce10:	f7ff feec 	bl	800cbec <check_fs>
 800ce14:	4603      	mov	r3, r0
 800ce16:	e000      	b.n	800ce1a <find_volume+0x166>
 800ce18:	2303      	movs	r3, #3
 800ce1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ce1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d905      	bls.n	800ce32 <find_volume+0x17e>
 800ce26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce28:	3301      	adds	r3, #1
 800ce2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	d9e1      	bls.n	800cdf6 <find_volume+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ce32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	d101      	bne.n	800ce3e <find_volume+0x18a>
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e27d      	b.n	800d33a <find_volume+0x686>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ce3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d901      	bls.n	800ce4a <find_volume+0x196>
 800ce46:	230d      	movs	r3, #13
 800ce48:	e277      	b.n	800d33a <find_volume+0x686>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ce4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	f040 80f4 	bne.w	800d03c <find_volume+0x388>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ce54:	230b      	movs	r3, #11
 800ce56:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce58:	e002      	b.n	800ce60 <find_volume+0x1ac>
 800ce5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce62:	2b3f      	cmp	r3, #63	; 0x3f
 800ce64:	d806      	bhi.n	800ce74 <find_volume+0x1c0>
 800ce66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce6a:	4413      	add	r3, r2
 800ce6c:	3348      	adds	r3, #72	; 0x48
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d0f2      	beq.n	800ce5a <find_volume+0x1a6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ce74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce76:	2b3f      	cmp	r3, #63	; 0x3f
 800ce78:	d801      	bhi.n	800ce7e <find_volume+0x1ca>
 800ce7a:	230d      	movs	r3, #13
 800ce7c:	e25d      	b.n	800d33a <find_volume+0x686>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ce7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce80:	3348      	adds	r3, #72	; 0x48
 800ce82:	3368      	adds	r3, #104	; 0x68
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fc ffbf 	bl	8009e08 <ld_word>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce90:	d001      	beq.n	800ce96 <find_volume+0x1e2>
 800ce92:	230d      	movs	r3, #13
 800ce94:	e251      	b.n	800d33a <find_volume+0x686>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ce96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce98:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800ce9c:	2b09      	cmp	r3, #9
 800ce9e:	d001      	beq.n	800cea4 <find_volume+0x1f0>
			return FR_NO_FILESYSTEM;
 800cea0:	230d      	movs	r3, #13
 800cea2:	e24a      	b.n	800d33a <find_volume+0x686>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800cea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cea6:	3348      	adds	r3, #72	; 0x48
 800cea8:	3348      	adds	r3, #72	; 0x48
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fc ffe7 	bl	8009e7e <ld_qword>
 800ceb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	f04f 0300 	mov.w	r3, #0
 800ceb8:	eb10 0802 	adds.w	r8, r0, r2
 800cebc:	eb41 0903 	adc.w	r9, r1, r3
 800cec0:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800cec4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	bf08      	it	eq
 800cecc:	2a00      	cmpeq	r2, #0
 800cece:	d301      	bcc.n	800ced4 <find_volume+0x220>
 800ced0:	230d      	movs	r3, #13
 800ced2:	e232      	b.n	800d33a <find_volume+0x686>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ced4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced6:	3348      	adds	r3, #72	; 0x48
 800ced8:	3354      	adds	r3, #84	; 0x54
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fc ffac 	bl	8009e38 <ld_dword>
 800cee0:	4602      	mov	r2, r0
 800cee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee4:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800cee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee8:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
 800ceec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800cef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef2:	789b      	ldrb	r3, [r3, #2]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d001      	beq.n	800cefc <find_volume+0x248>
 800cef8:	230d      	movs	r3, #13
 800cefa:	e21e      	b.n	800d33a <find_volume+0x686>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800cefc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cefe:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800cf02:	461a      	mov	r2, r3
 800cf04:	2301      	movs	r3, #1
 800cf06:	4093      	lsls	r3, r2
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800cf0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf10:	895b      	ldrh	r3, [r3, #10]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <find_volume+0x266>
 800cf16:	230d      	movs	r3, #13
 800cf18:	e20f      	b.n	800d33a <find_volume+0x686>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cf1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf1c:	3348      	adds	r3, #72	; 0x48
 800cf1e:	335c      	adds	r3, #92	; 0x5c
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fc ff89 	bl	8009e38 <ld_dword>
 800cf26:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	4a1e      	ldr	r2, [pc, #120]	; (800cfa4 <find_volume+0x2f0>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d901      	bls.n	800cf34 <find_volume+0x280>
 800cf30:	230d      	movs	r3, #13
 800cf32:	e202      	b.n	800d33a <find_volume+0x686>
		fs->n_fatent = nclst + 2;
 800cf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf36:	1c9a      	adds	r2, r3, #2
 800cf38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf3a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800cf3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf40:	635a      	str	r2, [r3, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cf42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf44:	3348      	adds	r3, #72	; 0x48
 800cf46:	3358      	adds	r3, #88	; 0x58
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fc ff75 	bl	8009e38 <ld_dword>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf52:	441a      	add	r2, r3
 800cf54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf56:	641a      	str	r2, [r3, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800cf58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf5a:	3348      	adds	r3, #72	; 0x48
 800cf5c:	3350      	adds	r3, #80	; 0x50
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fc ff6a 	bl	8009e38 <ld_dword>
 800cf64:	4602      	mov	r2, r0
 800cf66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf68:	441a      	add	r2, r3
 800cf6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6c:	639a      	str	r2, [r3, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800cf6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf72:	4618      	mov	r0, r3
 800cf74:	f04f 0100 	mov.w	r1, #0
 800cf78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7a:	895b      	ldrh	r3, [r3, #10]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	fb03 f302 	mul.w	r3, r3, r2
 800cf84:	461a      	mov	r2, r3
 800cf86:	f04f 0300 	mov.w	r3, #0
 800cf8a:	1884      	adds	r4, r0, r2
 800cf8c:	eb41 0503 	adc.w	r5, r1, r3
 800cf90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cf94:	42ab      	cmp	r3, r5
 800cf96:	bf08      	it	eq
 800cf98:	42a2      	cmpeq	r2, r4
 800cf9a:	d205      	bcs.n	800cfa8 <find_volume+0x2f4>
 800cf9c:	230d      	movs	r3, #13
 800cf9e:	e1cc      	b.n	800d33a <find_volume+0x686>
 800cfa0:	240002f0 	.word	0x240002f0
 800cfa4:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800cfa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfaa:	3348      	adds	r3, #72	; 0x48
 800cfac:	3360      	adds	r3, #96	; 0x60
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fc ff42 	bl	8009e38 <ld_dword>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfb8:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800cfba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cfc2:	f7fd fbb1 	bl	800a728 <clust2sect>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cfcc:	f7fd fb10 	bl	800a5f0 <move_window>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <find_volume+0x326>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e1af      	b.n	800d33a <find_volume+0x686>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cfda:	2300      	movs	r3, #0
 800cfdc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfde:	e015      	b.n	800d00c <find_volume+0x358>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800cfe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfe4:	4413      	add	r3, r2
 800cfe6:	3348      	adds	r3, #72	; 0x48
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b81      	cmp	r3, #129	; 0x81
 800cfec:	d10b      	bne.n	800d006 <find_volume+0x352>
 800cfee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cff0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800cff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cff6:	3314      	adds	r3, #20
 800cff8:	4413      	add	r3, r2
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fc ff1c 	bl	8009e38 <ld_dword>
 800d000:	4603      	mov	r3, r0
 800d002:	2b02      	cmp	r3, #2
 800d004:	d007      	beq.n	800d016 <find_volume+0x362>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d008:	3320      	adds	r3, #32
 800d00a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d00c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d00e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d012:	d3e5      	bcc.n	800cfe0 <find_volume+0x32c>
 800d014:	e000      	b.n	800d018 <find_volume+0x364>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d016:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d01a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d01e:	d101      	bne.n	800d024 <find_volume+0x370>
 800d020:	230d      	movs	r3, #13
 800d022:	e18a      	b.n	800d33a <find_volume+0x686>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d02a:	619a      	str	r2, [r3, #24]
 800d02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d02e:	699a      	ldr	r2, [r3, #24]
 800d030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d032:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d034:	2304      	movs	r3, #4
 800d036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d03a:	e163      	b.n	800d304 <find_volume+0x650>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d03e:	3348      	adds	r3, #72	; 0x48
 800d040:	330b      	adds	r3, #11
 800d042:	4618      	mov	r0, r3
 800d044:	f7fc fee0 	bl	8009e08 <ld_word>
 800d048:	4603      	mov	r3, r0
 800d04a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d04e:	d001      	beq.n	800d054 <find_volume+0x3a0>
 800d050:	230d      	movs	r3, #13
 800d052:	e172      	b.n	800d33a <find_volume+0x686>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d056:	3348      	adds	r3, #72	; 0x48
 800d058:	3316      	adds	r3, #22
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fc fed4 	bl	8009e08 <ld_word>
 800d060:	4603      	mov	r3, r0
 800d062:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d066:	2b00      	cmp	r3, #0
 800d068:	d106      	bne.n	800d078 <find_volume+0x3c4>
 800d06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d06c:	3348      	adds	r3, #72	; 0x48
 800d06e:	3324      	adds	r3, #36	; 0x24
 800d070:	4618      	mov	r0, r3
 800d072:	f7fc fee1 	bl	8009e38 <ld_dword>
 800d076:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800d078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d07c:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d080:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800d084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d086:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08a:	789b      	ldrb	r3, [r3, #2]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d005      	beq.n	800d09c <find_volume+0x3e8>
 800d090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d092:	789b      	ldrb	r3, [r3, #2]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d001      	beq.n	800d09c <find_volume+0x3e8>
 800d098:	230d      	movs	r3, #13
 800d09a:	e14e      	b.n	800d33a <find_volume+0x686>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d09e:	789b      	ldrb	r3, [r3, #2]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0a4:	fb02 f303 	mul.w	r3, r2, r3
 800d0a8:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b8:	895b      	ldrh	r3, [r3, #10]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d008      	beq.n	800d0d0 <find_volume+0x41c>
 800d0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c0:	895b      	ldrh	r3, [r3, #10]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c6:	895b      	ldrh	r3, [r3, #10]
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d001      	beq.n	800d0d4 <find_volume+0x420>
 800d0d0:	230d      	movs	r3, #13
 800d0d2:	e132      	b.n	800d33a <find_volume+0x686>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d6:	3348      	adds	r3, #72	; 0x48
 800d0d8:	3311      	adds	r3, #17
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fc fe94 	bl	8009e08 <ld_word>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ea:	891b      	ldrh	r3, [r3, #8]
 800d0ec:	f003 030f 	and.w	r3, r3, #15
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d001      	beq.n	800d0fa <find_volume+0x446>
 800d0f6:	230d      	movs	r3, #13
 800d0f8:	e11f      	b.n	800d33a <find_volume+0x686>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0fc:	3348      	adds	r3, #72	; 0x48
 800d0fe:	3313      	adds	r3, #19
 800d100:	4618      	mov	r0, r3
 800d102:	f7fc fe81 	bl	8009e08 <ld_word>
 800d106:	4603      	mov	r3, r0
 800d108:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d106      	bne.n	800d11e <find_volume+0x46a>
 800d110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d112:	3348      	adds	r3, #72	; 0x48
 800d114:	3320      	adds	r3, #32
 800d116:	4618      	mov	r0, r3
 800d118:	f7fc fe8e 	bl	8009e38 <ld_dword>
 800d11c:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d120:	3348      	adds	r3, #72	; 0x48
 800d122:	330e      	adds	r3, #14
 800d124:	4618      	mov	r0, r3
 800d126:	f7fc fe6f 	bl	8009e08 <ld_word>
 800d12a:	4603      	mov	r3, r0
 800d12c:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d12e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <find_volume+0x484>
 800d134:	230d      	movs	r3, #13
 800d136:	e100      	b.n	800d33a <find_volume+0x686>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d138:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d13a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d13c:	4413      	add	r3, r2
 800d13e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d140:	8912      	ldrh	r2, [r2, #8]
 800d142:	0912      	lsrs	r2, r2, #4
 800d144:	b292      	uxth	r2, r2
 800d146:	4413      	add	r3, r2
 800d148:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d14a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14e:	429a      	cmp	r2, r3
 800d150:	d201      	bcs.n	800d156 <find_volume+0x4a2>
 800d152:	230d      	movs	r3, #13
 800d154:	e0f1      	b.n	800d33a <find_volume+0x686>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d156:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d15e:	8952      	ldrh	r2, [r2, #10]
 800d160:	fbb3 f3f2 	udiv	r3, r3, r2
 800d164:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <find_volume+0x4bc>
 800d16c:	230d      	movs	r3, #13
 800d16e:	e0e4      	b.n	800d33a <find_volume+0x686>
		fmt = FS_FAT32;
 800d170:	2303      	movs	r3, #3
 800d172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d802      	bhi.n	800d186 <find_volume+0x4d2>
 800d180:	2302      	movs	r3, #2
 800d182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d802      	bhi.n	800d196 <find_volume+0x4e2>
 800d190:	2301      	movs	r3, #1
 800d192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	1c9a      	adds	r2, r3, #2
 800d19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d19c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800d19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1a2:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d1a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d1a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1a8:	441a      	add	r2, r3
 800d1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ac:	639a      	str	r2, [r3, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 800d1ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	441a      	add	r2, r3
 800d1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b6:	641a      	str	r2, [r3, #64]	; 0x40
		if (fmt == FS_FAT32) {
 800d1b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	d11e      	bne.n	800d1fe <find_volume+0x54a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c2:	3348      	adds	r3, #72	; 0x48
 800d1c4:	332a      	adds	r3, #42	; 0x2a
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fc fe1e 	bl	8009e08 <ld_word>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <find_volume+0x522>
 800d1d2:	230d      	movs	r3, #13
 800d1d4:	e0b1      	b.n	800d33a <find_volume+0x686>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1d8:	891b      	ldrh	r3, [r3, #8]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <find_volume+0x52e>
 800d1de:	230d      	movs	r3, #13
 800d1e0:	e0ab      	b.n	800d33a <find_volume+0x686>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1e4:	3348      	adds	r3, #72	; 0x48
 800d1e6:	332c      	adds	r3, #44	; 0x2c
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fc fe25 	bl	8009e38 <ld_dword>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1f2:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1fc:	e01f      	b.n	800d23e <find_volume+0x58a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d200:	891b      	ldrh	r3, [r3, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d101      	bne.n	800d20a <find_volume+0x556>
 800d206:	230d      	movs	r3, #13
 800d208:	e097      	b.n	800d33a <find_volume+0x686>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d20c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d20e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d210:	441a      	add	r2, r3
 800d212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d214:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d103      	bne.n	800d226 <find_volume+0x572>
 800d21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	e00a      	b.n	800d23c <find_volume+0x588>
 800d226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d22a:	4613      	mov	r3, r2
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	4413      	add	r3, r2
 800d230:	085a      	lsrs	r2, r3, #1
 800d232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d236:	f003 0301 	and.w	r3, r3, #1
 800d23a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d23c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d244:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d248:	0a5b      	lsrs	r3, r3, #9
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d201      	bcs.n	800d252 <find_volume+0x59e>
 800d24e:	230d      	movs	r3, #13
 800d250:	e073      	b.n	800d33a <find_volume+0x686>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d258:	619a      	str	r2, [r3, #24]
 800d25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d25c:	699a      	ldr	r2, [r3, #24]
 800d25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d260:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d264:	2280      	movs	r2, #128	; 0x80
 800d266:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d149      	bne.n	800d304 <find_volume+0x650>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d272:	3348      	adds	r3, #72	; 0x48
 800d274:	3330      	adds	r3, #48	; 0x30
 800d276:	4618      	mov	r0, r3
 800d278:	f7fc fdc6 	bl	8009e08 <ld_word>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d140      	bne.n	800d304 <find_volume+0x650>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d284:	3301      	adds	r3, #1
 800d286:	4619      	mov	r1, r3
 800d288:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d28a:	f7fd f9b1 	bl	800a5f0 <move_window>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d137      	bne.n	800d304 <find_volume+0x650>
		{
			fs->fsi_flag = 0;
 800d294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d296:	2200      	movs	r2, #0
 800d298:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d29c:	3348      	adds	r3, #72	; 0x48
 800d29e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fc fdb0 	bl	8009e08 <ld_word>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d127      	bne.n	800d304 <find_volume+0x650>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2b6:	3348      	adds	r3, #72	; 0x48
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fc fdbd 	bl	8009e38 <ld_dword>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	4a20      	ldr	r2, [pc, #128]	; (800d344 <find_volume+0x690>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d11e      	bne.n	800d304 <find_volume+0x650>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2c8:	3348      	adds	r3, #72	; 0x48
 800d2ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fc fdb2 	bl	8009e38 <ld_dword>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	4a1c      	ldr	r2, [pc, #112]	; (800d348 <find_volume+0x694>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d113      	bne.n	800d304 <find_volume+0x650>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2de:	3348      	adds	r3, #72	; 0x48
 800d2e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fc fda7 	bl	8009e38 <ld_dword>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ee:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d2f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2f2:	3348      	adds	r3, #72	; 0x48
 800d2f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7fc fd9d 	bl	8009e38 <ld_dword>
 800d2fe:	4602      	mov	r2, r0
 800d300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d302:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d306:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d30a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d30c:	4b0f      	ldr	r3, [pc, #60]	; (800d34c <find_volume+0x698>)
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	3301      	adds	r3, #1
 800d312:	b29a      	uxth	r2, r3
 800d314:	4b0d      	ldr	r3, [pc, #52]	; (800d34c <find_volume+0x698>)
 800d316:	801a      	strh	r2, [r3, #0]
 800d318:	4b0c      	ldr	r3, [pc, #48]	; (800d34c <find_volume+0x698>)
 800d31a:	881a      	ldrh	r2, [r3, #0]
 800d31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d31e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d322:	4a0b      	ldr	r2, [pc, #44]	; (800d350 <find_volume+0x69c>)
 800d324:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d328:	4a0a      	ldr	r2, [pc, #40]	; (800d354 <find_volume+0x6a0>)
 800d32a:	611a      	str	r2, [r3, #16]
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800d32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d32e:	2200      	movs	r2, #0
 800d330:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d332:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d334:	f7fd f8f4 	bl	800a520 <clear_lock>
#endif
	return FR_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3760      	adds	r7, #96	; 0x60
 800d33e:	46bd      	mov	sp, r7
 800d340:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d344:	41615252 	.word	0x41615252
 800d348:	61417272 	.word	0x61417272
 800d34c:	240002f4 	.word	0x240002f4
 800d350:	24001548 	.word	0x24001548
 800d354:	240012e8 	.word	0x240012e8

0800d358 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d362:	2309      	movs	r3, #9
 800d364:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01c      	beq.n	800d3a6 <validate+0x4e>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d018      	beq.n	800d3a6 <validate+0x4e>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d013      	beq.n	800d3a6 <validate+0x4e>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	889a      	ldrh	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	88db      	ldrh	r3, [r3, #6]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d10c      	bne.n	800d3a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	785b      	ldrb	r3, [r3, #1]
 800d392:	4618      	mov	r0, r3
 800d394:	f7fc fc9a 	bl	8009ccc <disk_status>
 800d398:	4603      	mov	r3, r0
 800d39a:	f003 0301 	and.w	r3, r3, #1
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <validate+0x4e>
			res = FR_OK;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d102      	bne.n	800d3b2 <validate+0x5a>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	e000      	b.n	800d3b4 <validate+0x5c>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	6013      	str	r3, [r2, #0]
	return res;
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
	...

0800d3c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d3d6:	f107 0310 	add.w	r3, r7, #16
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff fbc2 	bl	800cb64 <get_ldnumber>
 800d3e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	da01      	bge.n	800d3ec <f_mount+0x28>
 800d3e8:	230b      	movs	r3, #11
 800d3ea:	e02b      	b.n	800d444 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d3ec:	4a17      	ldr	r2, [pc, #92]	; (800d44c <f_mount+0x88>)
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d005      	beq.n	800d408 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d3fc:	69b8      	ldr	r0, [r7, #24]
 800d3fe:	f7fd f88f 	bl	800a520 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	2200      	movs	r2, #0
 800d406:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d002      	beq.n	800d414 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2200      	movs	r2, #0
 800d412:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	490d      	ldr	r1, [pc, #52]	; (800d44c <f_mount+0x88>)
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <f_mount+0x66>
 800d424:	79fb      	ldrb	r3, [r7, #7]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d001      	beq.n	800d42e <f_mount+0x6a>
 800d42a:	2300      	movs	r3, #0
 800d42c:	e00a      	b.n	800d444 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d42e:	f107 010c 	add.w	r1, r7, #12
 800d432:	f107 0308 	add.w	r3, r7, #8
 800d436:	2200      	movs	r2, #0
 800d438:	4618      	mov	r0, r3
 800d43a:	f7ff fc3b 	bl	800ccb4 <find_volume>
 800d43e:	4603      	mov	r3, r0
 800d440:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d442:	7dfb      	ldrb	r3, [r7, #23]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3720      	adds	r7, #32
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	240002f0 	.word	0x240002f0

0800d450 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d450:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d454:	b0a4      	sub	sp, #144	; 0x90
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	4613      	mov	r3, r2
 800d45e:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d101      	bne.n	800d46a <f_open+0x1a>
 800d466:	2309      	movs	r3, #9
 800d468:	e29e      	b.n	800d9a8 <f_open+0x558>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d470:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d472:	79fa      	ldrb	r2, [r7, #7]
 800d474:	f107 0114 	add.w	r1, r7, #20
 800d478:	f107 0308 	add.w	r3, r7, #8
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff fc19 	bl	800ccb4 <find_volume>
 800d482:	4603      	mov	r3, r0
 800d484:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800d488:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f040 8282 	bne.w	800d996 <f_open+0x546>
		dj.obj.fs = fs;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	f107 0318 	add.w	r3, r7, #24
 800d49c:	4611      	mov	r1, r2
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff fa4e 	bl	800c940 <follow_path>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d4aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d11a      	bne.n	800d4e8 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d4b2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d4b6:	b25b      	sxtb	r3, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	da03      	bge.n	800d4c4 <f_open+0x74>
				res = FR_INVALID_NAME;
 800d4bc:	2306      	movs	r3, #6
 800d4be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d4c2:	e011      	b.n	800d4e8 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	f023 0301 	bic.w	r3, r3, #1
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	bf14      	ite	ne
 800d4ce:	2301      	movne	r3, #1
 800d4d0:	2300      	moveq	r3, #0
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	f107 0318 	add.w	r3, r7, #24
 800d4da:	4611      	mov	r1, r2
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fc fed7 	bl	800a290 <chk_lock>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	f003 031c 	and.w	r3, r3, #28
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f000 8109 	beq.w	800d706 <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 800d4f4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d017      	beq.n	800d52c <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d4fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d500:	2b04      	cmp	r3, #4
 800d502:	d10e      	bne.n	800d522 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d504:	f7fc ff20 	bl	800a348 <enq_lock>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d006      	beq.n	800d51c <f_open+0xcc>
 800d50e:	f107 0318 	add.w	r3, r7, #24
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe fe66 	bl	800c1e4 <dir_register>
 800d518:	4603      	mov	r3, r0
 800d51a:	e000      	b.n	800d51e <f_open+0xce>
 800d51c:	2312      	movs	r3, #18
 800d51e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d522:	79fb      	ldrb	r3, [r7, #7]
 800d524:	f043 0308 	orr.w	r3, r3, #8
 800d528:	71fb      	strb	r3, [r7, #7]
 800d52a:	e010      	b.n	800d54e <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d52c:	7fbb      	ldrb	r3, [r7, #30]
 800d52e:	f003 0311 	and.w	r3, r3, #17
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <f_open+0xee>
					res = FR_DENIED;
 800d536:	2307      	movs	r3, #7
 800d538:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d53c:	e007      	b.n	800d54e <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d53e:	79fb      	ldrb	r3, [r7, #7]
 800d540:	f003 0304 	and.w	r3, r3, #4
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <f_open+0xfe>
 800d548:	2308      	movs	r3, #8
 800d54a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d54e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d552:	2b00      	cmp	r3, #0
 800d554:	f040 80f1 	bne.w	800d73a <f_open+0x2ea>
 800d558:	79fb      	ldrb	r3, [r7, #7]
 800d55a:	f003 0308 	and.w	r3, r3, #8
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 80eb 	beq.w	800d73a <f_open+0x2ea>
				dw = GET_FATTIME();
 800d564:	f7fc fa18 	bl	8009998 <get_fattime>
 800d568:	67f8      	str	r0, [r7, #124]	; 0x7c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	2b04      	cmp	r3, #4
 800d570:	f040 8082 	bne.w	800d678 <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d574:	697a      	ldr	r2, [r7, #20]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	691b      	ldr	r3, [r3, #16]
 800d57e:	3334      	adds	r3, #52	; 0x34
 800d580:	4618      	mov	r0, r3
 800d582:	f7fc fc59 	bl	8009e38 <ld_dword>
 800d586:	4602      	mov	r2, r0
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	3338      	adds	r3, #56	; 0x38
 800d592:	4618      	mov	r0, r3
 800d594:	f7fc fc73 	bl	8009e7e <ld_qword>
 800d598:	4602      	mov	r2, r0
 800d59a:	460b      	mov	r3, r1
 800d59c:	68f9      	ldr	r1, [r7, #12]
 800d59e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	3321      	adds	r3, #33	; 0x21
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	f003 0302 	and.w	r3, r3, #2
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	691b      	ldr	r3, [r3, #16]
 800d5be:	3308      	adds	r3, #8
 800d5c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fc fd31 	bl	800a02a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	3314      	adds	r3, #20
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	330c      	adds	r3, #12
 800d5d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fc fd25 	bl	800a02a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	3315      	adds	r3, #21
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	2220      	movs	r2, #32
 800d5f2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	3334      	adds	r3, #52	; 0x34
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fc fd14 	bl	800a02a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d60a:	f04f 0200 	mov.w	r2, #0
 800d60e:	f04f 0300 	mov.w	r3, #0
 800d612:	4608      	mov	r0, r1
 800d614:	f7fc fd35 	bl	800a082 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d620:	f04f 0200 	mov.w	r2, #0
 800d624:	f04f 0300 	mov.w	r3, #0
 800d628:	4608      	mov	r0, r1
 800d62a:	f7fc fd2a 	bl	800a082 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	3321      	adds	r3, #33	; 0x21
 800d634:	2201      	movs	r2, #1
 800d636:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800d638:	f107 0318 	add.w	r3, r7, #24
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fe fb1e 	bl	800bc7e <store_xdir>
 800d642:	4603      	mov	r3, r0
 800d644:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d648:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d174      	bne.n	800d73a <f_open+0x2ea>
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d070      	beq.n	800d73a <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	2200      	movs	r2, #0
 800d660:	4619      	mov	r1, r3
 800d662:	f7fd fbd3 	bl	800ae0c <remove_chain>
 800d666:	4603      	mov	r3, r0
 800d668:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	689a      	ldr	r2, [r3, #8]
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	3a01      	subs	r2, #1
 800d674:	615a      	str	r2, [r3, #20]
 800d676:	e060      	b.n	800d73a <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d67a:	330e      	adds	r3, #14
 800d67c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fc fcd3 	bl	800a02a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d686:	3316      	adds	r3, #22
 800d688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fc fccd 	bl	800a02a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d692:	330b      	adds	r3, #11
 800d694:	2220      	movs	r2, #32
 800d696:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fd ff61 	bl	800b566 <ld_clust>
 800d6a4:	67b8      	str	r0, [r7, #120]	; 0x78
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fd ff79 	bl	800b5a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6b4:	331c      	adds	r3, #28
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fc fcb6 	bl	800a02a <st_dword>
					fs->wflag = 1;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d6c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d037      	beq.n	800d73a <f_open+0x2ea>
						dw = fs->winsect;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ce:	67fb      	str	r3, [r7, #124]	; 0x7c
						res = remove_chain(&dj.obj, cl, 0);
 800d6d0:	f107 0318 	add.w	r3, r7, #24
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fd fb97 	bl	800ae0c <remove_chain>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 800d6e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d126      	bne.n	800d73a <f_open+0x2ea>
							res = move_window(fs, dw);
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fc ff7d 	bl	800a5f0 <move_window>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d700:	3a01      	subs	r2, #1
 800d702:	615a      	str	r2, [r3, #20]
 800d704:	e019      	b.n	800d73a <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d706:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d115      	bne.n	800d73a <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d70e:	7fbb      	ldrb	r3, [r7, #30]
 800d710:	f003 0310 	and.w	r3, r3, #16
 800d714:	2b00      	cmp	r3, #0
 800d716:	d003      	beq.n	800d720 <f_open+0x2d0>
					res = FR_NO_FILE;
 800d718:	2304      	movs	r3, #4
 800d71a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d71e:	e00c      	b.n	800d73a <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d720:	79fb      	ldrb	r3, [r7, #7]
 800d722:	f003 0302 	and.w	r3, r3, #2
 800d726:	2b00      	cmp	r3, #0
 800d728:	d007      	beq.n	800d73a <f_open+0x2ea>
 800d72a:	7fbb      	ldrb	r3, [r7, #30]
 800d72c:	f003 0301 	and.w	r3, r3, #1
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <f_open+0x2ea>
						res = FR_DENIED;
 800d734:	2307      	movs	r3, #7
 800d736:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d73a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d128      	bne.n	800d794 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d742:	79fb      	ldrb	r3, [r7, #7]
 800d744:	f003 0308 	and.w	r3, r3, #8
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <f_open+0x304>
				mode |= FA_MODIFIED;
 800d74c:	79fb      	ldrb	r3, [r7, #7]
 800d74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d752:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800d75c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d762:	79fb      	ldrb	r3, [r7, #7]
 800d764:	f023 0301 	bic.w	r3, r3, #1
 800d768:	2b00      	cmp	r3, #0
 800d76a:	bf14      	ite	ne
 800d76c:	2301      	movne	r3, #1
 800d76e:	2300      	moveq	r3, #0
 800d770:	b2db      	uxtb	r3, r3
 800d772:	461a      	mov	r2, r3
 800d774:	f107 0318 	add.w	r3, r7, #24
 800d778:	4611      	mov	r1, r2
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fc fe06 	bl	800a38c <inc_lock>
 800d780:	4602      	mov	r2, r0
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d102      	bne.n	800d794 <f_open+0x344>
 800d78e:	2302      	movs	r3, #2
 800d790:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d794:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f040 80fc 	bne.w	800d996 <f_open+0x546>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	2b04      	cmp	r3, #4
 800d7a4:	d12c      	bne.n	800d800 <f_open+0x3b0>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d7a6:	6a3a      	ldr	r2, [r7, #32]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d7ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d7b6:	7ffa      	ldrb	r2, [r7, #31]
 800d7b8:	431a      	orrs	r2, r3
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d7be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	3334      	adds	r3, #52	; 0x34
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fc fb34 	bl	8009e38 <ld_dword>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	3338      	adds	r3, #56	; 0x38
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fc fb4e 	bl	8009e7e <ld_qword>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	68f9      	ldr	r1, [r7, #12]
 800d7e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	3321      	adds	r3, #33	; 0x21
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	f003 0302 	and.w	r3, r3, #2
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	71da      	strb	r2, [r3, #7]
 800d7fe:	e014      	b.n	800d82a <f_open+0x3da>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d804:	4611      	mov	r1, r2
 800d806:	4618      	mov	r0, r3
 800d808:	f7fd fead 	bl	800b566 <ld_clust>
 800d80c:	4602      	mov	r2, r0
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d814:	331c      	adds	r3, #28
 800d816:	4618      	mov	r0, r3
 800d818:	f7fc fb0e 	bl	8009e38 <ld_dword>
 800d81c:	4603      	mov	r3, r0
 800d81e:	461a      	mov	r2, r3
 800d820:	f04f 0300 	mov.w	r3, #0
 800d824:	68f9      	ldr	r1, [r7, #12]
 800d826:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2200      	movs	r2, #0
 800d82e:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	88da      	ldrh	r2, [r3, #6]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	79fa      	ldrb	r2, [r7, #7]
 800d842:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d854:	68f9      	ldr	r1, [r7, #12]
 800d856:	f04f 0200 	mov.w	r2, #0
 800d85a:	f04f 0300 	mov.w	r3, #0
 800d85e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	3354      	adds	r3, #84	; 0x54
 800d866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d86a:	2100      	movs	r1, #0
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fc fcb1 	bl	800a1d4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	f003 0320 	and.w	r3, r3, #32
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f000 808c 	beq.w	800d996 <f_open+0x546>
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d884:	4313      	orrs	r3, r2
 800d886:	f000 8086 	beq.w	800d996 <f_open+0x546>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d890:	68f9      	ldr	r1, [r7, #12]
 800d892:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	895b      	ldrh	r3, [r3, #10]
 800d89a:	025b      	lsls	r3, r3, #9
 800d89c:	677b      	str	r3, [r7, #116]	; 0x74
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d8ac:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800d8b0:	e022      	b.n	800d8f8 <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fc ff55 	bl	800a768 <get_fat>
 800d8be:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 800d8c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d802      	bhi.n	800d8d0 <f_open+0x480>
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d8d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8d8:	d102      	bne.n	800d8e0 <f_open+0x490>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d8e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	f04f 0300 	mov.w	r3, #0
 800d8e8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d8ec:	ebb0 0802 	subs.w	r8, r0, r2
 800d8f0:	eb61 0903 	sbc.w	r9, r1, r3
 800d8f4:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
 800d8f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d109      	bne.n	800d914 <f_open+0x4c4>
 800d900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d902:	4618      	mov	r0, r3
 800d904:	f04f 0100 	mov.w	r1, #0
 800d908:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d90c:	4299      	cmp	r1, r3
 800d90e:	bf08      	it	eq
 800d910:	4290      	cmpeq	r0, r2
 800d912:	d3ce      	bcc.n	800d8b2 <f_open+0x462>
				}
				fp->clust = clst;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d91a:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d91c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d920:	2b00      	cmp	r3, #0
 800d922:	d138      	bne.n	800d996 <f_open+0x546>
 800d924:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d928:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d92c:	f04f 0100 	mov.w	r1, #0
 800d930:	ea02 0400 	and.w	r4, r2, r0
 800d934:	ea03 0501 	and.w	r5, r3, r1
 800d938:	ea54 0305 	orrs.w	r3, r4, r5
 800d93c:	d02b      	beq.n	800d996 <f_open+0x546>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d944:	4618      	mov	r0, r3
 800d946:	f7fc feef 	bl	800a728 <clust2sect>
 800d94a:	6738      	str	r0, [r7, #112]	; 0x70
 800d94c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d103      	bne.n	800d95a <f_open+0x50a>
						res = FR_INT_ERR;
 800d952:	2302      	movs	r3, #2
 800d954:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d958:	e01d      	b.n	800d996 <f_open+0x546>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d95a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d95e:	f04f 0200 	mov.w	r2, #0
 800d962:	f04f 0300 	mov.w	r3, #0
 800d966:	0a42      	lsrs	r2, r0, #9
 800d968:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d96c:	0a4b      	lsrs	r3, r1, #9
 800d96e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d970:	441a      	add	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	7858      	ldrb	r0, [r3, #1]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d984:	2301      	movs	r3, #1
 800d986:	f7fc f9e1 	bl	8009d4c <disk_read>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <f_open+0x546>
 800d990:	2301      	movs	r3, #1
 800d992:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d996:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d002      	beq.n	800d9a4 <f_open+0x554>
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d9a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3790      	adds	r7, #144	; 0x90
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800d9b2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d9b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9b6:	b090      	sub	sp, #64	; 0x40
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
 800d9c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f107 0214 	add.w	r2, r7, #20
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7ff fcbf 	bl	800d358 <validate>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d9e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d108      	bne.n	800d9fa <f_read+0x48>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d9ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d9f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d002      	beq.n	800da00 <f_read+0x4e>
 800d9fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d9fe:	e149      	b.n	800dc94 <f_read+0x2e2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d101      	bne.n	800da12 <f_read+0x60>
 800da0e:	2307      	movs	r3, #7
 800da10:	e140      	b.n	800dc94 <f_read+0x2e2>
	remain = fp->obj.objsize - fp->fptr;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800da1e:	ebb0 0a02 	subs.w	sl, r0, r2
 800da22:	eb61 0b03 	sbc.w	fp, r1, r3
 800da26:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	461a      	mov	r2, r3
 800da2e:	f04f 0300 	mov.w	r3, #0
 800da32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800da36:	4299      	cmp	r1, r3
 800da38:	bf08      	it	eq
 800da3a:	4290      	cmpeq	r0, r2
 800da3c:	f080 8125 	bcs.w	800dc8a <f_read+0x2d8>
 800da40:	6a3b      	ldr	r3, [r7, #32]
 800da42:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800da44:	e121      	b.n	800dc8a <f_read+0x2d8>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800da4c:	f240 10ff 	movw	r0, #511	; 0x1ff
 800da50:	f04f 0100 	mov.w	r1, #0
 800da54:	ea02 0400 	and.w	r4, r2, r0
 800da58:	ea03 0501 	and.w	r5, r3, r1
 800da5c:	ea54 0305 	orrs.w	r3, r4, r5
 800da60:	f040 80d9 	bne.w	800dc16 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800da6a:	f04f 0200 	mov.w	r2, #0
 800da6e:	f04f 0300 	mov.w	r3, #0
 800da72:	0a42      	lsrs	r2, r0, #9
 800da74:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800da78:	0a4b      	lsrs	r3, r1, #9
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	895b      	ldrh	r3, [r3, #10]
 800da7e:	3b01      	subs	r3, #1
 800da80:	4013      	ands	r3, r2
 800da82:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d132      	bne.n	800daf0 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800da90:	4313      	orrs	r3, r2
 800da92:	d103      	bne.n	800da9c <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	63bb      	str	r3, [r7, #56]	; 0x38
 800da9a:	e013      	b.n	800dac4 <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d007      	beq.n	800dab4 <f_read+0x102>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f7fd fb63 	bl	800b176 <clmt_clust>
 800dab0:	63b8      	str	r0, [r7, #56]	; 0x38
 800dab2:	e007      	b.n	800dac4 <f_read+0x112>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daba:	4619      	mov	r1, r3
 800dabc:	4610      	mov	r0, r2
 800dabe:	f7fc fe53 	bl	800a768 <get_fat>
 800dac2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d805      	bhi.n	800dad6 <f_read+0x124>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2202      	movs	r2, #2
 800dace:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dad2:	2302      	movs	r3, #2
 800dad4:	e0de      	b.n	800dc94 <f_read+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dadc:	d105      	bne.n	800daea <f_read+0x138>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dae6:	2301      	movs	r3, #1
 800dae8:	e0d4      	b.n	800dc94 <f_read+0x2e2>
				fp->clust = clst;				/* Update current cluster */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daee:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800daf0:	697a      	ldr	r2, [r7, #20]
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf6:	4619      	mov	r1, r3
 800daf8:	4610      	mov	r0, r2
 800dafa:	f7fc fe15 	bl	800a728 <clust2sect>
 800dafe:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d105      	bne.n	800db12 <f_read+0x160>
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2202      	movs	r2, #2
 800db0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800db0e:	2302      	movs	r3, #2
 800db10:	e0c0      	b.n	800dc94 <f_read+0x2e2>
			sect += csect;
 800db12:	69ba      	ldr	r2, [r7, #24]
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	4413      	add	r3, r2
 800db18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	0a5b      	lsrs	r3, r3, #9
 800db1e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 800db20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db22:	2b00      	cmp	r3, #0
 800db24:	d03b      	beq.n	800db9e <f_read+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800db26:	69fa      	ldr	r2, [r7, #28]
 800db28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2a:	4413      	add	r3, r2
 800db2c:	697a      	ldr	r2, [r7, #20]
 800db2e:	8952      	ldrh	r2, [r2, #10]
 800db30:	4293      	cmp	r3, r2
 800db32:	d905      	bls.n	800db40 <f_read+0x18e>
					cc = fs->csize - csect;
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	895b      	ldrh	r3, [r3, #10]
 800db38:	461a      	mov	r2, r3
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	7858      	ldrb	r0, [r3, #1]
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	69ba      	ldr	r2, [r7, #24]
 800db48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db4a:	f7fc f8ff 	bl	8009d4c <disk_read>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d005      	beq.n	800db60 <f_read+0x1ae>
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2201      	movs	r2, #1
 800db58:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800db5c:	2301      	movs	r3, #1
 800db5e:	e099      	b.n	800dc94 <f_read+0x2e2>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db66:	b25b      	sxtb	r3, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	da14      	bge.n	800db96 <f_read+0x1e4>
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db76:	429a      	cmp	r2, r3
 800db78:	d90d      	bls.n	800db96 <f_read+0x1e4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	025b      	lsls	r3, r3, #9
 800db84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db86:	18d0      	adds	r0, r2, r3
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	3354      	adds	r3, #84	; 0x54
 800db8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db90:	4619      	mov	r1, r3
 800db92:	f7fc fafe 	bl	800a192 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	025b      	lsls	r3, r3, #9
 800db9a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800db9c:	e059      	b.n	800dc52 <f_read+0x2a0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dba2:	69ba      	ldr	r2, [r7, #24]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d033      	beq.n	800dc10 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbae:	b25b      	sxtb	r3, r3
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	da1b      	bge.n	800dbec <f_read+0x23a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	7858      	ldrb	r0, [r3, #1]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	f7fc f8e2 	bl	8009d8c <disk_write>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d005      	beq.n	800dbda <f_read+0x228>
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e05c      	b.n	800dc94 <f_read+0x2e2>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	7858      	ldrb	r0, [r3, #1]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	69ba      	ldr	r2, [r7, #24]
 800dbfa:	f7fc f8a7 	bl	8009d4c <disk_read>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d005      	beq.n	800dc10 <f_read+0x25e>
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e041      	b.n	800dc94 <f_read+0x2e2>
			}
#endif
			fp->sect = sect;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	69ba      	ldr	r2, [r7, #24]
 800dc14:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc22:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dc26:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dc28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d901      	bls.n	800dc34 <f_read+0x282>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dc40:	4613      	mov	r3, r2
 800dc42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc46:	440b      	add	r3, r1
 800dc48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc4e:	f7fc faa0 	bl	800a192 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dc52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc56:	4413      	add	r3, r2
 800dc58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800dc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc62:	461a      	mov	r2, r3
 800dc64:	f04f 0300 	mov.w	r3, #0
 800dc68:	eb10 0802 	adds.w	r8, r0, r2
 800dc6c:	eb41 0903 	adc.w	r9, r1, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7c:	441a      	add	r2, r3
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	601a      	str	r2, [r3, #0]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f47f aeda 	bne.w	800da46 <f_read+0x94>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3740      	adds	r7, #64	; 0x40
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dc9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dc9e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800dca2:	b08c      	sub	sp, #48	; 0x30
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f107 0210 	add.w	r2, r7, #16
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff fb49 	bl	800d358 <validate>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d108      	bne.n	800dce6 <f_write+0x48>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dcda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dcde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <f_write+0x4e>
 800dce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcea:	e18c      	b.n	800e006 <f_write+0x368>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcf2:	f003 0302 	and.w	r3, r3, #2
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d101      	bne.n	800dcfe <f_write+0x60>
 800dcfa:	2307      	movs	r3, #7
 800dcfc:	e183      	b.n	800e006 <f_write+0x368>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b04      	cmp	r3, #4
 800dd04:	f000 816f 	beq.w	800dfe6 <f_write+0x348>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	18d1      	adds	r1, r2, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd18:	4613      	mov	r3, r2
 800dd1a:	4299      	cmp	r1, r3
 800dd1c:	f080 8163 	bcs.w	800dfe6 <f_write+0x348>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd26:	4613      	mov	r3, r2
 800dd28:	43db      	mvns	r3, r3
 800dd2a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dd2c:	e15b      	b.n	800dfe6 <f_write+0x348>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd34:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dd38:	f04f 0100 	mov.w	r1, #0
 800dd3c:	ea02 0400 	and.w	r4, r2, r0
 800dd40:	ea03 0501 	and.w	r5, r3, r1
 800dd44:	ea54 0305 	orrs.w	r3, r4, r5
 800dd48:	f040 80fb 	bne.w	800df42 <f_write+0x2a4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800dd52:	f04f 0200 	mov.w	r2, #0
 800dd56:	f04f 0300 	mov.w	r3, #0
 800dd5a:	0a42      	lsrs	r2, r0, #9
 800dd5c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800dd60:	0a4b      	lsrs	r3, r1, #9
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	895b      	ldrh	r3, [r3, #10]
 800dd66:	3b01      	subs	r3, #1
 800dd68:	4013      	ands	r3, r2
 800dd6a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d146      	bne.n	800de00 <f_write+0x162>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	d10c      	bne.n	800dd96 <f_write+0xf8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d11a      	bne.n	800ddbe <f_write+0x120>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fd f8f1 	bl	800af74 <create_chain>
 800dd92:	62b8      	str	r0, [r7, #40]	; 0x28
 800dd94:	e013      	b.n	800ddbe <f_write+0x120>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d007      	beq.n	800ddae <f_write+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f7fd f9e6 	bl	800b176 <clmt_clust>
 800ddaa:	62b8      	str	r0, [r7, #40]	; 0x28
 800ddac:	e007      	b.n	800ddbe <f_write+0x120>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	4610      	mov	r0, r2
 800ddb8:	f7fd f8dc 	bl	800af74 <create_chain>
 800ddbc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 8115 	beq.w	800dff0 <f_write+0x352>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ddc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d105      	bne.n	800ddd8 <f_write+0x13a>
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2202      	movs	r2, #2
 800ddd0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	e116      	b.n	800e006 <f_write+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ddd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddde:	d105      	bne.n	800ddec <f_write+0x14e>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dde8:	2301      	movs	r3, #1
 800ddea:	e10c      	b.n	800e006 <f_write+0x368>
				fp->clust = clst;			/* Update current cluster */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddf0:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <f_write+0x162>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddfe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de06:	b25b      	sxtb	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	da1b      	bge.n	800de44 <f_write+0x1a6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	7858      	ldrb	r0, [r3, #1]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de1a:	2301      	movs	r3, #1
 800de1c:	f7fb ffb6 	bl	8009d8c <disk_write>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d005      	beq.n	800de32 <f_write+0x194>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2201      	movs	r2, #1
 800de2a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800de2e:	2301      	movs	r3, #1
 800de30:	e0e9      	b.n	800e006 <f_write+0x368>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800de44:	693a      	ldr	r2, [r7, #16]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de4a:	4619      	mov	r1, r3
 800de4c:	4610      	mov	r0, r2
 800de4e:	f7fc fc6b 	bl	800a728 <clust2sect>
 800de52:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d105      	bne.n	800de66 <f_write+0x1c8>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2202      	movs	r2, #2
 800de5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800de62:	2302      	movs	r3, #2
 800de64:	e0cf      	b.n	800e006 <f_write+0x368>
			sect += csect;
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	4413      	add	r3, r2
 800de6c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	0a5b      	lsrs	r3, r3, #9
 800de72:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800de74:	6a3b      	ldr	r3, [r7, #32]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d03f      	beq.n	800defa <f_write+0x25c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800de7a:	69ba      	ldr	r2, [r7, #24]
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	4413      	add	r3, r2
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	8952      	ldrh	r2, [r2, #10]
 800de84:	4293      	cmp	r3, r2
 800de86:	d905      	bls.n	800de94 <f_write+0x1f6>
					cc = fs->csize - csect;
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	895b      	ldrh	r3, [r3, #10]
 800de8c:	461a      	mov	r2, r3
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	7858      	ldrb	r0, [r3, #1]
 800de98:	6a3b      	ldr	r3, [r7, #32]
 800de9a:	697a      	ldr	r2, [r7, #20]
 800de9c:	69f9      	ldr	r1, [r7, #28]
 800de9e:	f7fb ff75 	bl	8009d8c <disk_write>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d005      	beq.n	800deb4 <f_write+0x216>
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800deb0:	2301      	movs	r3, #1
 800deb2:	e0a8      	b.n	800e006 <f_write+0x368>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	6a3a      	ldr	r2, [r7, #32]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d917      	bls.n	800def2 <f_write+0x254>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	025b      	lsls	r3, r3, #9
 800ded2:	69fa      	ldr	r2, [r7, #28]
 800ded4:	4413      	add	r3, r2
 800ded6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800deda:	4619      	mov	r1, r3
 800dedc:	f7fc f959 	bl	800a192 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deea:	b2da      	uxtb	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	025b      	lsls	r3, r3, #9
 800def6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800def8:	e04a      	b.n	800df90 <f_write+0x2f2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	429a      	cmp	r2, r3
 800df02:	d01b      	beq.n	800df3c <f_write+0x29e>
				fp->fptr < fp->obj.objsize &&
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800df10:	4299      	cmp	r1, r3
 800df12:	bf08      	it	eq
 800df14:	4290      	cmpeq	r0, r2
 800df16:	d211      	bcs.n	800df3c <f_write+0x29e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	7858      	ldrb	r0, [r3, #1]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800df22:	2301      	movs	r3, #1
 800df24:	697a      	ldr	r2, [r7, #20]
 800df26:	f7fb ff11 	bl	8009d4c <disk_read>
 800df2a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d005      	beq.n	800df3c <f_write+0x29e>
					ABORT(fs, FR_DISK_ERR);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800df38:	2301      	movs	r3, #1
 800df3a:	e064      	b.n	800e006 <f_write+0x368>
			}
#endif
			fp->sect = sect;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	697a      	ldr	r2, [r7, #20]
 800df40:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df48:	4613      	mov	r3, r2
 800df4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800df52:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800df54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d901      	bls.n	800df60 <f_write+0x2c2>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df6c:	4613      	mov	r3, r2
 800df6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df72:	440b      	add	r3, r1
 800df74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df76:	69f9      	ldr	r1, [r7, #28]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7fc f90a 	bl	800a192 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800df90:	69fa      	ldr	r2, [r7, #28]
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	4413      	add	r3, r2
 800df96:	61fb      	str	r3, [r7, #28]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800df9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	f04f 0300 	mov.w	r3, #0
 800dfa6:	eb10 0802 	adds.w	r8, r0, r2
 800dfaa:	eb41 0903 	adc.w	r9, r1, r3
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dfba:	68f9      	ldr	r1, [r7, #12]
 800dfbc:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800dfc0:	428b      	cmp	r3, r1
 800dfc2:	bf08      	it	eq
 800dfc4:	4282      	cmpeq	r2, r0
 800dfc6:	d201      	bcs.n	800dfcc <f_write+0x32e>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	68f9      	ldr	r1, [r7, #12]
 800dfce:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd8:	441a      	add	r2, r3
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe2:	1ad3      	subs	r3, r2, r3
 800dfe4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f47f aea0 	bne.w	800dd2e <f_write+0x90>
 800dfee:	e000      	b.n	800dff2 <f_write+0x354>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dff0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3730      	adds	r7, #48	; 0x30
 800e00a:	46bd      	mov	sp, r7
 800e00c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e010 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b09c      	sub	sp, #112	; 0x70
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e01e:	4611      	mov	r1, r2
 800e020:	4618      	mov	r0, r3
 800e022:	f7ff f999 	bl	800d358 <validate>
 800e026:	4603      	mov	r3, r0
 800e028:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800e02c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e030:	2b00      	cmp	r3, #0
 800e032:	f040 8105 	bne.w	800e240 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 80fd 	beq.w	800e240 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e04c:	b25b      	sxtb	r3, r3
 800e04e:	2b00      	cmp	r3, #0
 800e050:	da17      	bge.n	800e082 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e054:	7858      	ldrb	r0, [r3, #1]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e060:	2301      	movs	r3, #1
 800e062:	f7fb fe93 	bl	8009d8c <disk_write>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <f_sync+0x60>
 800e06c:	2301      	movs	r3, #1
 800e06e:	e0e9      	b.n	800e244 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e082:	f7fb fc89 	bl	8009998 <get_fattime>
 800e086:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2b04      	cmp	r3, #4
 800e08e:	f040 808c 	bne.w	800e1aa <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4618      	mov	r0, r3
 800e096:	f7fc fe59 	bl	800ad4c <fill_first_frag>
 800e09a:	4603      	mov	r3, r0
 800e09c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e0a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10a      	bne.n	800e0be <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	f7fc fe79 	bl	800adaa <fill_last_frag>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800e0be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	f040 80bc 	bne.w	800e240 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	f107 0308 	add.w	r3, r7, #8
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fd fd99 	bl	800bc08 <load_obj_dir>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800e0dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f040 80ad 	bne.w	800e240 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e0e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	781a      	ldrb	r2, [r3, #0]
 800e0ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0f0:	691b      	ldr	r3, [r3, #16]
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	f042 0220 	orr.w	r2, r2, #32
 800e0f8:	b2d2      	uxtb	r2, r2
 800e0fa:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	79da      	ldrb	r2, [r3, #7]
 800e100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e102:	691b      	ldr	r3, [r3, #16]
 800e104:	3321      	adds	r3, #33	; 0x21
 800e106:	f042 0201 	orr.w	r2, r2, #1
 800e10a:	b2d2      	uxtb	r2, r2
 800e10c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e10e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	689b      	ldr	r3, [r3, #8]
 800e11a:	4619      	mov	r1, r3
 800e11c:	4610      	mov	r0, r2
 800e11e:	f7fb ff84 	bl	800a02a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e130:	4608      	mov	r0, r1
 800e132:	f7fb ffa6 	bl	800a082 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e144:	4608      	mov	r0, r1
 800e146:	f7fb ff9c 	bl	800a082 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e14a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e14c:	691b      	ldr	r3, [r3, #16]
 800e14e:	330c      	adds	r3, #12
 800e150:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e152:	4618      	mov	r0, r3
 800e154:	f7fb ff69 	bl	800a02a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	3315      	adds	r3, #21
 800e15e:	2200      	movs	r2, #0
 800e160:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	3310      	adds	r3, #16
 800e168:	2100      	movs	r1, #0
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fb ff5d 	bl	800a02a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e170:	f107 0308 	add.w	r3, r7, #8
 800e174:	4618      	mov	r0, r3
 800e176:	f7fd fd82 	bl	800bc7e <store_xdir>
 800e17a:	4603      	mov	r3, r0
 800e17c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800e180:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e184:	2b00      	cmp	r3, #0
 800e186:	d15b      	bne.n	800e240 <f_sync+0x230>
							res = sync_fs(fs);
 800e188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fc fa5e 	bl	800a64c <sync_fs>
 800e190:	4603      	mov	r3, r0
 800e192:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e19c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800e1a8:	e04a      	b.n	800e240 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e1aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	4610      	mov	r0, r2
 800e1b4:	f7fc fa1c 	bl	800a5f0 <move_window>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e1be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d13c      	bne.n	800e240 <f_sync+0x230>
					dir = fp->dir_ptr;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1ca:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e1cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1ce:	330b      	adds	r3, #11
 800e1d0:	781a      	ldrb	r2, [r3, #0]
 800e1d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1d4:	330b      	adds	r3, #11
 800e1d6:	f042 0220 	orr.w	r2, r2, #32
 800e1da:	b2d2      	uxtb	r2, r2
 800e1dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6818      	ldr	r0, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e1ea:	f7fd f9db 	bl	800b5a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e1ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1f0:	f103 001c 	add.w	r0, r3, #28
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	f7fb ff14 	bl	800a02a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e204:	3316      	adds	r3, #22
 800e206:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fb ff0e 	bl	800a02a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e20e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e210:	3312      	adds	r3, #18
 800e212:	2100      	movs	r1, #0
 800e214:	4618      	mov	r0, r3
 800e216:	f7fb feed 	bl	8009ff4 <st_word>
					fs->wflag = 1;
 800e21a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e21c:	2201      	movs	r2, #1
 800e21e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e222:	4618      	mov	r0, r3
 800e224:	f7fc fa12 	bl	800a64c <sync_fs>
 800e228:	4603      	mov	r3, r0
 800e22a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e240:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800e244:	4618      	mov	r0, r3
 800e246:	3770      	adds	r7, #112	; 0x70
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7ff fedb 	bl	800e010 <f_sync>
 800e25a:	4603      	mov	r3, r0
 800e25c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e25e:	7bfb      	ldrb	r3, [r7, #15]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d118      	bne.n	800e296 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f107 0208 	add.w	r2, r7, #8
 800e26a:	4611      	mov	r1, r2
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7ff f873 	bl	800d358 <validate>
 800e272:	4603      	mov	r3, r0
 800e274:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e276:	7bfb      	ldrb	r3, [r7, #15]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10c      	bne.n	800e296 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	4618      	mov	r0, r3
 800e282:	f7fc f911 	bl	800a4a8 <dec_lock>
 800e286:	4603      	mov	r3, r0
 800e288:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d102      	bne.n	800e296 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e296:	7bfb      	ldrb	r3, [r7, #15]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b087      	sub	sp, #28
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e2b6:	4b1f      	ldr	r3, [pc, #124]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2b8:	7a5b      	ldrb	r3, [r3, #9]
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d131      	bne.n	800e324 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e2c0:	4b1c      	ldr	r3, [pc, #112]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2c2:	7a5b      	ldrb	r3, [r3, #9]
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	4b1a      	ldr	r3, [pc, #104]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e2ce:	4b19      	ldr	r3, [pc, #100]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2d0:	7a5b      	ldrb	r3, [r3, #9]
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	4a17      	ldr	r2, [pc, #92]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4413      	add	r3, r2
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e2de:	4b15      	ldr	r3, [pc, #84]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2e0:	7a5b      	ldrb	r3, [r3, #9]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	4b13      	ldr	r3, [pc, #76]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2e8:	4413      	add	r3, r2
 800e2ea:	79fa      	ldrb	r2, [r7, #7]
 800e2ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e2ee:	4b11      	ldr	r3, [pc, #68]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2f0:	7a5b      	ldrb	r3, [r3, #9]
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	1c5a      	adds	r2, r3, #1
 800e2f6:	b2d1      	uxtb	r1, r2
 800e2f8:	4a0e      	ldr	r2, [pc, #56]	; (800e334 <FATFS_LinkDriverEx+0x94>)
 800e2fa:	7251      	strb	r1, [r2, #9]
 800e2fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e2fe:	7dbb      	ldrb	r3, [r7, #22]
 800e300:	3330      	adds	r3, #48	; 0x30
 800e302:	b2da      	uxtb	r2, r3
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	3301      	adds	r3, #1
 800e30c:	223a      	movs	r2, #58	; 0x3a
 800e30e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	3302      	adds	r3, #2
 800e314:	222f      	movs	r2, #47	; 0x2f
 800e316:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	3303      	adds	r3, #3
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e320:	2300      	movs	r3, #0
 800e322:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e324:	7dfb      	ldrb	r3, [r7, #23]
}
 800e326:	4618      	mov	r0, r3
 800e328:	371c      	adds	r7, #28
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	24001748 	.word	0x24001748

0800e338 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e342:	2200      	movs	r2, #0
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7ff ffaa 	bl	800e2a0 <FATFS_LinkDriverEx>
 800e34c:	4603      	mov	r3, r0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	6039      	str	r1, [r7, #0]
 800e362:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e364:	88fb      	ldrh	r3, [r7, #6]
 800e366:	2b7f      	cmp	r3, #127	; 0x7f
 800e368:	d802      	bhi.n	800e370 <ff_convert+0x18>
		c = chr;
 800e36a:	88fb      	ldrh	r3, [r7, #6]
 800e36c:	81fb      	strh	r3, [r7, #14]
 800e36e:	e025      	b.n	800e3bc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d00b      	beq.n	800e38e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e376:	88fb      	ldrh	r3, [r7, #6]
 800e378:	2bff      	cmp	r3, #255	; 0xff
 800e37a:	d805      	bhi.n	800e388 <ff_convert+0x30>
 800e37c:	88fb      	ldrh	r3, [r7, #6]
 800e37e:	3b80      	subs	r3, #128	; 0x80
 800e380:	4a12      	ldr	r2, [pc, #72]	; (800e3cc <ff_convert+0x74>)
 800e382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e386:	e000      	b.n	800e38a <ff_convert+0x32>
 800e388:	2300      	movs	r3, #0
 800e38a:	81fb      	strh	r3, [r7, #14]
 800e38c:	e016      	b.n	800e3bc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e38e:	2300      	movs	r3, #0
 800e390:	81fb      	strh	r3, [r7, #14]
 800e392:	e009      	b.n	800e3a8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e394:	89fb      	ldrh	r3, [r7, #14]
 800e396:	4a0d      	ldr	r2, [pc, #52]	; (800e3cc <ff_convert+0x74>)
 800e398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e39c:	88fa      	ldrh	r2, [r7, #6]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d006      	beq.n	800e3b0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e3a2:	89fb      	ldrh	r3, [r7, #14]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	81fb      	strh	r3, [r7, #14]
 800e3a8:	89fb      	ldrh	r3, [r7, #14]
 800e3aa:	2b7f      	cmp	r3, #127	; 0x7f
 800e3ac:	d9f2      	bls.n	800e394 <ff_convert+0x3c>
 800e3ae:	e000      	b.n	800e3b2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e3b0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e3b2:	89fb      	ldrh	r3, [r7, #14]
 800e3b4:	3380      	adds	r3, #128	; 0x80
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e3bc:	89fb      	ldrh	r3, [r7, #14]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3714      	adds	r7, #20
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	0800f6f0 	.word	0x0800f6f0

0800e3d0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b087      	sub	sp, #28
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e3da:	88fb      	ldrh	r3, [r7, #6]
 800e3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3e0:	d201      	bcs.n	800e3e6 <ff_wtoupper+0x16>
 800e3e2:	4b3e      	ldr	r3, [pc, #248]	; (800e4dc <ff_wtoupper+0x10c>)
 800e3e4:	e000      	b.n	800e3e8 <ff_wtoupper+0x18>
 800e3e6:	4b3e      	ldr	r3, [pc, #248]	; (800e4e0 <ff_wtoupper+0x110>)
 800e3e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	1c9a      	adds	r2, r3, #2
 800e3ee:	617a      	str	r2, [r7, #20]
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e3f4:	8a7b      	ldrh	r3, [r7, #18]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d068      	beq.n	800e4cc <ff_wtoupper+0xfc>
 800e3fa:	88fa      	ldrh	r2, [r7, #6]
 800e3fc:	8a7b      	ldrh	r3, [r7, #18]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d364      	bcc.n	800e4cc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	1c9a      	adds	r2, r3, #2
 800e406:	617a      	str	r2, [r7, #20]
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	823b      	strh	r3, [r7, #16]
 800e40c:	8a3b      	ldrh	r3, [r7, #16]
 800e40e:	0a1b      	lsrs	r3, r3, #8
 800e410:	81fb      	strh	r3, [r7, #14]
 800e412:	8a3b      	ldrh	r3, [r7, #16]
 800e414:	b2db      	uxtb	r3, r3
 800e416:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e418:	88fa      	ldrh	r2, [r7, #6]
 800e41a:	8a79      	ldrh	r1, [r7, #18]
 800e41c:	8a3b      	ldrh	r3, [r7, #16]
 800e41e:	440b      	add	r3, r1
 800e420:	429a      	cmp	r2, r3
 800e422:	da49      	bge.n	800e4b8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e424:	89fb      	ldrh	r3, [r7, #14]
 800e426:	2b08      	cmp	r3, #8
 800e428:	d84f      	bhi.n	800e4ca <ff_wtoupper+0xfa>
 800e42a:	a201      	add	r2, pc, #4	; (adr r2, 800e430 <ff_wtoupper+0x60>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e455 	.word	0x0800e455
 800e434:	0800e467 	.word	0x0800e467
 800e438:	0800e47d 	.word	0x0800e47d
 800e43c:	0800e485 	.word	0x0800e485
 800e440:	0800e48d 	.word	0x0800e48d
 800e444:	0800e495 	.word	0x0800e495
 800e448:	0800e49d 	.word	0x0800e49d
 800e44c:	0800e4a5 	.word	0x0800e4a5
 800e450:	0800e4ad 	.word	0x0800e4ad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e454:	88fa      	ldrh	r2, [r7, #6]
 800e456:	8a7b      	ldrh	r3, [r7, #18]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	005b      	lsls	r3, r3, #1
 800e45c:	697a      	ldr	r2, [r7, #20]
 800e45e:	4413      	add	r3, r2
 800e460:	881b      	ldrh	r3, [r3, #0]
 800e462:	80fb      	strh	r3, [r7, #6]
 800e464:	e027      	b.n	800e4b6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e466:	88fa      	ldrh	r2, [r7, #6]
 800e468:	8a7b      	ldrh	r3, [r7, #18]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	f003 0301 	and.w	r3, r3, #1
 800e472:	b29b      	uxth	r3, r3
 800e474:	88fa      	ldrh	r2, [r7, #6]
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	80fb      	strh	r3, [r7, #6]
 800e47a:	e01c      	b.n	800e4b6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e47c:	88fb      	ldrh	r3, [r7, #6]
 800e47e:	3b10      	subs	r3, #16
 800e480:	80fb      	strh	r3, [r7, #6]
 800e482:	e018      	b.n	800e4b6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e484:	88fb      	ldrh	r3, [r7, #6]
 800e486:	3b20      	subs	r3, #32
 800e488:	80fb      	strh	r3, [r7, #6]
 800e48a:	e014      	b.n	800e4b6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e48c:	88fb      	ldrh	r3, [r7, #6]
 800e48e:	3b30      	subs	r3, #48	; 0x30
 800e490:	80fb      	strh	r3, [r7, #6]
 800e492:	e010      	b.n	800e4b6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e494:	88fb      	ldrh	r3, [r7, #6]
 800e496:	3b1a      	subs	r3, #26
 800e498:	80fb      	strh	r3, [r7, #6]
 800e49a:	e00c      	b.n	800e4b6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e49c:	88fb      	ldrh	r3, [r7, #6]
 800e49e:	3308      	adds	r3, #8
 800e4a0:	80fb      	strh	r3, [r7, #6]
 800e4a2:	e008      	b.n	800e4b6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e4a4:	88fb      	ldrh	r3, [r7, #6]
 800e4a6:	3b50      	subs	r3, #80	; 0x50
 800e4a8:	80fb      	strh	r3, [r7, #6]
 800e4aa:	e004      	b.n	800e4b6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e4ac:	88fb      	ldrh	r3, [r7, #6]
 800e4ae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e4b2:	80fb      	strh	r3, [r7, #6]
 800e4b4:	bf00      	nop
			}
			break;
 800e4b6:	e008      	b.n	800e4ca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e4b8:	89fb      	ldrh	r3, [r7, #14]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d195      	bne.n	800e3ea <ff_wtoupper+0x1a>
 800e4be:	8a3b      	ldrh	r3, [r7, #16]
 800e4c0:	005b      	lsls	r3, r3, #1
 800e4c2:	697a      	ldr	r2, [r7, #20]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e4c8:	e78f      	b.n	800e3ea <ff_wtoupper+0x1a>
			break;
 800e4ca:	bf00      	nop
	}

	return chr;
 800e4cc:	88fb      	ldrh	r3, [r7, #6]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	371c      	adds	r7, #28
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	0800f7f0 	.word	0x0800f7f0
 800e4e0:	0800f9e4 	.word	0x0800f9e4

0800e4e4 <_Znwj>:
 800e4e4:	2801      	cmp	r0, #1
 800e4e6:	bf38      	it	cc
 800e4e8:	2001      	movcc	r0, #1
 800e4ea:	b510      	push	{r4, lr}
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	f000 f844 	bl	800e57c <malloc>
 800e4f4:	b930      	cbnz	r0, 800e504 <_Znwj+0x20>
 800e4f6:	f000 f807 	bl	800e508 <_ZSt15get_new_handlerv>
 800e4fa:	b908      	cbnz	r0, 800e500 <_Znwj+0x1c>
 800e4fc:	f000 f80c 	bl	800e518 <abort>
 800e500:	4780      	blx	r0
 800e502:	e7f4      	b.n	800e4ee <_Znwj+0xa>
 800e504:	bd10      	pop	{r4, pc}
	...

0800e508 <_ZSt15get_new_handlerv>:
 800e508:	4b02      	ldr	r3, [pc, #8]	; (800e514 <_ZSt15get_new_handlerv+0xc>)
 800e50a:	6818      	ldr	r0, [r3, #0]
 800e50c:	f3bf 8f5b 	dmb	ish
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	24001754 	.word	0x24001754

0800e518 <abort>:
 800e518:	b508      	push	{r3, lr}
 800e51a:	2006      	movs	r0, #6
 800e51c:	f000 f950 	bl	800e7c0 <raise>
 800e520:	2001      	movs	r0, #1
 800e522:	f7f3 fd1b 	bl	8001f5c <_exit>
	...

0800e528 <__errno>:
 800e528:	4b01      	ldr	r3, [pc, #4]	; (800e530 <__errno+0x8>)
 800e52a:	6818      	ldr	r0, [r3, #0]
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	24000010 	.word	0x24000010

0800e534 <__libc_init_array>:
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	4d0d      	ldr	r5, [pc, #52]	; (800e56c <__libc_init_array+0x38>)
 800e538:	4c0d      	ldr	r4, [pc, #52]	; (800e570 <__libc_init_array+0x3c>)
 800e53a:	1b64      	subs	r4, r4, r5
 800e53c:	10a4      	asrs	r4, r4, #2
 800e53e:	2600      	movs	r6, #0
 800e540:	42a6      	cmp	r6, r4
 800e542:	d109      	bne.n	800e558 <__libc_init_array+0x24>
 800e544:	4d0b      	ldr	r5, [pc, #44]	; (800e574 <__libc_init_array+0x40>)
 800e546:	4c0c      	ldr	r4, [pc, #48]	; (800e578 <__libc_init_array+0x44>)
 800e548:	f000 fcdc 	bl	800ef04 <_init>
 800e54c:	1b64      	subs	r4, r4, r5
 800e54e:	10a4      	asrs	r4, r4, #2
 800e550:	2600      	movs	r6, #0
 800e552:	42a6      	cmp	r6, r4
 800e554:	d105      	bne.n	800e562 <__libc_init_array+0x2e>
 800e556:	bd70      	pop	{r4, r5, r6, pc}
 800e558:	f855 3b04 	ldr.w	r3, [r5], #4
 800e55c:	4798      	blx	r3
 800e55e:	3601      	adds	r6, #1
 800e560:	e7ee      	b.n	800e540 <__libc_init_array+0xc>
 800e562:	f855 3b04 	ldr.w	r3, [r5], #4
 800e566:	4798      	blx	r3
 800e568:	3601      	adds	r6, #1
 800e56a:	e7f2      	b.n	800e552 <__libc_init_array+0x1e>
 800e56c:	0800fb3c 	.word	0x0800fb3c
 800e570:	0800fb3c 	.word	0x0800fb3c
 800e574:	0800fb3c 	.word	0x0800fb3c
 800e578:	0800fb40 	.word	0x0800fb40

0800e57c <malloc>:
 800e57c:	4b02      	ldr	r3, [pc, #8]	; (800e588 <malloc+0xc>)
 800e57e:	4601      	mov	r1, r0
 800e580:	6818      	ldr	r0, [r3, #0]
 800e582:	f000 b88b 	b.w	800e69c <_malloc_r>
 800e586:	bf00      	nop
 800e588:	24000010 	.word	0x24000010

0800e58c <free>:
 800e58c:	4b02      	ldr	r3, [pc, #8]	; (800e598 <free+0xc>)
 800e58e:	4601      	mov	r1, r0
 800e590:	6818      	ldr	r0, [r3, #0]
 800e592:	f000 b833 	b.w	800e5fc <_free_r>
 800e596:	bf00      	nop
 800e598:	24000010 	.word	0x24000010

0800e59c <memcpy>:
 800e59c:	440a      	add	r2, r1
 800e59e:	4291      	cmp	r1, r2
 800e5a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e5a4:	d100      	bne.n	800e5a8 <memcpy+0xc>
 800e5a6:	4770      	bx	lr
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5b2:	4291      	cmp	r1, r2
 800e5b4:	d1f9      	bne.n	800e5aa <memcpy+0xe>
 800e5b6:	bd10      	pop	{r4, pc}

0800e5b8 <memmove>:
 800e5b8:	4288      	cmp	r0, r1
 800e5ba:	b510      	push	{r4, lr}
 800e5bc:	eb01 0402 	add.w	r4, r1, r2
 800e5c0:	d902      	bls.n	800e5c8 <memmove+0x10>
 800e5c2:	4284      	cmp	r4, r0
 800e5c4:	4623      	mov	r3, r4
 800e5c6:	d807      	bhi.n	800e5d8 <memmove+0x20>
 800e5c8:	1e43      	subs	r3, r0, #1
 800e5ca:	42a1      	cmp	r1, r4
 800e5cc:	d008      	beq.n	800e5e0 <memmove+0x28>
 800e5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5d6:	e7f8      	b.n	800e5ca <memmove+0x12>
 800e5d8:	4402      	add	r2, r0
 800e5da:	4601      	mov	r1, r0
 800e5dc:	428a      	cmp	r2, r1
 800e5de:	d100      	bne.n	800e5e2 <memmove+0x2a>
 800e5e0:	bd10      	pop	{r4, pc}
 800e5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5ea:	e7f7      	b.n	800e5dc <memmove+0x24>

0800e5ec <memset>:
 800e5ec:	4402      	add	r2, r0
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d100      	bne.n	800e5f6 <memset+0xa>
 800e5f4:	4770      	bx	lr
 800e5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e5fa:	e7f9      	b.n	800e5f0 <memset+0x4>

0800e5fc <_free_r>:
 800e5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5fe:	2900      	cmp	r1, #0
 800e600:	d048      	beq.n	800e694 <_free_r+0x98>
 800e602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e606:	9001      	str	r0, [sp, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f1a1 0404 	sub.w	r4, r1, #4
 800e60e:	bfb8      	it	lt
 800e610:	18e4      	addlt	r4, r4, r3
 800e612:	f000 f94b 	bl	800e8ac <__malloc_lock>
 800e616:	4a20      	ldr	r2, [pc, #128]	; (800e698 <_free_r+0x9c>)
 800e618:	9801      	ldr	r0, [sp, #4]
 800e61a:	6813      	ldr	r3, [r2, #0]
 800e61c:	4615      	mov	r5, r2
 800e61e:	b933      	cbnz	r3, 800e62e <_free_r+0x32>
 800e620:	6063      	str	r3, [r4, #4]
 800e622:	6014      	str	r4, [r2, #0]
 800e624:	b003      	add	sp, #12
 800e626:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e62a:	f000 b945 	b.w	800e8b8 <__malloc_unlock>
 800e62e:	42a3      	cmp	r3, r4
 800e630:	d90b      	bls.n	800e64a <_free_r+0x4e>
 800e632:	6821      	ldr	r1, [r4, #0]
 800e634:	1862      	adds	r2, r4, r1
 800e636:	4293      	cmp	r3, r2
 800e638:	bf04      	itt	eq
 800e63a:	681a      	ldreq	r2, [r3, #0]
 800e63c:	685b      	ldreq	r3, [r3, #4]
 800e63e:	6063      	str	r3, [r4, #4]
 800e640:	bf04      	itt	eq
 800e642:	1852      	addeq	r2, r2, r1
 800e644:	6022      	streq	r2, [r4, #0]
 800e646:	602c      	str	r4, [r5, #0]
 800e648:	e7ec      	b.n	800e624 <_free_r+0x28>
 800e64a:	461a      	mov	r2, r3
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	b10b      	cbz	r3, 800e654 <_free_r+0x58>
 800e650:	42a3      	cmp	r3, r4
 800e652:	d9fa      	bls.n	800e64a <_free_r+0x4e>
 800e654:	6811      	ldr	r1, [r2, #0]
 800e656:	1855      	adds	r5, r2, r1
 800e658:	42a5      	cmp	r5, r4
 800e65a:	d10b      	bne.n	800e674 <_free_r+0x78>
 800e65c:	6824      	ldr	r4, [r4, #0]
 800e65e:	4421      	add	r1, r4
 800e660:	1854      	adds	r4, r2, r1
 800e662:	42a3      	cmp	r3, r4
 800e664:	6011      	str	r1, [r2, #0]
 800e666:	d1dd      	bne.n	800e624 <_free_r+0x28>
 800e668:	681c      	ldr	r4, [r3, #0]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	6053      	str	r3, [r2, #4]
 800e66e:	4421      	add	r1, r4
 800e670:	6011      	str	r1, [r2, #0]
 800e672:	e7d7      	b.n	800e624 <_free_r+0x28>
 800e674:	d902      	bls.n	800e67c <_free_r+0x80>
 800e676:	230c      	movs	r3, #12
 800e678:	6003      	str	r3, [r0, #0]
 800e67a:	e7d3      	b.n	800e624 <_free_r+0x28>
 800e67c:	6825      	ldr	r5, [r4, #0]
 800e67e:	1961      	adds	r1, r4, r5
 800e680:	428b      	cmp	r3, r1
 800e682:	bf04      	itt	eq
 800e684:	6819      	ldreq	r1, [r3, #0]
 800e686:	685b      	ldreq	r3, [r3, #4]
 800e688:	6063      	str	r3, [r4, #4]
 800e68a:	bf04      	itt	eq
 800e68c:	1949      	addeq	r1, r1, r5
 800e68e:	6021      	streq	r1, [r4, #0]
 800e690:	6054      	str	r4, [r2, #4]
 800e692:	e7c7      	b.n	800e624 <_free_r+0x28>
 800e694:	b003      	add	sp, #12
 800e696:	bd30      	pop	{r4, r5, pc}
 800e698:	24001758 	.word	0x24001758

0800e69c <_malloc_r>:
 800e69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69e:	1ccd      	adds	r5, r1, #3
 800e6a0:	f025 0503 	bic.w	r5, r5, #3
 800e6a4:	3508      	adds	r5, #8
 800e6a6:	2d0c      	cmp	r5, #12
 800e6a8:	bf38      	it	cc
 800e6aa:	250c      	movcc	r5, #12
 800e6ac:	2d00      	cmp	r5, #0
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	db01      	blt.n	800e6b6 <_malloc_r+0x1a>
 800e6b2:	42a9      	cmp	r1, r5
 800e6b4:	d903      	bls.n	800e6be <_malloc_r+0x22>
 800e6b6:	230c      	movs	r3, #12
 800e6b8:	6033      	str	r3, [r6, #0]
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6be:	f000 f8f5 	bl	800e8ac <__malloc_lock>
 800e6c2:	4921      	ldr	r1, [pc, #132]	; (800e748 <_malloc_r+0xac>)
 800e6c4:	680a      	ldr	r2, [r1, #0]
 800e6c6:	4614      	mov	r4, r2
 800e6c8:	b99c      	cbnz	r4, 800e6f2 <_malloc_r+0x56>
 800e6ca:	4f20      	ldr	r7, [pc, #128]	; (800e74c <_malloc_r+0xb0>)
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	b923      	cbnz	r3, 800e6da <_malloc_r+0x3e>
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f000 f83c 	bl	800e750 <_sbrk_r>
 800e6d8:	6038      	str	r0, [r7, #0]
 800e6da:	4629      	mov	r1, r5
 800e6dc:	4630      	mov	r0, r6
 800e6de:	f000 f837 	bl	800e750 <_sbrk_r>
 800e6e2:	1c43      	adds	r3, r0, #1
 800e6e4:	d123      	bne.n	800e72e <_malloc_r+0x92>
 800e6e6:	230c      	movs	r3, #12
 800e6e8:	6033      	str	r3, [r6, #0]
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f000 f8e4 	bl	800e8b8 <__malloc_unlock>
 800e6f0:	e7e3      	b.n	800e6ba <_malloc_r+0x1e>
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	1b5b      	subs	r3, r3, r5
 800e6f6:	d417      	bmi.n	800e728 <_malloc_r+0x8c>
 800e6f8:	2b0b      	cmp	r3, #11
 800e6fa:	d903      	bls.n	800e704 <_malloc_r+0x68>
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	441c      	add	r4, r3
 800e700:	6025      	str	r5, [r4, #0]
 800e702:	e004      	b.n	800e70e <_malloc_r+0x72>
 800e704:	6863      	ldr	r3, [r4, #4]
 800e706:	42a2      	cmp	r2, r4
 800e708:	bf0c      	ite	eq
 800e70a:	600b      	streq	r3, [r1, #0]
 800e70c:	6053      	strne	r3, [r2, #4]
 800e70e:	4630      	mov	r0, r6
 800e710:	f000 f8d2 	bl	800e8b8 <__malloc_unlock>
 800e714:	f104 000b 	add.w	r0, r4, #11
 800e718:	1d23      	adds	r3, r4, #4
 800e71a:	f020 0007 	bic.w	r0, r0, #7
 800e71e:	1ac2      	subs	r2, r0, r3
 800e720:	d0cc      	beq.n	800e6bc <_malloc_r+0x20>
 800e722:	1a1b      	subs	r3, r3, r0
 800e724:	50a3      	str	r3, [r4, r2]
 800e726:	e7c9      	b.n	800e6bc <_malloc_r+0x20>
 800e728:	4622      	mov	r2, r4
 800e72a:	6864      	ldr	r4, [r4, #4]
 800e72c:	e7cc      	b.n	800e6c8 <_malloc_r+0x2c>
 800e72e:	1cc4      	adds	r4, r0, #3
 800e730:	f024 0403 	bic.w	r4, r4, #3
 800e734:	42a0      	cmp	r0, r4
 800e736:	d0e3      	beq.n	800e700 <_malloc_r+0x64>
 800e738:	1a21      	subs	r1, r4, r0
 800e73a:	4630      	mov	r0, r6
 800e73c:	f000 f808 	bl	800e750 <_sbrk_r>
 800e740:	3001      	adds	r0, #1
 800e742:	d1dd      	bne.n	800e700 <_malloc_r+0x64>
 800e744:	e7cf      	b.n	800e6e6 <_malloc_r+0x4a>
 800e746:	bf00      	nop
 800e748:	24001758 	.word	0x24001758
 800e74c:	2400175c 	.word	0x2400175c

0800e750 <_sbrk_r>:
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	4d06      	ldr	r5, [pc, #24]	; (800e76c <_sbrk_r+0x1c>)
 800e754:	2300      	movs	r3, #0
 800e756:	4604      	mov	r4, r0
 800e758:	4608      	mov	r0, r1
 800e75a:	602b      	str	r3, [r5, #0]
 800e75c:	f7f3 fc08 	bl	8001f70 <_sbrk>
 800e760:	1c43      	adds	r3, r0, #1
 800e762:	d102      	bne.n	800e76a <_sbrk_r+0x1a>
 800e764:	682b      	ldr	r3, [r5, #0]
 800e766:	b103      	cbz	r3, 800e76a <_sbrk_r+0x1a>
 800e768:	6023      	str	r3, [r4, #0]
 800e76a:	bd38      	pop	{r3, r4, r5, pc}
 800e76c:	24001c10 	.word	0x24001c10

0800e770 <_raise_r>:
 800e770:	291f      	cmp	r1, #31
 800e772:	b538      	push	{r3, r4, r5, lr}
 800e774:	4604      	mov	r4, r0
 800e776:	460d      	mov	r5, r1
 800e778:	d904      	bls.n	800e784 <_raise_r+0x14>
 800e77a:	2316      	movs	r3, #22
 800e77c:	6003      	str	r3, [r0, #0]
 800e77e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e786:	b112      	cbz	r2, 800e78e <_raise_r+0x1e>
 800e788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e78c:	b94b      	cbnz	r3, 800e7a2 <_raise_r+0x32>
 800e78e:	4620      	mov	r0, r4
 800e790:	f000 f830 	bl	800e7f4 <_getpid_r>
 800e794:	462a      	mov	r2, r5
 800e796:	4601      	mov	r1, r0
 800e798:	4620      	mov	r0, r4
 800e79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e79e:	f000 b817 	b.w	800e7d0 <_kill_r>
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d00a      	beq.n	800e7bc <_raise_r+0x4c>
 800e7a6:	1c59      	adds	r1, r3, #1
 800e7a8:	d103      	bne.n	800e7b2 <_raise_r+0x42>
 800e7aa:	2316      	movs	r3, #22
 800e7ac:	6003      	str	r3, [r0, #0]
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	e7e7      	b.n	800e782 <_raise_r+0x12>
 800e7b2:	2400      	movs	r4, #0
 800e7b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	4798      	blx	r3
 800e7bc:	2000      	movs	r0, #0
 800e7be:	e7e0      	b.n	800e782 <_raise_r+0x12>

0800e7c0 <raise>:
 800e7c0:	4b02      	ldr	r3, [pc, #8]	; (800e7cc <raise+0xc>)
 800e7c2:	4601      	mov	r1, r0
 800e7c4:	6818      	ldr	r0, [r3, #0]
 800e7c6:	f7ff bfd3 	b.w	800e770 <_raise_r>
 800e7ca:	bf00      	nop
 800e7cc:	24000010 	.word	0x24000010

0800e7d0 <_kill_r>:
 800e7d0:	b538      	push	{r3, r4, r5, lr}
 800e7d2:	4d07      	ldr	r5, [pc, #28]	; (800e7f0 <_kill_r+0x20>)
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	4608      	mov	r0, r1
 800e7da:	4611      	mov	r1, r2
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	f7f3 fbad 	bl	8001f3c <_kill>
 800e7e2:	1c43      	adds	r3, r0, #1
 800e7e4:	d102      	bne.n	800e7ec <_kill_r+0x1c>
 800e7e6:	682b      	ldr	r3, [r5, #0]
 800e7e8:	b103      	cbz	r3, 800e7ec <_kill_r+0x1c>
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	bd38      	pop	{r3, r4, r5, pc}
 800e7ee:	bf00      	nop
 800e7f0:	24001c10 	.word	0x24001c10

0800e7f4 <_getpid_r>:
 800e7f4:	f7f3 bb9a 	b.w	8001f2c <_getpid>

0800e7f8 <siprintf>:
 800e7f8:	b40e      	push	{r1, r2, r3}
 800e7fa:	b500      	push	{lr}
 800e7fc:	b09c      	sub	sp, #112	; 0x70
 800e7fe:	ab1d      	add	r3, sp, #116	; 0x74
 800e800:	9002      	str	r0, [sp, #8]
 800e802:	9006      	str	r0, [sp, #24]
 800e804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e808:	4809      	ldr	r0, [pc, #36]	; (800e830 <siprintf+0x38>)
 800e80a:	9107      	str	r1, [sp, #28]
 800e80c:	9104      	str	r1, [sp, #16]
 800e80e:	4909      	ldr	r1, [pc, #36]	; (800e834 <siprintf+0x3c>)
 800e810:	f853 2b04 	ldr.w	r2, [r3], #4
 800e814:	9105      	str	r1, [sp, #20]
 800e816:	6800      	ldr	r0, [r0, #0]
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	a902      	add	r1, sp, #8
 800e81c:	f000 f8ae 	bl	800e97c <_svfiprintf_r>
 800e820:	9b02      	ldr	r3, [sp, #8]
 800e822:	2200      	movs	r2, #0
 800e824:	701a      	strb	r2, [r3, #0]
 800e826:	b01c      	add	sp, #112	; 0x70
 800e828:	f85d eb04 	ldr.w	lr, [sp], #4
 800e82c:	b003      	add	sp, #12
 800e82e:	4770      	bx	lr
 800e830:	24000010 	.word	0x24000010
 800e834:	ffff0208 	.word	0xffff0208

0800e838 <_vsniprintf_r>:
 800e838:	b530      	push	{r4, r5, lr}
 800e83a:	1e14      	subs	r4, r2, #0
 800e83c:	4605      	mov	r5, r0
 800e83e:	b09b      	sub	sp, #108	; 0x6c
 800e840:	4618      	mov	r0, r3
 800e842:	da05      	bge.n	800e850 <_vsniprintf_r+0x18>
 800e844:	238b      	movs	r3, #139	; 0x8b
 800e846:	602b      	str	r3, [r5, #0]
 800e848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e84c:	b01b      	add	sp, #108	; 0x6c
 800e84e:	bd30      	pop	{r4, r5, pc}
 800e850:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e854:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e858:	bf14      	ite	ne
 800e85a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e85e:	4623      	moveq	r3, r4
 800e860:	9302      	str	r3, [sp, #8]
 800e862:	9305      	str	r3, [sp, #20]
 800e864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e868:	9100      	str	r1, [sp, #0]
 800e86a:	9104      	str	r1, [sp, #16]
 800e86c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e870:	4602      	mov	r2, r0
 800e872:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e874:	4669      	mov	r1, sp
 800e876:	4628      	mov	r0, r5
 800e878:	f000 f880 	bl	800e97c <_svfiprintf_r>
 800e87c:	1c43      	adds	r3, r0, #1
 800e87e:	bfbc      	itt	lt
 800e880:	238b      	movlt	r3, #139	; 0x8b
 800e882:	602b      	strlt	r3, [r5, #0]
 800e884:	2c00      	cmp	r4, #0
 800e886:	d0e1      	beq.n	800e84c <_vsniprintf_r+0x14>
 800e888:	9b00      	ldr	r3, [sp, #0]
 800e88a:	2200      	movs	r2, #0
 800e88c:	701a      	strb	r2, [r3, #0]
 800e88e:	e7dd      	b.n	800e84c <_vsniprintf_r+0x14>

0800e890 <vsniprintf>:
 800e890:	b507      	push	{r0, r1, r2, lr}
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	4613      	mov	r3, r2
 800e896:	460a      	mov	r2, r1
 800e898:	4601      	mov	r1, r0
 800e89a:	4803      	ldr	r0, [pc, #12]	; (800e8a8 <vsniprintf+0x18>)
 800e89c:	6800      	ldr	r0, [r0, #0]
 800e89e:	f7ff ffcb 	bl	800e838 <_vsniprintf_r>
 800e8a2:	b003      	add	sp, #12
 800e8a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8a8:	24000010 	.word	0x24000010

0800e8ac <__malloc_lock>:
 800e8ac:	4801      	ldr	r0, [pc, #4]	; (800e8b4 <__malloc_lock+0x8>)
 800e8ae:	f000 baf9 	b.w	800eea4 <__retarget_lock_acquire_recursive>
 800e8b2:	bf00      	nop
 800e8b4:	24001c18 	.word	0x24001c18

0800e8b8 <__malloc_unlock>:
 800e8b8:	4801      	ldr	r0, [pc, #4]	; (800e8c0 <__malloc_unlock+0x8>)
 800e8ba:	f000 baf4 	b.w	800eea6 <__retarget_lock_release_recursive>
 800e8be:	bf00      	nop
 800e8c0:	24001c18 	.word	0x24001c18

0800e8c4 <__ssputs_r>:
 800e8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c8:	688e      	ldr	r6, [r1, #8]
 800e8ca:	429e      	cmp	r6, r3
 800e8cc:	4682      	mov	sl, r0
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	4690      	mov	r8, r2
 800e8d2:	461f      	mov	r7, r3
 800e8d4:	d838      	bhi.n	800e948 <__ssputs_r+0x84>
 800e8d6:	898a      	ldrh	r2, [r1, #12]
 800e8d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8dc:	d032      	beq.n	800e944 <__ssputs_r+0x80>
 800e8de:	6825      	ldr	r5, [r4, #0]
 800e8e0:	6909      	ldr	r1, [r1, #16]
 800e8e2:	eba5 0901 	sub.w	r9, r5, r1
 800e8e6:	6965      	ldr	r5, [r4, #20]
 800e8e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	444b      	add	r3, r9
 800e8f4:	106d      	asrs	r5, r5, #1
 800e8f6:	429d      	cmp	r5, r3
 800e8f8:	bf38      	it	cc
 800e8fa:	461d      	movcc	r5, r3
 800e8fc:	0553      	lsls	r3, r2, #21
 800e8fe:	d531      	bpl.n	800e964 <__ssputs_r+0xa0>
 800e900:	4629      	mov	r1, r5
 800e902:	f7ff fecb 	bl	800e69c <_malloc_r>
 800e906:	4606      	mov	r6, r0
 800e908:	b950      	cbnz	r0, 800e920 <__ssputs_r+0x5c>
 800e90a:	230c      	movs	r3, #12
 800e90c:	f8ca 3000 	str.w	r3, [sl]
 800e910:	89a3      	ldrh	r3, [r4, #12]
 800e912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e916:	81a3      	strh	r3, [r4, #12]
 800e918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e920:	6921      	ldr	r1, [r4, #16]
 800e922:	464a      	mov	r2, r9
 800e924:	f7ff fe3a 	bl	800e59c <memcpy>
 800e928:	89a3      	ldrh	r3, [r4, #12]
 800e92a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e932:	81a3      	strh	r3, [r4, #12]
 800e934:	6126      	str	r6, [r4, #16]
 800e936:	6165      	str	r5, [r4, #20]
 800e938:	444e      	add	r6, r9
 800e93a:	eba5 0509 	sub.w	r5, r5, r9
 800e93e:	6026      	str	r6, [r4, #0]
 800e940:	60a5      	str	r5, [r4, #8]
 800e942:	463e      	mov	r6, r7
 800e944:	42be      	cmp	r6, r7
 800e946:	d900      	bls.n	800e94a <__ssputs_r+0x86>
 800e948:	463e      	mov	r6, r7
 800e94a:	4632      	mov	r2, r6
 800e94c:	6820      	ldr	r0, [r4, #0]
 800e94e:	4641      	mov	r1, r8
 800e950:	f7ff fe32 	bl	800e5b8 <memmove>
 800e954:	68a3      	ldr	r3, [r4, #8]
 800e956:	6822      	ldr	r2, [r4, #0]
 800e958:	1b9b      	subs	r3, r3, r6
 800e95a:	4432      	add	r2, r6
 800e95c:	60a3      	str	r3, [r4, #8]
 800e95e:	6022      	str	r2, [r4, #0]
 800e960:	2000      	movs	r0, #0
 800e962:	e7db      	b.n	800e91c <__ssputs_r+0x58>
 800e964:	462a      	mov	r2, r5
 800e966:	f000 fa9f 	bl	800eea8 <_realloc_r>
 800e96a:	4606      	mov	r6, r0
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d1e1      	bne.n	800e934 <__ssputs_r+0x70>
 800e970:	6921      	ldr	r1, [r4, #16]
 800e972:	4650      	mov	r0, sl
 800e974:	f7ff fe42 	bl	800e5fc <_free_r>
 800e978:	e7c7      	b.n	800e90a <__ssputs_r+0x46>
	...

0800e97c <_svfiprintf_r>:
 800e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	4698      	mov	r8, r3
 800e982:	898b      	ldrh	r3, [r1, #12]
 800e984:	061b      	lsls	r3, r3, #24
 800e986:	b09d      	sub	sp, #116	; 0x74
 800e988:	4607      	mov	r7, r0
 800e98a:	460d      	mov	r5, r1
 800e98c:	4614      	mov	r4, r2
 800e98e:	d50e      	bpl.n	800e9ae <_svfiprintf_r+0x32>
 800e990:	690b      	ldr	r3, [r1, #16]
 800e992:	b963      	cbnz	r3, 800e9ae <_svfiprintf_r+0x32>
 800e994:	2140      	movs	r1, #64	; 0x40
 800e996:	f7ff fe81 	bl	800e69c <_malloc_r>
 800e99a:	6028      	str	r0, [r5, #0]
 800e99c:	6128      	str	r0, [r5, #16]
 800e99e:	b920      	cbnz	r0, 800e9aa <_svfiprintf_r+0x2e>
 800e9a0:	230c      	movs	r3, #12
 800e9a2:	603b      	str	r3, [r7, #0]
 800e9a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9a8:	e0d1      	b.n	800eb4e <_svfiprintf_r+0x1d2>
 800e9aa:	2340      	movs	r3, #64	; 0x40
 800e9ac:	616b      	str	r3, [r5, #20]
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e9b2:	2320      	movs	r3, #32
 800e9b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9bc:	2330      	movs	r3, #48	; 0x30
 800e9be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eb68 <_svfiprintf_r+0x1ec>
 800e9c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9c6:	f04f 0901 	mov.w	r9, #1
 800e9ca:	4623      	mov	r3, r4
 800e9cc:	469a      	mov	sl, r3
 800e9ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9d2:	b10a      	cbz	r2, 800e9d8 <_svfiprintf_r+0x5c>
 800e9d4:	2a25      	cmp	r2, #37	; 0x25
 800e9d6:	d1f9      	bne.n	800e9cc <_svfiprintf_r+0x50>
 800e9d8:	ebba 0b04 	subs.w	fp, sl, r4
 800e9dc:	d00b      	beq.n	800e9f6 <_svfiprintf_r+0x7a>
 800e9de:	465b      	mov	r3, fp
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	4638      	mov	r0, r7
 800e9e6:	f7ff ff6d 	bl	800e8c4 <__ssputs_r>
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	f000 80aa 	beq.w	800eb44 <_svfiprintf_r+0x1c8>
 800e9f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9f2:	445a      	add	r2, fp
 800e9f4:	9209      	str	r2, [sp, #36]	; 0x24
 800e9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 80a2 	beq.w	800eb44 <_svfiprintf_r+0x1c8>
 800ea00:	2300      	movs	r3, #0
 800ea02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea0a:	f10a 0a01 	add.w	sl, sl, #1
 800ea0e:	9304      	str	r3, [sp, #16]
 800ea10:	9307      	str	r3, [sp, #28]
 800ea12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea16:	931a      	str	r3, [sp, #104]	; 0x68
 800ea18:	4654      	mov	r4, sl
 800ea1a:	2205      	movs	r2, #5
 800ea1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea20:	4851      	ldr	r0, [pc, #324]	; (800eb68 <_svfiprintf_r+0x1ec>)
 800ea22:	f7f1 fc5d 	bl	80002e0 <memchr>
 800ea26:	9a04      	ldr	r2, [sp, #16]
 800ea28:	b9d8      	cbnz	r0, 800ea62 <_svfiprintf_r+0xe6>
 800ea2a:	06d0      	lsls	r0, r2, #27
 800ea2c:	bf44      	itt	mi
 800ea2e:	2320      	movmi	r3, #32
 800ea30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea34:	0711      	lsls	r1, r2, #28
 800ea36:	bf44      	itt	mi
 800ea38:	232b      	movmi	r3, #43	; 0x2b
 800ea3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ea42:	2b2a      	cmp	r3, #42	; 0x2a
 800ea44:	d015      	beq.n	800ea72 <_svfiprintf_r+0xf6>
 800ea46:	9a07      	ldr	r2, [sp, #28]
 800ea48:	4654      	mov	r4, sl
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	f04f 0c0a 	mov.w	ip, #10
 800ea50:	4621      	mov	r1, r4
 800ea52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea56:	3b30      	subs	r3, #48	; 0x30
 800ea58:	2b09      	cmp	r3, #9
 800ea5a:	d94e      	bls.n	800eafa <_svfiprintf_r+0x17e>
 800ea5c:	b1b0      	cbz	r0, 800ea8c <_svfiprintf_r+0x110>
 800ea5e:	9207      	str	r2, [sp, #28]
 800ea60:	e014      	b.n	800ea8c <_svfiprintf_r+0x110>
 800ea62:	eba0 0308 	sub.w	r3, r0, r8
 800ea66:	fa09 f303 	lsl.w	r3, r9, r3
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	9304      	str	r3, [sp, #16]
 800ea6e:	46a2      	mov	sl, r4
 800ea70:	e7d2      	b.n	800ea18 <_svfiprintf_r+0x9c>
 800ea72:	9b03      	ldr	r3, [sp, #12]
 800ea74:	1d19      	adds	r1, r3, #4
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	9103      	str	r1, [sp, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	bfbb      	ittet	lt
 800ea7e:	425b      	neglt	r3, r3
 800ea80:	f042 0202 	orrlt.w	r2, r2, #2
 800ea84:	9307      	strge	r3, [sp, #28]
 800ea86:	9307      	strlt	r3, [sp, #28]
 800ea88:	bfb8      	it	lt
 800ea8a:	9204      	strlt	r2, [sp, #16]
 800ea8c:	7823      	ldrb	r3, [r4, #0]
 800ea8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ea90:	d10c      	bne.n	800eaac <_svfiprintf_r+0x130>
 800ea92:	7863      	ldrb	r3, [r4, #1]
 800ea94:	2b2a      	cmp	r3, #42	; 0x2a
 800ea96:	d135      	bne.n	800eb04 <_svfiprintf_r+0x188>
 800ea98:	9b03      	ldr	r3, [sp, #12]
 800ea9a:	1d1a      	adds	r2, r3, #4
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	9203      	str	r2, [sp, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	bfb8      	it	lt
 800eaa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eaa8:	3402      	adds	r4, #2
 800eaaa:	9305      	str	r3, [sp, #20]
 800eaac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eb78 <_svfiprintf_r+0x1fc>
 800eab0:	7821      	ldrb	r1, [r4, #0]
 800eab2:	2203      	movs	r2, #3
 800eab4:	4650      	mov	r0, sl
 800eab6:	f7f1 fc13 	bl	80002e0 <memchr>
 800eaba:	b140      	cbz	r0, 800eace <_svfiprintf_r+0x152>
 800eabc:	2340      	movs	r3, #64	; 0x40
 800eabe:	eba0 000a 	sub.w	r0, r0, sl
 800eac2:	fa03 f000 	lsl.w	r0, r3, r0
 800eac6:	9b04      	ldr	r3, [sp, #16]
 800eac8:	4303      	orrs	r3, r0
 800eaca:	3401      	adds	r4, #1
 800eacc:	9304      	str	r3, [sp, #16]
 800eace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ead2:	4826      	ldr	r0, [pc, #152]	; (800eb6c <_svfiprintf_r+0x1f0>)
 800ead4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ead8:	2206      	movs	r2, #6
 800eada:	f7f1 fc01 	bl	80002e0 <memchr>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d038      	beq.n	800eb54 <_svfiprintf_r+0x1d8>
 800eae2:	4b23      	ldr	r3, [pc, #140]	; (800eb70 <_svfiprintf_r+0x1f4>)
 800eae4:	bb1b      	cbnz	r3, 800eb2e <_svfiprintf_r+0x1b2>
 800eae6:	9b03      	ldr	r3, [sp, #12]
 800eae8:	3307      	adds	r3, #7
 800eaea:	f023 0307 	bic.w	r3, r3, #7
 800eaee:	3308      	adds	r3, #8
 800eaf0:	9303      	str	r3, [sp, #12]
 800eaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf4:	4433      	add	r3, r6
 800eaf6:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf8:	e767      	b.n	800e9ca <_svfiprintf_r+0x4e>
 800eafa:	fb0c 3202 	mla	r2, ip, r2, r3
 800eafe:	460c      	mov	r4, r1
 800eb00:	2001      	movs	r0, #1
 800eb02:	e7a5      	b.n	800ea50 <_svfiprintf_r+0xd4>
 800eb04:	2300      	movs	r3, #0
 800eb06:	3401      	adds	r4, #1
 800eb08:	9305      	str	r3, [sp, #20]
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	f04f 0c0a 	mov.w	ip, #10
 800eb10:	4620      	mov	r0, r4
 800eb12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb16:	3a30      	subs	r2, #48	; 0x30
 800eb18:	2a09      	cmp	r2, #9
 800eb1a:	d903      	bls.n	800eb24 <_svfiprintf_r+0x1a8>
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d0c5      	beq.n	800eaac <_svfiprintf_r+0x130>
 800eb20:	9105      	str	r1, [sp, #20]
 800eb22:	e7c3      	b.n	800eaac <_svfiprintf_r+0x130>
 800eb24:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb28:	4604      	mov	r4, r0
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	e7f0      	b.n	800eb10 <_svfiprintf_r+0x194>
 800eb2e:	ab03      	add	r3, sp, #12
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	462a      	mov	r2, r5
 800eb34:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <_svfiprintf_r+0x1f8>)
 800eb36:	a904      	add	r1, sp, #16
 800eb38:	4638      	mov	r0, r7
 800eb3a:	f3af 8000 	nop.w
 800eb3e:	1c42      	adds	r2, r0, #1
 800eb40:	4606      	mov	r6, r0
 800eb42:	d1d6      	bne.n	800eaf2 <_svfiprintf_r+0x176>
 800eb44:	89ab      	ldrh	r3, [r5, #12]
 800eb46:	065b      	lsls	r3, r3, #25
 800eb48:	f53f af2c 	bmi.w	800e9a4 <_svfiprintf_r+0x28>
 800eb4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb4e:	b01d      	add	sp, #116	; 0x74
 800eb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb54:	ab03      	add	r3, sp, #12
 800eb56:	9300      	str	r3, [sp, #0]
 800eb58:	462a      	mov	r2, r5
 800eb5a:	4b06      	ldr	r3, [pc, #24]	; (800eb74 <_svfiprintf_r+0x1f8>)
 800eb5c:	a904      	add	r1, sp, #16
 800eb5e:	4638      	mov	r0, r7
 800eb60:	f000 f87a 	bl	800ec58 <_printf_i>
 800eb64:	e7eb      	b.n	800eb3e <_svfiprintf_r+0x1c2>
 800eb66:	bf00      	nop
 800eb68:	0800faa0 	.word	0x0800faa0
 800eb6c:	0800faaa 	.word	0x0800faaa
 800eb70:	00000000 	.word	0x00000000
 800eb74:	0800e8c5 	.word	0x0800e8c5
 800eb78:	0800faa6 	.word	0x0800faa6

0800eb7c <_printf_common>:
 800eb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb80:	4616      	mov	r6, r2
 800eb82:	4699      	mov	r9, r3
 800eb84:	688a      	ldr	r2, [r1, #8]
 800eb86:	690b      	ldr	r3, [r1, #16]
 800eb88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	bfb8      	it	lt
 800eb90:	4613      	movlt	r3, r2
 800eb92:	6033      	str	r3, [r6, #0]
 800eb94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb98:	4607      	mov	r7, r0
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	b10a      	cbz	r2, 800eba2 <_printf_common+0x26>
 800eb9e:	3301      	adds	r3, #1
 800eba0:	6033      	str	r3, [r6, #0]
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	0699      	lsls	r1, r3, #26
 800eba6:	bf42      	ittt	mi
 800eba8:	6833      	ldrmi	r3, [r6, #0]
 800ebaa:	3302      	addmi	r3, #2
 800ebac:	6033      	strmi	r3, [r6, #0]
 800ebae:	6825      	ldr	r5, [r4, #0]
 800ebb0:	f015 0506 	ands.w	r5, r5, #6
 800ebb4:	d106      	bne.n	800ebc4 <_printf_common+0x48>
 800ebb6:	f104 0a19 	add.w	sl, r4, #25
 800ebba:	68e3      	ldr	r3, [r4, #12]
 800ebbc:	6832      	ldr	r2, [r6, #0]
 800ebbe:	1a9b      	subs	r3, r3, r2
 800ebc0:	42ab      	cmp	r3, r5
 800ebc2:	dc26      	bgt.n	800ec12 <_printf_common+0x96>
 800ebc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebc8:	1e13      	subs	r3, r2, #0
 800ebca:	6822      	ldr	r2, [r4, #0]
 800ebcc:	bf18      	it	ne
 800ebce:	2301      	movne	r3, #1
 800ebd0:	0692      	lsls	r2, r2, #26
 800ebd2:	d42b      	bmi.n	800ec2c <_printf_common+0xb0>
 800ebd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebd8:	4649      	mov	r1, r9
 800ebda:	4638      	mov	r0, r7
 800ebdc:	47c0      	blx	r8
 800ebde:	3001      	adds	r0, #1
 800ebe0:	d01e      	beq.n	800ec20 <_printf_common+0xa4>
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	68e5      	ldr	r5, [r4, #12]
 800ebe6:	6832      	ldr	r2, [r6, #0]
 800ebe8:	f003 0306 	and.w	r3, r3, #6
 800ebec:	2b04      	cmp	r3, #4
 800ebee:	bf08      	it	eq
 800ebf0:	1aad      	subeq	r5, r5, r2
 800ebf2:	68a3      	ldr	r3, [r4, #8]
 800ebf4:	6922      	ldr	r2, [r4, #16]
 800ebf6:	bf0c      	ite	eq
 800ebf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebfc:	2500      	movne	r5, #0
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	bfc4      	itt	gt
 800ec02:	1a9b      	subgt	r3, r3, r2
 800ec04:	18ed      	addgt	r5, r5, r3
 800ec06:	2600      	movs	r6, #0
 800ec08:	341a      	adds	r4, #26
 800ec0a:	42b5      	cmp	r5, r6
 800ec0c:	d11a      	bne.n	800ec44 <_printf_common+0xc8>
 800ec0e:	2000      	movs	r0, #0
 800ec10:	e008      	b.n	800ec24 <_printf_common+0xa8>
 800ec12:	2301      	movs	r3, #1
 800ec14:	4652      	mov	r2, sl
 800ec16:	4649      	mov	r1, r9
 800ec18:	4638      	mov	r0, r7
 800ec1a:	47c0      	blx	r8
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	d103      	bne.n	800ec28 <_printf_common+0xac>
 800ec20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec28:	3501      	adds	r5, #1
 800ec2a:	e7c6      	b.n	800ebba <_printf_common+0x3e>
 800ec2c:	18e1      	adds	r1, r4, r3
 800ec2e:	1c5a      	adds	r2, r3, #1
 800ec30:	2030      	movs	r0, #48	; 0x30
 800ec32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec36:	4422      	add	r2, r4
 800ec38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec40:	3302      	adds	r3, #2
 800ec42:	e7c7      	b.n	800ebd4 <_printf_common+0x58>
 800ec44:	2301      	movs	r3, #1
 800ec46:	4622      	mov	r2, r4
 800ec48:	4649      	mov	r1, r9
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	47c0      	blx	r8
 800ec4e:	3001      	adds	r0, #1
 800ec50:	d0e6      	beq.n	800ec20 <_printf_common+0xa4>
 800ec52:	3601      	adds	r6, #1
 800ec54:	e7d9      	b.n	800ec0a <_printf_common+0x8e>
	...

0800ec58 <_printf_i>:
 800ec58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec5c:	460c      	mov	r4, r1
 800ec5e:	4691      	mov	r9, r2
 800ec60:	7e27      	ldrb	r7, [r4, #24]
 800ec62:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ec64:	2f78      	cmp	r7, #120	; 0x78
 800ec66:	4680      	mov	r8, r0
 800ec68:	469a      	mov	sl, r3
 800ec6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec6e:	d807      	bhi.n	800ec80 <_printf_i+0x28>
 800ec70:	2f62      	cmp	r7, #98	; 0x62
 800ec72:	d80a      	bhi.n	800ec8a <_printf_i+0x32>
 800ec74:	2f00      	cmp	r7, #0
 800ec76:	f000 80d8 	beq.w	800ee2a <_printf_i+0x1d2>
 800ec7a:	2f58      	cmp	r7, #88	; 0x58
 800ec7c:	f000 80a3 	beq.w	800edc6 <_printf_i+0x16e>
 800ec80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec88:	e03a      	b.n	800ed00 <_printf_i+0xa8>
 800ec8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec8e:	2b15      	cmp	r3, #21
 800ec90:	d8f6      	bhi.n	800ec80 <_printf_i+0x28>
 800ec92:	a001      	add	r0, pc, #4	; (adr r0, 800ec98 <_printf_i+0x40>)
 800ec94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ec98:	0800ecf1 	.word	0x0800ecf1
 800ec9c:	0800ed05 	.word	0x0800ed05
 800eca0:	0800ec81 	.word	0x0800ec81
 800eca4:	0800ec81 	.word	0x0800ec81
 800eca8:	0800ec81 	.word	0x0800ec81
 800ecac:	0800ec81 	.word	0x0800ec81
 800ecb0:	0800ed05 	.word	0x0800ed05
 800ecb4:	0800ec81 	.word	0x0800ec81
 800ecb8:	0800ec81 	.word	0x0800ec81
 800ecbc:	0800ec81 	.word	0x0800ec81
 800ecc0:	0800ec81 	.word	0x0800ec81
 800ecc4:	0800ee11 	.word	0x0800ee11
 800ecc8:	0800ed35 	.word	0x0800ed35
 800eccc:	0800edf3 	.word	0x0800edf3
 800ecd0:	0800ec81 	.word	0x0800ec81
 800ecd4:	0800ec81 	.word	0x0800ec81
 800ecd8:	0800ee33 	.word	0x0800ee33
 800ecdc:	0800ec81 	.word	0x0800ec81
 800ece0:	0800ed35 	.word	0x0800ed35
 800ece4:	0800ec81 	.word	0x0800ec81
 800ece8:	0800ec81 	.word	0x0800ec81
 800ecec:	0800edfb 	.word	0x0800edfb
 800ecf0:	680b      	ldr	r3, [r1, #0]
 800ecf2:	1d1a      	adds	r2, r3, #4
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	600a      	str	r2, [r1, #0]
 800ecf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ecfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed00:	2301      	movs	r3, #1
 800ed02:	e0a3      	b.n	800ee4c <_printf_i+0x1f4>
 800ed04:	6825      	ldr	r5, [r4, #0]
 800ed06:	6808      	ldr	r0, [r1, #0]
 800ed08:	062e      	lsls	r6, r5, #24
 800ed0a:	f100 0304 	add.w	r3, r0, #4
 800ed0e:	d50a      	bpl.n	800ed26 <_printf_i+0xce>
 800ed10:	6805      	ldr	r5, [r0, #0]
 800ed12:	600b      	str	r3, [r1, #0]
 800ed14:	2d00      	cmp	r5, #0
 800ed16:	da03      	bge.n	800ed20 <_printf_i+0xc8>
 800ed18:	232d      	movs	r3, #45	; 0x2d
 800ed1a:	426d      	negs	r5, r5
 800ed1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed20:	485e      	ldr	r0, [pc, #376]	; (800ee9c <_printf_i+0x244>)
 800ed22:	230a      	movs	r3, #10
 800ed24:	e019      	b.n	800ed5a <_printf_i+0x102>
 800ed26:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ed2a:	6805      	ldr	r5, [r0, #0]
 800ed2c:	600b      	str	r3, [r1, #0]
 800ed2e:	bf18      	it	ne
 800ed30:	b22d      	sxthne	r5, r5
 800ed32:	e7ef      	b.n	800ed14 <_printf_i+0xbc>
 800ed34:	680b      	ldr	r3, [r1, #0]
 800ed36:	6825      	ldr	r5, [r4, #0]
 800ed38:	1d18      	adds	r0, r3, #4
 800ed3a:	6008      	str	r0, [r1, #0]
 800ed3c:	0628      	lsls	r0, r5, #24
 800ed3e:	d501      	bpl.n	800ed44 <_printf_i+0xec>
 800ed40:	681d      	ldr	r5, [r3, #0]
 800ed42:	e002      	b.n	800ed4a <_printf_i+0xf2>
 800ed44:	0669      	lsls	r1, r5, #25
 800ed46:	d5fb      	bpl.n	800ed40 <_printf_i+0xe8>
 800ed48:	881d      	ldrh	r5, [r3, #0]
 800ed4a:	4854      	ldr	r0, [pc, #336]	; (800ee9c <_printf_i+0x244>)
 800ed4c:	2f6f      	cmp	r7, #111	; 0x6f
 800ed4e:	bf0c      	ite	eq
 800ed50:	2308      	moveq	r3, #8
 800ed52:	230a      	movne	r3, #10
 800ed54:	2100      	movs	r1, #0
 800ed56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed5a:	6866      	ldr	r6, [r4, #4]
 800ed5c:	60a6      	str	r6, [r4, #8]
 800ed5e:	2e00      	cmp	r6, #0
 800ed60:	bfa2      	ittt	ge
 800ed62:	6821      	ldrge	r1, [r4, #0]
 800ed64:	f021 0104 	bicge.w	r1, r1, #4
 800ed68:	6021      	strge	r1, [r4, #0]
 800ed6a:	b90d      	cbnz	r5, 800ed70 <_printf_i+0x118>
 800ed6c:	2e00      	cmp	r6, #0
 800ed6e:	d04d      	beq.n	800ee0c <_printf_i+0x1b4>
 800ed70:	4616      	mov	r6, r2
 800ed72:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed76:	fb03 5711 	mls	r7, r3, r1, r5
 800ed7a:	5dc7      	ldrb	r7, [r0, r7]
 800ed7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed80:	462f      	mov	r7, r5
 800ed82:	42bb      	cmp	r3, r7
 800ed84:	460d      	mov	r5, r1
 800ed86:	d9f4      	bls.n	800ed72 <_printf_i+0x11a>
 800ed88:	2b08      	cmp	r3, #8
 800ed8a:	d10b      	bne.n	800eda4 <_printf_i+0x14c>
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	07df      	lsls	r7, r3, #31
 800ed90:	d508      	bpl.n	800eda4 <_printf_i+0x14c>
 800ed92:	6923      	ldr	r3, [r4, #16]
 800ed94:	6861      	ldr	r1, [r4, #4]
 800ed96:	4299      	cmp	r1, r3
 800ed98:	bfde      	ittt	le
 800ed9a:	2330      	movle	r3, #48	; 0x30
 800ed9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eda0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800eda4:	1b92      	subs	r2, r2, r6
 800eda6:	6122      	str	r2, [r4, #16]
 800eda8:	f8cd a000 	str.w	sl, [sp]
 800edac:	464b      	mov	r3, r9
 800edae:	aa03      	add	r2, sp, #12
 800edb0:	4621      	mov	r1, r4
 800edb2:	4640      	mov	r0, r8
 800edb4:	f7ff fee2 	bl	800eb7c <_printf_common>
 800edb8:	3001      	adds	r0, #1
 800edba:	d14c      	bne.n	800ee56 <_printf_i+0x1fe>
 800edbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edc0:	b004      	add	sp, #16
 800edc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc6:	4835      	ldr	r0, [pc, #212]	; (800ee9c <_printf_i+0x244>)
 800edc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800edcc:	6823      	ldr	r3, [r4, #0]
 800edce:	680e      	ldr	r6, [r1, #0]
 800edd0:	061f      	lsls	r7, r3, #24
 800edd2:	f856 5b04 	ldr.w	r5, [r6], #4
 800edd6:	600e      	str	r6, [r1, #0]
 800edd8:	d514      	bpl.n	800ee04 <_printf_i+0x1ac>
 800edda:	07d9      	lsls	r1, r3, #31
 800eddc:	bf44      	itt	mi
 800edde:	f043 0320 	orrmi.w	r3, r3, #32
 800ede2:	6023      	strmi	r3, [r4, #0]
 800ede4:	b91d      	cbnz	r5, 800edee <_printf_i+0x196>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	f023 0320 	bic.w	r3, r3, #32
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	2310      	movs	r3, #16
 800edf0:	e7b0      	b.n	800ed54 <_printf_i+0xfc>
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	f043 0320 	orr.w	r3, r3, #32
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	2378      	movs	r3, #120	; 0x78
 800edfc:	4828      	ldr	r0, [pc, #160]	; (800eea0 <_printf_i+0x248>)
 800edfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee02:	e7e3      	b.n	800edcc <_printf_i+0x174>
 800ee04:	065e      	lsls	r6, r3, #25
 800ee06:	bf48      	it	mi
 800ee08:	b2ad      	uxthmi	r5, r5
 800ee0a:	e7e6      	b.n	800edda <_printf_i+0x182>
 800ee0c:	4616      	mov	r6, r2
 800ee0e:	e7bb      	b.n	800ed88 <_printf_i+0x130>
 800ee10:	680b      	ldr	r3, [r1, #0]
 800ee12:	6826      	ldr	r6, [r4, #0]
 800ee14:	6960      	ldr	r0, [r4, #20]
 800ee16:	1d1d      	adds	r5, r3, #4
 800ee18:	600d      	str	r5, [r1, #0]
 800ee1a:	0635      	lsls	r5, r6, #24
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	d501      	bpl.n	800ee24 <_printf_i+0x1cc>
 800ee20:	6018      	str	r0, [r3, #0]
 800ee22:	e002      	b.n	800ee2a <_printf_i+0x1d2>
 800ee24:	0671      	lsls	r1, r6, #25
 800ee26:	d5fb      	bpl.n	800ee20 <_printf_i+0x1c8>
 800ee28:	8018      	strh	r0, [r3, #0]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	6123      	str	r3, [r4, #16]
 800ee2e:	4616      	mov	r6, r2
 800ee30:	e7ba      	b.n	800eda8 <_printf_i+0x150>
 800ee32:	680b      	ldr	r3, [r1, #0]
 800ee34:	1d1a      	adds	r2, r3, #4
 800ee36:	600a      	str	r2, [r1, #0]
 800ee38:	681e      	ldr	r6, [r3, #0]
 800ee3a:	6862      	ldr	r2, [r4, #4]
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	4630      	mov	r0, r6
 800ee40:	f7f1 fa4e 	bl	80002e0 <memchr>
 800ee44:	b108      	cbz	r0, 800ee4a <_printf_i+0x1f2>
 800ee46:	1b80      	subs	r0, r0, r6
 800ee48:	6060      	str	r0, [r4, #4]
 800ee4a:	6863      	ldr	r3, [r4, #4]
 800ee4c:	6123      	str	r3, [r4, #16]
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee54:	e7a8      	b.n	800eda8 <_printf_i+0x150>
 800ee56:	6923      	ldr	r3, [r4, #16]
 800ee58:	4632      	mov	r2, r6
 800ee5a:	4649      	mov	r1, r9
 800ee5c:	4640      	mov	r0, r8
 800ee5e:	47d0      	blx	sl
 800ee60:	3001      	adds	r0, #1
 800ee62:	d0ab      	beq.n	800edbc <_printf_i+0x164>
 800ee64:	6823      	ldr	r3, [r4, #0]
 800ee66:	079b      	lsls	r3, r3, #30
 800ee68:	d413      	bmi.n	800ee92 <_printf_i+0x23a>
 800ee6a:	68e0      	ldr	r0, [r4, #12]
 800ee6c:	9b03      	ldr	r3, [sp, #12]
 800ee6e:	4298      	cmp	r0, r3
 800ee70:	bfb8      	it	lt
 800ee72:	4618      	movlt	r0, r3
 800ee74:	e7a4      	b.n	800edc0 <_printf_i+0x168>
 800ee76:	2301      	movs	r3, #1
 800ee78:	4632      	mov	r2, r6
 800ee7a:	4649      	mov	r1, r9
 800ee7c:	4640      	mov	r0, r8
 800ee7e:	47d0      	blx	sl
 800ee80:	3001      	adds	r0, #1
 800ee82:	d09b      	beq.n	800edbc <_printf_i+0x164>
 800ee84:	3501      	adds	r5, #1
 800ee86:	68e3      	ldr	r3, [r4, #12]
 800ee88:	9903      	ldr	r1, [sp, #12]
 800ee8a:	1a5b      	subs	r3, r3, r1
 800ee8c:	42ab      	cmp	r3, r5
 800ee8e:	dcf2      	bgt.n	800ee76 <_printf_i+0x21e>
 800ee90:	e7eb      	b.n	800ee6a <_printf_i+0x212>
 800ee92:	2500      	movs	r5, #0
 800ee94:	f104 0619 	add.w	r6, r4, #25
 800ee98:	e7f5      	b.n	800ee86 <_printf_i+0x22e>
 800ee9a:	bf00      	nop
 800ee9c:	0800fab1 	.word	0x0800fab1
 800eea0:	0800fac2 	.word	0x0800fac2

0800eea4 <__retarget_lock_acquire_recursive>:
 800eea4:	4770      	bx	lr

0800eea6 <__retarget_lock_release_recursive>:
 800eea6:	4770      	bx	lr

0800eea8 <_realloc_r>:
 800eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeaa:	4607      	mov	r7, r0
 800eeac:	4614      	mov	r4, r2
 800eeae:	460e      	mov	r6, r1
 800eeb0:	b921      	cbnz	r1, 800eebc <_realloc_r+0x14>
 800eeb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eeb6:	4611      	mov	r1, r2
 800eeb8:	f7ff bbf0 	b.w	800e69c <_malloc_r>
 800eebc:	b922      	cbnz	r2, 800eec8 <_realloc_r+0x20>
 800eebe:	f7ff fb9d 	bl	800e5fc <_free_r>
 800eec2:	4625      	mov	r5, r4
 800eec4:	4628      	mov	r0, r5
 800eec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eec8:	f000 f814 	bl	800eef4 <_malloc_usable_size_r>
 800eecc:	42a0      	cmp	r0, r4
 800eece:	d20f      	bcs.n	800eef0 <_realloc_r+0x48>
 800eed0:	4621      	mov	r1, r4
 800eed2:	4638      	mov	r0, r7
 800eed4:	f7ff fbe2 	bl	800e69c <_malloc_r>
 800eed8:	4605      	mov	r5, r0
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d0f2      	beq.n	800eec4 <_realloc_r+0x1c>
 800eede:	4631      	mov	r1, r6
 800eee0:	4622      	mov	r2, r4
 800eee2:	f7ff fb5b 	bl	800e59c <memcpy>
 800eee6:	4631      	mov	r1, r6
 800eee8:	4638      	mov	r0, r7
 800eeea:	f7ff fb87 	bl	800e5fc <_free_r>
 800eeee:	e7e9      	b.n	800eec4 <_realloc_r+0x1c>
 800eef0:	4635      	mov	r5, r6
 800eef2:	e7e7      	b.n	800eec4 <_realloc_r+0x1c>

0800eef4 <_malloc_usable_size_r>:
 800eef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eef8:	1f18      	subs	r0, r3, #4
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	bfbc      	itt	lt
 800eefe:	580b      	ldrlt	r3, [r1, r0]
 800ef00:	18c0      	addlt	r0, r0, r3
 800ef02:	4770      	bx	lr

0800ef04 <_init>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	bf00      	nop
 800ef08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0a:	bc08      	pop	{r3}
 800ef0c:	469e      	mov	lr, r3
 800ef0e:	4770      	bx	lr

0800ef10 <_fini>:
 800ef10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef12:	bf00      	nop
 800ef14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef16:	bc08      	pop	{r3}
 800ef18:	469e      	mov	lr, r3
 800ef1a:	4770      	bx	lr
