
MMB_SDMMC_testbench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f010  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c7c  0800f2b0  0800f2b0  0001f2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ff2c  0800ff2c  0001ff2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ff34  0800ff34  0001ff34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ff38  0800ff38  0001ff38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800ff3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ba8  24000078  0800ffb0  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001c20  0800ffb0  00021c20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000427fa  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000062c3  00000000  00000000  0006289c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019a8  00000000  00000000  00068b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001830  00000000  00000000  0006a508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c3d3  00000000  00000000  0006bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002423e  00000000  00000000  0007810b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017540f  00000000  00000000  0009c349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00211758  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008600  00000000  00000000  002117ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f298 	.word	0x0800f298

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800f298 	.word	0x0800f298

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print(const char *fmt, ...) {
 8000688:	b40f      	push	{r0, r1, r2, r3}
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	480a      	ldr	r0, [pc, #40]	; (80006c8 <print+0x40>)
 80006a0:	f00e fac0 	bl	800ec24 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), -1);
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <print+0x40>)
 80006a6:	f7ff fe6b 	bl	8000380 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b2:	4905      	ldr	r1, [pc, #20]	; (80006c8 <print+0x40>)
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <print+0x44>)
 80006b6:	f007 fc6d 	bl	8007f94 <HAL_UART_Transmit>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr
 80006c8:	240001ec 	.word	0x240001ec
 80006cc:	2400015c 	.word	0x2400015c

080006d0 <_Z11flash_errorv>:

void flash_error() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <_Z11flash_errorv+0x2c>)
 80006da:	f002 fa28 	bl	8002b2e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80006de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e2:	f001 ff03 	bl	80024ec <HAL_Delay>
	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	4804      	ldr	r0, [pc, #16]	; (80006fc <_Z11flash_errorv+0x2c>)
 80006ec:	f002 fa1f 	bl	8002b2e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f001 fefb 	bl	80024ec <HAL_Delay>

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	58020400 	.word	0x58020400

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f001 fe60 	bl	80023c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f818 	bl	800073c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f98c 	bl	8000a28 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000710:	f000 f92a 	bl	8000968 <_ZL19MX_USART3_UART_Initv>
  MX_SDMMC1_SD_Init();
 8000714:	f000 f89a 	bl	800084c <_ZL17MX_SDMMC1_SD_Initv>
  MX_FATFS_Init();
 8000718:	f009 fa6c 	bl	8009bf4 <MX_FATFS_Init>
  MX_TIM5_Init();
 800071c:	f000 f8c6 	bl	80008ac <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

	//Start timers.
	HAL_TIM_Base_Start_IT(&htim5); //1 MHz; 32 bit
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <main+0x34>)
 8000722:	f006 ff5d 	bl	80075e0 <HAL_TIM_Base_Start_IT>

	run_SDMMC_testbench();
 8000726:	f000 fc47 	bl	8000fb8 <_Z19run_SDMMC_testbenchv>


	print("Testbench done.\r\n");
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <main+0x38>)
 800072c:	f7ff ffac 	bl	8000688 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000730:	e7fe      	b.n	8000730 <main+0x30>
 8000732:	bf00      	nop
 8000734:	24000110 	.word	0x24000110
 8000738:	0800f2b0 	.word	0x0800f2b0

0800073c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	; 0x70
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	224c      	movs	r2, #76	; 0x4c
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f00e f918 	bl	800e980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2220      	movs	r2, #32
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00e f912 	bl	800e980 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800075c:	2002      	movs	r0, #2
 800075e:	f002 fa01 	bl	8002b64 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <_Z18SystemClock_Configv+0x108>)
 8000768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076a:	4a36      	ldr	r2, [pc, #216]	; (8000844 <_Z18SystemClock_Configv+0x108>)
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <_Z18SystemClock_Configv+0x108>)
 8000774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b32      	ldr	r3, [pc, #200]	; (8000848 <_Z18SystemClock_Configv+0x10c>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a31      	ldr	r2, [pc, #196]	; (8000848 <_Z18SystemClock_Configv+0x10c>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <_Z18SystemClock_Configv+0x10c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <_Z18SystemClock_Configv+0x10c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800079c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a0:	bf14      	ite	ne
 80007a2:	2301      	movne	r3, #1
 80007a4:	2300      	moveq	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d000      	beq.n	80007ae <_Z18SystemClock_Configv+0x72>
 80007ac:	e7f2      	b.n	8000794 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	2302      	movs	r3, #2
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80007c4:	2319      	movs	r3, #25
 80007c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007d4:	230c      	movs	r3, #12
 80007d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d8:	2300      	movs	r3, #0
 80007da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 f9f7 	bl	8002bd8 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bf14      	ite	ne
 80007f0:	2301      	movne	r3, #1
 80007f2:	2300      	moveq	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80007fa:	f000 fa2b 	bl	8000c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	233f      	movs	r3, #63	; 0x3f
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fde8 	bl	80033f8 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <_Z18SystemClock_Configv+0x100>
  {
    Error_Handler();
 8000838:	f000 fa0c 	bl	8000c54 <Error_Handler>
  }
}
 800083c:	bf00      	nop
 800083e:	3770      	adds	r7, #112	; 0x70
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	58000400 	.word	0x58000400
 8000848:	58024800 	.word	0x58024800

0800084c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDMMC1_Init 0 */
	__HAL_RCC_SDMMC1_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8000854:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000858:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800085a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8000864:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000872:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <_ZL17MX_SDMMC1_SD_Initv+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000890:	2205      	movs	r2, #5
 8000892:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	58024400 	.word	0x58024400
 80008a4:	24000094 	.word	0x24000094
 80008a8:	52007000 	.word	0x52007000

080008ac <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 80008cc:	4a24      	ldr	r2, [pc, #144]	; (8000960 <_ZL12MX_TIM5_Initv+0xb4>)
 80008ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 80008d2:	2263      	movs	r2, #99	; 0x63
 80008d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000000-1;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 80008de:	4a21      	ldr	r2, [pc, #132]	; (8000964 <_ZL12MX_TIM5_Initv+0xb8>)
 80008e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80008ee:	481b      	ldr	r0, [pc, #108]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 80008f0:	f006 fe1e 	bl	8007530 <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf14      	ite	ne
 80008fa:	2301      	movne	r3, #1
 80008fc:	2300      	moveq	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 8000904:	f000 f9a6 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 8000916:	f006 fff3 	bl	8007900 <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	bf14      	ite	ne
 8000920:	2301      	movne	r3, #1
 8000922:	2300      	moveq	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <_ZL12MX_TIM5_Initv+0x82>
  {
    Error_Handler();
 800092a:	f000 f993 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4808      	ldr	r0, [pc, #32]	; (800095c <_ZL12MX_TIM5_Initv+0xb0>)
 800093c:	f007 fa34 	bl	8007da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf14      	ite	ne
 8000946:	2301      	movne	r3, #1
 8000948:	2300      	moveq	r3, #0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <_ZL12MX_TIM5_Initv+0xa8>
  {
    Error_Handler();
 8000950:	f000 f980 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	24000110 	.word	0x24000110
 8000960:	40000c00 	.word	0x40000c00
 8000964:	000f423f 	.word	0x000f423f

08000968 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800096e:	4a2d      	ldr	r2, [pc, #180]	; (8000a24 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b0:	481b      	ldr	r0, [pc, #108]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009b2:	f007 fa9f 	bl	8007ef4 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bf14      	ite	ne
 80009bc:	2301      	movne	r3, #1
 80009be:	2300      	moveq	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80009c6:	f000 f945 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4814      	ldr	r0, [pc, #80]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ce:	f008 fa7d 	bl	8008ecc <HAL_UARTEx_SetTxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80009e2:	f000 f937 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ea:	f008 faad 	bl	8008f48 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf14      	ite	ne
 80009f4:	2301      	movne	r3, #1
 80009f6:	2300      	moveq	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80009fe:	f000 f929 	bl	8000c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a04:	f008 fa29 	bl	8008e5a <HAL_UARTEx_DisableFifoMode>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000a18:	f000 f91c 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2400015c 	.word	0x2400015c
 8000a24:	40004800 	.word	0x40004800

08000a28 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b7f      	ldr	r3, [pc, #508]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a7d      	ldr	r2, [pc, #500]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b7b      	ldr	r3, [pc, #492]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0304 	and.w	r3, r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5c:	4b77      	ldr	r3, [pc, #476]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	4a76      	ldr	r2, [pc, #472]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6c:	4b73      	ldr	r3, [pc, #460]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b70      	ldr	r3, [pc, #448]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	4a6e      	ldr	r2, [pc, #440]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8a:	4b6c      	ldr	r3, [pc, #432]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b68      	ldr	r3, [pc, #416]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	4a67      	ldr	r2, [pc, #412]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa8:	4b64      	ldr	r3, [pc, #400]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	4b61      	ldr	r3, [pc, #388]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	4a5f      	ldr	r2, [pc, #380]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000abe:	f043 0308 	orr.w	r3, r3, #8
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac6:	4b5d      	ldr	r3, [pc, #372]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad4:	4b59      	ldr	r3, [pc, #356]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ada:	4a58      	ldr	r2, [pc, #352]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae4:	4b55      	ldr	r3, [pc, #340]	; (8000c3c <_ZL12MX_GPIO_Initv+0x214>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af8:	4851      	ldr	r0, [pc, #324]	; (8000c40 <_ZL12MX_GPIO_Initv+0x218>)
 8000afa:	f001 ffff 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	4850      	ldr	r0, [pc, #320]	; (8000c44 <_ZL12MX_GPIO_Initv+0x21c>)
 8000b04:	f001 fffa 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	4b4e      	ldr	r3, [pc, #312]	; (8000c48 <_ZL12MX_GPIO_Initv+0x220>)
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	484b      	ldr	r0, [pc, #300]	; (8000c4c <_ZL12MX_GPIO_Initv+0x224>)
 8000b1e:	f001 fe25 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b22:	2332      	movs	r3, #50	; 0x32
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b32:	230b      	movs	r3, #11
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4843      	ldr	r0, [pc, #268]	; (8000c4c <_ZL12MX_GPIO_Initv+0x224>)
 8000b3e:	f001 fe15 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b42:	2386      	movs	r3, #134	; 0x86
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b52:	230b      	movs	r3, #11
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	483c      	ldr	r0, [pc, #240]	; (8000c50 <_ZL12MX_GPIO_Initv+0x228>)
 8000b5e:	f001 fe05 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b62:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4831      	ldr	r0, [pc, #196]	; (8000c40 <_ZL12MX_GPIO_Initv+0x218>)
 8000b7c:	f001 fdf6 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b92:	230b      	movs	r3, #11
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4828      	ldr	r0, [pc, #160]	; (8000c40 <_ZL12MX_GPIO_Initv+0x218>)
 8000b9e:	f001 fde5 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ba2:	2340      	movs	r3, #64	; 0x40
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4822      	ldr	r0, [pc, #136]	; (8000c44 <_ZL12MX_GPIO_Initv+0x21c>)
 8000bba:	f001 fdd7 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481c      	ldr	r0, [pc, #112]	; (8000c44 <_ZL12MX_GPIO_Initv+0x21c>)
 8000bd2:	f001 fdcb 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bd6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000be8:	230a      	movs	r3, #10
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4817      	ldr	r0, [pc, #92]	; (8000c50 <_ZL12MX_GPIO_Initv+0x228>)
 8000bf4:	f001 fdba 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000bf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480f      	ldr	r0, [pc, #60]	; (8000c4c <_ZL12MX_GPIO_Initv+0x224>)
 8000c0e:	f001 fdad 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <_ZL12MX_GPIO_Initv+0x21c>)
 8000c30:	f001 fd9c 	bl	800276c <HAL_GPIO_Init>

}
 8000c34:	bf00      	nop
 8000c36:	3730      	adds	r7, #48	; 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020400 	.word	0x58020400
 8000c44:	58021800 	.word	0x58021800
 8000c48:	11110000 	.word	0x11110000
 8000c4c:	58020800 	.word	0x58020800
 8000c50:	58020000 	.word	0x58020000

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		flash_error();
 8000c5c:	f7ff fd38 	bl	80006d0 <_Z11flash_errorv>
 8000c60:	e7fc      	b.n	8000c5c <Error_Handler+0x8>

08000c62 <_ZN8hitspool3HitC1E13PayloadType_tth>:

    //Base hit constructor/destructor
    Hit::Hit(){
        this->pl_type = PL_INVALID;
    }
    Hit::Hit(PayloadType_t pl_type, u16 launch_time, u8 tdc){
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4603      	mov	r3, r0
 8000c72:	70fb      	strb	r3, [r7, #3]
 8000c74:	460b      	mov	r3, r1
 8000c76:	803b      	strh	r3, [r7, #0]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	70bb      	strb	r3, [r7, #2]
        this->pl_type = pl_type;
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	7813      	ldrb	r3, [r2, #0]
 8000c88:	f361 0301 	bfi	r3, r1, #0, #2
 8000c8c:	7013      	strb	r3, [r2, #0]
        this->launch_time = launch_time;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	883a      	ldrh	r2, [r7, #0]
 8000c92:	f8a3 2001 	strh.w	r2, [r3, #1]
        this->tdc = tdc;
 8000c96:	78bb      	ldrb	r3, [r7, #2]
 8000c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c9c:	b2d9      	uxtb	r1, r3
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	7813      	ldrb	r3, [r2, #0]
 8000ca2:	f361 0387 	bfi	r3, r1, #2, #6
 8000ca6:	7013      	strb	r3, [r2, #0]
    }
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_ZN8hitspool6SPEHitC1Eyhht>:

    SPEHit::SPEHit() : Hit(PL_SPE, 0, 0){

    }
    //SPEHit constructor/destructor
    SPEHit::SPEHit(u64 launch_time, u8 tdc, u8 subsample, u16 charge) : Hit(PL_SPE, launch_time, tdc){
 8000cb6:	b590      	push	{r4, r7, lr}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	e9c7 2300 	strd	r2, r3, [r7]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	883a      	ldrh	r2, [r7, #0]
 8000cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cca:	2100      	movs	r1, #0
 8000ccc:	f7ff ffc9 	bl	8000c62 <_ZN8hitspool3HitC1E13PayloadType_tth>

        this->subsample = subsample;
 8000cd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cd8:	b2d9      	uxtb	r1, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	78d3      	ldrb	r3, [r2, #3]
 8000cde:	f361 0306 	bfi	r3, r1, #0, #7
 8000ce2:	70d3      	strb	r3, [r2, #3]
        this->charge = charge;
 8000ce4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f002 0101 	and.w	r1, r2, #1
 8000cf2:	01cc      	lsls	r4, r1, #7
 8000cf4:	78d9      	ldrb	r1, [r3, #3]
 8000cf6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	4301      	orrs	r1, r0
 8000d00:	70d9      	strb	r1, [r3, #3]
 8000d02:	0851      	lsrs	r1, r2, #1
 8000d04:	b289      	uxth	r1, r1
 8000d06:	b2c9      	uxtb	r1, r1
 8000d08:	2000      	movs	r0, #0
 8000d0a:	4301      	orrs	r1, r0
 8000d0c:	7119      	strb	r1, [r3, #4]
 8000d0e:	0a52      	lsrs	r2, r2, #9
 8000d10:	b292      	uxth	r2, r2
 8000d12:	f002 0207 	and.w	r2, r2, #7
 8000d16:	f002 0007 	and.w	r0, r2, #7
 8000d1a:	795a      	ldrb	r2, [r3, #5]
 8000d1c:	f022 0207 	bic.w	r2, r2, #7
 8000d20:	4611      	mov	r1, r2
 8000d22:	4602      	mov	r2, r0
 8000d24:	430a      	orrs	r2, r1
 8000d26:	715a      	strb	r2, [r3, #5]

    }
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd90      	pop	{r4, r7, pc}

08000d32 <_ZN8hitspool6SPEHit9calc_sizeEv>:
    
    SPEHit::~SPEHit(){}

    size_t SPEHit::calc_size(){
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
        return sizeof(SPEHit);
 8000d3a:	2306      	movs	r3, #6
    }
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <_ZN8hitspool6SPEHit8tostringB5cxx11Ev>:

    std::string SPEHit::tostring(){
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4a:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8000d4e:	af02      	add	r7, sp, #8
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	6018      	str	r0, [r3, #0]
 8000d54:	463b      	mov	r3, r7
 8000d56:	6019      	str	r1, [r3, #0]
        sprintf(buffer, "SPEHit info:\r\n"
                "\t launch_t:    0x%8X\r\n"
                "\t tdc:         0x%8X\r\n"
                "\t subsample:   0x%8X\r\n"
                "\t charge:      0x%8X\r\n",
                this->launch_time,
 8000d58:	463b      	mov	r3, r7
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000d60:	b29b      	uxth	r3, r3
        sprintf(buffer, "SPEHit info:\r\n"
 8000d62:	461d      	mov	r5, r3
                this->tdc,
 8000d64:	463b      	mov	r3, r7
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8000d6e:	b2db      	uxtb	r3, r3
        sprintf(buffer, "SPEHit info:\r\n"
 8000d70:	461e      	mov	r6, r3
                this->subsample,
 8000d72:	463b      	mov	r3, r7
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	78db      	ldrb	r3, [r3, #3]
 8000d78:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d7c:	b2db      	uxtb	r3, r3
        sprintf(buffer, "SPEHit info:\r\n"
 8000d7e:	461c      	mov	r4, r3
                this->charge
 8000d80:	463b      	mov	r3, r7
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	78da      	ldrb	r2, [r3, #3]
 8000d86:	09d2      	lsrs	r2, r2, #7
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	7919      	ldrb	r1, [r3, #4]
 8000d8c:	0049      	lsls	r1, r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	795b      	ldrb	r3, [r3, #5]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
        sprintf(buffer, "SPEHit info:\r\n"
 8000d9c:	f107 000c 	add.w	r0, r7, #12
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9400      	str	r4, [sp, #0]
 8000da4:	4633      	mov	r3, r6
 8000da6:	462a      	mov	r2, r5
 8000da8:	490f      	ldr	r1, [pc, #60]	; (8000de8 <_ZN8hitspool6SPEHit8tostringB5cxx11Ev+0xa0>)
 8000daa:	f00d feef 	bl	800eb8c <siprintf>
                );
        return std::string(buffer);
 8000dae:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000db2:	4618      	mov	r0, r3
 8000db4:	f00d fce7 	bl	800e786 <_ZNSaIcEC1Ev>
 8000db8:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8000dbc:	f107 010c 	add.w	r1, r7, #12
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	f00d fd4a 	bl	800e85c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000dc8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f00d fcdb 	bl	800e788 <_ZNSaIcED1Ev>
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	1d3a      	adds	r2, r7, #4
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	601a      	str	r2, [r3, #0]
    }
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	0800f2c4 	.word	0x0800f2c4

08000dec <_ZN8hitspool6MPEHitC1EyhtPh>:

    //MPEHit constructor/destructor
    MPEHit::MPEHit() : Hit(PL_MPE, 0, 0){

    }
    MPEHit::MPEHit(u64 launch_time, u8 tdc, u16 nsamples, u8 *waveform) : Hit(PL_MPE, launch_time, tdc){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	e9c7 2300 	strd	r2, r3, [r7]
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	883a      	ldrh	r2, [r7, #0]
 8000dfc:	7e3b      	ldrb	r3, [r7, #24]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	f7ff ff2f 	bl	8000c62 <_ZN8hitspool3HitC1E13PayloadType_tth>
            this->nsamples = nsamples;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	8bba      	ldrh	r2, [r7, #28]
 8000e08:	f8a3 2003 	strh.w	r2, [r3, #3]
            //this->waveform = new u8(2 * 2 * nsamples); //nsamples, 2 bytes / sample, 2 traces
            memcpy(&this->waveform[0], waveform, 2 * 2 * nsamples);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1d58      	adds	r0, r3, #5
 8000e10:	8bbb      	ldrh	r3, [r7, #28]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	461a      	mov	r2, r3
 8000e16:	6a39      	ldr	r1, [r7, #32]
 8000e18:	f00d fd8a 	bl	800e930 <memcpy>

    }
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZN8hitspool6MPEHitnwEjt>:
        //delete this->waveform;
        free(this);
    }

    //Overload the new operator so that the malloc will handle 
    void* MPEHit::operator new(size_t size, u16 nsamples){
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	807b      	strh	r3, [r7, #2]
        void* p = ::operator new(size + 2*nsamples * sizeof(u16));     
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	009a      	lsls	r2, r3, #2
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f00d fc92 	bl	800e764 <_Znwj>
 8000e40:	4603      	mov	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]

        return p;
 8000e44:	68fb      	ldr	r3, [r7, #12]
    };
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <_ZN8hitspool6MPEHit13print_samplesEt>:

    void MPEHit::print_samples(u16 nsamples){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
        u16 n_to_print = nsamples < this->nsamples ? nsamples : this->nsamples;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	887a      	ldrh	r2, [r7, #2]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d304      	bcc.n	8000e74 <_ZN8hitspool6MPEHit13print_samplesEt+0x24>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	e000      	b.n	8000e76 <_ZN8hitspool6MPEHit13print_samplesEt+0x26>
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	81fb      	strh	r3, [r7, #14]
        for(int ch = 0; ch < 2; ch++){
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	dc3b      	bgt.n	8000efa <_ZN8hitspool6MPEHit13print_samplesEt+0xaa>
            print("Ch%02d\r\n\t", ch);
 8000e82:	6979      	ldr	r1, [r7, #20]
 8000e84:	481f      	ldr	r0, [pc, #124]	; (8000f04 <_ZN8hitspool6MPEHit13print_samplesEt+0xb4>)
 8000e86:	f7ff fbff 	bl	8000688 <print>
            for(int i = 0; i < n_to_print; i++){
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	da2a      	bge.n	8000eec <_ZN8hitspool6MPEHit13print_samplesEt+0x9c>
                //Cast array to u16 and go from there. 
                if(i%10 == 0 && i != 0)
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <_ZN8hitspool6MPEHit13print_samplesEt+0xb8>)
 8000e9a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e9e:	109a      	asrs	r2, r3, #2
 8000ea0:	17cb      	asrs	r3, r1, #31
 8000ea2:	1ad2      	subs	r2, r2, r3
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1aca      	subs	r2, r1, r3
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d105      	bne.n	8000ebe <_ZN8hitspool6MPEHit13print_samplesEt+0x6e>
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <_ZN8hitspool6MPEHit13print_samplesEt+0x6e>
                    print("\r\n\t");
 8000eb8:	4814      	ldr	r0, [pc, #80]	; (8000f0c <_ZN8hitspool6MPEHit13print_samplesEt+0xbc>)
 8000eba:	f7ff fbe5 	bl	8000688 <print>
                print("%5u ", ((u16*)(this->waveform))[i + ch*this->nsamples]);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	1d5a      	adds	r2, r3, #5
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fb03 f101 	mul.w	r1, r3, r1
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	440b      	add	r3, r1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	480c      	ldr	r0, [pc, #48]	; (8000f10 <_ZN8hitspool6MPEHit13print_samplesEt+0xc0>)
 8000ee0:	f7ff fbd2 	bl	8000688 <print>
            for(int i = 0; i < n_to_print; i++){
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e7d0      	b.n	8000e8e <_ZN8hitspool6MPEHit13print_samplesEt+0x3e>

            }
            print("\r\n");
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <_ZN8hitspool6MPEHit13print_samplesEt+0xc4>)
 8000eee:	f7ff fbcb 	bl	8000688 <print>
        for(int ch = 0; ch < 2; ch++){
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e7c0      	b.n	8000e7c <_ZN8hitspool6MPEHit13print_samplesEt+0x2c>
        }     
        
    }
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	0800f32c 	.word	0x0800f32c
 8000f08:	66666667 	.word	0x66666667
 8000f0c:	0800f338 	.word	0x0800f338
 8000f10:	0800f33c 	.word	0x0800f33c
 8000f14:	0800f344 	.word	0x0800f344

08000f18 <_ZN8hitspool6MPEHit9calc_sizeEv>:




    size_t MPEHit::calc_size(){
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
        //-1 is so we don't double count the first byte. 
        return sizeof(MPEHit) + sizeof(u16) * (2*this->nsamples) -1;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	3305      	adds	r3, #5
    }
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_ZN8hitspool6MPEHit8tostringB5cxx11Ev>:

    std::string MPEHit::tostring(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000f3e:	af02      	add	r7, sp, #8
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	6018      	str	r0, [r3, #0]
 8000f44:	463b      	mov	r3, r7
 8000f46:	6019      	str	r1, [r3, #0]
        char buffer[1024];        
        sprintf(buffer, "MPEHit info:\r\n"
                "\t launch_t:    0x%8X\r\n"
                "\t tdc:         0x%8X\r\n"
                "\t nsamples:    0x%8X\r\n",
                this->launch_time,
 8000f48:	463b      	mov	r3, r7
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000f50:	b29b      	uxth	r3, r3
        sprintf(buffer, "MPEHit info:\r\n"
 8000f52:	461a      	mov	r2, r3
                this->tdc,
 8000f54:	463b      	mov	r3, r7
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8000f5e:	b2db      	uxtb	r3, r3
        sprintf(buffer, "MPEHit info:\r\n"
 8000f60:	4619      	mov	r1, r3
                this->nsamples
 8000f62:	463b      	mov	r3, r7
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f6a:	b29b      	uxth	r3, r3
        sprintf(buffer, "MPEHit info:\r\n"
 8000f6c:	f107 000c 	add.w	r0, r7, #12
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	460b      	mov	r3, r1
 8000f74:	490f      	ldr	r1, [pc, #60]	; (8000fb4 <_ZN8hitspool6MPEHit8tostringB5cxx11Ev+0x7c>)
 8000f76:	f00d fe09 	bl	800eb8c <siprintf>
                );
        return std::string(buffer);
 8000f7a:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00d fc01 	bl	800e786 <_ZNSaIcEC1Ev>
 8000f84:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8000f88:	f107 010c 	add.w	r1, r7, #12
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f00d fc64 	bl	800e85c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000f94:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00d fbf5 	bl	800e788 <_ZNSaIcED1Ev>
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	1d3a      	adds	r2, r7, #4
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	601a      	str	r2, [r3, #0]

    }
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0800f348 	.word	0x0800f348

08000fb8 <_Z19run_SDMMC_testbenchv>:
#include <cstdio>//sprintf


using namespace hitspool;

void run_SDMMC_testbench(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0b8      	sub	sp, #224	; 0xe0
 8000fbc:	af00      	add	r7, sp, #0

	print("-----------------------------------\r\n");
 8000fbe:	484c      	ldr	r0, [pc, #304]	; (80010f0 <_Z19run_SDMMC_testbenchv+0x138>)
 8000fc0:	f7ff fb62 	bl	8000688 <print>
	print("---- SDMMC Interface Testbench ----\r\n");
 8000fc4:	484b      	ldr	r0, [pc, #300]	; (80010f4 <_Z19run_SDMMC_testbenchv+0x13c>)
 8000fc6:	f7ff fb5f 	bl	8000688 <print>
	print("-----------------------------------\r\n\n");
 8000fca:	484b      	ldr	r0, [pc, #300]	; (80010f8 <_Z19run_SDMMC_testbenchv+0x140>)
 8000fcc:	f7ff fb5c 	bl	8000688 <print>

	for (int i = 0; i < 10; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	dc1b      	bgt.n	8001016 <_Z19run_SDMMC_testbenchv+0x5e>

		HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	4846      	ldr	r0, [pc, #280]	; (80010fc <_Z19run_SDMMC_testbenchv+0x144>)
 8000fe2:	f001 fda4 	bl	8002b2e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f001 fa80 	bl	80024ec <HAL_Delay>
		HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 8000fec:	2101      	movs	r1, #1
 8000fee:	4843      	ldr	r0, [pc, #268]	; (80010fc <_Z19run_SDMMC_testbenchv+0x144>)
 8000ff0:	f001 fd9d 	bl	8002b2e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f001 fa79 	bl	80024ec <HAL_Delay>
		HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8000ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffe:	483f      	ldr	r0, [pc, #252]	; (80010fc <_Z19run_SDMMC_testbenchv+0x144>)
 8001000:	f001 fd95 	bl	8002b2e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001004:	2064      	movs	r0, #100	; 0x64
 8001006:	f001 fa71 	bl	80024ec <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 800100a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800100e:	3301      	adds	r3, #1
 8001010:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001014:	e7df      	b.n	8000fd6 <_Z19run_SDMMC_testbenchv+0x1e>

	}
	HAL_Delay(500);
 8001016:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101a:	f001 fa67 	bl	80024ec <HAL_Delay>

	FIL *fil = (FIL*) malloc(sizeof(FIL));		       //File handle
 800101e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001022:	f00d fc75 	bl	800e910 <malloc>
 8001026:	4603      	mov	r3, r0
 8001028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	FILINFO *finfo = (FILINFO*) malloc(sizeof(FILINFO));  //File information hanle
 800102c:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001030:	f00d fc6e 	bl	800e910 <malloc>
 8001034:	4603      	mov	r3, r0
 8001036:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	FRESULT fres = FR_OK;   				   //Result after operati ons
 800103a:	2300      	movs	r3, #0
 800103c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	FATFS *fs = (FATFS*) malloc(sizeof(FATFS)); 	       //Filesystem handle
 8001040:	f44f 7012 	mov.w	r0, #584	; 0x248
 8001044:	f00d fc64 	bl	800e910 <malloc>
 8001048:	4603      	mov	r3, r0
 800104a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	UNUSED(fres);

	char fs_buffer[200];

	//Mount the filesystem.
	print("Mounting filesystem.\r\n");
 800104e:	482c      	ldr	r0, [pc, #176]	; (8001100 <_Z19run_SDMMC_testbenchv+0x148>)
 8001050:	f7ff fb1a 	bl	8000688 <print>
	sprintf(fs_buffer, "/");
 8001054:	463b      	mov	r3, r7
 8001056:	492b      	ldr	r1, [pc, #172]	; (8001104 <_Z19run_SDMMC_testbenchv+0x14c>)
 8001058:	4618      	mov	r0, r3
 800105a:	f00d fd97 	bl	800eb8c <siprintf>
	fres = f_mount(fs, fs_buffer, 1);
 800105e:	463b      	mov	r3, r7
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001068:	f00c faec 	bl	800d644 <f_mount>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	if (fres != FR_OK){
 8001072:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <_Z19run_SDMMC_testbenchv+0xcc>
		print("Failed to mount filesystem!!!\r\n");
 800107a:	4823      	ldr	r0, [pc, #140]	; (8001108 <_Z19run_SDMMC_testbenchv+0x150>)
 800107c:	f7ff fb04 	bl	8000688 <print>
		Error_Handler();
 8001080:	f7ff fde8 	bl	8000c54 <Error_Handler>
	}
	print("Done.\r\n");
 8001084:	4821      	ldr	r0, [pc, #132]	; (800110c <_Z19run_SDMMC_testbenchv+0x154>)
 8001086:	f7ff faff 	bl	8000688 <print>

	//f_ls(fs_buffer);
    G_STATUS gres = G_NOTOK;
 800108a:	2301      	movs	r3, #1
 800108c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

    gres = hs_hit_io_unit_test();
 8001090:	f000 fd3e 	bl	8001b10 <_ZN8hitspool19hs_hit_io_unit_testEv>
 8001094:	4603      	mov	r3, r0
 8001096:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    print("hs_unit_write_loop()\t %s (%d)\r\n", gres == G_OK ? "PASSED" : "FAILED", gres);
 800109a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <_Z19run_SDMMC_testbenchv+0xee>
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <_Z19run_SDMMC_testbenchv+0x158>)
 80010a4:	e000      	b.n	80010a8 <_Z19run_SDMMC_testbenchv+0xf0>
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <_Z19run_SDMMC_testbenchv+0x15c>)
 80010a8:	f897 20cb 	ldrb.w	r2, [r7, #203]	; 0xcb
 80010ac:	4619      	mov	r1, r3
 80010ae:	481a      	ldr	r0, [pc, #104]	; (8001118 <_Z19run_SDMMC_testbenchv+0x160>)
 80010b0:	f7ff faea 	bl	8000688 <print>

	print("Unmounting filesystem.\r\n");
 80010b4:	4819      	ldr	r0, [pc, #100]	; (800111c <_Z19run_SDMMC_testbenchv+0x164>)
 80010b6:	f7ff fae7 	bl	8000688 <print>
	sprintf(fs_buffer, "/");
 80010ba:	463b      	mov	r3, r7
 80010bc:	4911      	ldr	r1, [pc, #68]	; (8001104 <_Z19run_SDMMC_testbenchv+0x14c>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f00d fd64 	bl	800eb8c <siprintf>
	fres = f_mount(0, fs_buffer, 0);
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f00c faba 	bl	800d644 <f_mount>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	if(fres != FR_OK)
 80010d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <_Z19run_SDMMC_testbenchv+0x12a>
		Error_Handler();
 80010de:	f7ff fdb9 	bl	8000c54 <Error_Handler>

	print("Done.\r\n");
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <_Z19run_SDMMC_testbenchv+0x154>)
 80010e4:	f7ff fad0 	bl	8000688 <print>


}
 80010e8:	bf00      	nop
 80010ea:	37e0      	adds	r7, #224	; 0xe0
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	0800f3dc 	.word	0x0800f3dc
 80010f4:	0800f404 	.word	0x0800f404
 80010f8:	0800f42c 	.word	0x0800f42c
 80010fc:	58020400 	.word	0x58020400
 8001100:	0800f454 	.word	0x0800f454
 8001104:	0800f46c 	.word	0x0800f46c
 8001108:	0800f470 	.word	0x0800f470
 800110c:	0800f490 	.word	0x0800f490
 8001110:	0800f498 	.word	0x0800f498
 8001114:	0800f4a0 	.word	0x0800f4a0
 8001118:	0800f4a8 	.word	0x0800f4a8
 800111c:	0800f4c8 	.word	0x0800f4c8

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_MspInit+0x30>)
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_MspInit+0x30>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_MspInit+0x30>)
 8001138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	58024400 	.word	0x58024400

08001154 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0ba      	sub	sp, #232	; 0xe8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	22bc      	movs	r2, #188	; 0xbc
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f00d fc03 	bl	800e980 <memset>
  if(hsd->Instance==SDMMC1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a37      	ldr	r2, [pc, #220]	; (800125c <HAL_SD_MspInit+0x108>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d166      	bne.n	8001252 <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001188:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800118a:	2300      	movs	r3, #0
 800118c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fcbc 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800119e:	f7ff fd59 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011a8:	4a2d      	ldr	r2, [pc, #180]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	4a26      	ldr	r2, [pc, #152]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_SD_MspInit+0x10c>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80011fc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001200:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001216:	230c      	movs	r3, #12
 8001218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001220:	4619      	mov	r1, r3
 8001222:	4810      	ldr	r0, [pc, #64]	; (8001264 <HAL_SD_MspInit+0x110>)
 8001224:	f001 faa2 	bl	800276c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001228:	2304      	movs	r3, #4
 800122a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001240:	230c      	movs	r3, #12
 8001242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800124a:	4619      	mov	r1, r3
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <HAL_SD_MspInit+0x114>)
 800124e:	f001 fa8d 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	37e8      	adds	r7, #232	; 0xe8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	52007000 	.word	0x52007000
 8001260:	58024400 	.word	0x58024400
 8001264:	58020800 	.word	0x58020800
 8001268:	58020c00 	.word	0x58020c00

0800126c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_TIM_Base_MspInit+0x48>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d116      	bne.n	80012ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001280:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2101      	movs	r1, #1
 80012a0:	2032      	movs	r0, #50	; 0x32
 80012a2:	f001 fa2e 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80012a6:	2032      	movs	r0, #50	; 0x32
 80012a8:	f001 fa45 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40000c00 	.word	0x40000c00
 80012b8:	58024400 	.word	0x58024400

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0b8      	sub	sp, #224	; 0xe0
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	22bc      	movs	r2, #188	; 0xbc
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f00d fb4f 	bl	800e980 <memset>
  if(huart->Instance==USART3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a25      	ldr	r2, [pc, #148]	; (800137c <HAL_UART_MspInit+0xc0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d142      	bne.n	8001372 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ec:	2302      	movs	r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fc08 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001306:	f7ff fca5 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_UART_MspInit+0xc4>)
 800130c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_UART_MspInit+0xc4>)
 8001312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001316:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_UART_MspInit+0xc4>)
 800131c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_UART_MspInit+0xc4>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_UART_MspInit+0xc4>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_UART_MspInit+0xc4>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001346:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001360:	2307      	movs	r3, #7
 8001362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001366:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_UART_MspInit+0xc8>)
 800136e:	f001 f9fd 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	37e0      	adds	r7, #224	; 0xe0
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40004800 	.word	0x40004800
 8001380:	58024400 	.word	0x58024400
 8001384:	58020c00 	.word	0x58020c00

08001388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800138c:	e7fe      	b.n	800138c <NMI_Handler+0x4>

0800138e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <MemManage_Handler+0x4>

0800139a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f001 f86a 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <TIM5_IRQHandler+0x10>)
 80013e2:	f006 f96d 	bl	80076c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	24000110 	.word	0x24000110

080013f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
//
//	 HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
//
//  }

}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_ZN8hitspool8streamerC1Ev>:

namespace hitspool {

// streamer class members

streamer::streamer() {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NUM_PMT; i++) {
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	dc49      	bgt.n	80014aa <_ZN8hitspool8streamerC1Ev+0xa6>
		nhits_inbuff[i] = 0;
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	2200      	movs	r2, #0
 8001420:	805a      	strh	r2, [r3, #2]
		sprintf(live_filenames[i], "NULL");
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	4921      	ldr	r1, [pc, #132]	; (80014b4 <_ZN8hitspool8streamerC1Ev+0xb0>)
 800142e:	4618      	mov	r0, r3
 8001430:	f00d fbac 	bl	800eb8c <siprintf>
		handler_active[i] = false;
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
		handler_open[i] = false;
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	f203 1305 	addw	r3, r3, #261	; 0x105
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]

		n_consumed[i] = 0;
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
		buffer_full[i] = false;
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	441a      	add	r2, r3
 8001466:	f241 5368 	movw	r3, #5480	; 0x1568
 800146a:	4413      	add	r3, r2
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]

		n_written[i] = 0;
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
		n_written_tot[i] = 0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 8001488:	2100      	movs	r1, #0
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		total_bytes_written = 0;
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	f241 5378 	movw	r3, #5496	; 0x1578
 8001494:	4413      	add	r3, r2
 8001496:	f04f 0000 	mov.w	r0, #0
 800149a:	f04f 0100 	mov.w	r1, #0
 800149e:	e9c3 0100 	strd	r0, r1, [r3]
	for (int i = 0; i < NUM_PMT; i++) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e7b2      	b.n	8001410 <_ZN8hitspool8streamerC1Ev+0xc>
	}
}
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	0800f508 	.word	0x0800f508

080014b8 <_ZN8hitspool8streamer16init_write_headsEv>:
	// free(spep);
	// free(mpep);
	// free(wubp);
}

void streamer::init_write_heads() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUM_PMT; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dc27      	bgt.n	800151a <_ZN8hitspool8streamer16init_write_headsEv+0x62>
		sprintf((char *)write_buff[i], "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	4911      	ldr	r1, [pc, #68]	; (8001524 <_ZN8hitspool8streamer16init_write_headsEv+0x6c>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f00d fb54 	bl	800eb8c <siprintf>
		n_consumed[i] = 0;
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
		write_head[i] = (u8 *)write_buff[i];
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	18d1      	adds	r1, r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 800150e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < NUM_PMT; i++) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e7d4      	b.n	80014c4 <_ZN8hitspool8streamer16init_write_headsEv+0xc>
	}
}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	0800f510 	.word	0x0800f510

08001528 <_ZN8hitspool8streamer18print_buffer_headsEv>:

// Print the first 12 bytes of the write buffer and the write head.
void streamer::print_buffer_heads() {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	print("Buffer contents\r\n");
 8001530:	4825      	ldr	r0, [pc, #148]	; (80015c8 <_ZN8hitspool8streamer18print_buffer_headsEv+0xa0>)
 8001532:	f7ff f8a9 	bl	8000688 <print>
	print("-----------------------------------\r\n");
 8001536:	4825      	ldr	r0, [pc, #148]	; (80015cc <_ZN8hitspool8streamer18print_buffer_headsEv+0xa4>)
 8001538:	f7ff f8a6 	bl	8000688 <print>
	char buff[6];
	for (int i = 0; i < NUM_PMT; i++) {
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	dc3b      	bgt.n	80015be <_ZN8hitspool8streamer18print_buffer_headsEv+0x96>
		print("PMT%02d:\r\n", i);
 8001546:	6979      	ldr	r1, [r7, #20]
 8001548:	4821      	ldr	r0, [pc, #132]	; (80015d0 <_ZN8hitspool8streamer18print_buffer_headsEv+0xa8>)
 800154a:	f7ff f89d 	bl	8000688 <print>
		print("Address of buffer[%02d] is %p\n", i, (void *)write_buff[i]);
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	461a      	mov	r2, r3
 8001562:	6979      	ldr	r1, [r7, #20]
 8001564:	481b      	ldr	r0, [pc, #108]	; (80015d4 <_ZN8hitspool8streamer18print_buffer_headsEv+0xac>)
 8001566:	f7ff f88f 	bl	8000688 <print>
		print("Address of head[%02d]   is %p\n", i, (void *)write_head[i]);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8001572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001576:	461a      	mov	r2, r3
 8001578:	6979      	ldr	r1, [r7, #20]
 800157a:	4817      	ldr	r0, [pc, #92]	; (80015d8 <_ZN8hitspool8streamer18print_buffer_headsEv+0xb0>)
 800157c:	f7ff f884 	bl	8000688 <print>
		memcpy(buff, write_head[i], 6);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8001588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	6810      	ldr	r0, [r2, #0]
 8001592:	6018      	str	r0, [r3, #0]
 8001594:	8892      	ldrh	r2, [r2, #4]
 8001596:	809a      	strh	r2, [r3, #4]
		print("\tBuffer: %s\r\n"
			  "\tHead:   %s\r\n",
			  write_buff[i], buff);
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	025b      	lsls	r3, r3, #9
 80015a2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
		print("\tBuffer: %s\r\n"
 80015aa:	f107 020c 	add.w	r2, r7, #12
 80015ae:	4619      	mov	r1, r3
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <_ZN8hitspool8streamer18print_buffer_headsEv+0xb4>)
 80015b2:	f7ff f869 	bl	8000688 <print>
	for (int i = 0; i < NUM_PMT; i++) {
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e7c0      	b.n	8001540 <_ZN8hitspool8streamer18print_buffer_headsEv+0x18>
	}
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800f548 	.word	0x0800f548
 80015cc:	0800f55c 	.word	0x0800f55c
 80015d0:	0800f584 	.word	0x0800f584
 80015d4:	0800f590 	.word	0x0800f590
 80015d8:	0800f5b0 	.word	0x0800f5b0
 80015dc:	0800f5d0 	.word	0x0800f5d0

080015e0 <_ZN8hitspool8streamer18init_file_handlersEm>:

void streamer::init_file_handlers(u32 inittime) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < NUM_PMT; i++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	dc48      	bgt.n	8001686 <_ZN8hitspool8streamer18init_file_handlersEm+0xa6>
		nhits_inbuff[i] = 0;
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	2200      	movs	r2, #0
 80015fe:	805a      	strh	r2, [r3, #2]
		handler_active[i] = FALSE;
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
		buffer_full[i] = FALSE;
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	441a      	add	r2, r3
 8001614:	f241 5368 	movw	r3, #5480	; 0x1568
 8001618:	4413      	add	r3, r2
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
		sprintf(live_filenames[i], "hitspool/PMT%02d/0x%08lX.spool", i, inittime);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	1d18      	adds	r0, r3, #4
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4918      	ldr	r1, [pc, #96]	; (8001690 <_ZN8hitspool8streamer18init_file_handlersEm+0xb0>)
 800162e:	f00d faad 	bl	800eb8c <siprintf>

		f_op_res[i] =
			f_open(&file_handlers[i], live_filenames[i], 
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001638:	fb02 f303 	mul.w	r3, r2, r3
 800163c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	18d0      	adds	r0, r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4413      	add	r3, r2
 800164c:	3304      	adds	r3, #4
 800164e:	220b      	movs	r2, #11
 8001650:	4619      	mov	r1, r3
 8001652:	f00c f83d 	bl	800d6d0 <f_open>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
		f_op_res[i] =
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001664:	460a      	mov	r2, r1
 8001666:	701a      	strb	r2, [r3, #0]
				FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
		print("PMT%02d file opened with fres=(%d)\r\n", i, f_op_res[i]);
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <_ZN8hitspool8streamer18init_file_handlersEm+0xb4>)
 800167a:	f7ff f805 	bl	8000688 <print>
	for (int i = 0; i < NUM_PMT; i++) {
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3301      	adds	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e7b3      	b.n	80015ee <_ZN8hitspool8streamer18init_file_handlersEm+0xe>
	}
	// print("\n");
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	0800f5ec 	.word	0x0800f5ec
 8001694:	0800f60c 	.word	0x0800f60c

08001698 <_ZN8hitspool8streamer19close_file_handlersEv>:
		if (f_op_res[i] != FR_OK)
			print("ERROR syncing file %s; fres = %d\r\n", live_filenames[i], f_op_res[i]);
	}
}

void streamer::close_file_handlers() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < NUM_PMT; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dc2f      	bgt.n	800170a <_ZN8hitspool8streamer19close_file_handlersEv+0x72>
		f_op_res[i] = f_close(&file_handlers[i]);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f44f 7216 	mov.w	r2, #600	; 0x258
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f00c ff05 	bl	800e4cc <f_close>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4619      	mov	r1, r3
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80016d0:	460a      	mov	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
		if (f_op_res[i] != FR_OK)
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00e      	beq.n	8001702 <_ZN8hitspool8streamer19close_file_handlersEv+0x6a>
			print("ERROR closing file %s; fres = %d\r\n", live_filenames[i], f_op_res[i]);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	1d19      	adds	r1, r3, #4
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 7383 	add.w	r3, r3, #262	; 0x106
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <_ZN8hitspool8streamer19close_file_handlersEv+0x80>)
 80016fe:	f7fe ffc3 	bl	8000688 <print>
	for (int i = 0; i < NUM_PMT; i++) {
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e7cc      	b.n	80016a4 <_ZN8hitspool8streamer19close_file_handlersEv+0xc>
	}
	print("Done closing all file handlers.\r\n");
 800170a:	4804      	ldr	r0, [pc, #16]	; (800171c <_ZN8hitspool8streamer19close_file_handlersEv+0x84>)
 800170c:	f7fe ffbc 	bl	8000688 <print>
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	0800f658 	.word	0x0800f658
 800171c:	0800f67c 	.word	0x0800f67c

08001720 <_ZN8hitspool8streamer22check_and_write_bufferEhb>:
	// print_MPEPacket(mpep);
	// print_WUBPacket(wubp);
}

// FIXME: Return an FSTATUS and pass the n_written by reference.
u32 streamer::check_and_write_buffer(u8 PMT, bool force) {
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	460b      	mov	r3, r1
 800172a:	72fb      	strb	r3, [r7, #11]
 800172c:	4613      	mov	r3, r2
 800172e:	72bb      	strb	r3, [r7, #10]
	if ((n_consumed[PMT] >= TARGET_BLOCKSIZE) || force) {
 8001730:	7afb      	ldrb	r3, [r7, #11]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001742:	d203      	bcs.n	800174c <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x2c>
 8001744:	7abb      	ldrb	r3, [r7, #10]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80cf 	beq.w	80018ea <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1ca>
		// Kick off the file write process.
		if (force) {
 800174c:	7abb      	ldrb	r3, [r7, #10]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x4c>
			print("Forcing write of PMT%02d buffer.\r\n"
 8001752:	7af9      	ldrb	r1, [r7, #11]
				  "\t n_consumed: 0x%04X\r\n",
				  PMT, n_consumed[PMT]);
 8001754:	7afb      	ldrb	r3, [r7, #11]
			print("Forcing write of PMT%02d buffer.\r\n"
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	461a      	mov	r2, r3
 8001764:	4866      	ldr	r0, [pc, #408]	; (8001900 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1e0>)
 8001766:	f7fe ff8f 	bl	8000688 <print>
 800176a:	e00b      	b.n	8001784 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x64>
		} else {
			print("PMT%02d buffer meets threshold.\r\n"
 800176c:	7af9      	ldrb	r1, [r7, #11]
				  "\t n_consumed: 0x%04X\r\n",
				  PMT, n_consumed[PMT]);
 800176e:	7afb      	ldrb	r3, [r7, #11]
			print("PMT%02d buffer meets threshold.\r\n"
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	461a      	mov	r2, r3
 800177e:	4861      	ldr	r0, [pc, #388]	; (8001904 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1e4>)
 8001780:	f7fe ff82 	bl	8000688 <print>
		}

		// do some writing things
		buffer_full[PMT] = TRUE;
 8001784:	7afb      	ldrb	r3, [r7, #11]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	441a      	add	r2, r3
 800178a:	f241 5368 	movw	r3, #5480	; 0x1568
 800178e:	4413      	add	r3, r2
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
		handler_active[PMT] = TRUE;
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		f_op_res[PMT] =
			f_write(&file_handlers[PMT], write_buff[PMT], n_consumed[PMT], &n_written[PMT]);
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	18d0      	adds	r0, r2, r3
 80017b2:	7afa      	ldrb	r2, [r7, #11]
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	025b      	lsls	r3, r3, #9
 80017bc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	18d1      	adds	r1, r2, r3
 80017c4:	7afb      	ldrb	r3, [r7, #11]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	3304      	adds	r3, #4
		f_op_res[PMT] =
 80017e2:	7afe      	ldrb	r6, [r7, #11]
			f_write(&file_handlers[PMT], write_buff[PMT], n_consumed[PMT], &n_written[PMT]);
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	f00c fb9a 	bl	800df1e <f_write>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
		f_op_res[PMT] =
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4433      	add	r3, r6
 80017f2:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		if (f_op_res[PMT] != FR_OK) {
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0xf6>
			print("Error writing file %s!\r\n", live_filenames[PMT]);
 8001804:	7afb      	ldrb	r3, [r7, #11]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	3304      	adds	r3, #4
 800180e:	4619      	mov	r1, r3
 8001810:	483d      	ldr	r0, [pc, #244]	; (8001908 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1e8>)
 8001812:	f7fe ff39 	bl	8000688 <print>
		}

		n_written_tot[PMT] += n_written[PMT];
 8001816:	7afa      	ldrb	r2, [r7, #11]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 800181e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	7afa      	ldrb	r2, [r7, #11]
 8001832:	4419      	add	r1, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 800183a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		total_bytes_written += n_written[PMT];
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f241 5378 	movw	r3, #5496	; 0x1578
 8001844:	4413      	add	r3, r2
 8001846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184a:	7afb      	ldrb	r3, [r7, #11]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	461a      	mov	r2, r3
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	1884      	adds	r4, r0, r2
 8001860:	eb41 0503 	adc.w	r5, r1, r3
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	f241 5378 	movw	r3, #5496	; 0x1578
 800186a:	4413      	add	r3, r2
 800186c:	e9c3 4500 	strd	r4, r5, [r3]
		print("written: now: 0x%04X\ttot/PMT: 0x%04X\ttot: 0x%04X\r\n", n_consumed[PMT],
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	6859      	ldr	r1, [r3, #4]
			  n_written[PMT], n_written_tot[PMT]);
 800187e:	7afb      	ldrb	r3, [r7, #11]
		print("written: now: 0x%04X\ttot/PMT: 0x%04X\ttot: 0x%04X\r\n", n_consumed[PMT],
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	6858      	ldr	r0, [r3, #4]
			  n_written[PMT], n_written_tot[PMT]);
 800188c:	7afa      	ldrb	r2, [r7, #11]
		print("written: now: 0x%04X\ttot/PMT: 0x%04X\ttot: 0x%04X\r\n", n_consumed[PMT],
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 8001894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001898:	4602      	mov	r2, r0
 800189a:	481c      	ldr	r0, [pc, #112]	; (800190c <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1ec>)
 800189c:	f7fe fef4 	bl	8000688 <print>

		// reset write heads
		n_consumed[PMT] = 0;
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
		write_head[PMT] = write_buff[PMT];
 80018b0:	7afa      	ldrb	r2, [r7, #11]
 80018b2:	7af8      	ldrb	r0, [r7, #11]
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	025b      	lsls	r3, r3, #9
 80018bc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	18d1      	adds	r1, r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f500 62ab 	add.w	r2, r0, #1368	; 0x558
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// release the file handler
		buffer_full[PMT] = FALSE;
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	441a      	add	r2, r3
 80018d4:	f241 5368 	movw	r3, #5480	; 0x1568
 80018d8:	4413      	add	r3, r2
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
		handler_active[PMT] = FALSE;
 80018de:	7afb      	ldrb	r3, [r7, #11]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	}

	return n_written[PMT];
 80018ea:	7afb      	ldrb	r3, [r7, #11]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	685b      	ldr	r3, [r3, #4]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001900:	0800f6f0 	.word	0x0800f6f0
 8001904:	0800f72c 	.word	0x0800f72c
 8001908:	0800f764 	.word	0x0800f764
 800190c:	0800f780 	.word	0x0800f780

08001910 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh>:

STREAMER_RC streamer::read_next_hit(FIL *file, PayloadType_t *type, u8 *hitbuffer) {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8001916:	af00      	add	r7, sp, #0
 8001918:	f107 040c 	add.w	r4, r7, #12
 800191c:	6020      	str	r0, [r4, #0]
 800191e:	f107 0008 	add.w	r0, r7, #8
 8001922:	6001      	str	r1, [r0, #0]
 8001924:	1d39      	adds	r1, r7, #4
 8001926:	600a      	str	r2, [r1, #0]
 8001928:	463a      	mov	r2, r7
 800192a:	6013      	str	r3, [r2, #0]
	/*
	 * Read the next hit from the filename buffer.
	 */

    print("read_next_hit()\r\n");
 800192c:	4875      	ldr	r0, [pc, #468]	; (8001b04 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1f4>)
 800192e:	f7fe feab 	bl	8000688 <print>
	FRESULT fres;
	STREAMER_RC SMR_RC = STREAMER_RC_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	u8 lead[sizeof(SPEHit)]; // this is the size of a SPEHit and MPEHit base unit.
	u8 data[1024];			 // FIXME: Make this match the maximum number of samples in an MPEHit.
	UINT br = 0;
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
	UINT btr = 6; // or sizeof(MPEHit)
 8001940:	2306      	movs	r3, #6
 8001942:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

	fres = f_read(file, lead, btr, &br);
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	f207 4114 	addw	r1, r7, #1044	; 0x414
 800194e:	f107 0008 	add.w	r0, r7, #8
 8001952:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8001956:	6800      	ldr	r0, [r0, #0]
 8001958:	f00c f96b 	bl	800dc32 <f_read>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	if (fres != FR_OK) {
 8001962:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8001966:	2b00      	cmp	r3, #0
 8001968:	d011      	beq.n	800198e <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x7e>
		if (br == 0) // EOF          
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x68>
			return STREAMER_RC_EOF;
 8001974:	2301      	movs	r3, #1
 8001976:	e0c0      	b.n	8001afa <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1ea>
		else{ // We read out fewer bytes than expected.
            print("Error reading from file; br=%d btr=%d\r\n", br, btr);
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8001982:	4619      	mov	r1, r3
 8001984:	4860      	ldr	r0, [pc, #384]	; (8001b08 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1f8>)
 8001986:	f7fe fe7f 	bl	8000688 <print>
			return STREAMER_RC_DISK_ERR;
 800198a:	2302      	movs	r3, #2
 800198c:	e0b5      	b.n	8001afa <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1ea>
	}
	// for(int i = 0; i < sizeof(SPEHit); i++){
	//    print("%s ", toBinaryString(lead[i]).c_str());
	// }
	// print("\n");
	memcpy(data, lead, 6); // the rest of data will be filled with event data.
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001996:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199a:	6018      	str	r0, [r3, #0]
 800199c:	3304      	adds	r3, #4
 800199e:	8019      	strh	r1, [r3, #0]
	// data[7] = '\0';
	// print("%s\r\n", data);
	*type = static_cast<PayloadType_t>(lead[0] & 0x3);
 80019a0:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	701a      	strb	r2, [r3, #0]

	size_t s = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	u16 nsamples = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8a7 3456 	strh.w	r3, [r7, #1110]	; 0x456
	MPEHit *mpe;
	SPEHit *spe;

	switch (*type) {
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xbc>
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d030      	beq.n	8001a2c <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x11c>
 80019ca:	e091      	b.n	8001af0 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1e0>
	case PL_SPE:
		s = sizeof(SPEHit);
 80019cc:	2306      	movs	r3, #6
 80019ce:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
		hitbuffer = (u8 *)malloc(s);
 80019d2:	463c      	mov	r4, r7
 80019d4:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 80019d8:	f00c ff9a 	bl	800e910 <malloc>
 80019dc:	4603      	mov	r3, r0
 80019de:	6023      	str	r3, [r4, #0]
		memcpy(hitbuffer, lead, s);
 80019e0:	f207 4114 	addw	r1, r7, #1044	; 0x414
 80019e4:	463b      	mov	r3, r7
 80019e6:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	f00c ffa0 	bl	800e930 <memcpy>
		SMR_RC = STREAMER_RC_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
        spe = (SPEHit*)hitbuffer;
 80019f6:	463b      	mov	r3, r7
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
        print("%s\r\n", spe->tostring().c_str());
 80019fe:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001a02:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f99e 	bl	8000d48 <_ZN8hitspool6SPEHit8tostringB5cxx11Ev>
 8001a0c:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00c fefd 	bl	800e810 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	483c      	ldr	r0, [pc, #240]	; (8001b0c <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1fc>)
 8001a1c:	f7fe fe34 	bl	8000688 <print>
 8001a20:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00c feed 	bl	800e804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001a2a:	e064      	b.n	8001af6 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1e6>

	case PL_MPE:
		//print("Read type: %s\r\n", PLNameText[*type]);
		nsamples = ((MPEHit *)lead)->nsamples;
 8001a2c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001a30:	78da      	ldrb	r2, [r3, #3]
 8001a32:	791b      	ldrb	r3, [r3, #4]
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	4313      	orrs	r3, r2
 8001a38:	f8a7 3456 	strh.w	r3, [r7, #1110]	; 0x456
		//print("nsamples from cast: %d\r\n", nsamples);

		s = sizeof(MPEHit) + sizeof(u16) * 2 * ((MPEHit *)lead)->nsamples;
 8001a3c:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001a40:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	3306      	adds	r3, #6
 8001a4a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
		s--; // subtract 1 because the first data byte is built into MPEHit already.
 8001a4e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
		//print("Total size: 0x%X\r\n", s);
		btr = s - sizeof(MPEHit);
 8001a58:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001a5c:	3b06      	subs	r3, #6
 8001a5e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

		fres = f_read(file, data + 6, btr, &br);
 8001a62:	f107 0114 	add.w	r1, r7, #20
 8001a66:	3106      	adds	r1, #6
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	f107 0008 	add.w	r0, r7, #8
 8001a70:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8001a74:	6800      	ldr	r0, [r0, #0]
 8001a76:	f00c f8dc 	bl	800dc32 <f_read>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
		//print("btr = %d\t br= %d\r\n", btr, br);
		if (fres != FR_OK) {
 8001a80:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x17c>
			// We read out fewer bytes than expected.
			return STREAMER_RC_DISK_ERR;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e036      	b.n	8001afa <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1ea>
		}
		hitbuffer = (u8 *)malloc(s);
 8001a8c:	463c      	mov	r4, r7
 8001a8e:	f8d7 0458 	ldr.w	r0, [r7, #1112]	; 0x458
 8001a92:	f00c ff3d 	bl	800e910 <malloc>
 8001a96:	4603      	mov	r3, r0
 8001a98:	6023      	str	r3, [r4, #0]
		memcpy(hitbuffer, data, s);
 8001a9a:	f107 0114 	add.w	r1, r7, #20
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f00c ff43 	bl	800e930 <memcpy>
		mpe = (MPEHit *)hitbuffer;
 8001aaa:	463b      	mov	r3, r7
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
		print("%s\r\n", mpe->tostring().c_str());
 8001ab2:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8001ab6:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fa3c 	bl	8000f38 <_ZN8hitspool6MPEHit8tostringB5cxx11Ev>
 8001ac0:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00c fea3 	bl	800e810 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4619      	mov	r1, r3
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1fc>)
 8001ad0:	f7fe fdda 	bl	8000688 <print>
 8001ad4:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00c fe93 	bl	800e804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		mpe->print_samples(200);
 8001ade:	21c8      	movs	r1, #200	; 0xc8
 8001ae0:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 8001ae4:	f7ff f9b4 	bl	8000e50 <_ZN8hitspool6MPEHit13print_samplesEt>

		SMR_RC = STREAMER_RC_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
		break;
 8001aee:	e002      	b.n	8001af6 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x1e6>

	default:
		SMR_RC = STEAMER_RC_TYPE_ERR;
 8001af0:	2303      	movs	r3, #3
 8001af2:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	}
	//print("%d\r\n", SMR_RC);
	return SMR_RC;
 8001af6:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	f207 476c 	addw	r7, r7, #1132	; 0x46c
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	0800f7b4 	.word	0x0800f7b4
 8001b08:	0800f7c8 	.word	0x0800f7c8
 8001b0c:	0800f7f0 	.word	0x0800f7f0

08001b10 <_ZN8hitspool19hs_hit_io_unit_testEv>:

G_STATUS hs_hit_io_unit_test() {
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8001b16:	af04      	add	r7, sp, #16
			free(next_hit_contants);
	}
	if (nhits_read == nhits_written)
		return G_OK;
	else
		return G_NOTOK;
 8001b18:	466b      	mov	r3, sp
 8001b1a:	461d      	mov	r5, r3
	print("-----------------------------------\r\n");
 8001b1c:	48ce      	ldr	r0, [pc, #824]	; (8001e58 <_ZN8hitspool19hs_hit_io_unit_testEv+0x348>)
 8001b1e:	f7fe fdb3 	bl	8000688 <print>
	print("---- hs_hit_io_unit_test() ----\r\n");
 8001b22:	48ce      	ldr	r0, [pc, #824]	; (8001e5c <_ZN8hitspool19hs_hit_io_unit_testEv+0x34c>)
 8001b24:	f7fe fdb0 	bl	8000688 <print>
	print("-----------------------------------\r\n\n");
 8001b28:	48cd      	ldr	r0, [pc, #820]	; (8001e60 <_ZN8hitspool19hs_hit_io_unit_testEv+0x350>)
 8001b2a:	f7fe fdad 	bl	8000688 <print>
	streamer *s = new streamer();
 8001b2e:	f241 5090 	movw	r0, #5520	; 0x1590
 8001b32:	f00c fe17 	bl	800e764 <_Znwj>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461c      	mov	r4, r3
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fc62 	bl	8001404 <_ZN8hitspool8streamerC1Ev>
 8001b40:	f8c7 4444 	str.w	r4, [r7, #1092]	; 0x444
	print("Initializing write buffers, heads... ");
 8001b44:	48c7      	ldr	r0, [pc, #796]	; (8001e64 <_ZN8hitspool19hs_hit_io_unit_testEv+0x354>)
 8001b46:	f7fe fd9f 	bl	8000688 <print>
	s->init_write_heads();
 8001b4a:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001b4e:	f7ff fcb3 	bl	80014b8 <_ZN8hitspool8streamer16init_write_headsEv>
	print("Done.\r\n");
 8001b52:	48c5      	ldr	r0, [pc, #788]	; (8001e68 <_ZN8hitspool19hs_hit_io_unit_testEv+0x358>)
 8001b54:	f7fe fd98 	bl	8000688 <print>
	print("Initializing file handlers...\r\n");
 8001b58:	48c4      	ldr	r0, [pc, #784]	; (8001e6c <_ZN8hitspool19hs_hit_io_unit_testEv+0x35c>)
 8001b5a:	f7fe fd95 	bl	8000688 <print>
	s->init_file_handlers(0xFF000000);
 8001b5e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8001b62:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001b66:	f7ff fd3b 	bl	80015e0 <_ZN8hitspool8streamer18init_file_handlersEm>
	print("File handlers done.\r\n");
 8001b6a:	48c1      	ldr	r0, [pc, #772]	; (8001e70 <_ZN8hitspool19hs_hit_io_unit_testEv+0x360>)
 8001b6c:	f7fe fd8c 	bl	8000688 <print>
	print("-----------------------------------\r\n");
 8001b70:	48b9      	ldr	r0, [pc, #740]	; (8001e58 <_ZN8hitspool19hs_hit_io_unit_testEv+0x348>)
 8001b72:	f7fe fd89 	bl	8000688 <print>
	s->print_buffer_heads();
 8001b76:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001b7a:	f7ff fcd5 	bl	8001528 <_ZN8hitspool8streamer18print_buffer_headsEv>
	print("-----------------------------------\r\n");
 8001b7e:	48b6      	ldr	r0, [pc, #728]	; (8001e58 <_ZN8hitspool19hs_hit_io_unit_testEv+0x348>)
 8001b80:	f7fe fd82 	bl	8000688 <print>
    print("Hit: %d\t SPEHit size: %d\t MPEHit size: %d\r\n", sizeof(Hit), sizeof(SPEHit), sizeof(MPEHit) - 1);
 8001b84:	2305      	movs	r3, #5
 8001b86:	2206      	movs	r2, #6
 8001b88:	2103      	movs	r1, #3
 8001b8a:	48ba      	ldr	r0, [pc, #744]	; (8001e74 <_ZN8hitspool19hs_hit_io_unit_testEv+0x364>)
 8001b8c:	f7fe fd7c 	bl	8000688 <print>
	u16 nsamples = 10;
 8001b90:	230a      	movs	r3, #10
 8001b92:	f8a7 3442 	strh.w	r3, [r7, #1090]	; 0x442
	u16 waveform_buffer[2 * nsamples];
 8001b96:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	1e5c      	subs	r4, r3, #1
 8001b9e:	f8c7 443c 	str.w	r4, [r7, #1084]	; 0x43c
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	010b      	lsls	r3, r1, #4
 8001bb6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001bba:	0102      	lsls	r2, r0, #4
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	010b      	lsls	r3, r1, #4
 8001bd0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001bd4:	0102      	lsls	r2, r0, #4
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	3301      	adds	r3, #1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	3307      	adds	r3, #7
 8001bde:	08db      	lsrs	r3, r3, #3
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	ebad 0d03 	sub.w	sp, sp, r3
 8001be6:	ab04      	add	r3, sp, #16
 8001be8:	3301      	adds	r3, #1
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
	for (int i = 0; i < 2 * nsamples; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8001bf8:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8001c02:	429a      	cmp	r2, r3
 8001c04:	da14      	bge.n	8001c30 <_ZN8hitspool19hs_hit_io_unit_testEv+0x120>
		waveform_buffer[i] = 2 * nsamples - i;
 8001c06:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	b299      	uxth	r1, r3
 8001c18:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001c1c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8001c20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 2 * nsamples; i++)
 8001c24:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8001c2e:	e7e3      	b.n	8001bf8 <_ZN8hitspool19hs_hit_io_unit_testEv+0xe8>
	sprintf(pattern, "SCGPHD");
 8001c30:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001c34:	4990      	ldr	r1, [pc, #576]	; (8001e78 <_ZN8hitspool19hs_hit_io_unit_testEv+0x368>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00c ffa8 	bl	800eb8c <siprintf>
	SPEHit *spe_pattern = (SPEHit *)pattern; // new SPEHit(0xABCD, 0x5, 0xA, 0xF);
 8001c3c:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001c40:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
	SPEHit *speh = new SPEHit(0xABCD, 0x5, 0xA, 0xF);
 8001c44:	2006      	movs	r0, #6
 8001c46:	f00c fd8d 	bl	800e764 <_Znwj>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461c      	mov	r4, r3
 8001c4e:	230f      	movs	r3, #15
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	230a      	movs	r3, #10
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	2305      	movs	r3, #5
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff f827 	bl	8000cb6 <_ZN8hitspool6SPEHitC1Eyhht>
 8001c68:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
	MPEHit *mpeh = new (nsamples) MPEHit(0xCDEF, 0x4, nsamples, (u8 *)waveform_buffer);
 8001c6c:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001c70:	4619      	mov	r1, r3
 8001c72:	2006      	movs	r0, #6
 8001c74:	f7ff f8d7 	bl	8000e26 <_ZN8hitspool6MPEHitnwEjt>
 8001c78:	4604      	mov	r4, r0
 8001c7a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	2304      	movs	r3, #4
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	f64c 52ef 	movw	r2, #52719	; 0xcdef
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff f8aa 	bl	8000dec <_ZN8hitspool6MPEHitC1EyhtPh>
 8001c98:	f8c7 442c 	str.w	r4, [r7, #1068]	; 0x42c
    sizeof(MPEHit)-1, 2*nsamples*sizeof(u16), 
 8001c9c:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
    print("Test MPEHit predicted size: 0x%X + 0x%X = 0x%X\r\n", 
 8001ca0:	009a      	lsls	r2, r3, #2
    sizeof(MPEHit)-1 + 2*nsamples*sizeof(u16));
 8001ca2:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001ca6:	009b      	lsls	r3, r3, #2
    print("Test MPEHit predicted size: 0x%X + 0x%X = 0x%X\r\n", 
 8001ca8:	3305      	adds	r3, #5
 8001caa:	2105      	movs	r1, #5
 8001cac:	4873      	ldr	r0, [pc, #460]	; (8001e7c <_ZN8hitspool19hs_hit_io_unit_testEv+0x36c>)
 8001cae:	f7fe fceb 	bl	8000688 <print>
    print("Test MPEHit calculated size: 0x%X\r\n", mpeh->calc_size());
 8001cb2:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 8001cb6:	f7ff f92f 	bl	8000f18 <_ZN8hitspool6MPEHit9calc_sizeEv>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4870      	ldr	r0, [pc, #448]	; (8001e80 <_ZN8hitspool19hs_hit_io_unit_testEv+0x370>)
 8001cc0:	f7fe fce2 	bl	8000688 <print>
	hitpacket<SPEHit> *spep = new hitpacket<SPEHit>(0, 0x1234ABCD, speh);
 8001cc4:	200b      	movs	r0, #11
 8001cc6:	f00c fd4d 	bl	800e764 <_Znwj>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461c      	mov	r4, r3
 8001cce:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	a35e      	add	r3, pc, #376	; (adr r3, 8001e50 <_ZN8hitspool19hs_hit_io_unit_testEv+0x340>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f000 f951 	bl	8001f84 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>
 8001ce2:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
	hitpacket<MPEHit> *mpep = new hitpacket<MPEHit>(0, 0x1234ABCD, mpeh);
 8001ce6:	200b      	movs	r0, #11
 8001ce8:	f00c fd3c 	bl	800e764 <_Znwj>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461c      	mov	r4, r3
 8001cf0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	a356      	add	r3, pc, #344	; (adr r3, 8001e50 <_ZN8hitspool19hs_hit_io_unit_testEv+0x340>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f000 f978 	bl	8001ff4 <_ZN8hitspool9hitpacketINS_6MPEHitEEC1EhyPS1_>
 8001d04:	f8c7 4424 	str.w	r4, [r7, #1060]	; 0x424
	hitpacket<SPEHit> *spep_pattern = new hitpacket<SPEHit>(0, 0x1234ABCD, spe_pattern);
 8001d08:	200b      	movs	r0, #11
 8001d0a:	f00c fd2b 	bl	800e764 <_Znwj>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461c      	mov	r4, r3
 8001d12:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	a34d      	add	r3, pc, #308	; (adr r3, 8001e50 <_ZN8hitspool19hs_hit_io_unit_testEv+0x340>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4620      	mov	r0, r4
 8001d22:	f000 f92f 	bl	8001f84 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>
 8001d26:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
	spep_pattern->hit->pl_type = PL_SPE;
 8001d2a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8001d2e:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8001d32:	7813      	ldrb	r3, [r2, #0]
 8001d34:	f36f 0301 	bfc	r3, #0, #2
 8001d38:	7013      	strb	r3, [r2, #0]
	int nhits_to_write = 5;
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	int nhits_written = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	for (int i = 0; i < nhits_to_write; i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8001d4c:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8001d50:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	da20      	bge.n	8001d9a <_ZN8hitspool19hs_hit_io_unit_testEv+0x28a>
		spep->hit->tdc++;
 8001d58:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8001d5c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	3201      	adds	r2, #1
 8001d6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001d6e:	b2d1      	uxtb	r1, r2
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	f361 0287 	bfi	r2, r1, #2, #6
 8001d76:	701a      	strb	r2, [r3, #0]
		s->add_hit(spep);
 8001d78:	f8d7 1428 	ldr.w	r1, [r7, #1064]	; 0x428
 8001d7c:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001d80:	f000 f970 	bl	8002064 <_ZN8hitspool8streamer7add_hitINS_9hitpacketINS_6SPEHitEEEEEmPT_>
		nhits_written++;
 8001d84:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	for (int i = 0; i < nhits_to_write; i++) {
 8001d8e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8001d98:	e7d8      	b.n	8001d4c <_ZN8hitspool19hs_hit_io_unit_testEv+0x23c>
    for (int i = 0; i < 5; i++){
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001da0:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	dc3d      	bgt.n	8001e24 <_ZN8hitspool19hs_hit_io_unit_testEv+0x314>
        ((u16*)(mpep->hit->waveform))[i%nsamples]+=100;
 8001da8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001dac:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001db0:	1d59      	adds	r1, r3, #5
 8001db2:	f8b7 2442 	ldrh.w	r2, [r7, #1090]	; 0x442
 8001db6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001dba:	fb93 f0f2 	sdiv	r0, r3, r2
 8001dbe:	fb02 f200 	mul.w	r2, r2, r0
 8001dc2:	1a98      	subs	r0, r3, r2
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	440b      	add	r3, r1
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001dd0:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001dd4:	1d59      	adds	r1, r3, #5
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	440b      	add	r3, r1
 8001ddc:	3264      	adds	r2, #100	; 0x64
 8001dde:	b292      	uxth	r2, r2
 8001de0:	801a      	strh	r2, [r3, #0]
        mpep->hit->tdc++; 
 8001de2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8001de6:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	3201      	adds	r2, #1
 8001df4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001df8:	b2d1      	uxtb	r1, r2
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	f361 0287 	bfi	r2, r1, #2, #6
 8001e00:	701a      	strb	r2, [r3, #0]
        s->add_hit(mpep); nhits_written++;
 8001e02:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
 8001e06:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001e0a:	f000 f97d 	bl	8002108 <_ZN8hitspool8streamer7add_hitINS_9hitpacketINS_6MPEHitEEEEEmPT_>
 8001e0e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001e12:	3301      	adds	r3, #1
 8001e14:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
    for (int i = 0; i < 5; i++){
 8001e18:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001e22:	e7bd      	b.n	8001da0 <_ZN8hitspool19hs_hit_io_unit_testEv+0x290>
	for (int i = 0; i < NUM_PMT; i++) {
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001e2a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	dc28      	bgt.n	8001e84 <_ZN8hitspool19hs_hit_io_unit_testEv+0x374>
		s->check_and_write_buffer(i, true);
 8001e32:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001e40:	f7ff fc6e 	bl	8001720 <_ZN8hitspool8streamer22check_and_write_bufferEhb>
	for (int i = 0; i < NUM_PMT; i++) {
 8001e44:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001e4e:	e7ec      	b.n	8001e2a <_ZN8hitspool19hs_hit_io_unit_testEv+0x31a>
 8001e50:	1234abcd 	.word	0x1234abcd
 8001e54:	00000000 	.word	0x00000000
 8001e58:	0800f55c 	.word	0x0800f55c
 8001e5c:	0800f7f8 	.word	0x0800f7f8
 8001e60:	0800f81c 	.word	0x0800f81c
 8001e64:	0800f844 	.word	0x0800f844
 8001e68:	0800f86c 	.word	0x0800f86c
 8001e6c:	0800f874 	.word	0x0800f874
 8001e70:	0800f894 	.word	0x0800f894
 8001e74:	0800f8ac 	.word	0x0800f8ac
 8001e78:	0800f8d8 	.word	0x0800f8d8
 8001e7c:	0800f8e0 	.word	0x0800f8e0
 8001e80:	0800f914 	.word	0x0800f914
	s->close_file_handlers();
 8001e84:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001e88:	f7ff fc06 	bl	8001698 <_ZN8hitspool8streamer19close_file_handlersEv>
	print("-----------------------------------\r\n");
 8001e8c:	4837      	ldr	r0, [pc, #220]	; (8001f6c <_ZN8hitspool19hs_hit_io_unit_testEv+0x45c>)
 8001e8e:	f7fe fbfb 	bl	8000688 <print>
	print("Opening PMT0 file for reading.\r\n");
 8001e92:	4837      	ldr	r0, [pc, #220]	; (8001f70 <_ZN8hitspool19hs_hit_io_unit_testEv+0x460>)
 8001e94:	f7fe fbf8 	bl	8000688 <print>
	FRESULT fres = f_open(&(s->file_handlers[0]), s->live_filenames[0], FA_READ);
 8001e98:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001e9c:	f503 7084 	add.w	r0, r3, #264	; 0x108
 8001ea0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f00b fc11 	bl	800d6d0 <f_open>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
	if (fres != FR_OK)
 8001eb4:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <_ZN8hitspool19hs_hit_io_unit_testEv+0x3b2>
		print("Error opening file for reading.\r\n");
 8001ebc:	482d      	ldr	r0, [pc, #180]	; (8001f74 <_ZN8hitspool19hs_hit_io_unit_testEv+0x464>)
 8001ebe:	f7fe fbe3 	bl	8000688 <print>
	print("Reading hits...\r\n");
 8001ec2:	482d      	ldr	r0, [pc, #180]	; (8001f78 <_ZN8hitspool19hs_hit_io_unit_testEv+0x468>)
 8001ec4:	f7fe fbe0 	bl	8000688 <print>
	print("-----------------------------------\r\n");
 8001ec8:	4828      	ldr	r0, [pc, #160]	; (8001f6c <_ZN8hitspool19hs_hit_io_unit_testEv+0x45c>)
 8001eca:	f7fe fbdd 	bl	8000688 <print>
	STREAMER_RC read_status = STREAMER_RC_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
	u8 *next_hit_contants = NULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	UINT br = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	UINT btr = 6; // or sizeof(MPEHit)
 8001ee0:	2306      	movs	r3, #6
 8001ee2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	int nhits_read = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
		read_status = s->read_next_hit(&(s->file_handlers[0]), &next_hit_type, next_hit_contants);
 8001eec:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001ef0:	f503 7184 	add.w	r1, r3, #264	; 0x108
 8001ef4:	f207 4203 	addw	r2, r7, #1027	; 0x403
 8001ef8:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001efc:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001f00:	f7ff fd06 	bl	8001910 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
		if (read_status != STREAMER_RC_OK) {
 8001f0a:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <_ZN8hitspool19hs_hit_io_unit_testEv+0x420>
			if (read_status == STREAMER_RC_EOF) {
 8001f12:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d103      	bne.n	8001f22 <_ZN8hitspool19hs_hit_io_unit_testEv+0x412>
				print("Reached EOF; exiting read.\r\n");
 8001f1a:	4818      	ldr	r0, [pc, #96]	; (8001f7c <_ZN8hitspool19hs_hit_io_unit_testEv+0x46c>)
 8001f1c:	f7fe fbb4 	bl	8000688 <print>
			break;
 8001f20:	e014      	b.n	8001f4c <_ZN8hitspool19hs_hit_io_unit_testEv+0x43c>
				print("Streamer exited with code %d\r\n", read_status);
 8001f22:	f897 341a 	ldrb.w	r3, [r7, #1050]	; 0x41a
 8001f26:	4619      	mov	r1, r3
 8001f28:	4815      	ldr	r0, [pc, #84]	; (8001f80 <_ZN8hitspool19hs_hit_io_unit_testEv+0x470>)
 8001f2a:	f7fe fbad 	bl	8000688 <print>
			break;
 8001f2e:	e00d      	b.n	8001f4c <_ZN8hitspool19hs_hit_io_unit_testEv+0x43c>
			nhits_read++;
 8001f30:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001f34:	3301      	adds	r3, #1
 8001f36:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
		if (next_hit_contants != NULL)
 8001f3a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0d4      	beq.n	8001eec <_ZN8hitspool19hs_hit_io_unit_testEv+0x3dc>
			free(next_hit_contants);
 8001f42:	f8d7 0414 	ldr.w	r0, [r7, #1044]	; 0x414
 8001f46:	f00c fceb 	bl	800e920 <free>
		read_status = s->read_next_hit(&(s->file_handlers[0]), &next_hit_type, next_hit_contants);
 8001f4a:	e7cf      	b.n	8001eec <_ZN8hitspool19hs_hit_io_unit_testEv+0x3dc>
	if (nhits_read == nhits_written)
 8001f4c:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8001f50:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d101      	bne.n	8001f5c <_ZN8hitspool19hs_hit_io_unit_testEv+0x44c>
		return G_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <_ZN8hitspool19hs_hit_io_unit_testEv+0x44e>
		return G_NOTOK;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	46ad      	mov	sp, r5
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	0800f55c 	.word	0x0800f55c
 8001f70:	0800f938 	.word	0x0800f938
 8001f74:	0800f95c 	.word	0x0800f95c
 8001f78:	0800f980 	.word	0x0800f980
 8001f7c:	0800f994 	.word	0x0800f994
 8001f80:	0800f9b4 	.word	0x0800f9b4

08001f84 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>:

            u8 PMT : 8;
            u64 trecv : 48;
            T* hit; //SPEHit, MPEHit, WUBBuf

        hitpacket(u8 PMT, u64 trecv, T* h){
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	e9c7 2300 	strd	r2, r3, [r7]
 8001f90:	460b      	mov	r3, r1
 8001f92:	72fb      	strb	r3, [r7, #11]
        	this->PMT = PMT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	7afa      	ldrb	r2, [r7, #11]
 8001f98:	701a      	strb	r2, [r3, #0]
        	this->trecv = trecv;
 8001f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fa6:	ea02 0400 	and.w	r4, r2, r0
 8001faa:	ea03 0501 	and.w	r5, r3, r1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f8c3 4001 	str.w	r4, [r3, #1]
 8001fb4:	462a      	mov	r2, r5
 8001fb6:	f8a3 2005 	strh.w	r2, [r3, #5]
            this->hit = (T*)malloc(h->calc_size());
 8001fba:	6a38      	ldr	r0, [r7, #32]
 8001fbc:	f7fe feb9 	bl	8000d32 <_ZN8hitspool6SPEHit9calc_sizeEv>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00c fca4 	bl	800e910 <malloc>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f8c3 2007 	str.w	r2, [r3, #7]
            memcpy((void*)this->hit, (void*)h, h->calc_size());
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f8d3 4007 	ldr.w	r4, [r3, #7]
 8001fd8:	6a38      	ldr	r0, [r7, #32]
 8001fda:	f7fe feaa 	bl	8000d32 <_ZN8hitspool6SPEHit9calc_sizeEv>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f00c fca3 	bl	800e930 <memcpy>
        };
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bdb0      	pop	{r4, r5, r7, pc}

08001ff4 <_ZN8hitspool9hitpacketINS_6MPEHitEEC1EhyPS1_>:
        hitpacket(u8 PMT, u64 trecv, T* h){
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	e9c7 2300 	strd	r2, r3, [r7]
 8002000:	460b      	mov	r3, r1
 8002002:	72fb      	strb	r3, [r7, #11]
        	this->PMT = PMT;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	7afa      	ldrb	r2, [r7, #11]
 8002008:	701a      	strb	r2, [r3, #0]
        	this->trecv = trecv;
 800200a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800200e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002012:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002016:	ea02 0400 	and.w	r4, r2, r0
 800201a:	ea03 0501 	and.w	r5, r3, r1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f8c3 4001 	str.w	r4, [r3, #1]
 8002024:	462a      	mov	r2, r5
 8002026:	f8a3 2005 	strh.w	r2, [r3, #5]
            this->hit = (T*)malloc(h->calc_size());
 800202a:	6a38      	ldr	r0, [r7, #32]
 800202c:	f7fe ff74 	bl	8000f18 <_ZN8hitspool6MPEHit9calc_sizeEv>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	f00c fc6c 	bl	800e910 <malloc>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f8c3 2007 	str.w	r2, [r3, #7]
            memcpy((void*)this->hit, (void*)h, h->calc_size());
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f8d3 4007 	ldr.w	r4, [r3, #7]
 8002048:	6a38      	ldr	r0, [r7, #32]
 800204a:	f7fe ff65 	bl	8000f18 <_ZN8hitspool6MPEHit9calc_sizeEv>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	6a39      	ldr	r1, [r7, #32]
 8002054:	4620      	mov	r0, r4
 8002056:	f00c fc6b 	bl	800e930 <memcpy>
        };
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bdb0      	pop	{r4, r5, r7, pc}

08002064 <_ZN8hitspool8streamer7add_hitINS_9hitpacketINS_6SPEHitEEEEEmPT_>:

            STREAMER_RC read_next_hit(FIL* file, PayloadType_t *type, u8* hitbuffer);

            u32 check_and_write_buffer(u8 PMT, bool force);            

            template <typename T> u32 add_hit(T* hit_packet){
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
                u8 PMT = hit_packet->PMT; 
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	73fb      	strb	r3, [r7, #15]
                u16 write_size = hit_packet->hit->calc_size();
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fe59 	bl	8000d32 <_ZN8hitspool6SPEHit9calc_sizeEv>
 8002080:	4603      	mov	r3, r0
 8002082:	81bb      	strh	r3, [r7, #12]
                memcpy(write_head[PMT], (u8*)hit_packet->hit, write_size);
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 800208c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8002096:	89ba      	ldrh	r2, [r7, #12]
 8002098:	4619      	mov	r1, r3
 800209a:	f00c fc49 	bl	800e930 <memcpy>
                write_head[PMT]+=write_size;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 80020a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020aa:	89bb      	ldrh	r3, [r7, #12]
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	4419      	add	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 80020b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_consumed[PMT]+=write_size;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	89ba      	ldrh	r2, [r7, #12]
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	440a      	add	r2, r1
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	605a      	str	r2, [r3, #4]
                nhits_inbuff[PMT]++;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	0053      	lsls	r3, r2, #1
 80020e0:	440b      	add	r3, r1
 80020e2:	885b      	ldrh	r3, [r3, #2]
 80020e4:	3301      	adds	r3, #1
 80020e6:	b298      	uxth	r0, r3
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	0053      	lsls	r3, r2, #1
 80020ec:	440b      	add	r3, r1
 80020ee:	4602      	mov	r2, r0
 80020f0:	805a      	strh	r2, [r3, #2]
                
                check_and_write_buffer(PMT, false);
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2200      	movs	r2, #0
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fb11 	bl	8001720 <_ZN8hitspool8streamer22check_and_write_bufferEhb>
                return 0;
 80020fe:	2300      	movs	r3, #0
            };
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZN8hitspool8streamer7add_hitINS_9hitpacketINS_6MPEHitEEEEEmPT_>:
            template <typename T> u32 add_hit(T* hit_packet){
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
                u8 PMT = hit_packet->PMT; 
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	73fb      	strb	r3, [r7, #15]
                u16 write_size = hit_packet->hit->calc_size();
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fefa 	bl	8000f18 <_ZN8hitspool6MPEHit9calc_sizeEv>
 8002124:	4603      	mov	r3, r0
 8002126:	81bb      	strh	r3, [r7, #12]
                memcpy(write_head[PMT], (u8*)hit_packet->hit, write_size);
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8002130:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800213a:	89ba      	ldrh	r2, [r7, #12]
 800213c:	4619      	mov	r1, r3
 800213e:	f00c fbf7 	bl	800e930 <memcpy>
                write_head[PMT]+=write_size;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 800214a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800214e:	89bb      	ldrh	r3, [r7, #12]
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	4419      	add	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 800215a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_consumed[PMT]+=write_size;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	89ba      	ldrh	r2, [r7, #12]
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	440a      	add	r2, r1
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	605a      	str	r2, [r3, #4]
                nhits_inbuff[PMT]++;
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	0053      	lsls	r3, r2, #1
 8002184:	440b      	add	r3, r1
 8002186:	885b      	ldrh	r3, [r3, #2]
 8002188:	3301      	adds	r3, #1
 800218a:	b298      	uxth	r0, r3
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	0053      	lsls	r3, r2, #1
 8002190:	440b      	add	r3, r1
 8002192:	4602      	mov	r2, r0
 8002194:	805a      	strh	r2, [r3, #2]
                check_and_write_buffer(PMT, false);
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	2200      	movs	r2, #0
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fabf 	bl	8001720 <_ZN8hitspool8streamer22check_and_write_bufferEhb>
                return 0;
 80021a2:	2300      	movs	r3, #0
            };
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_kill>:

int _kill(int pid, int sig)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021c6:	f00c fb79 	bl	800e8bc <__errno>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2216      	movs	r2, #22
 80021ce:	601a      	str	r2, [r3, #0]
	return -1;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_exit>:

void _exit (int status)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ffe7 	bl	80021bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80021ee:	e7fe      	b.n	80021ee <_exit+0x12>

080021f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <_sbrk+0x5c>)
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <_sbrk+0x60>)
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <_sbrk+0x64>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <_sbrk+0x68>)
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	d207      	bcs.n	8002230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002220:	f00c fb4c 	bl	800e8bc <__errno>
 8002224:	4603      	mov	r3, r0
 8002226:	220c      	movs	r2, #12
 8002228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800222e:	e009      	b.n	8002244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <_sbrk+0x64>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <_sbrk+0x64>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <_sbrk+0x64>)
 8002240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	24080000 	.word	0x24080000
 8002250:	00000400 	.word	0x00000400
 8002254:	240002ec 	.word	0x240002ec
 8002258:	24001c20 	.word	0x24001c20

0800225c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002260:	4b39      	ldr	r3, [pc, #228]	; (8002348 <SystemInit+0xec>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	4a38      	ldr	r2, [pc, #224]	; (8002348 <SystemInit+0xec>)
 8002268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800226c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <SystemInit+0xf0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	2b06      	cmp	r3, #6
 800227a:	d807      	bhi.n	800228c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800227c:	4b33      	ldr	r3, [pc, #204]	; (800234c <SystemInit+0xf0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 030f 	bic.w	r3, r3, #15
 8002284:	4a31      	ldr	r2, [pc, #196]	; (800234c <SystemInit+0xf0>)
 8002286:	f043 0307 	orr.w	r3, r3, #7
 800228a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <SystemInit+0xf4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <SystemInit+0xf4>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <SystemInit+0xf4>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <SystemInit+0xf4>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	492b      	ldr	r1, [pc, #172]	; (8002350 <SystemInit+0xf4>)
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <SystemInit+0xf8>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <SystemInit+0xf0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <SystemInit+0xf0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 030f 	bic.w	r3, r3, #15
 80022be:	4a23      	ldr	r2, [pc, #140]	; (800234c <SystemInit+0xf0>)
 80022c0:	f043 0307 	orr.w	r3, r3, #7
 80022c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <SystemInit+0xf4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <SystemInit+0xf4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <SystemInit+0xf4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <SystemInit+0xf4>)
 80022da:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <SystemInit+0xfc>)
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <SystemInit+0xf4>)
 80022e0:	4a1e      	ldr	r2, [pc, #120]	; (800235c <SystemInit+0x100>)
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <SystemInit+0xf4>)
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <SystemInit+0x104>)
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <SystemInit+0xf4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <SystemInit+0xf4>)
 80022f2:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <SystemInit+0x104>)
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <SystemInit+0xf4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <SystemInit+0xf4>)
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <SystemInit+0x104>)
 8002300:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <SystemInit+0xf4>)
 8002304:	2200      	movs	r2, #0
 8002306:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <SystemInit+0xf4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a10      	ldr	r2, [pc, #64]	; (8002350 <SystemInit+0xf4>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002312:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <SystemInit+0xf4>)
 8002316:	2200      	movs	r2, #0
 8002318:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <SystemInit+0x108>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <SystemInit+0x10c>)
 8002320:	4013      	ands	r3, r2
 8002322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002326:	d202      	bcs.n	800232e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <SystemInit+0x110>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <SystemInit+0x114>)
 8002330:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002334:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SystemInit+0xec>)
 8002338:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	52002000 	.word	0x52002000
 8002350:	58024400 	.word	0x58024400
 8002354:	eaf6ed7f 	.word	0xeaf6ed7f
 8002358:	02020200 	.word	0x02020200
 800235c:	01ff0000 	.word	0x01ff0000
 8002360:	01010280 	.word	0x01010280
 8002364:	5c001000 	.word	0x5c001000
 8002368:	ffff0000 	.word	0xffff0000
 800236c:	51008108 	.word	0x51008108
 8002370:	52004000 	.word	0x52004000

08002374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002378:	f7ff ff70 	bl	800225c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800237c:	480c      	ldr	r0, [pc, #48]	; (80023b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800237e:	490d      	ldr	r1, [pc, #52]	; (80023b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002384:	e002      	b.n	800238c <LoopCopyDataInit>

08002386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238a:	3304      	adds	r3, #4

0800238c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800238c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002390:	d3f9      	bcc.n	8002386 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002394:	4c0a      	ldr	r4, [pc, #40]	; (80023c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002398:	e001      	b.n	800239e <LoopFillZerobss>

0800239a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800239c:	3204      	adds	r2, #4

0800239e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a0:	d3fb      	bcc.n	800239a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a2:	f00c fa91 	bl	800e8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a6:	f7fe f9ab 	bl	8000700 <main>
  bx  lr
 80023aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023b4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80023b8:	0800ff3c 	.word	0x0800ff3c
  ldr r2, =_sbss
 80023bc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80023c0:	24001c20 	.word	0x24001c20

080023c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <ADC3_IRQHandler>
	...

080023c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ce:	2003      	movs	r0, #3
 80023d0:	f000 f98c 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023d4:	f001 f9c6 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_Init+0x68>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	4913      	ldr	r1, [pc, #76]	; (8002434 <HAL_Init+0x6c>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_Init+0x68>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_Init+0x6c>)
 80023fc:	5cd3      	ldrb	r3, [r2, r3]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <HAL_Init+0x70>)
 800240a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_Init+0x74>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002412:	2000      	movs	r0, #0
 8002414:	f000 f814 	bl	8002440 <HAL_InitTick>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e002      	b.n	8002428 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002422:	f7fe fe7d 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	58024400 	.word	0x58024400
 8002434:	0800fa28 	.word	0x0800fa28
 8002438:	24000004 	.word	0x24000004
 800243c:	24000000 	.word	0x24000000

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <HAL_InitTick+0x60>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e021      	b.n	8002498 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_InitTick+0x64>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_InitTick+0x60>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f971 	bl	8002752 <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00e      	b.n	8002498 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d80a      	bhi.n	8002496 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002488:	f000 f93b 	bl	8002702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <HAL_InitTick+0x68>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2400000c 	.word	0x2400000c
 80024a4:	24000000 	.word	0x24000000
 80024a8:	24000008 	.word	0x24000008

080024ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2400000c 	.word	0x2400000c
 80024d0:	24001760 	.word	0x24001760

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	24001760 	.word	0x24001760

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffde 	bl	80024d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2400000c 	.word	0x2400000c

08002534 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetREVID+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0c1b      	lsrs	r3, r3, #16
}
 800253e:	4618      	mov	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	5c001000 	.word	0x5c001000

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <__NVIC_SetPriorityGrouping+0x40>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	4313      	orrs	r3, r2
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	; (800258c <__NVIC_SetPriorityGrouping+0x40>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00
 8002590:	05fa0000 	.word	0x05fa0000

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026cc:	f7ff ff8e 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff29 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff40 	bl	8002594 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff90 	bl	8002640 <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5f 	bl	80025ec <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff33 	bl	80025b0 <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa4 	bl	80026a8 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800277a:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <HAL_GPIO_Init+0x234>)
 800277c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800277e:	e194      	b.n	8002aaa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa01 f303 	lsl.w	r3, r1, r3
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8186 	beq.w	8002aa4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d00b      	beq.n	80027b8 <HAL_GPIO_Init+0x4c>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d007      	beq.n	80027b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ac:	2b11      	cmp	r3, #17
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b12      	cmp	r3, #18
 80027b6:	d130      	bne.n	800281a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ee:	2201      	movs	r2, #1
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 0201 	and.w	r2, r3, #1
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0xee>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b12      	cmp	r3, #18
 8002858:	d123      	bne.n	80028a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	08da      	lsrs	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3208      	adds	r2, #8
 8002862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	220f      	movs	r2, #15
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	69b9      	ldr	r1, [r7, #24]
 800289e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0203 	and.w	r2, r3, #3
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80e0 	beq.w	8002aa4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e4:	4b2f      	ldr	r3, [pc, #188]	; (80029a4 <HAL_GPIO_Init+0x238>)
 80028e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ea:	4a2e      	ldr	r2, [pc, #184]	; (80029a4 <HAL_GPIO_Init+0x238>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_GPIO_Init+0x238>)
 80028f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <HAL_GPIO_Init+0x23c>)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <HAL_GPIO_Init+0x240>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d052      	beq.n	80029d4 <HAL_GPIO_Init+0x268>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_GPIO_Init+0x244>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d031      	beq.n	800299a <HAL_GPIO_Init+0x22e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_GPIO_Init+0x248>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02b      	beq.n	8002996 <HAL_GPIO_Init+0x22a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_GPIO_Init+0x24c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d025      	beq.n	8002992 <HAL_GPIO_Init+0x226>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <HAL_GPIO_Init+0x250>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <HAL_GPIO_Init+0x222>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <HAL_GPIO_Init+0x254>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d019      	beq.n	800298a <HAL_GPIO_Init+0x21e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_GPIO_Init+0x258>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0x21a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_GPIO_Init+0x25c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00d      	beq.n	8002982 <HAL_GPIO_Init+0x216>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_GPIO_Init+0x260>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <HAL_GPIO_Init+0x212>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_GPIO_Init+0x264>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_GPIO_Init+0x20e>
 8002976:	2309      	movs	r3, #9
 8002978:	e02d      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 800297a:	230a      	movs	r3, #10
 800297c:	e02b      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 800297e:	2308      	movs	r3, #8
 8002980:	e029      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 8002982:	2307      	movs	r3, #7
 8002984:	e027      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 8002986:	2306      	movs	r3, #6
 8002988:	e025      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 800298a:	2305      	movs	r3, #5
 800298c:	e023      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 800298e:	2304      	movs	r3, #4
 8002990:	e021      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 8002992:	2303      	movs	r3, #3
 8002994:	e01f      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 8002996:	2302      	movs	r3, #2
 8002998:	e01d      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 800299a:	2301      	movs	r3, #1
 800299c:	e01b      	b.n	80029d6 <HAL_GPIO_Init+0x26a>
 800299e:	bf00      	nop
 80029a0:	58000080 	.word	0x58000080
 80029a4:	58024400 	.word	0x58024400
 80029a8:	58000400 	.word	0x58000400
 80029ac:	58020000 	.word	0x58020000
 80029b0:	58020400 	.word	0x58020400
 80029b4:	58020800 	.word	0x58020800
 80029b8:	58020c00 	.word	0x58020c00
 80029bc:	58021000 	.word	0x58021000
 80029c0:	58021400 	.word	0x58021400
 80029c4:	58021800 	.word	0x58021800
 80029c8:	58021c00 	.word	0x58021c00
 80029cc:	58022000 	.word	0x58022000
 80029d0:	58022400 	.word	0x58022400
 80029d4:	2300      	movs	r3, #0
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	f002 0203 	and.w	r2, r2, #3
 80029dc:	0092      	lsls	r2, r2, #2
 80029de:	4093      	lsls	r3, r2
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e6:	4938      	ldr	r1, [pc, #224]	; (8002ac8 <HAL_GPIO_Init+0x35c>)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f ae63 	bne.w	8002780 <HAL_GPIO_Init+0x14>
  }
}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	3724      	adds	r7, #36	; 0x24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	58000400 	.word	0x58000400

08002acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	e001      	b.n	8002aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b0c:	787b      	ldrb	r3, [r7, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b18:	e003      	b.n	8002b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	041a      	lsls	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	619a      	str	r2, [r3, #24]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b40:	887a      	ldrh	r2, [r7, #2]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	400b      	ands	r3, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d00a      	beq.n	8002b8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b78:	4b16      	ldr	r3, [pc, #88]	; (8002bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d001      	beq.n	8002b8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e01f      	b.n	8002bca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e01d      	b.n	8002bca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	490f      	ldr	r1, [pc, #60]	; (8002bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b9e:	f7ff fc99 	bl	80024d4 <HAL_GetTick>
 8002ba2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ba4:	e009      	b.n	8002bba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ba6:	f7ff fc95 	bl	80024d4 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb4:	d901      	bls.n	8002bba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e007      	b.n	8002bca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_PWREx_ConfigSupply+0x70>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc6:	d1ee      	bne.n	8002ba6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	58024800 	.word	0x58024800

08002bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08c      	sub	sp, #48	; 0x30
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e3ff      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8087 	beq.w	8002d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf8:	4b99      	ldr	r3, [pc, #612]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c02:	4b97      	ldr	r3, [pc, #604]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d007      	beq.n	8002c1e <HAL_RCC_OscConfig+0x46>
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	2b18      	cmp	r3, #24
 8002c12:	d110      	bne.n	8002c36 <HAL_RCC_OscConfig+0x5e>
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d10b      	bne.n	8002c36 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1e:	4b90      	ldr	r3, [pc, #576]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d06c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x12c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d168      	bne.n	8002d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e3d9      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3e:	d106      	bne.n	8002c4e <HAL_RCC_OscConfig+0x76>
 8002c40:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a86      	ldr	r2, [pc, #536]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e02e      	b.n	8002cac <HAL_RCC_OscConfig+0xd4>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x98>
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a81      	ldr	r2, [pc, #516]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e01d      	b.n	8002cac <HAL_RCC_OscConfig+0xd4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0xbc>
 8002c7a:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a78      	ldr	r2, [pc, #480]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a75      	ldr	r2, [pc, #468]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0xd4>
 8002c94:	4b72      	ldr	r3, [pc, #456]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a71      	ldr	r2, [pc, #452]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a6e      	ldr	r2, [pc, #440]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7ff fc0e 	bl	80024d4 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7ff fc0a 	bl	80024d4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e38d      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cce:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0xe4>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7ff fbfa 	bl	80024d4 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7ff fbf6 	bl	80024d4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e379      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cf6:	4b5a      	ldr	r3, [pc, #360]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x10c>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80ae 	beq.w	8002e70 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d14:	4b52      	ldr	r3, [pc, #328]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d1e:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_RCC_OscConfig+0x162>
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b18      	cmp	r3, #24
 8002d2e:	d13a      	bne.n	8002da6 <HAL_RCC_OscConfig+0x1ce>
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d135      	bne.n	8002da6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3a:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e34b      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	f7ff fbef 	bl	8002534 <HAL_GetREVID>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d817      	bhi.n	8002d90 <HAL_RCC_OscConfig+0x1b8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d108      	bne.n	8002d7a <HAL_RCC_OscConfig+0x1a2>
 8002d68:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d70:	4a3b      	ldr	r2, [pc, #236]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d76:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d78:	e07a      	b.n	8002e70 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	031b      	lsls	r3, r3, #12
 8002d88:	4935      	ldr	r1, [pc, #212]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8e:	e06f      	b.n	8002e70 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	4930      	ldr	r1, [pc, #192]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da4:	e064      	b.n	8002e70 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d045      	beq.n	8002e3a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0219 	bic.w	r2, r3, #25
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	4929      	ldr	r1, [pc, #164]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fb88 	bl	80024d4 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7ff fb84 	bl	80024d4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e307      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dda:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	f7ff fba5 	bl	8002534 <HAL_GetREVID>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f241 0203 	movw	r2, #4099	; 0x1003
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d817      	bhi.n	8002e24 <HAL_RCC_OscConfig+0x24c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d108      	bne.n	8002e0e <HAL_RCC_OscConfig+0x236>
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002e04:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0a:	6053      	str	r3, [r2, #4]
 8002e0c:	e030      	b.n	8002e70 <HAL_RCC_OscConfig+0x298>
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	031b      	lsls	r3, r3, #12
 8002e1c:	4910      	ldr	r1, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
 8002e22:	e025      	b.n	8002e70 <HAL_RCC_OscConfig+0x298>
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	490b      	ldr	r1, [pc, #44]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
 8002e38:	e01a      	b.n	8002e70 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <HAL_RCC_OscConfig+0x288>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7ff fb45 	bl	80024d4 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7ff fb41 	bl	80024d4 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d903      	bls.n	8002e64 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e2c4      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
 8002e60:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e64:	4ba4      	ldr	r3, [pc, #656]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ee      	bne.n	8002e4e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a9 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7e:	4b9e      	ldr	r3, [pc, #632]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e88:	4b9b      	ldr	r3, [pc, #620]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d007      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x2cc>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b18      	cmp	r3, #24
 8002e98:	d13a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x338>
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d135      	bne.n	8002f10 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ea4:	4b94      	ldr	r3, [pc, #592]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x2e4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	2b80      	cmp	r3, #128	; 0x80
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e296      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebc:	f7ff fb3a 	bl	8002534 <HAL_GetREVID>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d817      	bhi.n	8002efa <HAL_RCC_OscConfig+0x322>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x30c>
 8002ed2:	4b89      	ldr	r3, [pc, #548]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002eda:	4a87      	ldr	r2, [pc, #540]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ee0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ee2:	e075      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ee4:	4b84      	ldr	r3, [pc, #528]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	069b      	lsls	r3, r3, #26
 8002ef2:	4981      	ldr	r1, [pc, #516]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef8:	e06a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002efa:	4b7f      	ldr	r3, [pc, #508]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	497b      	ldr	r1, [pc, #492]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f0e:	e05f      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d042      	beq.n	8002f9e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f18:	4b77      	ldr	r3, [pc, #476]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a76      	ldr	r2, [pc, #472]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7ff fad6 	bl	80024d4 <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f2c:	f7ff fad2 	bl	80024d4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e255      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f3e:	4b6e      	ldr	r3, [pc, #440]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f4a:	f7ff faf3 	bl	8002534 <HAL_GetREVID>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d817      	bhi.n	8002f88 <HAL_RCC_OscConfig+0x3b0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d108      	bne.n	8002f72 <HAL_RCC_OscConfig+0x39a>
 8002f60:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f68:	4a63      	ldr	r2, [pc, #396]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f6e:	6053      	str	r3, [r2, #4]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3f8>
 8002f72:	4b61      	ldr	r3, [pc, #388]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	069b      	lsls	r3, r3, #26
 8002f80:	495d      	ldr	r1, [pc, #372]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
 8002f86:	e023      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3f8>
 8002f88:	4b5b      	ldr	r3, [pc, #364]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	4958      	ldr	r1, [pc, #352]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
 8002f9c:	e018      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f9e:	4b56      	ldr	r3, [pc, #344]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a55      	ldr	r2, [pc, #340]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7ff fa93 	bl	80024d4 <HAL_GetTick>
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002fb2:	f7ff fa8f 	bl	80024d4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e212      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fc4:	4b4c      	ldr	r3, [pc, #304]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f0      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d036      	beq.n	800304a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d019      	beq.n	8003018 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe4:	4b44      	ldr	r3, [pc, #272]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe8:	4a43      	ldr	r2, [pc, #268]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7ff fa70 	bl	80024d4 <HAL_GetTick>
 8002ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7ff fa6c 	bl	80024d4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1ef      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x420>
 8003016:	e018      	b.n	800304a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 800301a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301c:	4a36      	ldr	r2, [pc, #216]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7ff fa56 	bl	80024d4 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302c:	f7ff fa52 	bl	80024d4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1d5      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800303e:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8003040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d036      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d019      	beq.n	8003092 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8003064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003068:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800306a:	f7ff fa33 	bl	80024d4 <HAL_GetTick>
 800306e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003072:	f7ff fa2f 	bl	80024d4 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e1b2      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003084:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x49a>
 8003090:	e018      	b.n	80030c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 8003098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800309c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800309e:	f7ff fa19 	bl	80024d4 <HAL_GetTick>
 80030a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80030a6:	f7ff fa15 	bl	80024d4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e198      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_RCC_OscConfig+0x520>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8085 	beq.w	80031dc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_OscConfig+0x524>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x524>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030de:	f7ff f9f9 	bl	80024d4 <HAL_GetTick>
 80030e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030e4:	e00c      	b.n	8003100 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7ff f9f5 	bl	80024d4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	; 0x64
 80030f2:	d905      	bls.n	8003100 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e178      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
 80030f8:	58024400 	.word	0x58024400
 80030fc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003100:	4b96      	ldr	r3, [pc, #600]	; (800335c <HAL_RCC_OscConfig+0x784>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ec      	beq.n	80030e6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x54a>
 8003114:	4b92      	ldr	r3, [pc, #584]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a91      	ldr	r2, [pc, #580]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	e02d      	b.n	800317e <HAL_RCC_OscConfig+0x5a6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x56c>
 800312a:	4b8d      	ldr	r3, [pc, #564]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a8c      	ldr	r2, [pc, #560]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	4b8a      	ldr	r3, [pc, #552]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a89      	ldr	r2, [pc, #548]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	e01c      	b.n	800317e <HAL_RCC_OscConfig+0x5a6>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d10c      	bne.n	8003166 <HAL_RCC_OscConfig+0x58e>
 800314c:	4b84      	ldr	r3, [pc, #528]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4a83      	ldr	r2, [pc, #524]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	; 0x70
 8003158:	4b81      	ldr	r3, [pc, #516]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a80      	ldr	r2, [pc, #512]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	e00b      	b.n	800317e <HAL_RCC_OscConfig+0x5a6>
 8003166:	4b7e      	ldr	r3, [pc, #504]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a7d      	ldr	r2, [pc, #500]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	; 0x70
 8003172:	4b7b      	ldr	r3, [pc, #492]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a7a      	ldr	r2, [pc, #488]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7ff f9a5 	bl	80024d4 <HAL_GetTick>
 800318a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7ff f9a1 	bl	80024d4 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e122      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a4:	4b6e      	ldr	r3, [pc, #440]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ee      	beq.n	800318e <HAL_RCC_OscConfig+0x5b6>
 80031b0:	e014      	b.n	80031dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7ff f98f 	bl	80024d4 <HAL_GetTick>
 80031b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7ff f98b 	bl	80024d4 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e10c      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d0:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ee      	bne.n	80031ba <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8101 	beq.w	80033e8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031e6:	4b5e      	ldr	r3, [pc, #376]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ee:	2b18      	cmp	r3, #24
 80031f0:	f000 80bc 	beq.w	800336c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	f040 8095 	bne.w	8003328 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b58      	ldr	r3, [pc, #352]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7ff f963 	bl	80024d4 <HAL_GetTick>
 800320e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7ff f95f 	bl	80024d4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0e2      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003224:	4b4e      	ldr	r3, [pc, #312]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <HAL_RCC_OscConfig+0x78c>)
 8003236:	4013      	ands	r3, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	430a      	orrs	r2, r1
 8003244:	4946      	ldr	r1, [pc, #280]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003246:	4313      	orrs	r3, r2
 8003248:	628b      	str	r3, [r1, #40]	; 0x28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	3b01      	subs	r3, #1
 8003250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	3b01      	subs	r3, #1
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	b29b      	uxth	r3, r3
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	3b01      	subs	r3, #1
 8003266:	041b      	lsls	r3, r3, #16
 8003268:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	3b01      	subs	r3, #1
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800327a:	4939      	ldr	r1, [pc, #228]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800327c:	4313      	orrs	r3, r2
 800327e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003280:	4b37      	ldr	r3, [pc, #220]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4a36      	ldr	r2, [pc, #216]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800328c:	4b34      	ldr	r3, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800328e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003290:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_RCC_OscConfig+0x790>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003298:	00d2      	lsls	r2, r2, #3
 800329a:	4931      	ldr	r1, [pc, #196]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800329c:	4313      	orrs	r3, r2
 800329e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	f023 020c 	bic.w	r2, r3, #12
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	492c      	ldr	r1, [pc, #176]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032b2:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	f023 0202 	bic.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4928      	ldr	r1, [pc, #160]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	4a25      	ldr	r2, [pc, #148]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d0:	4b23      	ldr	r3, [pc, #140]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032dc:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7ff f8e8 	bl	80024d4 <HAL_GetTick>
 8003304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003308:	f7ff f8e4 	bl	80024d4 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e067      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x730>
 8003326:	e05f      	b.n	80033e8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7ff f8ce 	bl	80024d4 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7ff f8ca 	bl	80024d4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e04d      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_RCC_OscConfig+0x788>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x764>
 800335a:	e045      	b.n	80033e8 <HAL_RCC_OscConfig+0x810>
 800335c:	58024800 	.word	0x58024800
 8003360:	58024400 	.word	0x58024400
 8003364:	fffffc0c 	.word	0xfffffc0c
 8003368:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCC_OscConfig+0x81c>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_RCC_OscConfig+0x81c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b01      	cmp	r3, #1
 800337e:	d031      	beq.n	80033e4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f003 0203 	and.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d12a      	bne.n	80033e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d122      	bne.n	80033e4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d11a      	bne.n	80033e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	0a5b      	lsrs	r3, r3, #9
 80033b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d111      	bne.n	80033e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	0e1b      	lsrs	r3, r3, #24
 80033d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3730      	adds	r7, #48	; 0x30
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	58024400 	.word	0x58024400

080033f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e19c      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b8a      	ldr	r3, [pc, #552]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d910      	bls.n	800343c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b87      	ldr	r3, [pc, #540]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 020f 	bic.w	r2, r3, #15
 8003422:	4985      	ldr	r1, [pc, #532]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b83      	ldr	r3, [pc, #524]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e184      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	4b7b      	ldr	r3, [pc, #492]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003454:	429a      	cmp	r2, r3
 8003456:	d908      	bls.n	800346a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003458:	4b78      	ldr	r3, [pc, #480]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	4975      	ldr	r1, [pc, #468]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003466:	4313      	orrs	r3, r2
 8003468:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d010      	beq.n	8003498 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	4b70      	ldr	r3, [pc, #448]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003482:	429a      	cmp	r2, r3
 8003484:	d908      	bls.n	8003498 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003486:	4b6d      	ldr	r3, [pc, #436]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	496a      	ldr	r1, [pc, #424]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003494:	4313      	orrs	r3, r2
 8003496:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	4b64      	ldr	r3, [pc, #400]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d908      	bls.n	80034c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034b4:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	495e      	ldr	r1, [pc, #376]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d010      	beq.n	80034f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	4b59      	ldr	r3, [pc, #356]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034de:	429a      	cmp	r2, r3
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034e2:	4b56      	ldr	r3, [pc, #344]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4953      	ldr	r1, [pc, #332]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	4b4d      	ldr	r3, [pc, #308]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	429a      	cmp	r2, r3
 800350e:	d908      	bls.n	8003522 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003510:	4b4a      	ldr	r3, [pc, #296]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f023 020f 	bic.w	r2, r3, #15
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4947      	ldr	r1, [pc, #284]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800351e:	4313      	orrs	r3, r2
 8003520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d055      	beq.n	80035da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800352e:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4940      	ldr	r1, [pc, #256]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800353c:	4313      	orrs	r3, r2
 800353e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d107      	bne.n	8003558 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003548:	4b3c      	ldr	r3, [pc, #240]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d121      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0f6      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d107      	bne.n	8003570 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003560:	4b36      	ldr	r3, [pc, #216]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d115      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0ea      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003578:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0de      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003588:	4b2c      	ldr	r3, [pc, #176]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0d6      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f023 0207 	bic.w	r2, r3, #7
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4925      	ldr	r1, [pc, #148]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035aa:	f7fe ff93 	bl	80024d4 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b2:	f7fe ff8f 	bl	80024d4 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0be      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c8:	4b1c      	ldr	r3, [pc, #112]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d1eb      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d208      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f023 020f 	bic.w	r2, r3, #15
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	490e      	ldr	r1, [pc, #56]	; (800363c <HAL_RCC_ClockConfig+0x244>)
 8003604:	4313      	orrs	r3, r2
 8003606:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d214      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	4906      	ldr	r1, [pc, #24]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b04      	ldr	r3, [pc, #16]	; (8003638 <HAL_RCC_ClockConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e086      	b.n	8003746 <HAL_RCC_ClockConfig+0x34e>
 8003638:	52002000 	.word	0x52002000
 800363c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003658:	429a      	cmp	r2, r3
 800365a:	d208      	bcs.n	800366e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800365c:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4939      	ldr	r1, [pc, #228]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 800366a:	4313      	orrs	r3, r2
 800366c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d010      	beq.n	800369c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003686:	429a      	cmp	r2, r3
 8003688:	d208      	bcs.n	800369c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	492e      	ldr	r1, [pc, #184]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003698:	4313      	orrs	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d208      	bcs.n	80036ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	4922      	ldr	r1, [pc, #136]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d010      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d208      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036e6:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4917      	ldr	r1, [pc, #92]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036f8:	f000 f834 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	4912      	ldr	r1, [pc, #72]	; (8003754 <HAL_RCC_ClockConfig+0x35c>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCC_ClockConfig+0x358>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <HAL_RCC_ClockConfig+0x35c>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
 800372c:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <HAL_RCC_ClockConfig+0x360>)
 800372e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003730:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x364>)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x368>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fe80 	bl	8002440 <HAL_InitTick>
 8003740:	4603      	mov	r3, r0
 8003742:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	58024400 	.word	0x58024400
 8003754:	0800fa28 	.word	0x0800fa28
 8003758:	24000004 	.word	0x24000004
 800375c:	24000000 	.word	0x24000000
 8003760:	24000008 	.word	0x24000008

08003764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376a:	4bb3      	ldr	r3, [pc, #716]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003772:	2b18      	cmp	r3, #24
 8003774:	f200 8155 	bhi.w	8003a22 <HAL_RCC_GetSysClockFreq+0x2be>
 8003778:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <HAL_RCC_GetSysClockFreq+0x1c>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	080037e5 	.word	0x080037e5
 8003784:	08003a23 	.word	0x08003a23
 8003788:	08003a23 	.word	0x08003a23
 800378c:	08003a23 	.word	0x08003a23
 8003790:	08003a23 	.word	0x08003a23
 8003794:	08003a23 	.word	0x08003a23
 8003798:	08003a23 	.word	0x08003a23
 800379c:	08003a23 	.word	0x08003a23
 80037a0:	0800380b 	.word	0x0800380b
 80037a4:	08003a23 	.word	0x08003a23
 80037a8:	08003a23 	.word	0x08003a23
 80037ac:	08003a23 	.word	0x08003a23
 80037b0:	08003a23 	.word	0x08003a23
 80037b4:	08003a23 	.word	0x08003a23
 80037b8:	08003a23 	.word	0x08003a23
 80037bc:	08003a23 	.word	0x08003a23
 80037c0:	08003811 	.word	0x08003811
 80037c4:	08003a23 	.word	0x08003a23
 80037c8:	08003a23 	.word	0x08003a23
 80037cc:	08003a23 	.word	0x08003a23
 80037d0:	08003a23 	.word	0x08003a23
 80037d4:	08003a23 	.word	0x08003a23
 80037d8:	08003a23 	.word	0x08003a23
 80037dc:	08003a23 	.word	0x08003a23
 80037e0:	08003817 	.word	0x08003817
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037e4:	4b94      	ldr	r3, [pc, #592]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d009      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037f0:	4b91      	ldr	r3, [pc, #580]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	08db      	lsrs	r3, r3, #3
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	4a90      	ldr	r2, [pc, #576]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003802:	e111      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003804:	4b8d      	ldr	r3, [pc, #564]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003806:	61bb      	str	r3, [r7, #24]
    break;
 8003808:	e10e      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800380c:	61bb      	str	r3, [r7, #24]
    break;
 800380e:	e10b      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003810:	4b8c      	ldr	r3, [pc, #560]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003812:	61bb      	str	r3, [r7, #24]
    break;
 8003814:	e108      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003816:	4b88      	ldr	r3, [pc, #544]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003820:	4b85      	ldr	r3, [pc, #532]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800382c:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003836:	4b80      	ldr	r3, [pc, #512]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	08db      	lsrs	r3, r3, #3
 800383c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80e1 	beq.w	8003a1c <HAL_RCC_GetSysClockFreq+0x2b8>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b02      	cmp	r3, #2
 800385e:	f000 8083 	beq.w	8003968 <HAL_RCC_GetSysClockFreq+0x204>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b02      	cmp	r3, #2
 8003866:	f200 80a1 	bhi.w	80039ac <HAL_RCC_GetSysClockFreq+0x248>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x114>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d056      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003876:	e099      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003878:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d02d      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003884:	4b6c      	ldr	r3, [pc, #432]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	4a6b      	ldr	r2, [pc, #428]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
 8003894:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ae:	4b62      	ldr	r3, [pc, #392]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038be:	ed97 6a02 	vldr	s12, [r7, #8]
 80038c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80038de:	e087      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a4c <HAL_RCC_GetSysClockFreq+0x2e8>
 80038ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f2:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003902:	ed97 6a02 	vldr	s12, [r7, #8]
 8003906:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800390a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800390e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003922:	e065      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003936:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003946:	ed97 6a02 	vldr	s12, [r7, #8]
 800394a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 800394e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003966:	e043      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003972:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397a:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398a:	ed97 6a02 	vldr	s12, [r7, #8]
 800398e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800399a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039aa:	e021      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a50 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80039d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a48 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	0a5b      	lsrs	r3, r3, #9
 80039f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fa:	3301      	adds	r3, #1
 80039fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a14:	ee17 3a90 	vmov	r3, s15
 8003a18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003a1a:	e005      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
    break;
 8003a20:	e002      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a24:	61bb      	str	r3, [r7, #24]
    break;
 8003a26:	bf00      	nop
  }

  return sysclockfreq;
 8003a28:	69bb      	ldr	r3, [r7, #24]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	; 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	58024400 	.word	0x58024400
 8003a3c:	03d09000 	.word	0x03d09000
 8003a40:	003d0900 	.word	0x003d0900
 8003a44:	007a1200 	.word	0x007a1200
 8003a48:	46000000 	.word	0x46000000
 8003a4c:	4c742400 	.word	0x4c742400
 8003a50:	4a742400 	.word	0x4a742400
 8003a54:	4af42400 	.word	0x4af42400

08003a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a5e:	f7ff fe81 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490f      	ldr	r1, [pc, #60]	; (8003aac <HAL_RCC_GetHCLKFreq+0x54>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_GetHCLKFreq+0x54>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a96:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	0800fa28 	.word	0x0800fa28
 8003ab0:	24000004 	.word	0x24000004
 8003ab4:	24000000 	.word	0x24000000

08003ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003abc:	f7ff ffcc 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4904      	ldr	r1, [pc, #16]	; (8003ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	0800fa28 	.word	0x0800fa28

08003ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ae8:	f7ff ffb6 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	58024400 	.word	0x58024400
 8003b0c:	0800fa28 	.word	0x0800fa28

08003b10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b18:	2300      	movs	r3, #0
 8003b1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d03f      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b34:	d02a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b3a:	d824      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b40:	d018      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b46:	d81e      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b50:	d007      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b52:	e018      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b54:	4bab      	ldr	r3, [pc, #684]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4aaa      	ldr	r2, [pc, #680]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b60:	e015      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2102      	movs	r1, #2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fff3 	bl	8005b54 <RCCEx_PLL2_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b72:	e00c      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f002 f89c 	bl	8005cb8 <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b94:	4b9b      	ldr	r3, [pc, #620]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba0:	4998      	ldr	r1, [pc, #608]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ba6:	e001      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03d      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d826      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bdd 	.word	0x08003bdd
 8003bcc:	08003beb 	.word	0x08003beb
 8003bd0:	08003bfd 	.word	0x08003bfd
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c15 	.word	0x08003c15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bdc:	4b89      	ldr	r3, [pc, #548]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4a88      	ldr	r2, [pc, #544]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003be8:	e015      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 ffaf 	bl	8005b54 <RCCEx_PLL2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bfa:	e00c      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3324      	adds	r3, #36	; 0x24
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f002 f858 	bl	8005cb8 <RCCEx_PLL3_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
      break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c1c:	4b79      	ldr	r3, [pc, #484]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	f023 0207 	bic.w	r2, r3, #7
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	4976      	ldr	r1, [pc, #472]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8003c2e:	e001      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d042      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c48:	d02b      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4e:	d825      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c50:	2bc0      	cmp	r3, #192	; 0xc0
 8003c52:	d028      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c54:	2bc0      	cmp	r3, #192	; 0xc0
 8003c56:	d821      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d016      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003c5c:	2b80      	cmp	r3, #128	; 0x80
 8003c5e:	d81d      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d007      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003c68:	e018      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6a:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	4a65      	ldr	r2, [pc, #404]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c76:	e017      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 ff68 	bl	8005b54 <RCCEx_PLL2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c88:	e00e      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3324      	adds	r3, #36	; 0x24
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f002 f811 	bl	8005cb8 <RCCEx_PLL3_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003cae:	4b55      	ldr	r3, [pc, #340]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	4952      	ldr	r1, [pc, #328]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	650b      	str	r3, [r1, #80]	; 0x50
 8003cc0:	e001      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d049      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cdc:	d030      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003cde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ce2:	d82a      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ce4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ce8:	d02c      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003cea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cee:	d824      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf4:	d018      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfa:	d81e      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003d00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d04:	d007      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003d06:	e018      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	4a3d      	ldr	r2, [pc, #244]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d14:	e017      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 ff19 	bl	8005b54 <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d26:	e00e      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3324      	adds	r3, #36	; 0x24
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 ffc2 	bl	8005cb8 <RCCEx_PLL3_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d38:	e005      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003d40:	bf00      	nop
 8003d42:	e000      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d5a:	492a      	ldr	r1, [pc, #168]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	658b      	str	r3, [r1, #88]	; 0x58
 8003d60:	e001      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d04c      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003d7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d82:	d82a      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d88:	d02c      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003d8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d8e:	d824      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d94:	d018      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d9a:	d81e      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da4:	d007      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003da6:	e018      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003db4:	e017      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fec9 	bl	8005b54 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003dc6:	e00e      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3324      	adds	r3, #36	; 0x24
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 ff72 	bl	8005cb8 <RCCEx_PLL3_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003dd8:	e005      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dde:	e002      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10d      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dfa:	4902      	ldr	r1, [pc, #8]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	658b      	str	r3, [r1, #88]	; 0x58
 8003e00:	e004      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003e02:	bf00      	nop
 8003e04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d032      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	2b30      	cmp	r3, #48	; 0x30
 8003e1e:	d01c      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003e20:	2b30      	cmp	r3, #48	; 0x30
 8003e22:	d817      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d813      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d016      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d10f      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e34:	4baf      	ldr	r3, [pc, #700]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4aae      	ldr	r2, [pc, #696]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e40:	e00e      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2102      	movs	r1, #2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fe83 	bl	8005b54 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003e52:	e005      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	e002      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e66:	4ba3      	ldr	r3, [pc, #652]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	49a0      	ldr	r1, [pc, #640]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d047      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e92:	d030      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e98:	d82a      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003e9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e9e:	d02c      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003ea0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ea4:	d824      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eaa:	d018      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb0:	d81e      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eba:	d007      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003ebc:	e018      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebe:	4b8d      	ldr	r3, [pc, #564]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a8c      	ldr	r2, [pc, #560]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003eca:	e017      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 fe3e 	bl	8005b54 <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003edc:	e00e      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3324      	adds	r3, #36	; 0x24
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 fee7 	bl	8005cb8 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003eee:	e005      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f02:	4b7c      	ldr	r3, [pc, #496]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f06:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0e:	4979      	ldr	r1, [pc, #484]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	650b      	str	r3, [r1, #80]	; 0x50
 8003f14:	e001      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d049      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f2e:	d02e      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f34:	d828      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003f36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f3a:	d02a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003f3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f40:	d822      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003f42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f46:	d026      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003f48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f4c:	d81c      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f52:	d010      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f58:	d816      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01d      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f62:	d111      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	2101      	movs	r1, #1
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 fdf2 	bl	8005b54 <RCCEx_PLL2_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f74:	e012      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3324      	adds	r3, #36	; 0x24
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fe9b 	bl	8005cb8 <RCCEx_PLL3_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003f86:	e009      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8c:	e006      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e004      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003f92:	bf00      	nop
 8003f94:	e002      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fa2:	4b54      	ldr	r3, [pc, #336]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fae:	4951      	ldr	r1, [pc, #324]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	650b      	str	r3, [r1, #80]	; 0x50
 8003fb4:	e001      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d04b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fd0:	d02e      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fd6:	d828      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d02a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d822      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003fe4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fe8:	d026      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003fea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fee:	d81c      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff4:	d010      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ffa:	d816      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01d      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004000:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004004:	d111      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	2101      	movs	r1, #1
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fda1 	bl	8005b54 <RCCEx_PLL2_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004016:	e012      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3324      	adds	r3, #36	; 0x24
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f001 fe4a 	bl	8005cb8 <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004028:	e009      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
      break;
 800402e:	e006      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004030:	bf00      	nop
 8004032:	e004      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004034:	bf00      	nop
 8004036:	e002      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800403c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004052:	4928      	ldr	r1, [pc, #160]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004054:	4313      	orrs	r3, r2
 8004056:	658b      	str	r3, [r1, #88]	; 0x58
 8004058:	e001      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
 800405c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02f      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004072:	d00e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004078:	d814      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d015      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800407e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004082:	d10f      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800408a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800408e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004090:	e00c      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fd5b 	bl	8005b54 <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80040a2:	e003      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
      break;
 80040a8:	e000      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80040aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040be:	490d      	ldr	r1, [pc, #52]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	650b      	str	r3, [r1, #80]	; 0x50
 80040c4:	e001      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d033      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d81c      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	0800411f 	.word	0x0800411f
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	08004107 	.word	0x08004107
 80040f0:	0800411f 	.word	0x0800411f
 80040f4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f8:	4bb8      	ldr	r3, [pc, #736]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4ab7      	ldr	r2, [pc, #732]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004104:	e00c      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fd21 	bl	8005b54 <RCCEx_PLL2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004116:	e003      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
      break;
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800411e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004126:	4bad      	ldr	r3, [pc, #692]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	f023 0203 	bic.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	49aa      	ldr	r1, [pc, #680]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004138:	e001      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8086 	beq.w	8004258 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800414c:	4ba4      	ldr	r3, [pc, #656]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4aa3      	ldr	r2, [pc, #652]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004158:	f7fe f9bc 	bl	80024d4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fe f9b8 	bl	80024d4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d902      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	75fb      	strb	r3, [r7, #23]
        break;
 8004172:	e005      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004174:	4b9a      	ldr	r3, [pc, #616]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ef      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d166      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004186:	4b95      	ldr	r3, [pc, #596]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004188:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004190:	4053      	eors	r3, r2
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	2b00      	cmp	r3, #0
 8004198:	d013      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800419a:	4b90      	ldr	r3, [pc, #576]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041a4:	4b8d      	ldr	r3, [pc, #564]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a8c      	ldr	r2, [pc, #560]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041b0:	4b8a      	ldr	r3, [pc, #552]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a89      	ldr	r2, [pc, #548]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041bc:	4a87      	ldr	r2, [pc, #540]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041cc:	d115      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fe f981 	bl	80024d4 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041d4:	e00b      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fe f97d 	bl	80024d4 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d902      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	75fb      	strb	r3, [r7, #23]
            break;
 80041ec:	e005      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ee:	4b7b      	ldr	r3, [pc, #492]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ed      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d126      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420e:	d10d      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004210:	4b72      	ldr	r3, [pc, #456]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800421e:	0919      	lsrs	r1, r3, #4
 8004220:	4b70      	ldr	r3, [pc, #448]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004222:	400b      	ands	r3, r1
 8004224:	496d      	ldr	r1, [pc, #436]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	610b      	str	r3, [r1, #16]
 800422a:	e005      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800422c:	4b6b      	ldr	r3, [pc, #428]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	4a6a      	ldr	r2, [pc, #424]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004232:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004236:	6113      	str	r3, [r2, #16]
 8004238:	4b68      	ldr	r3, [pc, #416]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800423a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004246:	4965      	ldr	r1, [pc, #404]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	670b      	str	r3, [r1, #112]	; 0x70
 800424c:	e004      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
 8004250:	75bb      	strb	r3, [r7, #22]
 8004252:	e001      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d07e      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004268:	2b28      	cmp	r3, #40	; 0x28
 800426a:	d867      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004343 	.word	0x08004343
 8004278:	0800433d 	.word	0x0800433d
 800427c:	0800433d 	.word	0x0800433d
 8004280:	0800433d 	.word	0x0800433d
 8004284:	0800433d 	.word	0x0800433d
 8004288:	0800433d 	.word	0x0800433d
 800428c:	0800433d 	.word	0x0800433d
 8004290:	0800433d 	.word	0x0800433d
 8004294:	08004319 	.word	0x08004319
 8004298:	0800433d 	.word	0x0800433d
 800429c:	0800433d 	.word	0x0800433d
 80042a0:	0800433d 	.word	0x0800433d
 80042a4:	0800433d 	.word	0x0800433d
 80042a8:	0800433d 	.word	0x0800433d
 80042ac:	0800433d 	.word	0x0800433d
 80042b0:	0800433d 	.word	0x0800433d
 80042b4:	0800432b 	.word	0x0800432b
 80042b8:	0800433d 	.word	0x0800433d
 80042bc:	0800433d 	.word	0x0800433d
 80042c0:	0800433d 	.word	0x0800433d
 80042c4:	0800433d 	.word	0x0800433d
 80042c8:	0800433d 	.word	0x0800433d
 80042cc:	0800433d 	.word	0x0800433d
 80042d0:	0800433d 	.word	0x0800433d
 80042d4:	08004343 	.word	0x08004343
 80042d8:	0800433d 	.word	0x0800433d
 80042dc:	0800433d 	.word	0x0800433d
 80042e0:	0800433d 	.word	0x0800433d
 80042e4:	0800433d 	.word	0x0800433d
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	0800433d 	.word	0x0800433d
 80042f0:	0800433d 	.word	0x0800433d
 80042f4:	08004343 	.word	0x08004343
 80042f8:	0800433d 	.word	0x0800433d
 80042fc:	0800433d 	.word	0x0800433d
 8004300:	0800433d 	.word	0x0800433d
 8004304:	0800433d 	.word	0x0800433d
 8004308:	0800433d 	.word	0x0800433d
 800430c:	0800433d 	.word	0x0800433d
 8004310:	0800433d 	.word	0x0800433d
 8004314:	08004343 	.word	0x08004343
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f001 fc18 	bl	8005b54 <RCCEx_PLL2_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004328:	e00c      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3324      	adds	r3, #36	; 0x24
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fcc1 	bl	8005cb8 <RCCEx_PLL3_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800433a:	e003      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
      break;
 8004340:	e000      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004356:	4921      	ldr	r1, [pc, #132]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	654b      	str	r3, [r1, #84]	; 0x54
 800435c:	e001      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d03e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	2b05      	cmp	r3, #5
 8004374:	d820      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004376:	a201      	add	r2, pc, #4	; (adr r2, 800437c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	080043bf 	.word	0x080043bf
 8004380:	08004395 	.word	0x08004395
 8004384:	080043a7 	.word	0x080043a7
 8004388:	080043bf 	.word	0x080043bf
 800438c:	080043bf 	.word	0x080043bf
 8004390:	080043bf 	.word	0x080043bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f001 fbda 	bl	8005b54 <RCCEx_PLL2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043a4:	e00c      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3324      	adds	r3, #36	; 0x24
 80043aa:	2101      	movs	r1, #1
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 fc83 	bl	8005cb8 <RCCEx_PLL3_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80043b6:	e003      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	75fb      	strb	r3, [r7, #23]
      break;
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80043be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d110      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f023 0207 	bic.w	r2, r3, #7
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	4902      	ldr	r1, [pc, #8]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	654b      	str	r3, [r1, #84]	; 0x54
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80043da:	bf00      	nop
 80043dc:	58024400 	.word	0x58024400
 80043e0:	58024800 	.word	0x58024800
 80043e4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	7dfb      	ldrb	r3, [r7, #23]
 80043ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d039      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d820      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800444b 	.word	0x0800444b
 800440c:	08004421 	.word	0x08004421
 8004410:	08004433 	.word	0x08004433
 8004414:	0800444b 	.word	0x0800444b
 8004418:	0800444b 	.word	0x0800444b
 800441c:	0800444b 	.word	0x0800444b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2101      	movs	r1, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f001 fb94 	bl	8005b54 <RCCEx_PLL2_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004430:	e00c      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3324      	adds	r3, #36	; 0x24
 8004436:	2101      	movs	r1, #1
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fc3d 	bl	8005cb8 <RCCEx_PLL3_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004442:	e003      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
      break;
 8004448:	e000      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800444a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004452:	4bb7      	ldr	r3, [pc, #732]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	f023 0207 	bic.w	r2, r3, #7
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	49b3      	ldr	r1, [pc, #716]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004462:	4313      	orrs	r3, r2
 8004464:	658b      	str	r3, [r1, #88]	; 0x58
 8004466:	e001      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d04b      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004482:	d02e      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004488:	d828      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d02a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d822      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004496:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800449a:	d026      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800449c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044a0:	d81c      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80044a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a6:	d010      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80044a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ac:	d816      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01d      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80044b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044b6:	d111      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fb48 	bl	8005b54 <RCCEx_PLL2_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044c8:	e012      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3324      	adds	r3, #36	; 0x24
 80044ce:	2102      	movs	r1, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 fbf1 	bl	8005cb8 <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80044da:	e009      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	75fb      	strb	r3, [r7, #23]
      break;
 80044e0:	e006      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80044e2:	bf00      	nop
 80044e4:	e004      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80044e6:	bf00      	nop
 80044e8:	e002      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80044ea:	bf00      	nop
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80044ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10a      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f6:	4b8e      	ldr	r3, [pc, #568]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004504:	498a      	ldr	r1, [pc, #552]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004506:	4313      	orrs	r3, r2
 8004508:	654b      	str	r3, [r1, #84]	; 0x54
 800450a:	e001      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d04b      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004522:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004526:	d02e      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004528:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800452c:	d828      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004532:	d02a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d822      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800453a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800453e:	d026      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004544:	d81c      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454a:	d010      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800454c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004550:	d816      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01d      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455a:	d111      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f001 faf6 	bl	8005b54 <RCCEx_PLL2_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800456c:	e012      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3324      	adds	r3, #36	; 0x24
 8004572:	2102      	movs	r1, #2
 8004574:	4618      	mov	r0, r3
 8004576:	f001 fb9f 	bl	8005cb8 <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800457e:	e009      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
      break;
 8004584:	e006      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004586:	bf00      	nop
 8004588:	e004      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800459a:	4b65      	ldr	r3, [pc, #404]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045a8:	4961      	ldr	r1, [pc, #388]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	658b      	str	r3, [r1, #88]	; 0x58
 80045ae:	e001      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d04b      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045ca:	d02e      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80045cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80045d0:	d828      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80045d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d6:	d02a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045dc:	d822      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80045de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045e2:	d026      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80045e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80045e8:	d81c      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80045ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ee:	d010      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80045f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f4:	d816      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01d      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fe:	d111      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3304      	adds	r3, #4
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f001 faa4 	bl	8005b54 <RCCEx_PLL2_Config>
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004610:	e012      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3324      	adds	r3, #36	; 0x24
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fb4d 	bl	8005cb8 <RCCEx_PLL3_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004622:	e009      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
      break;
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800462a:	bf00      	nop
 800462c:	e004      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800462e:	bf00      	nop
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800463e:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800464c:	4938      	ldr	r1, [pc, #224]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800464e:	4313      	orrs	r3, r2
 8004650:	658b      	str	r3, [r1, #88]	; 0x58
 8004652:	e001      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466e:	d10a      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3324      	adds	r3, #36	; 0x24
 8004674:	2102      	movs	r1, #2
 8004676:	4618      	mov	r0, r3
 8004678:	f001 fb1e 	bl	8005cb8 <RCCEx_PLL3_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004686:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004694:	4926      	ldr	r1, [pc, #152]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004696:	4313      	orrs	r3, r2
 8004698:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b0:	d10a      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3324      	adds	r3, #36	; 0x24
 80046b6:	2102      	movs	r1, #2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fafd 	bl	8005cb8 <RCCEx_PLL3_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d6:	4916      	ldr	r1, [pc, #88]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d036      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046f2:	d01f      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80046f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046f8:	d817      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80046fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004702:	d009      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004704:	e011      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f001 fa21 	bl	8005b54 <RCCEx_PLL2_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004716:	e00e      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3324      	adds	r3, #36	; 0x24
 800471c:	2102      	movs	r1, #2
 800471e:	4618      	mov	r0, r3
 8004720:	f001 faca 	bl	8005cb8 <RCCEx_PLL3_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004728:	e005      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004730:	58024400 	.word	0x58024400
      break;
 8004734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004736:	7dfb      	ldrb	r3, [r7, #23]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800473c:	4b93      	ldr	r3, [pc, #588]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800474a:	4990      	ldr	r1, [pc, #576]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800474c:	4313      	orrs	r3, r2
 800474e:	658b      	str	r3, [r1, #88]	; 0x58
 8004750:	e001      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
 8004754:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d033      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800476c:	d01c      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800476e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004772:	d816      	bhi.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004778:	d003      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800477a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800477e:	d007      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004780:	e00f      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004782:	4b82      	ldr	r3, [pc, #520]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	4a81      	ldr	r2, [pc, #516]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800478e:	e00c      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3324      	adds	r3, #36	; 0x24
 8004794:	2101      	movs	r1, #1
 8004796:	4618      	mov	r0, r3
 8004798:	f001 fa8e 	bl	8005cb8 <RCCEx_PLL3_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80047a0:	e003      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
      break;
 80047a6:	e000      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80047a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047b0:	4b76      	ldr	r3, [pc, #472]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047be:	4973      	ldr	r1, [pc, #460]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	654b      	str	r3, [r1, #84]	; 0x54
 80047c4:	e001      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
 80047c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d029      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80047de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e2:	d007      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80047e4:	e00f      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e6:	4b69      	ldr	r3, [pc, #420]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	4a68      	ldr	r2, [pc, #416]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80047ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80047f2:	e00b      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 f9aa 	bl	8005b54 <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004804:	e002      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
      break;
 800480a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004812:	4b5e      	ldr	r3, [pc, #376]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	495b      	ldr	r1, [pc, #364]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004824:	e001      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3324      	adds	r3, #36	; 0x24
 800483a:	2102      	movs	r1, #2
 800483c:	4618      	mov	r0, r3
 800483e:	f001 fa3b 	bl	8005cb8 <RCCEx_PLL3_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d030      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004860:	d017      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004866:	d811      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800486c:	d013      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800486e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004872:	d80b      	bhi.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d010      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487c:	d106      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800487e:	4b43      	ldr	r3, [pc, #268]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	4a42      	ldr	r2, [pc, #264]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800488a:	e007      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
      break;
 8004890:	e004      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004892:	bf00      	nop
 8004894:	e002      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800489a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048a2:	4b3a      	ldr	r3, [pc, #232]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ae:	4937      	ldr	r1, [pc, #220]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	654b      	str	r3, [r1, #84]	; 0x54
 80048b4:	e001      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
 80048b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	492e      	ldr	r1, [pc, #184]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048e4:	4b29      	ldr	r3, [pc, #164]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048f2:	4926      	ldr	r1, [pc, #152]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004910:	491e      	ldr	r1, [pc, #120]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004912:	4313      	orrs	r3, r2
 8004914:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004922:	4b1a      	ldr	r3, [pc, #104]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	4a19      	ldr	r2, [pc, #100]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800492c:	6113      	str	r3, [r2, #16]
 800492e:	4b17      	ldr	r3, [pc, #92]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004938:	4914      	ldr	r1, [pc, #80]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	da08      	bge.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	490e      	ldr	r1, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004954:	4313      	orrs	r3, r2
 8004956:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	4906      	ldr	r1, [pc, #24]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004978:	7dbb      	ldrb	r3, [r7, #22]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	58024400 	.word	0x58024400

08004990 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b090      	sub	sp, #64	; 0x40
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499e:	f040 8095 	bne.w	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80049a2:	4bae      	ldr	r3, [pc, #696]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	f200 8088 	bhi.w	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049d1 	.word	0x080049d1
 80049c0:	080049f9 	.word	0x080049f9
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004abd 	.word	0x08004abd
 80049cc:	08004a49 	.word	0x08004a49

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049d0:	4ba2      	ldr	r3, [pc, #648]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049dc:	d108      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 ff64 	bl	80058b0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049ec:	f000 bc95 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049f4:	f000 bc91 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049f8:	4b98      	ldr	r3, [pc, #608]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a04:	d108      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a06:	f107 0318 	add.w	r3, r7, #24
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fca8 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a14:	f000 bc81 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a1c:	f000 bc7d 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a20:	4b8e      	ldr	r3, [pc, #568]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a2c:	d108      	bne.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a2e:	f107 030c 	add.w	r3, r7, #12
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fde8 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a3c:	f000 bc6d 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a44:	f000 bc69 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a48:	4b84      	ldr	r3, [pc, #528]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a52:	4b82      	ldr	r3, [pc, #520]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a64:	4b7d      	ldr	r3, [pc, #500]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	08db      	lsrs	r3, r3, #3
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	4a7c      	ldr	r2, [pc, #496]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
 8004a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a76:	e01f      	b.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a78:	4b78      	ldr	r3, [pc, #480]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a84:	d106      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a8e:	4b75      	ldr	r3, [pc, #468]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a92:	e011      	b.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a94:	4b71      	ldr	r3, [pc, #452]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa8:	d102      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004aaa:	4b6f      	ldr	r3, [pc, #444]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aae:	e003      	b.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ab4:	f000 bc31 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004ab8:	f000 bc2f 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004abc:	4b6b      	ldr	r3, [pc, #428]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac0:	f000 bc2b 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac8:	f000 bc27 	b.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad2:	f040 8095 	bne.w	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004ad6:	4b61      	ldr	r3, [pc, #388]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ada:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004ade:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae6:	d04d      	beq.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aee:	f200 8084 	bhi.w	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	2bc0      	cmp	r3, #192	; 0xc0
 8004af6:	d07d      	beq.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2bc0      	cmp	r3, #192	; 0xc0
 8004afc:	d87d      	bhi.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	2b80      	cmp	r3, #128	; 0x80
 8004b02:	d02d      	beq.n	8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	d877      	bhi.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d012      	beq.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004b16:	e070      	b.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b18:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b24:	d107      	bne.n	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fec0 	bl	80058b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b34:	e3f1      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b3a:	e3ee      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b3c:	4b47      	ldr	r3, [pc, #284]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b48:	d107      	bne.n	8004b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b4a:	f107 0318 	add.w	r3, r7, #24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fc06 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b58:	e3df      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b5e:	e3dc      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b60:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fd48 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b7c:	e3cd      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b82:	e3ca      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b84:	4b35      	ldr	r3, [pc, #212]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b8e:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	4a2d      	ldr	r2, [pc, #180]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb2:	e01e      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bb4:	4b29      	ldr	r3, [pc, #164]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bc8:	d102      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bce:	e010      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bdc:	d106      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8004bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be4:	d102      	bne.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004be6:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bea:	e002      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004bf0:	e393      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004bf2:	e392      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bf8:	e38f      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bfe:	e38c      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c06:	f040 80a7 	bne.w	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c1a:	d05f      	beq.n	8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c22:	f200 8096 	bhi.w	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c2c:	f000 808e 	beq.w	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c36:	f200 808c 	bhi.w	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c40:	d03a      	beq.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c48:	f200 8083 	bhi.w	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00e      	beq.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c58:	d01c      	beq.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004c5a:	e07a      	b.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004c5c:	58024400 	.word	0x58024400
 8004c60:	03d09000 	.word	0x03d09000
 8004c64:	003d0900 	.word	0x003d0900
 8004c68:	007a1200 	.word	0x007a1200
 8004c6c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c70:	4baa      	ldr	r3, [pc, #680]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fe14 	bl	80058b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c8c:	e345      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c92:	e342      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c94:	4ba1      	ldr	r3, [pc, #644]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca0:	d107      	bne.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ca2:	f107 0318 	add.w	r3, r7, #24
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fb5a 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cb0:	e333      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cb6:	e330      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cb8:	4b98      	ldr	r3, [pc, #608]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cc6:	f107 030c 	add.w	r3, r7, #12
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fc9c 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cd4:	e321      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cda:	e31e      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ce6:	4b8d      	ldr	r3, [pc, #564]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cf8:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	08db      	lsrs	r3, r3, #3
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	4a87      	ldr	r2, [pc, #540]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d0a:	e01e      	b.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d0c:	4b83      	ldr	r3, [pc, #524]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d18:	d106      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8004d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d20:	d102      	bne.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d22:	4b80      	ldr	r3, [pc, #512]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d26:	e010      	b.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d28:	4b7c      	ldr	r3, [pc, #496]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d34:	d106      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d3c:	d102      	bne.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d3e:	4b7a      	ldr	r3, [pc, #488]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d42:	e002      	b.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d48:	e2e7      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004d4a:	e2e6      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d4c:	4b77      	ldr	r3, [pc, #476]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d50:	e2e3      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d56:	e2e0      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5e:	f040 809c 	bne.w	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004d62:	4b6e      	ldr	r3, [pc, #440]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004d6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d72:	d054      	beq.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d7a:	f200 808b 	bhi.w	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d84:	f000 8083 	beq.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d8e:	f200 8081 	bhi.w	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d98:	d02f      	beq.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004da0:	d878      	bhi.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dae:	d012      	beq.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004db0:	e070      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004db2:	4b5a      	ldr	r3, [pc, #360]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dbe:	d107      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fd73 	bl	80058b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004dce:	e2a4      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dd4:	e2a1      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dd6:	4b51      	ldr	r3, [pc, #324]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de2:	d107      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004de4:	f107 0318 	add.w	r3, r7, #24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fab9 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004df2:	e292      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df8:	e28f      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dfa:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e06:	d107      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e08:	f107 030c 	add.w	r3, r7, #12
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fbfb 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e16:	e280      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e1c:	e27d      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e1e:	4b3f      	ldr	r3, [pc, #252]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e28:	4b3c      	ldr	r3, [pc, #240]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d10c      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e3a:	4b38      	ldr	r3, [pc, #224]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	08db      	lsrs	r3, r3, #3
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	4a36      	ldr	r2, [pc, #216]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004e46:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4c:	e01e      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e4e:	4b33      	ldr	r3, [pc, #204]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e62:	d102      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004e64:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e68:	e010      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e6a:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e76:	d106      	bne.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7e:	d102      	bne.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004e8a:	e246      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004e8c:	e245      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e8e:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e92:	e242      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e98:	e23f      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea0:	f040 80a8 	bne.w	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb4:	d060      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebc:	f200 8097 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ec6:	f000 808f 	beq.w	8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ed0:	f200 808d 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eda:	d03b      	beq.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee2:	f200 8084 	bhi.w	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d004      	beq.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef2:	d01d      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004ef4:	e07b      	b.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f02:	d107      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fcd1 	bl	80058b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f12:	e202      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f18:	e1ff      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004f1a:	bf00      	nop
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	03d09000 	.word	0x03d09000
 8004f24:	003d0900 	.word	0x003d0900
 8004f28:	007a1200 	.word	0x007a1200
 8004f2c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f30:	4ba3      	ldr	r3, [pc, #652]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f3e:	f107 0318 	add.w	r3, r7, #24
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fa0c 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f4c:	e1e5      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f52:	e1e2      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f54:	4b9a      	ldr	r3, [pc, #616]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f60:	d107      	bne.n	8004f72 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f62:	f107 030c 	add.w	r3, r7, #12
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fb4e 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f70:	e1d3      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f76:	e1d0      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f78:	4b91      	ldr	r3, [pc, #580]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f82:	4b8f      	ldr	r3, [pc, #572]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f94:	4b8a      	ldr	r3, [pc, #552]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	08db      	lsrs	r3, r3, #3
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	4a89      	ldr	r2, [pc, #548]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa6:	e01e      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004fa8:	4b85      	ldr	r3, [pc, #532]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fbc:	d102      	bne.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004fbe:	4b82      	ldr	r3, [pc, #520]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc2:	e010      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fc4:	4b7e      	ldr	r3, [pc, #504]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd0:	d106      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004fda:	4b7c      	ldr	r3, [pc, #496]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fde:	e002      	b.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004fe4:	e199      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004fe6:	e198      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fe8:	4b79      	ldr	r3, [pc, #484]	; (80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fec:	e195      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ff2:	e192      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ffa:	d173      	bne.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004ffc:	4b70      	ldr	r3, [pc, #448]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800500c:	d02f      	beq.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005014:	d863      	bhi.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005022:	d012      	beq.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8005024:	e05b      	b.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005026:	4b66      	ldr	r3, [pc, #408]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800502e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005032:	d107      	bne.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005034:	f107 0318 	add.w	r3, r7, #24
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f991 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005042:	e16a      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005048:	e167      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800504a:	4b5d      	ldr	r3, [pc, #372]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005056:	d107      	bne.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005058:	f107 030c 	add.w	r3, r7, #12
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fad3 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005066:	e158      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800506c:	e155      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800506e:	4b54      	ldr	r3, [pc, #336]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005076:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005078:	4b51      	ldr	r3, [pc, #324]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d10c      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800508a:	4b4d      	ldr	r3, [pc, #308]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800509c:	e01e      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800509e:	4b48      	ldr	r3, [pc, #288]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050aa:	d106      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80050ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050b2:	d102      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80050b4:	4b44      	ldr	r3, [pc, #272]	; (80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b8:	e010      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050c6:	d106      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ce:	d102      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80050d0:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80050da:	e11e      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80050dc:	e11d      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80050e2:	e11a      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d133      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80050ec:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80050ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005102:	d012      	beq.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8005104:	e023      	b.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005106:	4b2e      	ldr	r3, [pc, #184]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005112:	d107      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fbc9 	bl	80058b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800511e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005122:	e0fa      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005128:	e0f7      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800512a:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005136:	d107      	bne.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005138:	f107 0318 	add.w	r3, r7, #24
 800513c:	4618      	mov	r0, r3
 800513e:	f000 f90f 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005146:	e0e8      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800514c:	e0e5      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005152:	e0e2      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800515a:	f040 808f 	bne.w	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800515e:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8005160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005162:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800516e:	d075      	beq.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005176:	d87e      	bhi.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d060      	beq.n	8005242 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d876      	bhi.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800518e:	d045      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005196:	d86e      	bhi.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519e:	d02b      	beq.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051a6:	d866      	bhi.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b4:	d00e      	beq.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80051b6:	e05e      	b.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80051b8:	f000 f8bc 	bl	8005334 <HAL_RCCEx_GetD3PCLK1Freq>
 80051bc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80051be:	e0ac      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80051c0:	58024400 	.word	0x58024400
 80051c4:	03d09000 	.word	0x03d09000
 80051c8:	003d0900 	.word	0x003d0900
 80051cc:	007a1200 	.word	0x007a1200
 80051d0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051d4:	4b53      	ldr	r3, [pc, #332]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e0:	d107      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051e2:	f107 0318 	add.w	r3, r7, #24
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f8ba 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80051f0:	e093      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051f6:	e090      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051f8:	4b4a      	ldr	r3, [pc, #296]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005204:	d107      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005206:	f107 030c 	add.w	r3, r7, #12
 800520a:	4618      	mov	r0, r3
 800520c:	f000 f9fc 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005214:	e081      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800521a:	e07e      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800521c:	4b41      	ldr	r3, [pc, #260]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b04      	cmp	r3, #4
 8005226:	d109      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005228:	4b3e      	ldr	r3, [pc, #248]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	08db      	lsrs	r3, r3, #3
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	4a3d      	ldr	r2, [pc, #244]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800523a:	e06e      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005240:	e06b      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005242:	4b38      	ldr	r3, [pc, #224]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524e:	d102      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8005250:	4b36      	ldr	r3, [pc, #216]	; (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005254:	e061      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800525a:	e05e      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800525c:	4b31      	ldr	r3, [pc, #196]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005268:	d102      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800526a:	4b31      	ldr	r3, [pc, #196]	; (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800526e:	e054      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005274:	e051      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800527a:	e04e      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005282:	d148      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005284:	4b27      	ldr	r3, [pc, #156]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005294:	d02a      	beq.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529c:	d838      	bhi.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052aa:	d00d      	beq.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80052ac:	e030      	b.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052ae:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ba:	d102      	bne.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80052bc:	4b1c      	ldr	r3, [pc, #112]	; (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052c0:	e02b      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c6:	e028      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052c8:	4b16      	ldr	r3, [pc, #88]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d4:	d107      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fae8 	bl	80058b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80052e4:	e019      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ea:	e016      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052ec:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052f8:	d107      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052fa:	f107 0318 	add.w	r3, r7, #24
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f82e 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005308:	e007      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800530e:	e004      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005314:	e001      	b.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800531c:	4618      	mov	r0, r3
 800531e:	3740      	adds	r7, #64	; 0x40
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	58024400 	.word	0x58024400
 8005328:	03d09000 	.word	0x03d09000
 800532c:	003d0900 	.word	0x003d0900
 8005330:	007a1200 	.word	0x007a1200

08005334 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005338:	f7fe fb8e 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 800533c:	4602      	mov	r2, r0
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	4904      	ldr	r1, [pc, #16]	; (800535c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800534a:	5ccb      	ldrb	r3, [r1, r3]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005354:	4618      	mov	r0, r3
 8005356:	bd80      	pop	{r7, pc}
 8005358:	58024400 	.word	0x58024400
 800535c:	0800fa28 	.word	0x0800fa28

08005360 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005360:	b480      	push	{r7}
 8005362:	b089      	sub	sp, #36	; 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005368:	4ba1      	ldr	r3, [pc, #644]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005372:	4b9f      	ldr	r3, [pc, #636]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	0b1b      	lsrs	r3, r3, #12
 8005378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800537c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800537e:	4b9c      	ldr	r3, [pc, #624]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800538a:	4b99      	ldr	r3, [pc, #612]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	08db      	lsrs	r3, r3, #3
 8005390:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8111 	beq.w	80055d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	f000 8083 	beq.w	80054bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	f200 80a1 	bhi.w	8005500 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d056      	beq.n	8005478 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80053ca:	e099      	b.n	8005500 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053cc:	4b88      	ldr	r3, [pc, #544]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d02d      	beq.n	8005434 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053d8:	4b85      	ldr	r3, [pc, #532]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	08db      	lsrs	r3, r3, #3
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	4a84      	ldr	r2, [pc, #528]	; (80055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
 80053e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	ee07 3a90 	vmov	s15, r3
 80053f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005402:	4b7b      	ldr	r3, [pc, #492]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	ed97 6a03 	vldr	s12, [r7, #12]
 8005416:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800541a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005432:	e087      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005446:	4b6a      	ldr	r3, [pc, #424]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	ed97 6a03 	vldr	s12, [r7, #12]
 800545a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800545e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005476:	e065      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548a:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549a:	ed97 6a03 	vldr	s12, [r7, #12]
 800549e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054ba:	e043      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	4b48      	ldr	r3, [pc, #288]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054de:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054fe:	e021      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800550e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005522:	ed97 6a03 	vldr	s12, [r7, #12]
 8005526:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800552a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005542:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	0a5b      	lsrs	r3, r3, #9
 800554a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800555a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800555e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556a:	ee17 2a90 	vmov	r2, s15
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005572:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005588:	ee37 7a87 	vadd.f32	s14, s15, s14
 800558c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005598:	ee17 2a90 	vmov	r2, s15
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	0e1b      	lsrs	r3, r3, #24
 80055a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80055be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c6:	ee17 2a90 	vmov	r2, s15
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055ce:	e008      	b.n	80055e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	609a      	str	r2, [r3, #8]
}
 80055e2:	bf00      	nop
 80055e4:	3724      	adds	r7, #36	; 0x24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	58024400 	.word	0x58024400
 80055f4:	03d09000 	.word	0x03d09000
 80055f8:	46000000 	.word	0x46000000
 80055fc:	4c742400 	.word	0x4c742400
 8005600:	4a742400 	.word	0x4a742400
 8005604:	4af42400 	.word	0x4af42400

08005608 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	; 0x24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005610:	4ba1      	ldr	r3, [pc, #644]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800561a:	4b9f      	ldr	r3, [pc, #636]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	0d1b      	lsrs	r3, r3, #20
 8005620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005624:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005626:	4b9c      	ldr	r3, [pc, #624]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005632:	4b99      	ldr	r3, [pc, #612]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8111 	beq.w	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b02      	cmp	r3, #2
 800565a:	f000 8083 	beq.w	8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b02      	cmp	r3, #2
 8005662:	f200 80a1 	bhi.w	80057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d056      	beq.n	8005720 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005672:	e099      	b.n	80057a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005674:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d02d      	beq.n	80056dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005680:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	08db      	lsrs	r3, r3, #3
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	4a84      	ldr	r2, [pc, #528]	; (800589c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056aa:	4b7b      	ldr	r3, [pc, #492]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80056be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056da:	e087      	b.n	80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ee:	4b6a      	ldr	r3, [pc, #424]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005702:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800571e:	e065      	b.n	80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800572e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005732:	4b59      	ldr	r3, [pc, #356]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005742:	ed97 6a03 	vldr	s12, [r7, #12]
 8005746:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800574a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005762:	e043      	b.n	80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005776:	4b48      	ldr	r3, [pc, #288]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005786:	ed97 6a03 	vldr	s12, [r7, #12]
 800578a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800578e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800579a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800579e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057a6:	e021      	b.n	80057ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80057ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80057ec:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	0a5b      	lsrs	r3, r3, #9
 80057f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005806:	edd7 6a07 	vldr	s13, [r7, #28]
 800580a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005812:	ee17 2a90 	vmov	r2, s15
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800581a:	4b1f      	ldr	r3, [pc, #124]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	0c1b      	lsrs	r3, r3, #16
 8005820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005834:	edd7 6a07 	vldr	s13, [r7, #28]
 8005838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800583c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005840:	ee17 2a90 	vmov	r2, s15
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005848:	4b13      	ldr	r3, [pc, #76]	; (8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	0e1b      	lsrs	r3, r3, #24
 800584e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800585e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005862:	edd7 6a07 	vldr	s13, [r7, #28]
 8005866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800586a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800586e:	ee17 2a90 	vmov	r2, s15
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005876:	e008      	b.n	800588a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
}
 800588a:	bf00      	nop
 800588c:	3724      	adds	r7, #36	; 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	58024400 	.word	0x58024400
 800589c:	03d09000 	.word	0x03d09000
 80058a0:	46000000 	.word	0x46000000
 80058a4:	4c742400 	.word	0x4c742400
 80058a8:	4a742400 	.word	0x4a742400
 80058ac:	4af42400 	.word	0x4af42400

080058b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	; 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058b8:	4ba0      	ldr	r3, [pc, #640]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80058c2:	4b9e      	ldr	r3, [pc, #632]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80058ce:	4b9b      	ldr	r3, [pc, #620]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80058d8:	4b98      	ldr	r3, [pc, #608]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	08db      	lsrs	r3, r3, #3
 80058de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	fb02 f303 	mul.w	r3, r2, r3
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8111 	beq.w	8005b1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	f000 8083 	beq.w	8005a0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b02      	cmp	r3, #2
 8005908:	f200 80a1 	bhi.w	8005a4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d056      	beq.n	80059c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005918:	e099      	b.n	8005a4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800591a:	4b88      	ldr	r3, [pc, #544]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02d      	beq.n	8005982 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005926:	4b85      	ldr	r3, [pc, #532]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	08db      	lsrs	r3, r3, #3
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	4a83      	ldr	r2, [pc, #524]	; (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005932:	fa22 f303 	lsr.w	r3, r2, r3
 8005936:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005950:	4b7a      	ldr	r3, [pc, #488]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005958:	ee07 3a90 	vmov	s15, r3
 800595c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005960:	ed97 6a03 	vldr	s12, [r7, #12]
 8005964:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005980:	e087      	b.n	8005a92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005b48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005994:	4b69      	ldr	r3, [pc, #420]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80059a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059c4:	e065      	b.n	8005a92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	ee07 3a90 	vmov	s15, r3
 80059cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005b4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80059d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059d8:	4b58      	ldr	r3, [pc, #352]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e0:	ee07 3a90 	vmov	s15, r3
 80059e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a08:	e043      	b.n	8005a92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1c:	4b47      	ldr	r3, [pc, #284]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a24:	ee07 3a90 	vmov	s15, r3
 8005a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a4c:	e021      	b.n	8005a92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	ee07 3a90 	vmov	s15, r3
 8005a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005b48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a60:	4b36      	ldr	r3, [pc, #216]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005a92:	4b2a      	ldr	r3, [pc, #168]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	0a5b      	lsrs	r3, r3, #9
 8005a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ab8:	ee17 2a90 	vmov	r2, s15
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005ac0:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	0c1b      	lsrs	r3, r3, #16
 8005ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae6:	ee17 2a90 	vmov	r2, s15
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005aee:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	0e1b      	lsrs	r3, r3, #24
 8005af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b14:	ee17 2a90 	vmov	r2, s15
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b1c:	e008      	b.n	8005b30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
}
 8005b30:	bf00      	nop
 8005b32:	3724      	adds	r7, #36	; 0x24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	03d09000 	.word	0x03d09000
 8005b44:	46000000 	.word	0x46000000
 8005b48:	4c742400 	.word	0x4c742400
 8005b4c:	4a742400 	.word	0x4a742400
 8005b50:	4af42400 	.word	0x4af42400

08005b54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b62:	4b53      	ldr	r3, [pc, #332]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d101      	bne.n	8005b72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e099      	b.n	8005ca6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b72:	4b4f      	ldr	r3, [pc, #316]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a4e      	ldr	r2, [pc, #312]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7e:	f7fc fca9 	bl	80024d4 <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b86:	f7fc fca5 	bl	80024d4 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e086      	b.n	8005ca6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b98:	4b45      	ldr	r3, [pc, #276]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ba4:	4b42      	ldr	r3, [pc, #264]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	031b      	lsls	r3, r3, #12
 8005bb2:	493f      	ldr	r1, [pc, #252]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	628b      	str	r3, [r1, #40]	; 0x28
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	025b      	lsls	r3, r3, #9
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005be8:	4931      	ldr	r1, [pc, #196]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005bee:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	492d      	ldr	r1, [pc, #180]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c00:	4b2b      	ldr	r3, [pc, #172]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f023 0220 	bic.w	r2, r3, #32
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	4928      	ldr	r1, [pc, #160]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c12:	4b27      	ldr	r3, [pc, #156]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	4a26      	ldr	r2, [pc, #152]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c18:	f023 0310 	bic.w	r3, r3, #16
 8005c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c1e:	4b24      	ldr	r3, [pc, #144]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c22:	4b24      	ldr	r3, [pc, #144]	; (8005cb4 <RCCEx_PLL2_Config+0x160>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	69d2      	ldr	r2, [r2, #28]
 8005c2a:	00d2      	lsls	r2, r2, #3
 8005c2c:	4920      	ldr	r1, [pc, #128]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c32:	4b1f      	ldr	r3, [pc, #124]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	4a1e      	ldr	r2, [pc, #120]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c38:	f043 0310 	orr.w	r3, r3, #16
 8005c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c44:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c50:	e00f      	b.n	8005c72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d106      	bne.n	8005c66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c64:	e005      	b.n	8005c72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c72:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0e      	ldr	r2, [pc, #56]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7e:	f7fc fc29 	bl	80024d4 <HAL_GetTick>
 8005c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c84:	e008      	b.n	8005c98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005c86:	f7fc fc25 	bl	80024d4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e006      	b.n	8005ca6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	ffff0007 	.word	0xffff0007

08005cb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cc6:	4b53      	ldr	r3, [pc, #332]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d101      	bne.n	8005cd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e099      	b.n	8005e0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005cd6:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a4e      	ldr	r2, [pc, #312]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce2:	f7fc fbf7 	bl	80024d4 <HAL_GetTick>
 8005ce6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ce8:	e008      	b.n	8005cfc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cea:	f7fc fbf3 	bl	80024d4 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e086      	b.n	8005e0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005cfc:	4b45      	ldr	r3, [pc, #276]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f0      	bne.n	8005cea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d08:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	051b      	lsls	r3, r3, #20
 8005d16:	493f      	ldr	r1, [pc, #252]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	628b      	str	r3, [r1, #40]	; 0x28
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	025b      	lsls	r3, r3, #9
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	041b      	lsls	r3, r3, #16
 8005d3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d4c:	4931      	ldr	r1, [pc, #196]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	492d      	ldr	r1, [pc, #180]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d64:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	4928      	ldr	r1, [pc, #160]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7a:	4a26      	ldr	r2, [pc, #152]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d82:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d86:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <RCCEx_PLL3_Config+0x160>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	69d2      	ldr	r2, [r2, #28]
 8005d8e:	00d2      	lsls	r2, r2, #3
 8005d90:	4920      	ldr	r1, [pc, #128]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005d96:	4b1f      	ldr	r3, [pc, #124]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	4a1e      	ldr	r2, [pc, #120]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005db4:	e00f      	b.n	8005dd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d106      	bne.n	8005dca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005dbc:	4b15      	ldr	r3, [pc, #84]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005dc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005dc8:	e005      	b.n	8005dd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005dca:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	4a11      	ldr	r2, [pc, #68]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a0e      	ldr	r2, [pc, #56]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de2:	f7fc fb77 	bl	80024d4 <HAL_GetTick>
 8005de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005de8:	e008      	b.n	8005dfc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005dea:	f7fc fb73 	bl	80024d4 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e006      	b.n	8005e0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	58024400 	.word	0x58024400
 8005e18:	ffff0007 	.word	0xffff0007

08005e1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	; 0x28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e075      	b.n	8005f1a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7fb f987 	bl	8001154 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2203      	movs	r2, #3
 8005e4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f868 	bl	8005f24 <HAL_SD_InitCard>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e05d      	b.n	8005f1a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fdad 	bl	80069c4 <HAL_SD_GetCardStatus>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e052      	b.n	8005f1a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005e74:	7e3b      	ldrb	r3, [r7, #24]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005e7a:	7e7b      	ldrb	r3, [r7, #25]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10a      	bne.n	8005e9e <HAL_SD_Init+0x82>
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <HAL_SD_Init+0x78>
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8005e9c:	e00b      	b.n	8005eb6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d104      	bne.n	8005eb0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eac:	659a      	str	r2, [r3, #88]	; 0x58
 8005eae:	e002      	b.n	8005eb6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fe63 	bl	8006b88 <HAL_SD_ConfigWideBusOperation>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e026      	b.n	8005f1a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005ecc:	f7fc fb02 	bl	80024d4 <HAL_GetTick>
 8005ed0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005ed2:	e011      	b.n	8005ef8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ed4:	f7fc fafe 	bl	80024d4 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee2:	d109      	bne.n	8005ef8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005eea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e010      	b.n	8005f1a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 ff55 	bl	8006da8 <HAL_SD_GetCardState>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d1e7      	bne.n	8005ed4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3728      	adds	r7, #40	; 0x28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f24:	b590      	push	{r4, r7, lr}
 8005f26:	b08d      	sub	sp, #52	; 0x34
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005f3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005f40:	f7fe fd26 	bl	8004990 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f44:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f5a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e06a      	b.n	8006036 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	4a36      	ldr	r2, [pc, #216]	; (8006040 <HAL_SD_InitCard+0x11c>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	466a      	mov	r2, sp
 8005f74:	f107 0318 	add.w	r3, r7, #24
 8005f78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f7c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f80:	f107 030c 	add.w	r3, r7, #12
 8005f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f86:	4620      	mov	r0, r4
 8005f88:	f003 f86a 	bl	8009060 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f003 f8ad 	bl	80090f0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005fa2:	4a28      	ldr	r2, [pc, #160]	; (8006044 <HAL_SD_InitCard+0x120>)
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005faa:	3301      	adds	r3, #1
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fc fa9d 	bl	80024ec <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 ffd4 	bl	8006f60 <SD_PowerON>
 8005fb8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e02e      	b.n	8006036 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 ff05 	bl	8006de8 <SD_InitCard>
 8005fde:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e01b      	b.n	8006036 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006006:	4618      	mov	r0, r3
 8006008:	f003 f908 	bl	800921c <SDMMC_CmdBlockLength>
 800600c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00f      	beq.n	8006034 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a0b      	ldr	r2, [pc, #44]	; (8006048 <HAL_SD_InitCard+0x124>)
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	372c      	adds	r7, #44	; 0x2c
 800603a:	46bd      	mov	sp, r7
 800603c:	bd90      	pop	{r4, r7, pc}
 800603e:	bf00      	nop
 8006040:	014f8b59 	.word	0x014f8b59
 8006044:	00012110 	.word	0x00012110
 8006048:	1fe00fff 	.word	0x1fe00fff

0800604c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b092      	sub	sp, #72	; 0x48
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800605a:	f7fc fa3b 	bl	80024d4 <HAL_GetTick>
 800605e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d107      	bne.n	800607e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e167      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	f040 815a 	bne.w	8006340 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	441a      	add	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	429a      	cmp	r2, r3
 800609e:	d907      	bls.n	80060b0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e14e      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2203      	movs	r2, #3
 80060b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2200      	movs	r2, #0
 80060be:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d002      	beq.n	80060ce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	025b      	lsls	r3, r3, #9
 80060cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060d2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	025b      	lsls	r3, r3, #9
 80060d8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060da:	2390      	movs	r3, #144	; 0x90
 80060dc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80060de:	2302      	movs	r3, #2
 80060e0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f107 0214 	add.w	r2, r7, #20
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f003 f865 	bl	80091c4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006108:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d90a      	bls.n	8006126 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2202      	movs	r2, #2
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800611c:	4618      	mov	r0, r3
 800611e:	f003 f8c3 	bl	80092a8 <SDMMC_CmdReadMultiBlock>
 8006122:	6478      	str	r0, [r7, #68]	; 0x44
 8006124:	e009      	b.n	800613a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006132:	4618      	mov	r0, r3
 8006134:	f003 f895 	bl	8009262 <SDMMC_CmdReadSingleBlock>
 8006138:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800613a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613c:	2b00      	cmp	r3, #0
 800613e:	d012      	beq.n	8006166 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a84      	ldr	r2, [pc, #528]	; (8006358 <HAL_SD_ReadBlocks+0x30c>)
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800614c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614e:	431a      	orrs	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e0f3      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800616a:	e058      	b.n	800621e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d033      	beq.n	80061e2 <HAL_SD_ReadBlocks+0x196>
 800617a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617c:	2b1f      	cmp	r3, #31
 800617e:	d930      	bls.n	80061e2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006180:	2300      	movs	r3, #0
 8006182:	643b      	str	r3, [r7, #64]	; 0x40
 8006184:	e027      	b.n	80061d6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f002 ff92 	bl	80090b4 <SDMMC_ReadFIFO>
 8006190:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	b2da      	uxtb	r2, r3
 8006196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006198:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	3301      	adds	r3, #1
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	3301      	adds	r3, #1
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	0c1b      	lsrs	r3, r3, #16
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	3301      	adds	r3, #1
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	0e1b      	lsrs	r3, r3, #24
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	3301      	adds	r3, #1
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 80061d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d2:	3301      	adds	r3, #1
 80061d4:	643b      	str	r3, [r7, #64]	; 0x40
 80061d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d8:	2b07      	cmp	r3, #7
 80061da:	d9d4      	bls.n	8006186 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80061dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061de:	3b20      	subs	r3, #32
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80061e2:	f7fc f977 	bl	80024d4 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d902      	bls.n	80061f8 <HAL_SD_ReadBlocks+0x1ac>
 80061f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d112      	bne.n	800621e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a56      	ldr	r2, [pc, #344]	; (8006358 <HAL_SD_ReadBlocks+0x30c>)
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e097      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006224:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006228:	2b00      	cmp	r3, #0
 800622a:	d09f      	beq.n	800616c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800623a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d022      	beq.n	8006290 <HAL_SD_ReadBlocks+0x244>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d91f      	bls.n	8006290 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	2b03      	cmp	r3, #3
 8006256:	d01b      	beq.n	8006290 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f003 f88d 	bl	800937c <SDMMC_CmdStopTransfer>
 8006262:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006266:	2b00      	cmp	r3, #0
 8006268:	d012      	beq.n	8006290 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a3a      	ldr	r2, [pc, #232]	; (8006358 <HAL_SD_ReadBlocks+0x30c>)
 8006270:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006278:	431a      	orrs	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e05e      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d012      	beq.n	80062c4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2d      	ldr	r2, [pc, #180]	; (8006358 <HAL_SD_ReadBlocks+0x30c>)
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	f043 0208 	orr.w	r2, r3, #8
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e044      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d012      	beq.n	80062f8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a20      	ldr	r2, [pc, #128]	; (8006358 <HAL_SD_ReadBlocks+0x30c>)
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	f043 0202 	orr.w	r2, r3, #2
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e02a      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d012      	beq.n	800632c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a13      	ldr	r2, [pc, #76]	; (8006358 <HAL_SD_ReadBlocks+0x30c>)
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006312:	f043 0220 	orr.w	r2, r3, #32
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e010      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a0a      	ldr	r2, [pc, #40]	; (800635c <HAL_SD_ReadBlocks+0x310>)
 8006332:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	e006      	b.n	800634e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006344:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
  }
}
 800634e:	4618      	mov	r0, r3
 8006350:	3748      	adds	r7, #72	; 0x48
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	1fe00fff 	.word	0x1fe00fff
 800635c:	18000f3a 	.word	0x18000f3a

08006360 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b092      	sub	sp, #72	; 0x48
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800636e:	f7fc f8b1 	bl	80024d4 <HAL_GetTick>
 8006372:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e16b      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b01      	cmp	r3, #1
 800639c:	f040 815e 	bne.w	800665c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	441a      	add	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d907      	bls.n	80063c4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e152      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2203      	movs	r2, #3
 80063c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2200      	movs	r2, #0
 80063d2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d002      	beq.n	80063e2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	025b      	lsls	r3, r3, #9
 80063e0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063e6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	025b      	lsls	r3, r3, #9
 80063ec:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80063ee:	2390      	movs	r3, #144	; 0x90
 80063f0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80063f2:	2300      	movs	r3, #0
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f107 0218 	add.w	r2, r7, #24
 8006406:	4611      	mov	r1, r2
 8006408:	4618      	mov	r0, r3
 800640a:	f002 fedb 	bl	80091c4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800641c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d90a      	bls.n	800643a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006430:	4618      	mov	r0, r3
 8006432:	f002 ff7f 	bl	8009334 <SDMMC_CmdWriteMultiBlock>
 8006436:	6478      	str	r0, [r7, #68]	; 0x44
 8006438:	e009      	b.n	800644e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2210      	movs	r2, #16
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006446:	4618      	mov	r0, r3
 8006448:	f002 ff51 	bl	80092ee <SDMMC_CmdWriteSingleBlock>
 800644c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800644e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006450:	2b00      	cmp	r3, #0
 8006452:	d012      	beq.n	800647a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a86      	ldr	r2, [pc, #536]	; (8006674 <HAL_SD_WriteBlocks+0x314>)
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006462:	431a      	orrs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e0f7      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800647e:	e05c      	b.n	800653a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d037      	beq.n	80064fe <HAL_SD_WriteBlocks+0x19e>
 800648e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006490:	2b1f      	cmp	r3, #31
 8006492:	d934      	bls.n	80064fe <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006494:	2300      	movs	r3, #0
 8006496:	643b      	str	r3, [r7, #64]	; 0x40
 8006498:	e02b      	b.n	80064f2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	3301      	adds	r3, #1
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80064a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	021a      	lsls	r2, r3, #8
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	3301      	adds	r3, #1
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	041a      	lsls	r2, r3, #16
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	3301      	adds	r3, #1
 80064c8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	061a      	lsls	r2, r3, #24
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80064d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d8:	3301      	adds	r3, #1
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f107 0214 	add.w	r2, r7, #20
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f002 fdf1 	bl	80090ce <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80064ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ee:	3301      	adds	r3, #1
 80064f0:	643b      	str	r3, [r7, #64]	; 0x40
 80064f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f4:	2b07      	cmp	r3, #7
 80064f6:	d9d0      	bls.n	800649a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fa:	3b20      	subs	r3, #32
 80064fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80064fe:	f7fb ffe9 	bl	80024d4 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800650a:	429a      	cmp	r2, r3
 800650c:	d902      	bls.n	8006514 <HAL_SD_WriteBlocks+0x1b4>
 800650e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006510:	2b00      	cmp	r3, #0
 8006512:	d112      	bne.n	800653a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a56      	ldr	r2, [pc, #344]	; (8006674 <HAL_SD_WriteBlocks+0x314>)
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006522:	431a      	orrs	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e097      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006544:	2b00      	cmp	r3, #0
 8006546:	d09b      	beq.n	8006480 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006556:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d022      	beq.n	80065ac <HAL_SD_WriteBlocks+0x24c>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d91f      	bls.n	80065ac <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	2b03      	cmp	r3, #3
 8006572:	d01b      	beq.n	80065ac <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f002 feff 	bl	800937c <SDMMC_CmdStopTransfer>
 800657e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006582:	2b00      	cmp	r3, #0
 8006584:	d012      	beq.n	80065ac <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a3a      	ldr	r2, [pc, #232]	; (8006674 <HAL_SD_WriteBlocks+0x314>)
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006594:	431a      	orrs	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e05e      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d012      	beq.n	80065e0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2d      	ldr	r2, [pc, #180]	; (8006674 <HAL_SD_WriteBlocks+0x314>)
 80065c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c6:	f043 0208 	orr.w	r2, r3, #8
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e044      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d012      	beq.n	8006614 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a20      	ldr	r2, [pc, #128]	; (8006674 <HAL_SD_WriteBlocks+0x314>)
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fa:	f043 0202 	orr.w	r2, r3, #2
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e02a      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b00      	cmp	r3, #0
 8006620:	d012      	beq.n	8006648 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a13      	ldr	r2, [pc, #76]	; (8006674 <HAL_SD_WriteBlocks+0x314>)
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662e:	f043 0210 	orr.w	r2, r3, #16
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e010      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <HAL_SD_WriteBlocks+0x318>)
 800664e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e006      	b.n	800666a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
  }
}
 800666a:	4618      	mov	r0, r3
 800666c:	3748      	adds	r7, #72	; 0x48
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	1fe00fff 	.word	0x1fe00fff
 8006678:	18000f3a 	.word	0x18000f3a

0800667c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	0f9b      	lsrs	r3, r3, #30
 800668c:	b2da      	uxtb	r2, r3
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006696:	0e9b      	lsrs	r3, r3, #26
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a8:	0e1b      	lsrs	r3, r3, #24
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066dc:	0d1b      	lsrs	r3, r3, #20
 80066de:	b29a      	uxth	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fa:	0bdb      	lsrs	r3, r3, #15
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670c:	0b9b      	lsrs	r3, r3, #14
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671e:	0b5b      	lsrs	r3, r3, #13
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	b2da      	uxtb	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006730:	0b1b      	lsrs	r3, r3, #12
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	b2da      	uxtb	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2200      	movs	r2, #0
 8006742:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	2b00      	cmp	r3, #0
 800674a:	d163      	bne.n	8006814 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006750:	009a      	lsls	r2, r3, #2
 8006752:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006756:	4013      	ands	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800675c:	0f92      	lsrs	r2, r2, #30
 800675e:	431a      	orrs	r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006768:	0edb      	lsrs	r3, r3, #27
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	b2da      	uxtb	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800677a:	0e1b      	lsrs	r3, r3, #24
 800677c:	b2db      	uxtb	r3, r3
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	b2da      	uxtb	r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678c:	0d5b      	lsrs	r3, r3, #21
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	b2da      	uxtb	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800679e:	0c9b      	lsrs	r3, r3, #18
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b0:	0bdb      	lsrs	r3, r3, #15
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	7e1b      	ldrb	r3, [r3, #24]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	3302      	adds	r3, #2
 80067d4:	2201      	movs	r2, #1
 80067d6:	fa02 f303 	lsl.w	r3, r2, r3
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067de:	fb02 f203 	mul.w	r2, r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	7a1b      	ldrb	r3, [r3, #8]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	2201      	movs	r2, #1
 80067f2:	409a      	lsls	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006800:	0a52      	lsrs	r2, r2, #9
 8006802:	fb02 f203 	mul.w	r2, r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006810:	655a      	str	r2, [r3, #84]	; 0x54
 8006812:	e031      	b.n	8006878 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	2b01      	cmp	r3, #1
 800681a:	d11d      	bne.n	8006858 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006820:	041b      	lsls	r3, r3, #16
 8006822:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682a:	0c1b      	lsrs	r3, r3, #16
 800682c:	431a      	orrs	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	3301      	adds	r3, #1
 8006838:	029a      	lsls	r2, r3, #10
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800684c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
 8006856:	e00f      	b.n	8006878 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a58      	ldr	r2, [pc, #352]	; (80069c0 <HAL_SD_GetCardCSD+0x344>)
 800685e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006864:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e09d      	b.n	80069b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800687c:	0b9b      	lsrs	r3, r3, #14
 800687e:	b2db      	uxtb	r3, r3
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	b2da      	uxtb	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800688e:	09db      	lsrs	r3, r3, #7
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006896:	b2da      	uxtb	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068b0:	0fdb      	lsrs	r3, r3, #31
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068bc:	0f5b      	lsrs	r3, r3, #29
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068ce:	0e9b      	lsrs	r3, r3, #26
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e0:	0d9b      	lsrs	r3, r3, #22
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f2:	0d5b      	lsrs	r3, r3, #21
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006922:	0bdb      	lsrs	r3, r3, #15
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	b2da      	uxtb	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006936:	0b9b      	lsrs	r3, r3, #14
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694a:	0b5b      	lsrs	r3, r3, #13
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695e:	0b1b      	lsrs	r3, r3, #12
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	b2da      	uxtb	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006972:	0a9b      	lsrs	r3, r3, #10
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	b2da      	uxtb	r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	b2da      	uxtb	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	1fe00fff 	.word	0x1fe00fff

080069c4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b094      	sub	sp, #80	; 0x50
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80069d4:	f107 0308 	add.w	r3, r7, #8
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fb4a 	bl	8007074 <SD_SendSDStatus>
 80069e0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80069e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d011      	beq.n	8006a0c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a4f      	ldr	r2, [pc, #316]	; (8006b2c <HAL_SD_GetCardStatus+0x168>)
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a0a:	e070      	b.n	8006aee <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	099b      	lsrs	r3, r3, #6
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	0e1b      	lsrs	r3, r3, #24
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	061a      	lsls	r2, r3, #24
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a52:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	0a1b      	lsrs	r3, r3, #8
 8006a58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a5c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	0e1b      	lsrs	r3, r3, #24
 8006a62:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	0d1b      	lsrs	r3, r3, #20
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	0c1b      	lsrs	r3, r3, #16
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	0a9b      	lsrs	r3, r3, #10
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	0a1b      	lsrs	r3, r3, #8
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	091b      	lsrs	r3, r3, #4
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	0e1b      	lsrs	r3, r3, #24
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006af6:	4618      	mov	r0, r3
 8006af8:	f002 fb90 	bl	800921c <SDMMC_CmdBlockLength>
 8006afc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a08      	ldr	r2, [pc, #32]	; (8006b2c <HAL_SD_GetCardStatus+0x168>)
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b10:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006b20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3750      	adds	r7, #80	; 0x50
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	1fe00fff 	.word	0x1fe00fff

08006b30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b08d      	sub	sp, #52	; 0x34
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d02e      	beq.n	8006c06 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bae:	d106      	bne.n	8006bbe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	635a      	str	r2, [r3, #52]	; 0x34
 8006bbc:	e029      	b.n	8006c12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc4:	d10a      	bne.n	8006bdc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fb4c 	bl	8007264 <SD_WideBus_Enable>
 8006bcc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8006bda:	e01a      	b.n	8006c12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fb89 	bl	80072fa <SD_WideBus_Disable>
 8006be8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8006bf6:	e00c      	b.n	8006c12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	635a      	str	r2, [r3, #52]	; 0x34
 8006c04:	e005      	b.n	8006c12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a5e      	ldr	r2, [pc, #376]	; (8006d98 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c28:	e094      	b.n	8006d54 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c2a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006c2e:	f7fd feaf 	bl	8004990 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c32:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 8083 	beq.w	8006d42 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4950      	ldr	r1, [pc, #320]	; (8006d9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c5a:	fba1 1303 	umull	r1, r3, r1, r3
 8006c5e:	0e1b      	lsrs	r3, r3, #24
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d303      	bcc.n	8006c6c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	e05a      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c74:	d103      	bne.n	8006c7e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	e051      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c86:	d126      	bne.n	8006cd6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10e      	bne.n	8006cae <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4a43      	ldr	r2, [pc, #268]	; (8006da0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d906      	bls.n	8006ca6 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4a40      	ldr	r2, [pc, #256]	; (8006d9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca0:	0e5b      	lsrs	r3, r3, #25
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	e03d      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	e039      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cba:	4a39      	ldr	r2, [pc, #228]	; (8006da0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d906      	bls.n	8006cce <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	4a36      	ldr	r2, [pc, #216]	; (8006d9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	0e5b      	lsrs	r3, r3, #25
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e029      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e025      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10e      	bne.n	8006cfc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	4a30      	ldr	r2, [pc, #192]	; (8006da4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d906      	bls.n	8006cf4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4a2c      	ldr	r2, [pc, #176]	; (8006d9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006cea:	fba2 2303 	umull	r2, r3, r2, r3
 8006cee:	0e1b      	lsrs	r3, r3, #24
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e016      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	e012      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	4a26      	ldr	r2, [pc, #152]	; (8006da4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d906      	bls.n	8006d1c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4a22      	ldr	r2, [pc, #136]	; (8006d9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	0e1b      	lsrs	r3, r3, #24
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	e002      	b.n	8006d22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681c      	ldr	r4, [r3, #0]
 8006d26:	466a      	mov	r2, sp
 8006d28:	f107 0314 	add.w	r3, r7, #20
 8006d2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d30:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d34:	f107 0308 	add.w	r3, r7, #8
 8006d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f002 f990 	bl	8009060 <SDMMC_Init>
 8006d40:	e008      	b.n	8006d54 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f002 fa5d 	bl	800921c <SDMMC_CmdBlockLength>
 8006d62:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00c      	beq.n	8006d84 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	372c      	adds	r7, #44	; 0x2c
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd90      	pop	{r4, r7, pc}
 8006d98:	1fe00fff 	.word	0x1fe00fff
 8006d9c:	55e63b89 	.word	0x55e63b89
 8006da0:	02faf080 	.word	0x02faf080
 8006da4:	017d7840 	.word	0x017d7840

08006da8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa2a 	bl	8007214 <SD_SendStatus>
 8006dc0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	0a5b      	lsrs	r3, r3, #9
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006dde:	693b      	ldr	r3, [r7, #16]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b090      	sub	sp, #64	; 0x40
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006df0:	2301      	movs	r3, #1
 8006df2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f002 f98a 	bl	8009112 <SDMMC_GetPowerState>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e08:	e0a5      	b.n	8006f56 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d02e      	beq.n	8006e70 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f002 fbd5 	bl	80095c6 <SDMMC_CmdSendCID>
 8006e1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <SD_InitCard+0x40>
    {
      return errorstate;
 8006e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e26:	e096      	b.n	8006f56 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f002 f9b5 	bl	800919e <SDMMC_GetResponse>
 8006e34:	4602      	mov	r2, r0
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2104      	movs	r1, #4
 8006e40:	4618      	mov	r0, r3
 8006e42:	f002 f9ac 	bl	800919e <SDMMC_GetResponse>
 8006e46:	4602      	mov	r2, r0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2108      	movs	r1, #8
 8006e52:	4618      	mov	r0, r3
 8006e54:	f002 f9a3 	bl	800919e <SDMMC_GetResponse>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	210c      	movs	r1, #12
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 f99a 	bl	800919e <SDMMC_GetResponse>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d00d      	beq.n	8006e94 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f107 020e 	add.w	r2, r7, #14
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f002 fbde 	bl	8009644 <SDMMC_CmdSetRelAdd>
 8006e88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <SD_InitCard+0xac>
    {
      return errorstate;
 8006e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e92:	e060      	b.n	8006f56 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d036      	beq.n	8006f0a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f002 fba7 	bl	8009604 <SDMMC_CmdSendCSD>
 8006eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <SD_InitCard+0xda>
    {
      return errorstate;
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec0:	e049      	b.n	8006f56 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f002 f968 	bl	800919e <SDMMC_GetResponse>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2104      	movs	r1, #4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f002 f95f 	bl	800919e <SDMMC_GetResponse>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2108      	movs	r1, #8
 8006eec:	4618      	mov	r0, r3
 8006eee:	f002 f956 	bl	800919e <SDMMC_GetResponse>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	210c      	movs	r1, #12
 8006efe:	4618      	mov	r0, r3
 8006f00:	f002 f94d 	bl	800919e <SDMMC_GetResponse>
 8006f04:	4602      	mov	r2, r0
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2104      	movs	r1, #4
 8006f10:	4618      	mov	r0, r3
 8006f12:	f002 f944 	bl	800919e <SDMMC_GetResponse>
 8006f16:	4603      	mov	r3, r0
 8006f18:	0d1a      	lsrs	r2, r3, #20
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff fba9 	bl	800667c <HAL_SD_GetCardCSD>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f34:	e00f      	b.n	8006f56 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	4619      	mov	r1, r3
 8006f42:	4610      	mov	r0, r2
 8006f44:	f002 fa56 	bl	80093f4 <SDMMC_CmdSelDesel>
 8006f48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <SD_InitCard+0x16c>
  {
    return errorstate;
 8006f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f52:	e000      	b.n	8006f56 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3740      	adds	r7, #64	; 0x40
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f002 fa5e 	bl	800943a <SDMMC_CmdGoIdleState>
 8006f7e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	e06e      	b.n	8007068 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f002 fa71 	bl	8009476 <SDMMC_CmdOperCond>
 8006f94:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00d      	beq.n	8006fb8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f002 fa47 	bl	800943a <SDMMC_CmdGoIdleState>
 8006fac:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <SD_PowerON+0x5e>
    {
      return errorstate;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	e057      	b.n	8007068 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d137      	bne.n	8007036 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f002 fa72 	bl	80094b6 <SDMMC_CmdAppCommand>
 8006fd2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d02d      	beq.n	8007036 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fde:	e043      	b.n	8007068 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f002 fa65 	bl	80094b6 <SDMMC_CmdAppCommand>
 8006fec:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <SD_PowerON+0x98>
    {
      return errorstate;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	e037      	b.n	8007068 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	491c      	ldr	r1, [pc, #112]	; (8007070 <SD_PowerON+0x110>)
 8006ffe:	4618      	mov	r0, r3
 8007000:	f002 fa7c 	bl	80094fc <SDMMC_CmdAppOperCommand>
 8007004:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800700c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007010:	e02a      	b.n	8007068 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f002 f8c0 	bl	800919e <SDMMC_GetResponse>
 800701e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	0fdb      	lsrs	r3, r3, #31
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <SD_PowerON+0xcc>
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <SD_PowerON+0xce>
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]

    count++;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	3301      	adds	r3, #1
 8007034:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800703c:	4293      	cmp	r3, r2
 800703e:	d802      	bhi.n	8007046 <SD_PowerON+0xe6>
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0cc      	beq.n	8006fe0 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800704c:	4293      	cmp	r3, r2
 800704e:	d902      	bls.n	8007056 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007054:	e008      	b.n	8007068 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	c1100000 	.word	0xc1100000

08007074 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08c      	sub	sp, #48	; 0x30
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800707e:	f7fb fa29 	bl	80024d4 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f002 f885 	bl	800919e <SDMMC_GetResponse>
 8007094:	4603      	mov	r3, r0
 8007096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800709e:	d102      	bne.n	80070a6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070a4:	e0b0      	b.n	8007208 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2140      	movs	r1, #64	; 0x40
 80070ac:	4618      	mov	r0, r3
 80070ae:	f002 f8b5 	bl	800921c <SDMMC_CmdBlockLength>
 80070b2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	e0a0      	b.n	8007208 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f002 f9ef 	bl	80094b6 <SDMMC_CmdAppCommand>
 80070d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	e08d      	b.n	8007208 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070f0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80070f2:	2340      	movs	r3, #64	; 0x40
 80070f4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80070f6:	2360      	movs	r3, #96	; 0x60
 80070f8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070fa:	2302      	movs	r3, #2
 80070fc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070fe:	2300      	movs	r3, #0
 8007100:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007102:	2301      	movs	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f107 0208 	add.w	r2, r7, #8
 800710e:	4611      	mov	r1, r2
 8007110:	4618      	mov	r0, r3
 8007112:	f002 f857 	bl	80091c4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f002 fad7 	bl	80096ce <SDMMC_CmdStatusRegister>
 8007120:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d02b      	beq.n	8007180 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	e069      	b.n	8007208 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d013      	beq.n	800716a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007142:	2300      	movs	r3, #0
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007146:	e00d      	b.n	8007164 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f001 ffb1 	bl	80090b4 <SDMMC_ReadFIFO>
 8007152:	4602      	mov	r2, r0
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	601a      	str	r2, [r3, #0]
        pData++;
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	3304      	adds	r3, #4
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	3301      	adds	r3, #1
 8007162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	2b07      	cmp	r3, #7
 8007168:	d9ee      	bls.n	8007148 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800716a:	f7fb f9b3 	bl	80024d4 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007178:	d102      	bne.n	8007180 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800717a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800717e:	e043      	b.n	8007208 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0d2      	beq.n	8007134 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800719c:	2308      	movs	r3, #8
 800719e:	e033      	b.n	8007208 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071ae:	2302      	movs	r3, #2
 80071b0:	e02a      	b.n	8007208 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d017      	beq.n	80071f0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80071c0:	2320      	movs	r3, #32
 80071c2:	e021      	b.n	8007208 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 ff73 	bl	80090b4 <SDMMC_ReadFIFO>
 80071ce:	4602      	mov	r2, r0
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	601a      	str	r2, [r3, #0]
    pData++;
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	3304      	adds	r3, #4
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071da:	f7fb f97b 	bl	80024d4 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e8:	d102      	bne.n	80071f0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071ee:	e00b      	b.n	8007208 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e2      	bne.n	80071c4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a03      	ldr	r2, [pc, #12]	; (8007210 <SD_SendSDStatus+0x19c>)
 8007204:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3730      	adds	r7, #48	; 0x30
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	18000f3a 	.word	0x18000f3a

08007214 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007228:	e018      	b.n	800725c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	4619      	mov	r1, r3
 8007236:	4610      	mov	r0, r2
 8007238:	f002 fa26 	bl	8009688 <SDMMC_CmdSendStatus>
 800723c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	e009      	b.n	800725c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2100      	movs	r1, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f001 ffa5 	bl	800919e <SDMMC_GetResponse>
 8007254:	4602      	mov	r2, r0
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	2300      	movs	r3, #0
 8007272:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f001 ff8f 	bl	800919e <SDMMC_GetResponse>
 8007280:	4603      	mov	r3, r0
 8007282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800728a:	d102      	bne.n	8007292 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800728c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007290:	e02f      	b.n	80072f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007292:	f107 030c 	add.w	r3, r7, #12
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f879 	bl	8007390 <SD_FindSCR>
 800729e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	e023      	b.n	80072f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01c      	beq.n	80072ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f002 f8f8 	bl	80094b6 <SDMMC_CmdAppCommand>
 80072c6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	e00f      	b.n	80072f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2102      	movs	r1, #2
 80072d8:	4618      	mov	r0, r3
 80072da:	f002 f92f 	bl	800953c <SDMMC_CmdBusWidth>
 80072de:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	e003      	b.n	80072f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e001      	b.n	80072f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b086      	sub	sp, #24
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	2300      	movs	r3, #0
 8007308:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f001 ff44 	bl	800919e <SDMMC_GetResponse>
 8007316:	4603      	mov	r3, r0
 8007318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007320:	d102      	bne.n	8007328 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007326:	e02f      	b.n	8007388 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007328:	f107 030c 	add.w	r3, r7, #12
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f82e 	bl	8007390 <SD_FindSCR>
 8007334:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	e023      	b.n	8007388 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01c      	beq.n	8007384 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007352:	041b      	lsls	r3, r3, #16
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f002 f8ad 	bl	80094b6 <SDMMC_CmdAppCommand>
 800735c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	e00f      	b.n	8007388 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f002 f8e4 	bl	800953c <SDMMC_CmdBusWidth>
 8007374:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	e003      	b.n	8007388 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007380:	2300      	movs	r3, #0
 8007382:	e001      	b.n	8007388 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007384:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	; 0x38
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800739a:	f7fb f89b 	bl	80024d4 <HAL_GetTick>
 800739e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80073a4:	2300      	movs	r3, #0
 80073a6:	60bb      	str	r3, [r7, #8]
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2108      	movs	r1, #8
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 ff30 	bl	800921c <SDMMC_CmdBlockLength>
 80073bc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	e0ad      	b.n	8007524 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f002 f86e 	bl	80094b6 <SDMMC_CmdAppCommand>
 80073da:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	e09e      	b.n	8007524 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073ec:	2308      	movs	r3, #8
 80073ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80073f0:	2330      	movs	r3, #48	; 0x30
 80073f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80073f4:	2302      	movs	r3, #2
 80073f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f107 0210 	add.w	r2, r7, #16
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f001 feda 	bl	80091c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4618      	mov	r0, r3
 8007416:	f002 f8b4 	bl	8009582 <SDMMC_CmdSendSCR>
 800741a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	2b00      	cmp	r3, #0
 8007420:	d027      	beq.n	8007472 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	e07e      	b.n	8007524 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d113      	bne.n	800745c <SD_FindSCR+0xcc>
 8007434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	d110      	bne.n	800745c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f001 fe38 	bl	80090b4 <SDMMC_ReadFIFO>
 8007444:	4603      	mov	r3, r0
 8007446:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fe31 	bl	80090b4 <SDMMC_ReadFIFO>
 8007452:	4603      	mov	r3, r0
 8007454:	60fb      	str	r3, [r7, #12]
      index++;
 8007456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007458:	3301      	adds	r3, #1
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800745c:	f7fb f83a 	bl	80024d4 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800746a:	d102      	bne.n	8007472 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800746c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007470:	e058      	b.n	8007524 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007478:	f240 532a 	movw	r3, #1322	; 0x52a
 800747c:	4013      	ands	r3, r2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0d1      	beq.n	8007426 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2208      	movs	r2, #8
 8007496:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007498:	2308      	movs	r3, #8
 800749a:	e043      	b.n	8007524 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2202      	movs	r2, #2
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074b2:	2302      	movs	r3, #2
 80074b4:	e036      	b.n	8007524 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2220      	movs	r2, #32
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074cc:	2320      	movs	r3, #32
 80074ce:	e029      	b.n	8007524 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a15      	ldr	r2, [pc, #84]	; (800752c <SD_FindSCR+0x19c>)
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	061a      	lsls	r2, r3, #24
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	0a1b      	lsrs	r3, r3, #8
 80074ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80074ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	0e1b      	lsrs	r3, r3, #24
 80074f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80074f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f8:	601a      	str	r2, [r3, #0]
    scr++;
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	3304      	adds	r3, #4
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	061a      	lsls	r2, r3, #24
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800750c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	0a1b      	lsrs	r3, r3, #8
 8007512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007516:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	0e1b      	lsrs	r3, r3, #24
 800751c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3738      	adds	r7, #56	; 0x38
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	18000f3a 	.word	0x18000f3a

08007530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e049      	b.n	80075d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7f9 fe88 	bl	800126c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f000 fae2 	bl	8007b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d001      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e04f      	b.n	8007698 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a23      	ldr	r2, [pc, #140]	; (80076a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d01d      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x76>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007622:	d018      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x76>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d013      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x76>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <HAL_TIM_Base_Start_IT+0xcc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00e      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x76>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d009      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x76>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d004      	beq.n	8007656 <HAL_TIM_Base_Start_IT+0x76>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d115      	bne.n	8007682 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	4b17      	ldr	r3, [pc, #92]	; (80076bc <HAL_TIM_Base_Start_IT+0xdc>)
 800765e:	4013      	ands	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b06      	cmp	r3, #6
 8007666:	d015      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0xb4>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766e:	d011      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	e008      	b.n	8007694 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e000      	b.n	8007696 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007694:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40010000 	.word	0x40010000
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40001800 	.word	0x40001800
 80076bc:	00010007 	.word	0x00010007

080076c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d122      	bne.n	800771c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d11b      	bne.n	800771c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0202 	mvn.w	r2, #2
 80076ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f9fa 	bl	8007afc <HAL_TIM_IC_CaptureCallback>
 8007708:	e005      	b.n	8007716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9ec 	bl	8007ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f9fd 	bl	8007b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b04      	cmp	r3, #4
 8007728:	d122      	bne.n	8007770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b04      	cmp	r3, #4
 8007736:	d11b      	bne.n	8007770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f06f 0204 	mvn.w	r2, #4
 8007740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2202      	movs	r2, #2
 8007746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9d0 	bl	8007afc <HAL_TIM_IC_CaptureCallback>
 800775c:	e005      	b.n	800776a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f9c2 	bl	8007ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f9d3 	bl	8007b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0308 	and.w	r3, r3, #8
 800777a:	2b08      	cmp	r3, #8
 800777c:	d122      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b08      	cmp	r3, #8
 800778a:	d11b      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f06f 0208 	mvn.w	r2, #8
 8007794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2204      	movs	r2, #4
 800779a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f9a6 	bl	8007afc <HAL_TIM_IC_CaptureCallback>
 80077b0:	e005      	b.n	80077be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f998 	bl	8007ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f9a9 	bl	8007b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0310 	and.w	r3, r3, #16
 80077ce:	2b10      	cmp	r3, #16
 80077d0:	d122      	bne.n	8007818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d11b      	bne.n	8007818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0210 	mvn.w	r2, #16
 80077e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2208      	movs	r2, #8
 80077ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f97c 	bl	8007afc <HAL_TIM_IC_CaptureCallback>
 8007804:	e005      	b.n	8007812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f96e 	bl	8007ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f97f 	bl	8007b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b01      	cmp	r3, #1
 8007824:	d10e      	bne.n	8007844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d107      	bne.n	8007844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0201 	mvn.w	r2, #1
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7f9 fdd6 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800784e:	2b80      	cmp	r3, #128	; 0x80
 8007850:	d10e      	bne.n	8007870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785c:	2b80      	cmp	r3, #128	; 0x80
 800785e:	d107      	bne.n	8007870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fb2e 	bl	8007ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787e:	d10e      	bne.n	800789e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d107      	bne.n	800789e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fb21 	bl	8007ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b40      	cmp	r3, #64	; 0x40
 80078aa:	d10e      	bne.n	80078ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b6:	2b40      	cmp	r3, #64	; 0x40
 80078b8:	d107      	bne.n	80078ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f92d 	bl	8007b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d10e      	bne.n	80078f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	d107      	bne.n	80078f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f06f 0220 	mvn.w	r2, #32
 80078ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fae1 	bl	8007eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_TIM_ConfigClockSource+0x18>
 8007914:	2302      	movs	r3, #2
 8007916:	e0db      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1d0>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4b69      	ldr	r3, [pc, #420]	; (8007ad8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007934:	4013      	ands	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800793e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a63      	ldr	r2, [pc, #396]	; (8007adc <HAL_TIM_ConfigClockSource+0x1dc>)
 800794e:	4293      	cmp	r3, r2
 8007950:	f000 80a9 	beq.w	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007954:	4a61      	ldr	r2, [pc, #388]	; (8007adc <HAL_TIM_ConfigClockSource+0x1dc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	f200 80ae 	bhi.w	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 800795c:	4a60      	ldr	r2, [pc, #384]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	f000 80a1 	beq.w	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007964:	4a5e      	ldr	r2, [pc, #376]	; (8007ae0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	f200 80a6 	bhi.w	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 800796c:	4a5d      	ldr	r2, [pc, #372]	; (8007ae4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	f000 8099 	beq.w	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007974:	4a5b      	ldr	r2, [pc, #364]	; (8007ae4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	f200 809e 	bhi.w	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 800797c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007980:	f000 8091 	beq.w	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007984:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007988:	f200 8096 	bhi.w	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 800798c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007990:	f000 8089 	beq.w	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
 8007994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007998:	f200 808e 	bhi.w	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 800799c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a0:	d03e      	beq.n	8007a20 <HAL_TIM_ConfigClockSource+0x120>
 80079a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a6:	f200 8087 	bhi.w	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ae:	f000 8085 	beq.w	8007abc <HAL_TIM_ConfigClockSource+0x1bc>
 80079b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b6:	d87f      	bhi.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 80079b8:	2b70      	cmp	r3, #112	; 0x70
 80079ba:	d01a      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0xf2>
 80079bc:	2b70      	cmp	r3, #112	; 0x70
 80079be:	d87b      	bhi.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 80079c0:	2b60      	cmp	r3, #96	; 0x60
 80079c2:	d050      	beq.n	8007a66 <HAL_TIM_ConfigClockSource+0x166>
 80079c4:	2b60      	cmp	r3, #96	; 0x60
 80079c6:	d877      	bhi.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 80079c8:	2b50      	cmp	r3, #80	; 0x50
 80079ca:	d03c      	beq.n	8007a46 <HAL_TIM_ConfigClockSource+0x146>
 80079cc:	2b50      	cmp	r3, #80	; 0x50
 80079ce:	d873      	bhi.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 80079d0:	2b40      	cmp	r3, #64	; 0x40
 80079d2:	d058      	beq.n	8007a86 <HAL_TIM_ConfigClockSource+0x186>
 80079d4:	2b40      	cmp	r3, #64	; 0x40
 80079d6:	d86f      	bhi.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 80079d8:	2b30      	cmp	r3, #48	; 0x30
 80079da:	d064      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
 80079dc:	2b30      	cmp	r3, #48	; 0x30
 80079de:	d86b      	bhi.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 80079e0:	2b20      	cmp	r3, #32
 80079e2:	d060      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d867      	bhi.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d05c      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
 80079ec:	2b10      	cmp	r3, #16
 80079ee:	d05a      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80079f0:	e062      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6899      	ldr	r1, [r3, #8]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f000 f9b1 	bl	8007d68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	609a      	str	r2, [r3, #8]
      break;
 8007a1e:	e04e      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6818      	ldr	r0, [r3, #0]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	6899      	ldr	r1, [r3, #8]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f000 f99a 	bl	8007d68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a42:	609a      	str	r2, [r3, #8]
      break;
 8007a44:	e03b      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	461a      	mov	r2, r3
 8007a54:	f000 f90a 	bl	8007c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2150      	movs	r1, #80	; 0x50
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f964 	bl	8007d2c <TIM_ITRx_SetConfig>
      break;
 8007a64:	e02b      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	6859      	ldr	r1, [r3, #4]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f000 f929 	bl	8007cca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2160      	movs	r1, #96	; 0x60
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 f954 	bl	8007d2c <TIM_ITRx_SetConfig>
      break;
 8007a84:	e01b      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	6859      	ldr	r1, [r3, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f000 f8ea 	bl	8007c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2140      	movs	r1, #64	; 0x40
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f944 	bl	8007d2c <TIM_ITRx_SetConfig>
      break;
 8007aa4:	e00b      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	f000 f93b 	bl	8007d2c <TIM_ITRx_SetConfig>
        break;
 8007ab6:	e002      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007ab8:	bf00      	nop
 8007aba:	e000      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007abc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	ffceff88 	.word	0xffceff88
 8007adc:	00100040 	.word	0x00100040
 8007ae0:	00100030 	.word	0x00100030
 8007ae4:	00100020 	.word	0x00100020

08007ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a40      	ldr	r2, [pc, #256]	; (8007c4c <TIM_Base_SetConfig+0x114>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d013      	beq.n	8007b78 <TIM_Base_SetConfig+0x40>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b56:	d00f      	beq.n	8007b78 <TIM_Base_SetConfig+0x40>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a3d      	ldr	r2, [pc, #244]	; (8007c50 <TIM_Base_SetConfig+0x118>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00b      	beq.n	8007b78 <TIM_Base_SetConfig+0x40>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a3c      	ldr	r2, [pc, #240]	; (8007c54 <TIM_Base_SetConfig+0x11c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d007      	beq.n	8007b78 <TIM_Base_SetConfig+0x40>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a3b      	ldr	r2, [pc, #236]	; (8007c58 <TIM_Base_SetConfig+0x120>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d003      	beq.n	8007b78 <TIM_Base_SetConfig+0x40>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a3a      	ldr	r2, [pc, #232]	; (8007c5c <TIM_Base_SetConfig+0x124>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d108      	bne.n	8007b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a2f      	ldr	r2, [pc, #188]	; (8007c4c <TIM_Base_SetConfig+0x114>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d01f      	beq.n	8007bd2 <TIM_Base_SetConfig+0x9a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b98:	d01b      	beq.n	8007bd2 <TIM_Base_SetConfig+0x9a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a2c      	ldr	r2, [pc, #176]	; (8007c50 <TIM_Base_SetConfig+0x118>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d017      	beq.n	8007bd2 <TIM_Base_SetConfig+0x9a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a2b      	ldr	r2, [pc, #172]	; (8007c54 <TIM_Base_SetConfig+0x11c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d013      	beq.n	8007bd2 <TIM_Base_SetConfig+0x9a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a2a      	ldr	r2, [pc, #168]	; (8007c58 <TIM_Base_SetConfig+0x120>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00f      	beq.n	8007bd2 <TIM_Base_SetConfig+0x9a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a29      	ldr	r2, [pc, #164]	; (8007c5c <TIM_Base_SetConfig+0x124>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00b      	beq.n	8007bd2 <TIM_Base_SetConfig+0x9a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a28      	ldr	r2, [pc, #160]	; (8007c60 <TIM_Base_SetConfig+0x128>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d007      	beq.n	8007bd2 <TIM_Base_SetConfig+0x9a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a27      	ldr	r2, [pc, #156]	; (8007c64 <TIM_Base_SetConfig+0x12c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d003      	beq.n	8007bd2 <TIM_Base_SetConfig+0x9a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a26      	ldr	r2, [pc, #152]	; (8007c68 <TIM_Base_SetConfig+0x130>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d108      	bne.n	8007be4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a10      	ldr	r2, [pc, #64]	; (8007c4c <TIM_Base_SetConfig+0x114>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00f      	beq.n	8007c30 <TIM_Base_SetConfig+0xf8>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a12      	ldr	r2, [pc, #72]	; (8007c5c <TIM_Base_SetConfig+0x124>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00b      	beq.n	8007c30 <TIM_Base_SetConfig+0xf8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <TIM_Base_SetConfig+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d007      	beq.n	8007c30 <TIM_Base_SetConfig+0xf8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <TIM_Base_SetConfig+0x12c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d003      	beq.n	8007c30 <TIM_Base_SetConfig+0xf8>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a0f      	ldr	r2, [pc, #60]	; (8007c68 <TIM_Base_SetConfig+0x130>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d103      	bne.n	8007c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	615a      	str	r2, [r3, #20]
}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40000400 	.word	0x40000400
 8007c54:	40000800 	.word	0x40000800
 8007c58:	40000c00 	.word	0x40000c00
 8007c5c:	40010400 	.word	0x40010400
 8007c60:	40014000 	.word	0x40014000
 8007c64:	40014400 	.word	0x40014400
 8007c68:	40014800 	.word	0x40014800

08007c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f023 0201 	bic.w	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f023 030a 	bic.w	r3, r3, #10
 8007ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	621a      	str	r2, [r3, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b087      	sub	sp, #28
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f023 0210 	bic.w	r2, r3, #16
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	031b      	lsls	r3, r3, #12
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <TIM_ITRx_SetConfig+0x38>)
 8007d40:	4013      	ands	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f043 0307 	orr.w	r3, r3, #7
 8007d4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	609a      	str	r2, [r3, #8]
}
 8007d56:	bf00      	nop
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	ffcfff8f 	.word	0xffcfff8f

08007d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	021a      	lsls	r2, r3, #8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	609a      	str	r2, [r3, #8]
}
 8007d9c:	bf00      	nop
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e068      	b.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a2e      	ldr	r2, [pc, #184]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a2d      	ldr	r2, [pc, #180]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d108      	bne.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007dfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d01d      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e32:	d018      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d013      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a1a      	ldr	r2, [pc, #104]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00e      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a18      	ldr	r2, [pc, #96]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d009      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a13      	ldr	r2, [pc, #76]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d004      	beq.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a14      	ldr	r2, [pc, #80]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d10c      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	40000800 	.word	0x40000800
 8007eb0:	40000c00 	.word	0x40000c00
 8007eb4:	40001800 	.word	0x40001800

08007eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e042      	b.n	8007f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7f9 f9cf 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2224      	movs	r2, #36	; 0x24
 8007f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8c2 	bl	80080c0 <UART_SetConfig>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e022      	b.n	8007f8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fe16 	bl	8008b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fe9d 	bl	8008cc4 <UART_CheckIdleState>
 8007f8a:	4603      	mov	r3, r0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08a      	sub	sp, #40	; 0x28
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	f040 8083 	bne.w	80080b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <HAL_UART_Transmit+0x28>
 8007fb6:	88fb      	ldrh	r3, [r7, #6]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e07b      	b.n	80080b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_UART_Transmit+0x3a>
 8007fca:	2302      	movs	r3, #2
 8007fcc:	e074      	b.n	80080b8 <HAL_UART_Transmit+0x124>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2221      	movs	r2, #33	; 0x21
 8007fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fe6:	f7fa fa75 	bl	80024d4 <HAL_GetTick>
 8007fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	88fa      	ldrh	r2, [r7, #6]
 8007ff0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	88fa      	ldrh	r2, [r7, #6]
 8007ff8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008004:	d108      	bne.n	8008018 <HAL_UART_Transmit+0x84>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d104      	bne.n	8008018 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	61bb      	str	r3, [r7, #24]
 8008016:	e003      	b.n	8008020 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800801c:	2300      	movs	r3, #0
 800801e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008028:	e02c      	b.n	8008084 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2200      	movs	r2, #0
 8008032:	2180      	movs	r1, #128	; 0x80
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fe90 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e039      	b.n	80080b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10b      	bne.n	8008062 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	3302      	adds	r3, #2
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e007      	b.n	8008072 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	781a      	ldrb	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	3301      	adds	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b29a      	uxth	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800808a:	b29b      	uxth	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1cc      	bne.n	800802a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2200      	movs	r2, #0
 8008098:	2140      	movs	r1, #64	; 0x40
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fe5d 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e006      	b.n	80080b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	e000      	b.n	80080b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80080b6:	2302      	movs	r3, #2
  }
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3720      	adds	r7, #32
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c0:	b5b0      	push	{r4, r5, r7, lr}
 80080c2:	b08e      	sub	sp, #56	; 0x38
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4bbf      	ldr	r3, [pc, #764]	; (80083ec <UART_SetConfig+0x32c>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	6812      	ldr	r2, [r2, #0]
 80080f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4ab5      	ldr	r2, [pc, #724]	; (80083f0 <UART_SetConfig+0x330>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d004      	beq.n	800812a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008126:	4313      	orrs	r3, r2
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	4bb0      	ldr	r3, [pc, #704]	; (80083f4 <UART_SetConfig+0x334>)
 8008132:	4013      	ands	r3, r2
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6812      	ldr	r2, [r2, #0]
 8008138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800813a:	430b      	orrs	r3, r1
 800813c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	f023 010f 	bic.w	r1, r3, #15
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4aa7      	ldr	r2, [pc, #668]	; (80083f8 <UART_SetConfig+0x338>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d176      	bne.n	800824c <UART_SetConfig+0x18c>
 800815e:	4ba7      	ldr	r3, [pc, #668]	; (80083fc <UART_SetConfig+0x33c>)
 8008160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008166:	2b28      	cmp	r3, #40	; 0x28
 8008168:	d86c      	bhi.n	8008244 <UART_SetConfig+0x184>
 800816a:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <UART_SetConfig+0xb0>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	08008215 	.word	0x08008215
 8008174:	08008245 	.word	0x08008245
 8008178:	08008245 	.word	0x08008245
 800817c:	08008245 	.word	0x08008245
 8008180:	08008245 	.word	0x08008245
 8008184:	08008245 	.word	0x08008245
 8008188:	08008245 	.word	0x08008245
 800818c:	08008245 	.word	0x08008245
 8008190:	0800821d 	.word	0x0800821d
 8008194:	08008245 	.word	0x08008245
 8008198:	08008245 	.word	0x08008245
 800819c:	08008245 	.word	0x08008245
 80081a0:	08008245 	.word	0x08008245
 80081a4:	08008245 	.word	0x08008245
 80081a8:	08008245 	.word	0x08008245
 80081ac:	08008245 	.word	0x08008245
 80081b0:	08008225 	.word	0x08008225
 80081b4:	08008245 	.word	0x08008245
 80081b8:	08008245 	.word	0x08008245
 80081bc:	08008245 	.word	0x08008245
 80081c0:	08008245 	.word	0x08008245
 80081c4:	08008245 	.word	0x08008245
 80081c8:	08008245 	.word	0x08008245
 80081cc:	08008245 	.word	0x08008245
 80081d0:	0800822d 	.word	0x0800822d
 80081d4:	08008245 	.word	0x08008245
 80081d8:	08008245 	.word	0x08008245
 80081dc:	08008245 	.word	0x08008245
 80081e0:	08008245 	.word	0x08008245
 80081e4:	08008245 	.word	0x08008245
 80081e8:	08008245 	.word	0x08008245
 80081ec:	08008245 	.word	0x08008245
 80081f0:	08008235 	.word	0x08008235
 80081f4:	08008245 	.word	0x08008245
 80081f8:	08008245 	.word	0x08008245
 80081fc:	08008245 	.word	0x08008245
 8008200:	08008245 	.word	0x08008245
 8008204:	08008245 	.word	0x08008245
 8008208:	08008245 	.word	0x08008245
 800820c:	08008245 	.word	0x08008245
 8008210:	0800823d 	.word	0x0800823d
 8008214:	2301      	movs	r3, #1
 8008216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800821a:	e222      	b.n	8008662 <UART_SetConfig+0x5a2>
 800821c:	2304      	movs	r3, #4
 800821e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008222:	e21e      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008224:	2308      	movs	r3, #8
 8008226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800822a:	e21a      	b.n	8008662 <UART_SetConfig+0x5a2>
 800822c:	2310      	movs	r3, #16
 800822e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008232:	e216      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008234:	2320      	movs	r3, #32
 8008236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800823a:	e212      	b.n	8008662 <UART_SetConfig+0x5a2>
 800823c:	2340      	movs	r3, #64	; 0x40
 800823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008242:	e20e      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008244:	2380      	movs	r3, #128	; 0x80
 8008246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800824a:	e20a      	b.n	8008662 <UART_SetConfig+0x5a2>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a6b      	ldr	r2, [pc, #428]	; (8008400 <UART_SetConfig+0x340>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d130      	bne.n	80082b8 <UART_SetConfig+0x1f8>
 8008256:	4b69      	ldr	r3, [pc, #420]	; (80083fc <UART_SetConfig+0x33c>)
 8008258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	2b05      	cmp	r3, #5
 8008260:	d826      	bhi.n	80082b0 <UART_SetConfig+0x1f0>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <UART_SetConfig+0x1a8>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	08008281 	.word	0x08008281
 800826c:	08008289 	.word	0x08008289
 8008270:	08008291 	.word	0x08008291
 8008274:	08008299 	.word	0x08008299
 8008278:	080082a1 	.word	0x080082a1
 800827c:	080082a9 	.word	0x080082a9
 8008280:	2300      	movs	r3, #0
 8008282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008286:	e1ec      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008288:	2304      	movs	r3, #4
 800828a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828e:	e1e8      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008290:	2308      	movs	r3, #8
 8008292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008296:	e1e4      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008298:	2310      	movs	r3, #16
 800829a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800829e:	e1e0      	b.n	8008662 <UART_SetConfig+0x5a2>
 80082a0:	2320      	movs	r3, #32
 80082a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a6:	e1dc      	b.n	8008662 <UART_SetConfig+0x5a2>
 80082a8:	2340      	movs	r3, #64	; 0x40
 80082aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ae:	e1d8      	b.n	8008662 <UART_SetConfig+0x5a2>
 80082b0:	2380      	movs	r3, #128	; 0x80
 80082b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082b6:	e1d4      	b.n	8008662 <UART_SetConfig+0x5a2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a51      	ldr	r2, [pc, #324]	; (8008404 <UART_SetConfig+0x344>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d130      	bne.n	8008324 <UART_SetConfig+0x264>
 80082c2:	4b4e      	ldr	r3, [pc, #312]	; (80083fc <UART_SetConfig+0x33c>)
 80082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d826      	bhi.n	800831c <UART_SetConfig+0x25c>
 80082ce:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <UART_SetConfig+0x214>)
 80082d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d4:	080082ed 	.word	0x080082ed
 80082d8:	080082f5 	.word	0x080082f5
 80082dc:	080082fd 	.word	0x080082fd
 80082e0:	08008305 	.word	0x08008305
 80082e4:	0800830d 	.word	0x0800830d
 80082e8:	08008315 	.word	0x08008315
 80082ec:	2300      	movs	r3, #0
 80082ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f2:	e1b6      	b.n	8008662 <UART_SetConfig+0x5a2>
 80082f4:	2304      	movs	r3, #4
 80082f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fa:	e1b2      	b.n	8008662 <UART_SetConfig+0x5a2>
 80082fc:	2308      	movs	r3, #8
 80082fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008302:	e1ae      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008304:	2310      	movs	r3, #16
 8008306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830a:	e1aa      	b.n	8008662 <UART_SetConfig+0x5a2>
 800830c:	2320      	movs	r3, #32
 800830e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008312:	e1a6      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008314:	2340      	movs	r3, #64	; 0x40
 8008316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831a:	e1a2      	b.n	8008662 <UART_SetConfig+0x5a2>
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008322:	e19e      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a37      	ldr	r2, [pc, #220]	; (8008408 <UART_SetConfig+0x348>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d130      	bne.n	8008390 <UART_SetConfig+0x2d0>
 800832e:	4b33      	ldr	r3, [pc, #204]	; (80083fc <UART_SetConfig+0x33c>)
 8008330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	2b05      	cmp	r3, #5
 8008338:	d826      	bhi.n	8008388 <UART_SetConfig+0x2c8>
 800833a:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <UART_SetConfig+0x280>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008359 	.word	0x08008359
 8008344:	08008361 	.word	0x08008361
 8008348:	08008369 	.word	0x08008369
 800834c:	08008371 	.word	0x08008371
 8008350:	08008379 	.word	0x08008379
 8008354:	08008381 	.word	0x08008381
 8008358:	2300      	movs	r3, #0
 800835a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835e:	e180      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008360:	2304      	movs	r3, #4
 8008362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008366:	e17c      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008368:	2308      	movs	r3, #8
 800836a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836e:	e178      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008370:	2310      	movs	r3, #16
 8008372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008376:	e174      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008378:	2320      	movs	r3, #32
 800837a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837e:	e170      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008380:	2340      	movs	r3, #64	; 0x40
 8008382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008386:	e16c      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008388:	2380      	movs	r3, #128	; 0x80
 800838a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800838e:	e168      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1d      	ldr	r2, [pc, #116]	; (800840c <UART_SetConfig+0x34c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d142      	bne.n	8008420 <UART_SetConfig+0x360>
 800839a:	4b18      	ldr	r3, [pc, #96]	; (80083fc <UART_SetConfig+0x33c>)
 800839c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	d838      	bhi.n	8008418 <UART_SetConfig+0x358>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <UART_SetConfig+0x2ec>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083c5 	.word	0x080083c5
 80083b0:	080083cd 	.word	0x080083cd
 80083b4:	080083d5 	.word	0x080083d5
 80083b8:	080083dd 	.word	0x080083dd
 80083bc:	080083e5 	.word	0x080083e5
 80083c0:	08008411 	.word	0x08008411
 80083c4:	2300      	movs	r3, #0
 80083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ca:	e14a      	b.n	8008662 <UART_SetConfig+0x5a2>
 80083cc:	2304      	movs	r3, #4
 80083ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083d2:	e146      	b.n	8008662 <UART_SetConfig+0x5a2>
 80083d4:	2308      	movs	r3, #8
 80083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083da:	e142      	b.n	8008662 <UART_SetConfig+0x5a2>
 80083dc:	2310      	movs	r3, #16
 80083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e2:	e13e      	b.n	8008662 <UART_SetConfig+0x5a2>
 80083e4:	2320      	movs	r3, #32
 80083e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ea:	e13a      	b.n	8008662 <UART_SetConfig+0x5a2>
 80083ec:	cfff69f3 	.word	0xcfff69f3
 80083f0:	58000c00 	.word	0x58000c00
 80083f4:	11fff4ff 	.word	0x11fff4ff
 80083f8:	40011000 	.word	0x40011000
 80083fc:	58024400 	.word	0x58024400
 8008400:	40004400 	.word	0x40004400
 8008404:	40004800 	.word	0x40004800
 8008408:	40004c00 	.word	0x40004c00
 800840c:	40005000 	.word	0x40005000
 8008410:	2340      	movs	r3, #64	; 0x40
 8008412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008416:	e124      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008418:	2380      	movs	r3, #128	; 0x80
 800841a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800841e:	e120      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4acc      	ldr	r2, [pc, #816]	; (8008758 <UART_SetConfig+0x698>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d176      	bne.n	8008518 <UART_SetConfig+0x458>
 800842a:	4bcc      	ldr	r3, [pc, #816]	; (800875c <UART_SetConfig+0x69c>)
 800842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008432:	2b28      	cmp	r3, #40	; 0x28
 8008434:	d86c      	bhi.n	8008510 <UART_SetConfig+0x450>
 8008436:	a201      	add	r2, pc, #4	; (adr r2, 800843c <UART_SetConfig+0x37c>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	080084e1 	.word	0x080084e1
 8008440:	08008511 	.word	0x08008511
 8008444:	08008511 	.word	0x08008511
 8008448:	08008511 	.word	0x08008511
 800844c:	08008511 	.word	0x08008511
 8008450:	08008511 	.word	0x08008511
 8008454:	08008511 	.word	0x08008511
 8008458:	08008511 	.word	0x08008511
 800845c:	080084e9 	.word	0x080084e9
 8008460:	08008511 	.word	0x08008511
 8008464:	08008511 	.word	0x08008511
 8008468:	08008511 	.word	0x08008511
 800846c:	08008511 	.word	0x08008511
 8008470:	08008511 	.word	0x08008511
 8008474:	08008511 	.word	0x08008511
 8008478:	08008511 	.word	0x08008511
 800847c:	080084f1 	.word	0x080084f1
 8008480:	08008511 	.word	0x08008511
 8008484:	08008511 	.word	0x08008511
 8008488:	08008511 	.word	0x08008511
 800848c:	08008511 	.word	0x08008511
 8008490:	08008511 	.word	0x08008511
 8008494:	08008511 	.word	0x08008511
 8008498:	08008511 	.word	0x08008511
 800849c:	080084f9 	.word	0x080084f9
 80084a0:	08008511 	.word	0x08008511
 80084a4:	08008511 	.word	0x08008511
 80084a8:	08008511 	.word	0x08008511
 80084ac:	08008511 	.word	0x08008511
 80084b0:	08008511 	.word	0x08008511
 80084b4:	08008511 	.word	0x08008511
 80084b8:	08008511 	.word	0x08008511
 80084bc:	08008501 	.word	0x08008501
 80084c0:	08008511 	.word	0x08008511
 80084c4:	08008511 	.word	0x08008511
 80084c8:	08008511 	.word	0x08008511
 80084cc:	08008511 	.word	0x08008511
 80084d0:	08008511 	.word	0x08008511
 80084d4:	08008511 	.word	0x08008511
 80084d8:	08008511 	.word	0x08008511
 80084dc:	08008509 	.word	0x08008509
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084e6:	e0bc      	b.n	8008662 <UART_SetConfig+0x5a2>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ee:	e0b8      	b.n	8008662 <UART_SetConfig+0x5a2>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084f6:	e0b4      	b.n	8008662 <UART_SetConfig+0x5a2>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084fe:	e0b0      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008500:	2320      	movs	r3, #32
 8008502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008506:	e0ac      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800850e:	e0a8      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008510:	2380      	movs	r3, #128	; 0x80
 8008512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008516:	e0a4      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a90      	ldr	r2, [pc, #576]	; (8008760 <UART_SetConfig+0x6a0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d130      	bne.n	8008584 <UART_SetConfig+0x4c4>
 8008522:	4b8e      	ldr	r3, [pc, #568]	; (800875c <UART_SetConfig+0x69c>)
 8008524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b05      	cmp	r3, #5
 800852c:	d826      	bhi.n	800857c <UART_SetConfig+0x4bc>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <UART_SetConfig+0x474>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	0800854d 	.word	0x0800854d
 8008538:	08008555 	.word	0x08008555
 800853c:	0800855d 	.word	0x0800855d
 8008540:	08008565 	.word	0x08008565
 8008544:	0800856d 	.word	0x0800856d
 8008548:	08008575 	.word	0x08008575
 800854c:	2300      	movs	r3, #0
 800854e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008552:	e086      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008554:	2304      	movs	r3, #4
 8008556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800855a:	e082      	b.n	8008662 <UART_SetConfig+0x5a2>
 800855c:	2308      	movs	r3, #8
 800855e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008562:	e07e      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008564:	2310      	movs	r3, #16
 8008566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856a:	e07a      	b.n	8008662 <UART_SetConfig+0x5a2>
 800856c:	2320      	movs	r3, #32
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e076      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008574:	2340      	movs	r3, #64	; 0x40
 8008576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857a:	e072      	b.n	8008662 <UART_SetConfig+0x5a2>
 800857c:	2380      	movs	r3, #128	; 0x80
 800857e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008582:	e06e      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a76      	ldr	r2, [pc, #472]	; (8008764 <UART_SetConfig+0x6a4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d130      	bne.n	80085f0 <UART_SetConfig+0x530>
 800858e:	4b73      	ldr	r3, [pc, #460]	; (800875c <UART_SetConfig+0x69c>)
 8008590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	2b05      	cmp	r3, #5
 8008598:	d826      	bhi.n	80085e8 <UART_SetConfig+0x528>
 800859a:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <UART_SetConfig+0x4e0>)
 800859c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a0:	080085b9 	.word	0x080085b9
 80085a4:	080085c1 	.word	0x080085c1
 80085a8:	080085c9 	.word	0x080085c9
 80085ac:	080085d1 	.word	0x080085d1
 80085b0:	080085d9 	.word	0x080085d9
 80085b4:	080085e1 	.word	0x080085e1
 80085b8:	2300      	movs	r3, #0
 80085ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085be:	e050      	b.n	8008662 <UART_SetConfig+0x5a2>
 80085c0:	2304      	movs	r3, #4
 80085c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085c6:	e04c      	b.n	8008662 <UART_SetConfig+0x5a2>
 80085c8:	2308      	movs	r3, #8
 80085ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ce:	e048      	b.n	8008662 <UART_SetConfig+0x5a2>
 80085d0:	2310      	movs	r3, #16
 80085d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085d6:	e044      	b.n	8008662 <UART_SetConfig+0x5a2>
 80085d8:	2320      	movs	r3, #32
 80085da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085de:	e040      	b.n	8008662 <UART_SetConfig+0x5a2>
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085e6:	e03c      	b.n	8008662 <UART_SetConfig+0x5a2>
 80085e8:	2380      	movs	r3, #128	; 0x80
 80085ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ee:	e038      	b.n	8008662 <UART_SetConfig+0x5a2>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a5c      	ldr	r2, [pc, #368]	; (8008768 <UART_SetConfig+0x6a8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d130      	bne.n	800865c <UART_SetConfig+0x59c>
 80085fa:	4b58      	ldr	r3, [pc, #352]	; (800875c <UART_SetConfig+0x69c>)
 80085fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	2b05      	cmp	r3, #5
 8008604:	d826      	bhi.n	8008654 <UART_SetConfig+0x594>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <UART_SetConfig+0x54c>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	08008625 	.word	0x08008625
 8008610:	0800862d 	.word	0x0800862d
 8008614:	08008635 	.word	0x08008635
 8008618:	0800863d 	.word	0x0800863d
 800861c:	08008645 	.word	0x08008645
 8008620:	0800864d 	.word	0x0800864d
 8008624:	2302      	movs	r3, #2
 8008626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800862a:	e01a      	b.n	8008662 <UART_SetConfig+0x5a2>
 800862c:	2304      	movs	r3, #4
 800862e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008632:	e016      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008634:	2308      	movs	r3, #8
 8008636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800863a:	e012      	b.n	8008662 <UART_SetConfig+0x5a2>
 800863c:	2310      	movs	r3, #16
 800863e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008642:	e00e      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008644:	2320      	movs	r3, #32
 8008646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800864a:	e00a      	b.n	8008662 <UART_SetConfig+0x5a2>
 800864c:	2340      	movs	r3, #64	; 0x40
 800864e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008652:	e006      	b.n	8008662 <UART_SetConfig+0x5a2>
 8008654:	2380      	movs	r3, #128	; 0x80
 8008656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800865a:	e002      	b.n	8008662 <UART_SetConfig+0x5a2>
 800865c:	2380      	movs	r3, #128	; 0x80
 800865e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a40      	ldr	r2, [pc, #256]	; (8008768 <UART_SetConfig+0x6a8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	f040 80ef 	bne.w	800884c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800866e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008672:	2b20      	cmp	r3, #32
 8008674:	dc46      	bgt.n	8008704 <UART_SetConfig+0x644>
 8008676:	2b02      	cmp	r3, #2
 8008678:	f2c0 8081 	blt.w	800877e <UART_SetConfig+0x6be>
 800867c:	3b02      	subs	r3, #2
 800867e:	2b1e      	cmp	r3, #30
 8008680:	d87d      	bhi.n	800877e <UART_SetConfig+0x6be>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <UART_SetConfig+0x5c8>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	0800870b 	.word	0x0800870b
 800868c:	0800877f 	.word	0x0800877f
 8008690:	08008713 	.word	0x08008713
 8008694:	0800877f 	.word	0x0800877f
 8008698:	0800877f 	.word	0x0800877f
 800869c:	0800877f 	.word	0x0800877f
 80086a0:	08008723 	.word	0x08008723
 80086a4:	0800877f 	.word	0x0800877f
 80086a8:	0800877f 	.word	0x0800877f
 80086ac:	0800877f 	.word	0x0800877f
 80086b0:	0800877f 	.word	0x0800877f
 80086b4:	0800877f 	.word	0x0800877f
 80086b8:	0800877f 	.word	0x0800877f
 80086bc:	0800877f 	.word	0x0800877f
 80086c0:	08008733 	.word	0x08008733
 80086c4:	0800877f 	.word	0x0800877f
 80086c8:	0800877f 	.word	0x0800877f
 80086cc:	0800877f 	.word	0x0800877f
 80086d0:	0800877f 	.word	0x0800877f
 80086d4:	0800877f 	.word	0x0800877f
 80086d8:	0800877f 	.word	0x0800877f
 80086dc:	0800877f 	.word	0x0800877f
 80086e0:	0800877f 	.word	0x0800877f
 80086e4:	0800877f 	.word	0x0800877f
 80086e8:	0800877f 	.word	0x0800877f
 80086ec:	0800877f 	.word	0x0800877f
 80086f0:	0800877f 	.word	0x0800877f
 80086f4:	0800877f 	.word	0x0800877f
 80086f8:	0800877f 	.word	0x0800877f
 80086fc:	0800877f 	.word	0x0800877f
 8008700:	08008771 	.word	0x08008771
 8008704:	2b40      	cmp	r3, #64	; 0x40
 8008706:	d036      	beq.n	8008776 <UART_SetConfig+0x6b6>
 8008708:	e039      	b.n	800877e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800870a:	f7fc fe13 	bl	8005334 <HAL_RCCEx_GetD3PCLK1Freq>
 800870e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008710:	e03b      	b.n	800878a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008712:	f107 0314 	add.w	r3, r7, #20
 8008716:	4618      	mov	r0, r3
 8008718:	f7fc fe22 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008720:	e033      	b.n	800878a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008722:	f107 0308 	add.w	r3, r7, #8
 8008726:	4618      	mov	r0, r3
 8008728:	f7fc ff6e 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008730:	e02b      	b.n	800878a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008732:	4b0a      	ldr	r3, [pc, #40]	; (800875c <UART_SetConfig+0x69c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800873e:	4b07      	ldr	r3, [pc, #28]	; (800875c <UART_SetConfig+0x69c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	08db      	lsrs	r3, r3, #3
 8008744:	f003 0303 	and.w	r3, r3, #3
 8008748:	4a08      	ldr	r2, [pc, #32]	; (800876c <UART_SetConfig+0x6ac>)
 800874a:	fa22 f303 	lsr.w	r3, r2, r3
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008750:	e01b      	b.n	800878a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <UART_SetConfig+0x6ac>)
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008756:	e018      	b.n	800878a <UART_SetConfig+0x6ca>
 8008758:	40011400 	.word	0x40011400
 800875c:	58024400 	.word	0x58024400
 8008760:	40007800 	.word	0x40007800
 8008764:	40007c00 	.word	0x40007c00
 8008768:	58000c00 	.word	0x58000c00
 800876c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008770:	4bc4      	ldr	r3, [pc, #784]	; (8008a84 <UART_SetConfig+0x9c4>)
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008774:	e009      	b.n	800878a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800877c:	e005      	b.n	800878a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 81da 	beq.w	8008b46 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	4abc      	ldr	r2, [pc, #752]	; (8008a88 <UART_SetConfig+0x9c8>)
 8008798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800879c:	461a      	mov	r2, r3
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	4413      	add	r3, r2
 80087b0:	6a3a      	ldr	r2, [r7, #32]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d305      	bcc.n	80087c2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087bc:	6a3a      	ldr	r2, [r7, #32]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d903      	bls.n	80087ca <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80087c8:	e1bd      	b.n	8008b46 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087cc:	4618      	mov	r0, r3
 80087ce:	f04f 0100 	mov.w	r1, #0
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	4aac      	ldr	r2, [pc, #688]	; (8008a88 <UART_SetConfig+0x9c8>)
 80087d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087dc:	b29a      	uxth	r2, r3
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	f7f7 fdd5 	bl	8000390 <__aeabi_uldivmod>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4610      	mov	r0, r2
 80087ec:	4619      	mov	r1, r3
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	f04f 0300 	mov.w	r3, #0
 80087f6:	020b      	lsls	r3, r1, #8
 80087f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087fc:	0202      	lsls	r2, r0, #8
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	6849      	ldr	r1, [r1, #4]
 8008802:	0849      	lsrs	r1, r1, #1
 8008804:	4608      	mov	r0, r1
 8008806:	f04f 0100 	mov.w	r1, #0
 800880a:	1814      	adds	r4, r2, r0
 800880c:	eb43 0501 	adc.w	r5, r3, r1
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	461a      	mov	r2, r3
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	4620      	mov	r0, r4
 800881c:	4629      	mov	r1, r5
 800881e:	f7f7 fdb7 	bl	8000390 <__aeabi_uldivmod>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4613      	mov	r3, r2
 8008828:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008830:	d308      	bcc.n	8008844 <UART_SetConfig+0x784>
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008838:	d204      	bcs.n	8008844 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008840:	60da      	str	r2, [r3, #12]
 8008842:	e180      	b.n	8008b46 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800884a:	e17c      	b.n	8008b46 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008854:	f040 80bf 	bne.w	80089d6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800885c:	2b20      	cmp	r3, #32
 800885e:	dc49      	bgt.n	80088f4 <UART_SetConfig+0x834>
 8008860:	2b00      	cmp	r3, #0
 8008862:	db7c      	blt.n	800895e <UART_SetConfig+0x89e>
 8008864:	2b20      	cmp	r3, #32
 8008866:	d87a      	bhi.n	800895e <UART_SetConfig+0x89e>
 8008868:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <UART_SetConfig+0x7b0>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	080088fb 	.word	0x080088fb
 8008874:	08008903 	.word	0x08008903
 8008878:	0800895f 	.word	0x0800895f
 800887c:	0800895f 	.word	0x0800895f
 8008880:	0800890b 	.word	0x0800890b
 8008884:	0800895f 	.word	0x0800895f
 8008888:	0800895f 	.word	0x0800895f
 800888c:	0800895f 	.word	0x0800895f
 8008890:	0800891b 	.word	0x0800891b
 8008894:	0800895f 	.word	0x0800895f
 8008898:	0800895f 	.word	0x0800895f
 800889c:	0800895f 	.word	0x0800895f
 80088a0:	0800895f 	.word	0x0800895f
 80088a4:	0800895f 	.word	0x0800895f
 80088a8:	0800895f 	.word	0x0800895f
 80088ac:	0800895f 	.word	0x0800895f
 80088b0:	0800892b 	.word	0x0800892b
 80088b4:	0800895f 	.word	0x0800895f
 80088b8:	0800895f 	.word	0x0800895f
 80088bc:	0800895f 	.word	0x0800895f
 80088c0:	0800895f 	.word	0x0800895f
 80088c4:	0800895f 	.word	0x0800895f
 80088c8:	0800895f 	.word	0x0800895f
 80088cc:	0800895f 	.word	0x0800895f
 80088d0:	0800895f 	.word	0x0800895f
 80088d4:	0800895f 	.word	0x0800895f
 80088d8:	0800895f 	.word	0x0800895f
 80088dc:	0800895f 	.word	0x0800895f
 80088e0:	0800895f 	.word	0x0800895f
 80088e4:	0800895f 	.word	0x0800895f
 80088e8:	0800895f 	.word	0x0800895f
 80088ec:	0800895f 	.word	0x0800895f
 80088f0:	08008951 	.word	0x08008951
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	d02e      	beq.n	8008956 <UART_SetConfig+0x896>
 80088f8:	e031      	b.n	800895e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088fa:	f7fb f8dd 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 80088fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008900:	e033      	b.n	800896a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008902:	f7fb f8ef 	bl	8003ae4 <HAL_RCC_GetPCLK2Freq>
 8008906:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008908:	e02f      	b.n	800896a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800890a:	f107 0314 	add.w	r3, r7, #20
 800890e:	4618      	mov	r0, r3
 8008910:	f7fc fd26 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008918:	e027      	b.n	800896a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800891a:	f107 0308 	add.w	r3, r7, #8
 800891e:	4618      	mov	r0, r3
 8008920:	f7fc fe72 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008928:	e01f      	b.n	800896a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800892a:	4b58      	ldr	r3, [pc, #352]	; (8008a8c <UART_SetConfig+0x9cc>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0320 	and.w	r3, r3, #32
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008936:	4b55      	ldr	r3, [pc, #340]	; (8008a8c <UART_SetConfig+0x9cc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	08db      	lsrs	r3, r3, #3
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	4a53      	ldr	r2, [pc, #332]	; (8008a90 <UART_SetConfig+0x9d0>)
 8008942:	fa22 f303 	lsr.w	r3, r2, r3
 8008946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008948:	e00f      	b.n	800896a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800894a:	4b51      	ldr	r3, [pc, #324]	; (8008a90 <UART_SetConfig+0x9d0>)
 800894c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800894e:	e00c      	b.n	800896a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008950:	4b4c      	ldr	r3, [pc, #304]	; (8008a84 <UART_SetConfig+0x9c4>)
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008954:	e009      	b.n	800896a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800895a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800895c:	e005      	b.n	800896a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80ea 	beq.w	8008b46 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	4a44      	ldr	r2, [pc, #272]	; (8008a88 <UART_SetConfig+0x9c8>)
 8008978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800897c:	461a      	mov	r2, r3
 800897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008980:	fbb3 f3f2 	udiv	r3, r3, r2
 8008984:	005a      	lsls	r2, r3, #1
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	441a      	add	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	fbb2 f3f3 	udiv	r3, r2, r3
 8008996:	b29b      	uxth	r3, r3
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	2b0f      	cmp	r3, #15
 800899e:	d916      	bls.n	80089ce <UART_SetConfig+0x90e>
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a6:	d212      	bcs.n	80089ce <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	f023 030f 	bic.w	r3, r3, #15
 80089b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	085b      	lsrs	r3, r3, #1
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	b29a      	uxth	r2, r3
 80089be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089c0:	4313      	orrs	r3, r2
 80089c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80089ca:	60da      	str	r2, [r3, #12]
 80089cc:	e0bb      	b.n	8008b46 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80089d4:	e0b7      	b.n	8008b46 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089da:	2b20      	cmp	r3, #32
 80089dc:	dc4a      	bgt.n	8008a74 <UART_SetConfig+0x9b4>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f2c0 8086 	blt.w	8008af0 <UART_SetConfig+0xa30>
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	f200 8083 	bhi.w	8008af0 <UART_SetConfig+0xa30>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <UART_SetConfig+0x930>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a7b 	.word	0x08008a7b
 80089f4:	08008a95 	.word	0x08008a95
 80089f8:	08008af1 	.word	0x08008af1
 80089fc:	08008af1 	.word	0x08008af1
 8008a00:	08008a9d 	.word	0x08008a9d
 8008a04:	08008af1 	.word	0x08008af1
 8008a08:	08008af1 	.word	0x08008af1
 8008a0c:	08008af1 	.word	0x08008af1
 8008a10:	08008aad 	.word	0x08008aad
 8008a14:	08008af1 	.word	0x08008af1
 8008a18:	08008af1 	.word	0x08008af1
 8008a1c:	08008af1 	.word	0x08008af1
 8008a20:	08008af1 	.word	0x08008af1
 8008a24:	08008af1 	.word	0x08008af1
 8008a28:	08008af1 	.word	0x08008af1
 8008a2c:	08008af1 	.word	0x08008af1
 8008a30:	08008abd 	.word	0x08008abd
 8008a34:	08008af1 	.word	0x08008af1
 8008a38:	08008af1 	.word	0x08008af1
 8008a3c:	08008af1 	.word	0x08008af1
 8008a40:	08008af1 	.word	0x08008af1
 8008a44:	08008af1 	.word	0x08008af1
 8008a48:	08008af1 	.word	0x08008af1
 8008a4c:	08008af1 	.word	0x08008af1
 8008a50:	08008af1 	.word	0x08008af1
 8008a54:	08008af1 	.word	0x08008af1
 8008a58:	08008af1 	.word	0x08008af1
 8008a5c:	08008af1 	.word	0x08008af1
 8008a60:	08008af1 	.word	0x08008af1
 8008a64:	08008af1 	.word	0x08008af1
 8008a68:	08008af1 	.word	0x08008af1
 8008a6c:	08008af1 	.word	0x08008af1
 8008a70:	08008ae3 	.word	0x08008ae3
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d037      	beq.n	8008ae8 <UART_SetConfig+0xa28>
 8008a78:	e03a      	b.n	8008af0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a7a:	f7fb f81d 	bl	8003ab8 <HAL_RCC_GetPCLK1Freq>
 8008a7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a80:	e03c      	b.n	8008afc <UART_SetConfig+0xa3c>
 8008a82:	bf00      	nop
 8008a84:	003d0900 	.word	0x003d0900
 8008a88:	0800fa38 	.word	0x0800fa38
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a94:	f7fb f826 	bl	8003ae4 <HAL_RCC_GetPCLK2Freq>
 8008a98:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a9a:	e02f      	b.n	8008afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a9c:	f107 0314 	add.w	r3, r7, #20
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fc fc5d 	bl	8005360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aaa:	e027      	b.n	8008afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fc fda9 	bl	8005608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aba:	e01f      	b.n	8008afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008abc:	4b2c      	ldr	r3, [pc, #176]	; (8008b70 <UART_SetConfig+0xab0>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d009      	beq.n	8008adc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ac8:	4b29      	ldr	r3, [pc, #164]	; (8008b70 <UART_SetConfig+0xab0>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	08db      	lsrs	r3, r3, #3
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	4a28      	ldr	r2, [pc, #160]	; (8008b74 <UART_SetConfig+0xab4>)
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ada:	e00f      	b.n	8008afc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008adc:	4b25      	ldr	r3, [pc, #148]	; (8008b74 <UART_SetConfig+0xab4>)
 8008ade:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ae0:	e00c      	b.n	8008afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ae2:	4b25      	ldr	r3, [pc, #148]	; (8008b78 <UART_SetConfig+0xab8>)
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ae6:	e009      	b.n	8008afc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008aee:	e005      	b.n	8008afc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008afa:	bf00      	nop
    }

    if (pclk != 0U)
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d021      	beq.n	8008b46 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	4a1d      	ldr	r2, [pc, #116]	; (8008b7c <UART_SetConfig+0xabc>)
 8008b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	441a      	add	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	2b0f      	cmp	r3, #15
 8008b2c:	d908      	bls.n	8008b40 <UART_SetConfig+0xa80>
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b34:	d204      	bcs.n	8008b40 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	e002      	b.n	8008b46 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3738      	adds	r7, #56	; 0x38
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	58024400 	.word	0x58024400
 8008b74:	03d09000 	.word	0x03d09000
 8008b78:	003d0900 	.word	0x003d0900
 8008b7c:	0800fa38 	.word	0x0800fa38

08008b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00a      	beq.n	8008baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00a      	beq.n	8008bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00a      	beq.n	8008bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf2:	f003 0308 	and.w	r3, r3, #8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	430a      	orrs	r2, r1
 8008c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01a      	beq.n	8008c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c7e:	d10a      	bne.n	8008c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	605a      	str	r2, [r3, #4]
  }
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cd4:	f7f9 fbfe 	bl	80024d4 <HAL_GetTick>
 8008cd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0308 	and.w	r3, r3, #8
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d10e      	bne.n	8008d06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f82f 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e025      	b.n	8008d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d10e      	bne.n	8008d32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f819 	bl	8008d5a <UART_WaitOnFlagUntilTimeout>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e00f      	b.n	8008d52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	603b      	str	r3, [r7, #0]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d6a:	e062      	b.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d72:	d05e      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d74:	f7f9 fbae 	bl	80024d4 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d302      	bcc.n	8008d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d11d      	bne.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0201 	bic.w	r2, r2, #1
 8008da8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e045      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d02e      	beq.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de2:	d126      	bne.n	8008e32 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dfc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0201 	bic.w	r2, r2, #1
 8008e0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2220      	movs	r2, #32
 8008e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e00f      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	bf0c      	ite	eq
 8008e42:	2301      	moveq	r3, #1
 8008e44:	2300      	movne	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	461a      	mov	r2, r3
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d08d      	beq.n	8008d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d101      	bne.n	8008e70 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e027      	b.n	8008ec0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2224      	movs	r2, #36	; 0x24
 8008e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0201 	bic.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e02d      	b.n	8008f40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2224      	movs	r2, #36	; 0x24
 8008ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0201 	bic.w	r2, r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f84f 	bl	8008fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d101      	bne.n	8008f60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e02d      	b.n	8008fbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2224      	movs	r2, #36	; 0x24
 8008f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0201 	bic.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f811 	bl	8008fc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d108      	bne.n	8008fe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fe4:	e031      	b.n	800904a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fe6:	2310      	movs	r3, #16
 8008fe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fea:	2310      	movs	r3, #16
 8008fec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	0e5b      	lsrs	r3, r3, #25
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	0f5b      	lsrs	r3, r3, #29
 8009006:	b2db      	uxtb	r3, r3
 8009008:	f003 0307 	and.w	r3, r3, #7
 800900c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	7b3a      	ldrb	r2, [r7, #12]
 8009012:	4911      	ldr	r1, [pc, #68]	; (8009058 <UARTEx_SetNbDataToProcess+0x94>)
 8009014:	5c8a      	ldrb	r2, [r1, r2]
 8009016:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800901a:	7b3a      	ldrb	r2, [r7, #12]
 800901c:	490f      	ldr	r1, [pc, #60]	; (800905c <UARTEx_SetNbDataToProcess+0x98>)
 800901e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009020:	fb93 f3f2 	sdiv	r3, r3, r2
 8009024:	b29a      	uxth	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	7b7a      	ldrb	r2, [r7, #13]
 8009030:	4909      	ldr	r1, [pc, #36]	; (8009058 <UARTEx_SetNbDataToProcess+0x94>)
 8009032:	5c8a      	ldrb	r2, [r1, r2]
 8009034:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009038:	7b7a      	ldrb	r2, [r7, #13]
 800903a:	4908      	ldr	r1, [pc, #32]	; (800905c <UARTEx_SetNbDataToProcess+0x98>)
 800903c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800903e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009042:	b29a      	uxth	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800904a:	bf00      	nop
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	0800fa50 	.word	0x0800fa50
 800905c:	0800fa58 	.word	0x0800fa58

08009060 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009060:	b084      	sub	sp, #16
 8009062:	b480      	push	{r7}
 8009064:	b085      	sub	sp, #20
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	f107 001c 	add.w	r0, r7, #28
 800906e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009076:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009078:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800907a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800907e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009082:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009086:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <SDMMC_Init+0x50>)
 8009094:	4013      	ands	r3, r2
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	431a      	orrs	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	b004      	add	sp, #16
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	ffc02c00 	.word	0xffc02c00

080090b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f043 0203 	orr.w	r2, r3, #3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0303 	and.w	r3, r3, #3
}
 8009122:	4618      	mov	r0, r3
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
	...

08009130 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800914e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009154:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800915a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	4313      	orrs	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	4b06      	ldr	r3, [pc, #24]	; (8009180 <SDMMC_SendCommand+0x50>)
 8009168:	4013      	ands	r3, r2
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	431a      	orrs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	fffee0c0 	.word	0xfffee0c0

08009184 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	b2db      	uxtb	r3, r3
}
 8009192:	4618      	mov	r0, r3
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3314      	adds	r3, #20
 80091ac:	461a      	mov	r2, r3
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	4413      	add	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80091ea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80091f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80091f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009202:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	431a      	orrs	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800920e:	2300      	movs	r3, #0

}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800922a:	2310      	movs	r3, #16
 800922c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800922e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800923c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800923e:	f107 0308 	add.w	r3, r7, #8
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff ff73 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800924a:	f241 3288 	movw	r2, #5000	; 0x1388
 800924e:	2110      	movs	r1, #16
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fa5f 	bl	8009714 <SDMMC_GetCmdResp1>
 8009256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009258:	69fb      	ldr	r3, [r7, #28]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b088      	sub	sp, #32
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009270:	2311      	movs	r3, #17
 8009272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800927e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009284:	f107 0308 	add.w	r3, r7, #8
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff ff50 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009290:	f241 3288 	movw	r2, #5000	; 0x1388
 8009294:	2111      	movs	r1, #17
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa3c 	bl	8009714 <SDMMC_GetCmdResp1>
 800929c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800929e:	69fb      	ldr	r3, [r7, #28]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3720      	adds	r7, #32
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80092b6:	2312      	movs	r3, #18
 80092b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff ff2d 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80092d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092da:	2112      	movs	r1, #18
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fa19 	bl	8009714 <SDMMC_GetCmdResp1>
 80092e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e4:	69fb      	ldr	r3, [r7, #28]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b088      	sub	sp, #32
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80092fc:	2318      	movs	r3, #24
 80092fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009306:	2300      	movs	r3, #0
 8009308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800930a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800930e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009310:	f107 0308 	add.w	r3, r7, #8
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff ff0a 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800931c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009320:	2118      	movs	r1, #24
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f9f6 	bl	8009714 <SDMMC_GetCmdResp1>
 8009328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800932a:	69fb      	ldr	r3, [r7, #28]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009342:	2319      	movs	r3, #25
 8009344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800934a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009356:	f107 0308 	add.w	r3, r7, #8
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f7ff fee7 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009362:	f241 3288 	movw	r2, #5000	; 0x1388
 8009366:	2119      	movs	r1, #25
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f9d3 	bl	8009714 <SDMMC_GetCmdResp1>
 800936e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009370:	69fb      	ldr	r3, [r7, #28]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009388:	230c      	movs	r3, #12
 800938a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800938c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009392:	2300      	movs	r3, #0
 8009394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800939a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093b4:	f107 0308 	add.w	r3, r7, #8
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff feb8 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80093c0:	4a0b      	ldr	r2, [pc, #44]	; (80093f0 <SDMMC_CmdStopTransfer+0x74>)
 80093c2:	210c      	movs	r1, #12
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f9a5 	bl	8009714 <SDMMC_GetCmdResp1>
 80093ca:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093de:	d101      	bne.n	80093e4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80093e4:	69fb      	ldr	r3, [r7, #28]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3720      	adds	r7, #32
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	05f5e100 	.word	0x05f5e100

080093f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009402:	2307      	movs	r3, #7
 8009404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800940a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fe87 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009422:	f241 3288 	movw	r2, #5000	; 0x1388
 8009426:	2107      	movs	r1, #7
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f973 	bl	8009714 <SDMMC_GetCmdResp1>
 800942e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009430:	69fb      	ldr	r3, [r7, #28]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3720      	adds	r7, #32
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b088      	sub	sp, #32
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800944a:	2300      	movs	r3, #0
 800944c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009458:	f107 0308 	add.w	r3, r7, #8
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fe66 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fb97 	bl	8009b98 <SDMMC_GetCmdError>
 800946a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800946c:	69fb      	ldr	r3, [r7, #28]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3720      	adds	r7, #32
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b088      	sub	sp, #32
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800947e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009484:	2308      	movs	r3, #8
 8009486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800948c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fe46 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fb29 	bl	8009afc <SDMMC_GetCmdResp7>
 80094aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ac:	69fb      	ldr	r3, [r7, #28]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b088      	sub	sp, #32
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80094c4:	2337      	movs	r3, #55	; 0x37
 80094c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094ce:	2300      	movs	r3, #0
 80094d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094d8:	f107 0308 	add.w	r3, r7, #8
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff fe26 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80094e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e8:	2137      	movs	r1, #55	; 0x37
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f912 	bl	8009714 <SDMMC_GetCmdResp1>
 80094f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f2:	69fb      	ldr	r3, [r7, #28]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800950a:	2329      	movs	r3, #41	; 0x29
 800950c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800950e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009514:	2300      	movs	r3, #0
 8009516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800951c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800951e:	f107 0308 	add.w	r3, r7, #8
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff fe03 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa2e 	bl	800998c <SDMMC_GetCmdResp3>
 8009530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009532:	69fb      	ldr	r3, [r7, #28]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3720      	adds	r7, #32
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800954a:	2306      	movs	r3, #6
 800954c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800954e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800955c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800955e:	f107 0308 	add.w	r3, r7, #8
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff fde3 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800956a:	f241 3288 	movw	r2, #5000	; 0x1388
 800956e:	2106      	movs	r1, #6
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f8cf 	bl	8009714 <SDMMC_GetCmdResp1>
 8009576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009578:	69fb      	ldr	r3, [r7, #28]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3720      	adds	r7, #32
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b088      	sub	sp, #32
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800958e:	2333      	movs	r3, #51	; 0x33
 8009590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800959c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095a2:	f107 0308 	add.w	r3, r7, #8
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff fdc1 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80095ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b2:	2133      	movs	r1, #51	; 0x33
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f8ad 	bl	8009714 <SDMMC_GetCmdResp1>
 80095ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095bc:	69fb      	ldr	r3, [r7, #28]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b088      	sub	sp, #32
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80095d2:	2302      	movs	r3, #2
 80095d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80095d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80095da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095dc:	2300      	movs	r3, #0
 80095de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095e6:	f107 0308 	add.w	r3, r7, #8
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fd9f 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f980 	bl	80098f8 <SDMMC_GetCmdResp2>
 80095f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095fa:	69fb      	ldr	r3, [r7, #28]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3720      	adds	r7, #32
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009612:	2309      	movs	r3, #9
 8009614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800961a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff fd7f 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f960 	bl	80098f8 <SDMMC_GetCmdResp2>
 8009638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800963a:	69fb      	ldr	r3, [r7, #28]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3720      	adds	r7, #32
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009652:	2303      	movs	r3, #3
 8009654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800965a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800965c:	2300      	movs	r3, #0
 800965e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009664:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009666:	f107 0308 	add.w	r3, r7, #8
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fd5f 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	2103      	movs	r1, #3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9c8 	bl	8009a0c <SDMMC_GetCmdResp6>
 800967c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800967e:	69fb      	ldr	r3, [r7, #28]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3720      	adds	r7, #32
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009696:	230d      	movs	r3, #13
 8009698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800969a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096a0:	2300      	movs	r3, #0
 80096a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096aa:	f107 0308 	add.w	r3, r7, #8
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff fd3d 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80096b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ba:	210d      	movs	r1, #13
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f829 	bl	8009714 <SDMMC_GetCmdResp1>
 80096c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096c4:	69fb      	ldr	r3, [r7, #28]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3720      	adds	r7, #32
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b088      	sub	sp, #32
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80096da:	230d      	movs	r3, #13
 80096dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096e4:	2300      	movs	r3, #0
 80096e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096ee:	f107 0308 	add.w	r3, r7, #8
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff fd1b 	bl	8009130 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80096fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fe:	210d      	movs	r1, #13
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f807 	bl	8009714 <SDMMC_GetCmdResp1>
 8009706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009708:	69fb      	ldr	r3, [r7, #28]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	460b      	mov	r3, r1
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009722:	4b70      	ldr	r3, [pc, #448]	; (80098e4 <SDMMC_GetCmdResp1+0x1d0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a70      	ldr	r2, [pc, #448]	; (80098e8 <SDMMC_GetCmdResp1+0x1d4>)
 8009728:	fba2 2303 	umull	r2, r3, r2, r3
 800972c:	0a5a      	lsrs	r2, r3, #9
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	fb02 f303 	mul.w	r3, r2, r3
 8009734:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	1e5a      	subs	r2, r3, #1
 800973a:	61fa      	str	r2, [r7, #28]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009740:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009744:	e0c9      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	4b67      	ldr	r3, [pc, #412]	; (80098ec <SDMMC_GetCmdResp1+0x1d8>)
 8009750:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0ef      	beq.n	8009736 <SDMMC_GetCmdResp1+0x22>
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1ea      	bne.n	8009736 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2204      	movs	r2, #4
 8009770:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009772:	2304      	movs	r3, #4
 8009774:	e0b1      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d004      	beq.n	800978c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2201      	movs	r2, #1
 8009786:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009788:	2301      	movs	r3, #1
 800978a:	e0a6      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4a58      	ldr	r2, [pc, #352]	; (80098f0 <SDMMC_GetCmdResp1+0x1dc>)
 8009790:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fcf6 	bl	8009184 <SDMMC_GetCommandResponse>
 8009798:	4603      	mov	r3, r0
 800979a:	461a      	mov	r2, r3
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	4293      	cmp	r3, r2
 80097a0:	d001      	beq.n	80097a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e099      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80097a6:	2100      	movs	r1, #0
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff fcf8 	bl	800919e <SDMMC_GetResponse>
 80097ae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	4b50      	ldr	r3, [pc, #320]	; (80098f4 <SDMMC_GetCmdResp1+0x1e0>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80097ba:	2300      	movs	r3, #0
 80097bc:	e08d      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	da02      	bge.n	80097ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80097c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097c8:	e087      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80097d4:	2340      	movs	r3, #64	; 0x40
 80097d6:	e080      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80097e2:	2380      	movs	r3, #128	; 0x80
 80097e4:	e079      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80097f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097f4:	e071      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009804:	e069      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009814:	e061      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009824:	e059      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009834:	e051      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009844:	e049      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009850:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009854:	e041      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d002      	beq.n	8009866 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009864:	e039      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009874:	e031      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009884:	e029      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009890:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009894:	e021      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80098a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80098a4:	e019      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80098b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80098b4:	e011      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80098c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098c4:	e009      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f003 0308 	and.w	r3, r3, #8
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80098d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80098d4:	e001      	b.n	80098da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	24000000 	.word	0x24000000
 80098e8:	10624dd3 	.word	0x10624dd3
 80098ec:	00200045 	.word	0x00200045
 80098f0:	002000c5 	.word	0x002000c5
 80098f4:	fdffe008 	.word	0xfdffe008

080098f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009900:	4b1f      	ldr	r3, [pc, #124]	; (8009980 <SDMMC_GetCmdResp2+0x88>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a1f      	ldr	r2, [pc, #124]	; (8009984 <SDMMC_GetCmdResp2+0x8c>)
 8009906:	fba2 2303 	umull	r2, r3, r2, r3
 800990a:	0a5b      	lsrs	r3, r3, #9
 800990c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009910:	fb02 f303 	mul.w	r3, r2, r3
 8009914:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	1e5a      	subs	r2, r3, #1
 800991a:	60fa      	str	r2, [r7, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d102      	bne.n	8009926 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009924:	e026      	b.n	8009974 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800992a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0ef      	beq.n	8009916 <SDMMC_GetCmdResp2+0x1e>
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1ea      	bne.n	8009916 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2204      	movs	r2, #4
 8009950:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009952:	2304      	movs	r3, #4
 8009954:	e00e      	b.n	8009974 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d004      	beq.n	800996c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009968:	2301      	movs	r3, #1
 800996a:	e003      	b.n	8009974 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a06      	ldr	r2, [pc, #24]	; (8009988 <SDMMC_GetCmdResp2+0x90>)
 8009970:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	24000000 	.word	0x24000000
 8009984:	10624dd3 	.word	0x10624dd3
 8009988:	002000c5 	.word	0x002000c5

0800998c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009994:	4b1a      	ldr	r3, [pc, #104]	; (8009a00 <SDMMC_GetCmdResp3+0x74>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a1a      	ldr	r2, [pc, #104]	; (8009a04 <SDMMC_GetCmdResp3+0x78>)
 800999a:	fba2 2303 	umull	r2, r3, r2, r3
 800999e:	0a5b      	lsrs	r3, r3, #9
 80099a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a4:	fb02 f303 	mul.w	r3, r2, r3
 80099a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	1e5a      	subs	r2, r3, #1
 80099ae:	60fa      	str	r2, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d102      	bne.n	80099ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099b8:	e01b      	b.n	80099f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0ef      	beq.n	80099aa <SDMMC_GetCmdResp3+0x1e>
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1ea      	bne.n	80099aa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2204      	movs	r2, #4
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099e6:	2304      	movs	r3, #4
 80099e8:	e003      	b.n	80099f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a06      	ldr	r2, [pc, #24]	; (8009a08 <SDMMC_GetCmdResp3+0x7c>)
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	24000000 	.word	0x24000000
 8009a04:	10624dd3 	.word	0x10624dd3
 8009a08:	002000c5 	.word	0x002000c5

08009a0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	460b      	mov	r3, r1
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009a1a:	4b35      	ldr	r3, [pc, #212]	; (8009af0 <SDMMC_GetCmdResp6+0xe4>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a35      	ldr	r2, [pc, #212]	; (8009af4 <SDMMC_GetCmdResp6+0xe8>)
 8009a20:	fba2 2303 	umull	r2, r3, r2, r3
 8009a24:	0a5b      	lsrs	r3, r3, #9
 8009a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a2a:	fb02 f303 	mul.w	r3, r2, r3
 8009a2e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	1e5a      	subs	r2, r3, #1
 8009a34:	61fa      	str	r2, [r7, #28]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d102      	bne.n	8009a40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a3e:	e052      	b.n	8009ae6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a44:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0ef      	beq.n	8009a30 <SDMMC_GetCmdResp6+0x24>
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1ea      	bne.n	8009a30 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5e:	f003 0304 	and.w	r3, r3, #4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d004      	beq.n	8009a70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2204      	movs	r2, #4
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a6c:	2304      	movs	r3, #4
 8009a6e:	e03a      	b.n	8009ae6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d004      	beq.n	8009a86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e02f      	b.n	8009ae6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f7ff fb7c 	bl	8009184 <SDMMC_GetCommandResponse>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	461a      	mov	r2, r3
 8009a90:	7afb      	ldrb	r3, [r7, #11]
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d001      	beq.n	8009a9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e025      	b.n	8009ae6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4a16      	ldr	r2, [pc, #88]	; (8009af8 <SDMMC_GetCmdResp6+0xec>)
 8009a9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f7ff fb7b 	bl	800919e <SDMMC_GetResponse>
 8009aa8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	0c1b      	lsrs	r3, r3, #16
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e011      	b.n	8009ae6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ad0:	e009      	b.n	8009ae6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ae0:	e001      	b.n	8009ae6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3720      	adds	r7, #32
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	24000000 	.word	0x24000000
 8009af4:	10624dd3 	.word	0x10624dd3
 8009af8:	002000c5 	.word	0x002000c5

08009afc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009b04:	4b22      	ldr	r3, [pc, #136]	; (8009b90 <SDMMC_GetCmdResp7+0x94>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a22      	ldr	r2, [pc, #136]	; (8009b94 <SDMMC_GetCmdResp7+0x98>)
 8009b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0e:	0a5b      	lsrs	r3, r3, #9
 8009b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b14:	fb02 f303 	mul.w	r3, r2, r3
 8009b18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	1e5a      	subs	r2, r3, #1
 8009b1e:	60fa      	str	r2, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b28:	e02c      	b.n	8009b84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0ef      	beq.n	8009b1a <SDMMC_GetCmdResp7+0x1e>
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1ea      	bne.n	8009b1a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2204      	movs	r2, #4
 8009b54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b56:	2304      	movs	r3, #4
 8009b58:	e014      	b.n	8009b84 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d004      	beq.n	8009b70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e009      	b.n	8009b84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2240      	movs	r2, #64	; 0x40
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009b82:	2300      	movs	r3, #0

}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	24000000 	.word	0x24000000
 8009b94:	10624dd3 	.word	0x10624dd3

08009b98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009ba0:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <SDMMC_GetCmdError+0x50>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a11      	ldr	r2, [pc, #68]	; (8009bec <SDMMC_GetCmdError+0x54>)
 8009ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8009baa:	0a5b      	lsrs	r3, r3, #9
 8009bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb0:	fb02 f303 	mul.w	r3, r2, r3
 8009bb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	1e5a      	subs	r2, r3, #1
 8009bba:	60fa      	str	r2, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bc4:	e009      	b.n	8009bda <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0f1      	beq.n	8009bb6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a06      	ldr	r2, [pc, #24]	; (8009bf0 <SDMMC_GetCmdError+0x58>)
 8009bd6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3714      	adds	r7, #20
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	24000000 	.word	0x24000000
 8009bec:	10624dd3 	.word	0x10624dd3
 8009bf0:	002000c5 	.word	0x002000c5

08009bf4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009bf8:	4904      	ldr	r1, [pc, #16]	; (8009c0c <MX_FATFS_Init+0x18>)
 8009bfa:	4805      	ldr	r0, [pc, #20]	; (8009c10 <MX_FATFS_Init+0x1c>)
 8009bfc:	f004 fcdc 	bl	800e5b8 <FATFS_LinkDriver>
 8009c00:	4603      	mov	r3, r0
 8009c02:	461a      	mov	r2, r3
 8009c04:	4b03      	ldr	r3, [pc, #12]	; (8009c14 <MX_FATFS_Init+0x20>)
 8009c06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009c08:	bf00      	nop
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	2400176c 	.word	0x2400176c
 8009c10:	0800fa60 	.word	0x0800fa60
 8009c14:	24001768 	.word	0x24001768

08009c18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009c1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009c32:	f000 f86b 	bl	8009d0c <BSP_SD_IsDetected>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d001      	beq.n	8009c40 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e005      	b.n	8009c4c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009c40:	4804      	ldr	r0, [pc, #16]	; (8009c54 <BSP_SD_Init+0x2c>)
 8009c42:	f7fc f8eb 	bl	8005e1c <HAL_SD_Init>
 8009c46:	4603      	mov	r3, r0
 8009c48:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	24000094 	.word	0x24000094

08009c58 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	68f9      	ldr	r1, [r7, #12]
 8009c74:	4806      	ldr	r0, [pc, #24]	; (8009c90 <BSP_SD_ReadBlocks+0x38>)
 8009c76:	f7fc f9e9 	bl	800604c <HAL_SD_ReadBlocks>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	24000094 	.word	0x24000094

08009c94 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b088      	sub	sp, #32
 8009c98:	af02      	add	r7, sp, #8
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	68f9      	ldr	r1, [r7, #12]
 8009cb0:	4806      	ldr	r0, [pc, #24]	; (8009ccc <BSP_SD_WriteBlocks+0x38>)
 8009cb2:	f7fc fb55 	bl	8006360 <HAL_SD_WriteBlocks>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	24000094 	.word	0x24000094

08009cd0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009cd4:	4805      	ldr	r0, [pc, #20]	; (8009cec <BSP_SD_GetCardState+0x1c>)
 8009cd6:	f7fd f867 	bl	8006da8 <HAL_SD_GetCardState>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	bf14      	ite	ne
 8009ce0:	2301      	movne	r3, #1
 8009ce2:	2300      	moveq	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	24000094 	.word	0x24000094

08009cf0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	4803      	ldr	r0, [pc, #12]	; (8009d08 <BSP_SD_GetCardInfo+0x18>)
 8009cfc:	f7fc ff18 	bl	8006b30 <HAL_SD_GetCardInfo>
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	24000094 	.word	0x24000094

08009d0c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009d12:	2301      	movs	r3, #1
 8009d14:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009d16:	f000 f80b 	bl	8009d30 <BSP_PlatformIsDetected>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009d20:	2300      	movs	r3, #0
 8009d22:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	b2db      	uxtb	r3, r3
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009d36:	2301      	movs	r3, #1
 8009d38:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009d3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d3e:	4810      	ldr	r0, [pc, #64]	; (8009d80 <BSP_PlatformIsDetected+0x50>)
 8009d40:	f7f8 fec4 	bl	8002acc <HAL_GPIO_ReadPin>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */

    //Stupid that the code is duplicated here but the code generator keps overwriting my fix.
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8009d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d52:	480b      	ldr	r0, [pc, #44]	; (8009d80 <BSP_PlatformIsDetected+0x50>)
 8009d54:	f7f8 feba 	bl	8002acc <HAL_GPIO_ReadPin>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d001      	beq.n	8009d62 <BSP_PlatformIsDetected+0x32>
    {
        status = SD_NOT_PRESENT;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	71fb      	strb	r3, [r7, #7]
    }
    return (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET) ? SD_PRESENT : SD_NOT_PRESENT;
 8009d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d66:	4806      	ldr	r0, [pc, #24]	; (8009d80 <BSP_PlatformIsDetected+0x50>)
 8009d68:	f7f8 feb0 	bl	8002acc <HAL_GPIO_ReadPin>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	bf0c      	ite	eq
 8009d72:	2301      	moveq	r3, #1
 8009d74:	2300      	movne	r3, #0
 8009d76:	b2db      	uxtb	r3, r3

    /* USER CODE END 1 */
    return status;
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	58020800 	.word	0x58020800

08009d84 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009d8e:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <SD_CheckStatus+0x38>)
 8009d90:	2201      	movs	r2, #1
 8009d92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009d94:	f7ff ff9c 	bl	8009cd0 <BSP_SD_GetCardState>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d107      	bne.n	8009dae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009d9e:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <SD_CheckStatus+0x38>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f023 0301 	bic.w	r3, r3, #1
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	4b04      	ldr	r3, [pc, #16]	; (8009dbc <SD_CheckStatus+0x38>)
 8009dac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009dae:	4b03      	ldr	r3, [pc, #12]	; (8009dbc <SD_CheckStatus+0x38>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	b2db      	uxtb	r3, r3
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	2400000d 	.word	0x2400000d

08009dc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009dca:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <SD_initialize+0x38>)
 8009dcc:	2201      	movs	r2, #1
 8009dce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009dd0:	f7ff ff2a 	bl	8009c28 <BSP_SD_Init>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d107      	bne.n	8009dea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7ff ffd1 	bl	8009d84 <SD_CheckStatus>
 8009de2:	4603      	mov	r3, r0
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b04      	ldr	r3, [pc, #16]	; (8009df8 <SD_initialize+0x38>)
 8009de8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009dea:	4b03      	ldr	r3, [pc, #12]	; (8009df8 <SD_initialize+0x38>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b2db      	uxtb	r3, r3
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	2400000d 	.word	0x2400000d

08009dfc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff ffbb 	bl	8009d84 <SD_CheckStatus>
 8009e0e:	4603      	mov	r3, r0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
 8009e22:	603b      	str	r3, [r7, #0]
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	68b8      	ldr	r0, [r7, #8]
 8009e36:	f7ff ff0f 	bl	8009c58 <BSP_SD_ReadBlocks>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d107      	bne.n	8009e50 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009e40:	bf00      	nop
 8009e42:	f7ff ff45 	bl	8009cd0 <BSP_SD_GetCardState>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1fa      	bne.n	8009e42 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b086      	sub	sp, #24
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	6879      	ldr	r1, [r7, #4]
 8009e76:	68b8      	ldr	r0, [r7, #8]
 8009e78:	f7ff ff0c 	bl	8009c94 <BSP_SD_WriteBlocks>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d107      	bne.n	8009e92 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009e82:	bf00      	nop
 8009e84:	f7ff ff24 	bl	8009cd0 <BSP_SD_GetCardState>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1fa      	bne.n	8009e84 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08c      	sub	sp, #48	; 0x30
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	603a      	str	r2, [r7, #0]
 8009ea6:	71fb      	strb	r3, [r7, #7]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009eb2:	4b25      	ldr	r3, [pc, #148]	; (8009f48 <SD_ioctl+0xac>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <SD_ioctl+0x28>
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e03c      	b.n	8009f3e <SD_ioctl+0xa2>

  switch (cmd)
 8009ec4:	79bb      	ldrb	r3, [r7, #6]
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d834      	bhi.n	8009f34 <SD_ioctl+0x98>
 8009eca:	a201      	add	r2, pc, #4	; (adr r2, 8009ed0 <SD_ioctl+0x34>)
 8009ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed0:	08009ee1 	.word	0x08009ee1
 8009ed4:	08009ee9 	.word	0x08009ee9
 8009ed8:	08009f01 	.word	0x08009f01
 8009edc:	08009f1b 	.word	0x08009f1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ee6:	e028      	b.n	8009f3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ee8:	f107 0308 	add.w	r3, r7, #8
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff feff 	bl	8009cf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009ef2:	6a3a      	ldr	r2, [r7, #32]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009efe:	e01c      	b.n	8009f3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f00:	f107 0308 	add.w	r3, r7, #8
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7ff fef3 	bl	8009cf0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f18:	e00f      	b.n	8009f3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f1a:	f107 0308 	add.w	r3, r7, #8
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7ff fee6 	bl	8009cf0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	0a5a      	lsrs	r2, r3, #9
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f32:	e002      	b.n	8009f3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009f34:	2304      	movs	r3, #4
 8009f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009f3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3730      	adds	r7, #48	; 0x30
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	2400000d 	.word	0x2400000d

08009f4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	4603      	mov	r3, r0
 8009f54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	4a08      	ldr	r2, [pc, #32]	; (8009f7c <disk_status+0x30>)
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	79fa      	ldrb	r2, [r7, #7]
 8009f64:	4905      	ldr	r1, [pc, #20]	; (8009f7c <disk_status+0x30>)
 8009f66:	440a      	add	r2, r1
 8009f68:	7a12      	ldrb	r2, [r2, #8]
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4798      	blx	r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	24001748 	.word	0x24001748

08009f80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	4a0d      	ldr	r2, [pc, #52]	; (8009fc8 <disk_initialize+0x48>)
 8009f92:	5cd3      	ldrb	r3, [r2, r3]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d111      	bne.n	8009fbc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	4a0b      	ldr	r2, [pc, #44]	; (8009fc8 <disk_initialize+0x48>)
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009fa0:	79fb      	ldrb	r3, [r7, #7]
 8009fa2:	4a09      	ldr	r2, [pc, #36]	; (8009fc8 <disk_initialize+0x48>)
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	79fa      	ldrb	r2, [r7, #7]
 8009fae:	4906      	ldr	r1, [pc, #24]	; (8009fc8 <disk_initialize+0x48>)
 8009fb0:	440a      	add	r2, r1
 8009fb2:	7a12      	ldrb	r2, [r2, #8]
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4798      	blx	r3
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	24001748 	.word	0x24001748

08009fcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009fcc:	b590      	push	{r4, r7, lr}
 8009fce:	b087      	sub	sp, #28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	607a      	str	r2, [r7, #4]
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	4a0a      	ldr	r2, [pc, #40]	; (800a008 <disk_read+0x3c>)
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	689c      	ldr	r4, [r3, #8]
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	4a07      	ldr	r2, [pc, #28]	; (800a008 <disk_read+0x3c>)
 8009fec:	4413      	add	r3, r2
 8009fee:	7a18      	ldrb	r0, [r3, #8]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	68b9      	ldr	r1, [r7, #8]
 8009ff6:	47a0      	blx	r4
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	bd90      	pop	{r4, r7, pc}
 800a006:	bf00      	nop
 800a008:	24001748 	.word	0x24001748

0800a00c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a00c:	b590      	push	{r4, r7, lr}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	607a      	str	r2, [r7, #4]
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	4a0a      	ldr	r2, [pc, #40]	; (800a048 <disk_write+0x3c>)
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	68dc      	ldr	r4, [r3, #12]
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	4a07      	ldr	r2, [pc, #28]	; (800a048 <disk_write+0x3c>)
 800a02c:	4413      	add	r3, r2
 800a02e:	7a18      	ldrb	r0, [r3, #8]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	47a0      	blx	r4
 800a038:	4603      	mov	r3, r0
 800a03a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	371c      	adds	r7, #28
 800a042:	46bd      	mov	sp, r7
 800a044:	bd90      	pop	{r4, r7, pc}
 800a046:	bf00      	nop
 800a048:	24001748 	.word	0x24001748

0800a04c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	4603      	mov	r3, r0
 800a054:	603a      	str	r2, [r7, #0]
 800a056:	71fb      	strb	r3, [r7, #7]
 800a058:	460b      	mov	r3, r1
 800a05a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	4a09      	ldr	r2, [pc, #36]	; (800a084 <disk_ioctl+0x38>)
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4413      	add	r3, r2
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	79fa      	ldrb	r2, [r7, #7]
 800a06a:	4906      	ldr	r1, [pc, #24]	; (800a084 <disk_ioctl+0x38>)
 800a06c:	440a      	add	r2, r1
 800a06e:	7a10      	ldrb	r0, [r2, #8]
 800a070:	79b9      	ldrb	r1, [r7, #6]
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4798      	blx	r3
 800a076:	4603      	mov	r3, r0
 800a078:	73fb      	strb	r3, [r7, #15]
  return res;
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	24001748 	.word	0x24001748

0800a088 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3301      	adds	r3, #1
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a098:	89fb      	ldrh	r3, [r7, #14]
 800a09a:	021b      	lsls	r3, r3, #8
 800a09c:	b21a      	sxth	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	b21b      	sxth	r3, r3
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	b21b      	sxth	r3, r3
 800a0a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a0aa:	89fb      	ldrh	r3, [r7, #14]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3303      	adds	r3, #3
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	021b      	lsls	r3, r3, #8
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	3202      	adds	r2, #2
 800a0d0:	7812      	ldrb	r2, [r2, #0]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	021b      	lsls	r3, r3, #8
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	3201      	adds	r2, #1
 800a0de:	7812      	ldrb	r2, [r2, #0]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	021b      	lsls	r3, r3, #8
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7812      	ldrb	r2, [r2, #0]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
	return rv;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a0fe:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a102:	b08d      	sub	sp, #52	; 0x34
 800a104:	af00      	add	r7, sp, #0
 800a106:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	3307      	adds	r3, #7
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 800a118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a11c:	f04f 0000 	mov.w	r0, #0
 800a120:	f04f 0100 	mov.w	r1, #0
 800a124:	0219      	lsls	r1, r3, #8
 800a126:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a12a:	0210      	lsls	r0, r2, #8
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	3306      	adds	r3, #6
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	b2da      	uxtb	r2, r3
 800a134:	f04f 0300 	mov.w	r3, #0
 800a138:	ea40 0402 	orr.w	r4, r0, r2
 800a13c:	ea41 0503 	orr.w	r5, r1, r3
 800a140:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 800a144:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a148:	f04f 0000 	mov.w	r0, #0
 800a14c:	f04f 0100 	mov.w	r1, #0
 800a150:	0219      	lsls	r1, r3, #8
 800a152:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a156:	0210      	lsls	r0, r2, #8
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	3305      	adds	r3, #5
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	f04f 0300 	mov.w	r3, #0
 800a164:	ea40 0802 	orr.w	r8, r0, r2
 800a168:	ea41 0903 	orr.w	r9, r1, r3
 800a16c:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 800a170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a174:	f04f 0000 	mov.w	r0, #0
 800a178:	f04f 0100 	mov.w	r1, #0
 800a17c:	0219      	lsls	r1, r3, #8
 800a17e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a182:	0210      	lsls	r0, r2, #8
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	3304      	adds	r3, #4
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	ea40 0402 	orr.w	r4, r0, r2
 800a194:	61bc      	str	r4, [r7, #24]
 800a196:	430b      	orrs	r3, r1
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a19e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 800a1a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a1a6:	f04f 0200 	mov.w	r2, #0
 800a1aa:	f04f 0300 	mov.w	r3, #0
 800a1ae:	020b      	lsls	r3, r1, #8
 800a1b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1b4:	0202      	lsls	r2, r0, #8
 800a1b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1b8:	3103      	adds	r1, #3
 800a1ba:	7809      	ldrb	r1, [r1, #0]
 800a1bc:	b2c8      	uxtb	r0, r1
 800a1be:	f04f 0100 	mov.w	r1, #0
 800a1c2:	ea42 0400 	orr.w	r4, r2, r0
 800a1c6:	613c      	str	r4, [r7, #16]
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	617b      	str	r3, [r7, #20]
 800a1cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a1d0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 800a1d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	f04f 0300 	mov.w	r3, #0
 800a1e0:	020b      	lsls	r3, r1, #8
 800a1e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1e6:	0202      	lsls	r2, r0, #8
 800a1e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1ea:	3102      	adds	r1, #2
 800a1ec:	7809      	ldrb	r1, [r1, #0]
 800a1ee:	b2c8      	uxtb	r0, r1
 800a1f0:	f04f 0100 	mov.w	r1, #0
 800a1f4:	ea42 0400 	orr.w	r4, r2, r0
 800a1f8:	60bc      	str	r4, [r7, #8]
 800a1fa:	430b      	orrs	r3, r1
 800a1fc:	60fb      	str	r3, [r7, #12]
 800a1fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a202:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 800a206:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a20a:	f04f 0200 	mov.w	r2, #0
 800a20e:	f04f 0300 	mov.w	r3, #0
 800a212:	020b      	lsls	r3, r1, #8
 800a214:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a218:	0202      	lsls	r2, r0, #8
 800a21a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a21c:	3101      	adds	r1, #1
 800a21e:	7809      	ldrb	r1, [r1, #0]
 800a220:	b2c8      	uxtb	r0, r1
 800a222:	f04f 0100 	mov.w	r1, #0
 800a226:	ea42 0400 	orr.w	r4, r2, r0
 800a22a:	603c      	str	r4, [r7, #0]
 800a22c:	430b      	orrs	r3, r1
 800a22e:	607b      	str	r3, [r7, #4]
 800a230:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a234:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 800a238:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a23c:	f04f 0200 	mov.w	r2, #0
 800a240:	f04f 0300 	mov.w	r3, #0
 800a244:	020b      	lsls	r3, r1, #8
 800a246:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a24a:	0202      	lsls	r2, r0, #8
 800a24c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a24e:	7809      	ldrb	r1, [r1, #0]
 800a250:	b2c8      	uxtb	r0, r1
 800a252:	f04f 0100 	mov.w	r1, #0
 800a256:	ea42 0a00 	orr.w	sl, r2, r0
 800a25a:	ea43 0b01 	orr.w	fp, r3, r1
 800a25e:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 800a262:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 800a266:	4610      	mov	r0, r2
 800a268:	4619      	mov	r1, r3
 800a26a:	3734      	adds	r7, #52	; 0x34
 800a26c:	46bd      	mov	sp, r7
 800a26e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a272:	4770      	bx	lr

0800a274 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	607a      	str	r2, [r7, #4]
 800a286:	887a      	ldrh	r2, [r7, #2]
 800a288:	b2d2      	uxtb	r2, r2
 800a28a:	701a      	strb	r2, [r3, #0]
 800a28c:	887b      	ldrh	r3, [r7, #2]
 800a28e:	0a1b      	lsrs	r3, r3, #8
 800a290:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	1c5a      	adds	r2, r3, #1
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	887a      	ldrh	r2, [r7, #2]
 800a29a:	b2d2      	uxtb	r2, r2
 800a29c:	701a      	strb	r2, [r3, #0]
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	b2d2      	uxtb	r2, r2
 800a2be:	701a      	strb	r2, [r3, #0]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	0a1b      	lsrs	r3, r3, #8
 800a2c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	b2d2      	uxtb	r2, r2
 800a2d0:	701a      	strb	r2, [r3, #0]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	0a1b      	lsrs	r3, r3, #8
 800a2d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	607a      	str	r2, [r7, #4]
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	b2d2      	uxtb	r2, r2
 800a2e2:	701a      	strb	r2, [r3, #0]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	0a1b      	lsrs	r3, r3, #8
 800a2e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	701a      	strb	r2, [r3, #0]
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a302:	b480      	push	{r7}
 800a304:	b085      	sub	sp, #20
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	60fa      	str	r2, [r7, #12]
 800a314:	783a      	ldrb	r2, [r7, #0]
 800a316:	701a      	strb	r2, [r3, #0]
 800a318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a31c:	f04f 0200 	mov.w	r2, #0
 800a320:	f04f 0300 	mov.w	r3, #0
 800a324:	0a02      	lsrs	r2, r0, #8
 800a326:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a32a:	0a0b      	lsrs	r3, r1, #8
 800a32c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	60fa      	str	r2, [r7, #12]
 800a336:	783a      	ldrb	r2, [r7, #0]
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a33e:	f04f 0200 	mov.w	r2, #0
 800a342:	f04f 0300 	mov.w	r3, #0
 800a346:	0a02      	lsrs	r2, r0, #8
 800a348:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a34c:	0a0b      	lsrs	r3, r1, #8
 800a34e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	60fa      	str	r2, [r7, #12]
 800a358:	783a      	ldrb	r2, [r7, #0]
 800a35a:	701a      	strb	r2, [r3, #0]
 800a35c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a360:	f04f 0200 	mov.w	r2, #0
 800a364:	f04f 0300 	mov.w	r3, #0
 800a368:	0a02      	lsrs	r2, r0, #8
 800a36a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a36e:	0a0b      	lsrs	r3, r1, #8
 800a370:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	60fa      	str	r2, [r7, #12]
 800a37a:	783a      	ldrb	r2, [r7, #0]
 800a37c:	701a      	strb	r2, [r3, #0]
 800a37e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a382:	f04f 0200 	mov.w	r2, #0
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	0a02      	lsrs	r2, r0, #8
 800a38c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a390:	0a0b      	lsrs	r3, r1, #8
 800a392:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	60fa      	str	r2, [r7, #12]
 800a39c:	783a      	ldrb	r2, [r7, #0]
 800a39e:	701a      	strb	r2, [r3, #0]
 800a3a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	f04f 0300 	mov.w	r3, #0
 800a3ac:	0a02      	lsrs	r2, r0, #8
 800a3ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a3b2:	0a0b      	lsrs	r3, r1, #8
 800a3b4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	60fa      	str	r2, [r7, #12]
 800a3be:	783a      	ldrb	r2, [r7, #0]
 800a3c0:	701a      	strb	r2, [r3, #0]
 800a3c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3c6:	f04f 0200 	mov.w	r2, #0
 800a3ca:	f04f 0300 	mov.w	r3, #0
 800a3ce:	0a02      	lsrs	r2, r0, #8
 800a3d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a3d4:	0a0b      	lsrs	r3, r1, #8
 800a3d6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	1c5a      	adds	r2, r3, #1
 800a3de:	60fa      	str	r2, [r7, #12]
 800a3e0:	783a      	ldrb	r2, [r7, #0]
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3e8:	f04f 0200 	mov.w	r2, #0
 800a3ec:	f04f 0300 	mov.w	r3, #0
 800a3f0:	0a02      	lsrs	r2, r0, #8
 800a3f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a3f6:	0a0b      	lsrs	r3, r1, #8
 800a3f8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	60fa      	str	r2, [r7, #12]
 800a402:	783a      	ldrb	r2, [r7, #0]
 800a404:	701a      	strb	r2, [r3, #0]
}
 800a406:	bf00      	nop
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a412:	b480      	push	{r7}
 800a414:	b087      	sub	sp, #28
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	60b9      	str	r1, [r7, #8]
 800a41c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00d      	beq.n	800a448 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	1c53      	adds	r3, r2, #1
 800a430:	613b      	str	r3, [r7, #16]
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	1c59      	adds	r1, r3, #1
 800a436:	6179      	str	r1, [r7, #20]
 800a438:	7812      	ldrb	r2, [r2, #0]
 800a43a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3b01      	subs	r3, #1
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1f1      	bne.n	800a42c <mem_cpy+0x1a>
	}
}
 800a448:	bf00      	nop
 800a44a:	371c      	adds	r7, #28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	1c5a      	adds	r2, r3, #1
 800a468:	617a      	str	r2, [r7, #20]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	b2d2      	uxtb	r2, r2
 800a46e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	3b01      	subs	r3, #1
 800a474:	607b      	str	r3, [r7, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1f3      	bne.n	800a464 <mem_set+0x10>
}
 800a47c:	bf00      	nop
 800a47e:	bf00      	nop
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a48a:	b480      	push	{r7}
 800a48c:	b089      	sub	sp, #36	; 0x24
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	61fa      	str	r2, [r7, #28]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	61ba      	str	r2, [r7, #24]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	1acb      	subs	r3, r1, r3
 800a4b6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	607b      	str	r3, [r7, #4]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <mem_cmp+0x40>
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0eb      	beq.n	800a4a2 <mem_cmp+0x18>

	return r;
 800a4ca:	697b      	ldr	r3, [r7, #20]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3724      	adds	r7, #36	; 0x24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a4e2:	e002      	b.n	800a4ea <chk_chr+0x12>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	607b      	str	r3, [r7, #4]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d005      	beq.n	800a4fe <chk_chr+0x26>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d1f2      	bne.n	800a4e4 <chk_chr+0xc>
	return *str;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	781b      	ldrb	r3, [r3, #0]
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
	...

0800a510 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a51a:	2300      	movs	r3, #0
 800a51c:	60bb      	str	r3, [r7, #8]
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	60fb      	str	r3, [r7, #12]
 800a522:	e029      	b.n	800a578 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a524:	4a27      	ldr	r2, [pc, #156]	; (800a5c4 <chk_lock+0xb4>)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	011b      	lsls	r3, r3, #4
 800a52a:	4413      	add	r3, r2
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d01d      	beq.n	800a56e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a532:	4a24      	ldr	r2, [pc, #144]	; (800a5c4 <chk_lock+0xb4>)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	4413      	add	r3, r2
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d116      	bne.n	800a572 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a544:	4a1f      	ldr	r2, [pc, #124]	; (800a5c4 <chk_lock+0xb4>)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	011b      	lsls	r3, r3, #4
 800a54a:	4413      	add	r3, r2
 800a54c:	3304      	adds	r3, #4
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a554:	429a      	cmp	r2, r3
 800a556:	d10c      	bne.n	800a572 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a558:	4a1a      	ldr	r2, [pc, #104]	; (800a5c4 <chk_lock+0xb4>)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	011b      	lsls	r3, r3, #4
 800a55e:	4413      	add	r3, r2
 800a560:	3308      	adds	r3, #8
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800a568:	429a      	cmp	r2, r3
 800a56a:	d102      	bne.n	800a572 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a56c:	e007      	b.n	800a57e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a56e:	2301      	movs	r3, #1
 800a570:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3301      	adds	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2bfe      	cmp	r3, #254	; 0xfe
 800a57c:	d9d2      	bls.n	800a524 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2bff      	cmp	r3, #255	; 0xff
 800a582:	d109      	bne.n	800a598 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <chk_lock+0x80>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d101      	bne.n	800a594 <chk_lock+0x84>
 800a590:	2300      	movs	r3, #0
 800a592:	e010      	b.n	800a5b6 <chk_lock+0xa6>
 800a594:	2312      	movs	r3, #18
 800a596:	e00e      	b.n	800a5b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d108      	bne.n	800a5b0 <chk_lock+0xa0>
 800a59e:	4a09      	ldr	r2, [pc, #36]	; (800a5c4 <chk_lock+0xb4>)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	011b      	lsls	r3, r3, #4
 800a5a4:	4413      	add	r3, r2
 800a5a6:	330c      	adds	r3, #12
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ae:	d101      	bne.n	800a5b4 <chk_lock+0xa4>
 800a5b0:	2310      	movs	r3, #16
 800a5b2:	e000      	b.n	800a5b6 <chk_lock+0xa6>
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	240002f8 	.word	0x240002f8

0800a5c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	e002      	b.n	800a5da <enq_lock+0x12>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	607b      	str	r3, [r7, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2bfe      	cmp	r3, #254	; 0xfe
 800a5de:	d806      	bhi.n	800a5ee <enq_lock+0x26>
 800a5e0:	4a09      	ldr	r2, [pc, #36]	; (800a608 <enq_lock+0x40>)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	011b      	lsls	r3, r3, #4
 800a5e6:	4413      	add	r3, r2
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1f2      	bne.n	800a5d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2bff      	cmp	r3, #255	; 0xff
 800a5f2:	bf14      	ite	ne
 800a5f4:	2301      	movne	r3, #1
 800a5f6:	2300      	moveq	r3, #0
 800a5f8:	b2db      	uxtb	r3, r3
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	240002f8 	.word	0x240002f8

0800a60c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	e01f      	b.n	800a65c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a61c:	4a41      	ldr	r2, [pc, #260]	; (800a724 <inc_lock+0x118>)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	011b      	lsls	r3, r3, #4
 800a622:	4413      	add	r3, r2
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d113      	bne.n	800a656 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a62e:	4a3d      	ldr	r2, [pc, #244]	; (800a724 <inc_lock+0x118>)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	011b      	lsls	r3, r3, #4
 800a634:	4413      	add	r3, r2
 800a636:	3304      	adds	r3, #4
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a63e:	429a      	cmp	r2, r3
 800a640:	d109      	bne.n	800a656 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a642:	4a38      	ldr	r2, [pc, #224]	; (800a724 <inc_lock+0x118>)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	011b      	lsls	r3, r3, #4
 800a648:	4413      	add	r3, r2
 800a64a:	3308      	adds	r3, #8
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800a652:	429a      	cmp	r2, r3
 800a654:	d006      	beq.n	800a664 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3301      	adds	r3, #1
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2bfe      	cmp	r3, #254	; 0xfe
 800a660:	d9dc      	bls.n	800a61c <inc_lock+0x10>
 800a662:	e000      	b.n	800a666 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a664:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2bff      	cmp	r3, #255	; 0xff
 800a66a:	d132      	bne.n	800a6d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e002      	b.n	800a678 <inc_lock+0x6c>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3301      	adds	r3, #1
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2bfe      	cmp	r3, #254	; 0xfe
 800a67c:	d806      	bhi.n	800a68c <inc_lock+0x80>
 800a67e:	4a29      	ldr	r2, [pc, #164]	; (800a724 <inc_lock+0x118>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	011b      	lsls	r3, r3, #4
 800a684:	4413      	add	r3, r2
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1f2      	bne.n	800a672 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2bff      	cmp	r3, #255	; 0xff
 800a690:	d101      	bne.n	800a696 <inc_lock+0x8a>
 800a692:	2300      	movs	r3, #0
 800a694:	e040      	b.n	800a718 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	4922      	ldr	r1, [pc, #136]	; (800a724 <inc_lock+0x118>)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	011b      	lsls	r3, r3, #4
 800a6a0:	440b      	add	r3, r1
 800a6a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	491e      	ldr	r1, [pc, #120]	; (800a724 <inc_lock+0x118>)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	440b      	add	r3, r1
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6b8:	491a      	ldr	r1, [pc, #104]	; (800a724 <inc_lock+0x118>)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	011b      	lsls	r3, r3, #4
 800a6be:	440b      	add	r3, r1
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a6c4:	4a17      	ldr	r2, [pc, #92]	; (800a724 <inc_lock+0x118>)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	4413      	add	r3, r2
 800a6cc:	330c      	adds	r3, #12
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d009      	beq.n	800a6ec <inc_lock+0xe0>
 800a6d8:	4a12      	ldr	r2, [pc, #72]	; (800a724 <inc_lock+0x118>)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	011b      	lsls	r3, r3, #4
 800a6de:	4413      	add	r3, r2
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <inc_lock+0xe0>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e015      	b.n	800a718 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d108      	bne.n	800a704 <inc_lock+0xf8>
 800a6f2:	4a0c      	ldr	r2, [pc, #48]	; (800a724 <inc_lock+0x118>)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	011b      	lsls	r3, r3, #4
 800a6f8:	4413      	add	r3, r2
 800a6fa:	330c      	adds	r3, #12
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	b29a      	uxth	r2, r3
 800a702:	e001      	b.n	800a708 <inc_lock+0xfc>
 800a704:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a708:	4906      	ldr	r1, [pc, #24]	; (800a724 <inc_lock+0x118>)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	011b      	lsls	r3, r3, #4
 800a70e:	440b      	add	r3, r1
 800a710:	330c      	adds	r3, #12
 800a712:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	3301      	adds	r3, #1
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	240002f8 	.word	0x240002f8

0800a728 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3b01      	subs	r3, #1
 800a734:	607b      	str	r3, [r7, #4]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2bfe      	cmp	r3, #254	; 0xfe
 800a73a:	d825      	bhi.n	800a788 <dec_lock+0x60>
		n = Files[i].ctr;
 800a73c:	4a17      	ldr	r2, [pc, #92]	; (800a79c <dec_lock+0x74>)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	011b      	lsls	r3, r3, #4
 800a742:	4413      	add	r3, r2
 800a744:	330c      	adds	r3, #12
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a74a:	89fb      	ldrh	r3, [r7, #14]
 800a74c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a750:	d101      	bne.n	800a756 <dec_lock+0x2e>
 800a752:	2300      	movs	r3, #0
 800a754:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a756:	89fb      	ldrh	r3, [r7, #14]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <dec_lock+0x3a>
 800a75c:	89fb      	ldrh	r3, [r7, #14]
 800a75e:	3b01      	subs	r3, #1
 800a760:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a762:	4a0e      	ldr	r2, [pc, #56]	; (800a79c <dec_lock+0x74>)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	011b      	lsls	r3, r3, #4
 800a768:	4413      	add	r3, r2
 800a76a:	330c      	adds	r3, #12
 800a76c:	89fa      	ldrh	r2, [r7, #14]
 800a76e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a770:	89fb      	ldrh	r3, [r7, #14]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d105      	bne.n	800a782 <dec_lock+0x5a>
 800a776:	4a09      	ldr	r2, [pc, #36]	; (800a79c <dec_lock+0x74>)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	011b      	lsls	r3, r3, #4
 800a77c:	4413      	add	r3, r2
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	737b      	strb	r3, [r7, #13]
 800a786:	e001      	b.n	800a78c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a788:	2302      	movs	r3, #2
 800a78a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a78c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	240002f8 	.word	0x240002f8

0800a7a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e010      	b.n	800a7d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a7ae:	4a0d      	ldr	r2, [pc, #52]	; (800a7e4 <clear_lock+0x44>)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	4413      	add	r3, r2
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d105      	bne.n	800a7ca <clear_lock+0x2a>
 800a7be:	4a09      	ldr	r2, [pc, #36]	; (800a7e4 <clear_lock+0x44>)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	4413      	add	r3, r2
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	60fb      	str	r3, [r7, #12]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2bfe      	cmp	r3, #254	; 0xfe
 800a7d4:	d9eb      	bls.n	800a7ae <clear_lock+0xe>
	}
}
 800a7d6:	bf00      	nop
 800a7d8:	bf00      	nop
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	240002f8 	.word	0x240002f8

0800a7e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	78db      	ldrb	r3, [r3, #3]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d034      	beq.n	800a866 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a800:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	7858      	ldrb	r0, [r3, #1]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a80c:	2301      	movs	r3, #1
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	f7ff fbfc 	bl	800a00c <disk_write>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	73fb      	strb	r3, [r7, #15]
 800a81e:	e022      	b.n	800a866 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	1ad2      	subs	r2, r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	429a      	cmp	r2, r3
 800a834:	d217      	bcs.n	800a866 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	789b      	ldrb	r3, [r3, #2]
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	e010      	b.n	800a860 <sync_window+0x78>
					wsect += fs->fsize;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	4413      	add	r3, r2
 800a846:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	7858      	ldrb	r0, [r3, #1]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a852:	2301      	movs	r3, #1
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	f7ff fbd9 	bl	800a00c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d8eb      	bhi.n	800a83e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a866:	7bfb      	ldrb	r3, [r7, #15]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d01b      	beq.n	800a8c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7ff ffad 	bl	800a7e8 <sync_window>
 800a88e:	4603      	mov	r3, r0
 800a890:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d113      	bne.n	800a8c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	7858      	ldrb	r0, [r3, #1]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	f7ff fb91 	bl	8009fcc <disk_read>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
	return res;
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
	...

0800a8cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff ff87 	bl	800a7e8 <sync_window>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d158      	bne.n	800a996 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	d148      	bne.n	800a97e <sync_fs+0xb2>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	791b      	ldrb	r3, [r3, #4]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d144      	bne.n	800a97e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3348      	adds	r3, #72	; 0x48
 800a8f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7ff fda8 	bl	800a454 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3348      	adds	r3, #72	; 0x48
 800a908:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a90c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fcaf 	bl	800a274 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3348      	adds	r3, #72	; 0x48
 800a91a:	4921      	ldr	r1, [pc, #132]	; (800a9a0 <sync_fs+0xd4>)
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff fcc4 	bl	800a2aa <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3348      	adds	r3, #72	; 0x48
 800a926:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a92a:	491e      	ldr	r1, [pc, #120]	; (800a9a4 <sync_fs+0xd8>)
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff fcbc 	bl	800a2aa <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	3348      	adds	r3, #72	; 0x48
 800a936:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f7ff fcb2 	bl	800a2aa <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3348      	adds	r3, #72	; 0x48
 800a94a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f7ff fca8 	bl	800a2aa <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95e:	1c5a      	adds	r2, r3, #1
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	645a      	str	r2, [r3, #68]	; 0x44
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7858      	ldrb	r0, [r3, #1]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a972:	2301      	movs	r3, #1
 800a974:	f7ff fb4a 	bl	800a00c <disk_write>
			fs->fsi_flag = 0;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	785b      	ldrb	r3, [r3, #1]
 800a982:	2200      	movs	r2, #0
 800a984:	2100      	movs	r1, #0
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff fb60 	bl	800a04c <disk_ioctl>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <sync_fs+0xca>
 800a992:	2301      	movs	r3, #1
 800a994:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	41615252 	.word	0x41615252
 800a9a4:	61417272 	.word	0x61417272

0800a9a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	3b02      	subs	r3, #2
 800a9b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	3b02      	subs	r3, #2
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d301      	bcc.n	800a9c8 <clust2sect+0x20>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e008      	b.n	800a9da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	895b      	ldrh	r3, [r3, #10]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	fb03 f202 	mul.w	r2, r3, r2
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d8:	4413      	add	r3, r2
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
	...

0800a9e8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	6809      	ldr	r1, [r1, #0]
 800a9f6:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	2901      	cmp	r1, #1
 800a9fc:	d904      	bls.n	800aa08 <get_fat+0x20>
 800a9fe:	69b9      	ldr	r1, [r7, #24]
 800aa00:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800aa02:	6838      	ldr	r0, [r7, #0]
 800aa04:	4288      	cmp	r0, r1
 800aa06:	d302      	bcc.n	800aa0e <get_fat+0x26>
		val = 1;	/* Internal error */
 800aa08:	2301      	movs	r3, #1
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	e102      	b.n	800ac14 <get_fat+0x22c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aa0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa12:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800aa14:	69b9      	ldr	r1, [r7, #24]
 800aa16:	7809      	ldrb	r1, [r1, #0]
 800aa18:	3901      	subs	r1, #1
 800aa1a:	2903      	cmp	r1, #3
 800aa1c:	f200 80ee 	bhi.w	800abfc <get_fat+0x214>
 800aa20:	a001      	add	r0, pc, #4	; (adr r0, 800aa28 <get_fat+0x40>)
 800aa22:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aa26:	bf00      	nop
 800aa28:	0800aa39 	.word	0x0800aa39
 800aa2c:	0800aac1 	.word	0x0800aac1
 800aa30:	0800aaf7 	.word	0x0800aaf7
 800aa34:	0800ab2f 	.word	0x0800ab2f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4413      	add	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	0a5b      	lsrs	r3, r3, #9
 800aa4e:	4413      	add	r3, r2
 800aa50:	4619      	mov	r1, r3
 800aa52:	69b8      	ldr	r0, [r7, #24]
 800aa54:	f7ff ff0c 	bl	800a870 <move_window>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f040 80d1 	bne.w	800ac02 <get_fat+0x21a>
			wc = fs->win[bc++ % SS(fs)];
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	60fa      	str	r2, [r7, #12]
 800aa66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aa72:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	0a5b      	lsrs	r3, r3, #9
 800aa7c:	4413      	add	r3, r2
 800aa7e:	4619      	mov	r1, r3
 800aa80:	69b8      	ldr	r0, [r7, #24]
 800aa82:	f7ff fef5 	bl	800a870 <move_window>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f040 80bc 	bne.w	800ac06 <get_fat+0x21e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	4413      	add	r3, r2
 800aa98:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <get_fat+0xce>
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	091b      	lsrs	r3, r3, #4
 800aab4:	e002      	b.n	800aabc <get_fat+0xd4>
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aabc:	61fb      	str	r3, [r7, #28]
			break;
 800aabe:	e0a9      	b.n	800ac14 <get_fat+0x22c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	0a1b      	lsrs	r3, r3, #8
 800aac8:	4413      	add	r3, r2
 800aaca:	4619      	mov	r1, r3
 800aacc:	69b8      	ldr	r0, [r7, #24]
 800aace:	f7ff fecf 	bl	800a870 <move_window>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f040 8098 	bne.w	800ac0a <get_fat+0x222>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aae8:	4413      	add	r3, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7ff facc 	bl	800a088 <ld_word>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	61fb      	str	r3, [r7, #28]
			break;
 800aaf4:	e08e      	b.n	800ac14 <get_fat+0x22c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	09db      	lsrs	r3, r3, #7
 800aafe:	4413      	add	r3, r2
 800ab00:	4619      	mov	r1, r3
 800ab02:	69b8      	ldr	r0, [r7, #24]
 800ab04:	f7ff feb4 	bl	800a870 <move_window>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d17f      	bne.n	800ac0e <get_fat+0x226>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab1c:	4413      	add	r3, r2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff faca 	bl	800a0b8 <ld_dword>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab2a:	61fb      	str	r3, [r7, #28]
			break;
 800ab2c:	e072      	b.n	800ac14 <get_fat+0x22c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800ab34:	4301      	orrs	r1, r0
 800ab36:	d061      	beq.n	800abfc <get_fat+0x214>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	6889      	ldr	r1, [r1, #8]
 800ab3c:	6838      	ldr	r0, [r7, #0]
 800ab3e:	1a41      	subs	r1, r0, r1
 800ab40:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800ab48:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
 800ab4c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 800ab50:	f04f 0000 	mov.w	r0, #0
 800ab54:	f04f 0100 	mov.w	r1, #0
 800ab58:	0a50      	lsrs	r0, r2, #9
 800ab5a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ab5e:	0a59      	lsrs	r1, r3, #9
 800ab60:	4602      	mov	r2, r0
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	895b      	ldrh	r3, [r3, #10]
 800ab66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab6a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	79db      	ldrb	r3, [r3, #7]
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d10e      	bne.n	800ab92 <get_fat+0x1aa>
					if (cofs <= clen) {
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d80a      	bhi.n	800ab92 <get_fat+0x1aa>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d002      	beq.n	800ab8a <get_fat+0x1a2>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	3301      	adds	r3, #1
 800ab88:	e001      	b.n	800ab8e <get_fat+0x1a6>
 800ab8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ab8e:	61fb      	str	r3, [r7, #28]
						break;
 800ab90:	e040      	b.n	800ac14 <get_fat+0x22c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	79db      	ldrb	r3, [r3, #7]
 800ab96:	2b03      	cmp	r3, #3
 800ab98:	d108      	bne.n	800abac <get_fat+0x1c4>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d203      	bcs.n	800abac <get_fat+0x1c4>
					val = clst + 1; 	/* Generate the value */
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	3301      	adds	r3, #1
 800aba8:	61fb      	str	r3, [r7, #28]
					break;
 800abaa:	e033      	b.n	800ac14 <get_fat+0x22c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	79db      	ldrb	r3, [r3, #7]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d023      	beq.n	800abfc <get_fat+0x214>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <get_fat+0x1dc>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800abbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800abc0:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800abc2:	e027      	b.n	800ac14 <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	09db      	lsrs	r3, r3, #7
 800abcc:	4413      	add	r3, r2
 800abce:	4619      	mov	r1, r3
 800abd0:	69b8      	ldr	r0, [r7, #24]
 800abd2:	f7ff fe4d 	bl	800a870 <move_window>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d11a      	bne.n	800ac12 <get_fat+0x22a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800abea:	4413      	add	r3, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff fa63 	bl	800a0b8 <ld_dword>
 800abf2:	4603      	mov	r3, r0
 800abf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abf8:	61fb      	str	r3, [r7, #28]
					break;
 800abfa:	e00b      	b.n	800ac14 <get_fat+0x22c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800abfc:	2301      	movs	r3, #1
 800abfe:	61fb      	str	r3, [r7, #28]
 800ac00:	e008      	b.n	800ac14 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac02:	bf00      	nop
 800ac04:	e006      	b.n	800ac14 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac06:	bf00      	nop
 800ac08:	e004      	b.n	800ac14 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ac0a:	bf00      	nop
 800ac0c:	e002      	b.n	800ac14 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ac0e:	bf00      	nop
 800ac10:	e000      	b.n	800ac14 <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ac12:	bf00      	nop
		}
	}

	return val;
 800ac14:	69fb      	ldr	r3, [r7, #28]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3720      	adds	r7, #32
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop

0800ac20 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ac20:	b590      	push	{r4, r7, lr}
 800ac22:	b089      	sub	sp, #36	; 0x24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	f240 80d6 	bls.w	800ade4 <put_fat+0x1c4>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	f080 80d0 	bcs.w	800ade4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	f300 80d4 	bgt.w	800adf6 <put_fat+0x1d6>
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	f280 8093 	bge.w	800ad7a <put_fat+0x15a>
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d002      	beq.n	800ac5e <put_fat+0x3e>
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d06e      	beq.n	800ad3a <put_fat+0x11a>
 800ac5c:	e0cb      	b.n	800adf6 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	61bb      	str	r3, [r7, #24]
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	085b      	lsrs	r3, r3, #1
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	4413      	add	r3, r2
 800ac6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	0a5b      	lsrs	r3, r3, #9
 800ac74:	4413      	add	r3, r2
 800ac76:	4619      	mov	r1, r3
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7ff fdf9 	bl	800a870 <move_window>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac82:	7ffb      	ldrb	r3, [r7, #31]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f040 80af 	bne.w	800ade8 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	1c59      	adds	r1, r3, #1
 800ac94:	61b9      	str	r1, [r7, #24]
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	4413      	add	r3, r2
 800ac9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f003 0301 	and.w	r3, r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00d      	beq.n	800acc4 <put_fat+0xa4>
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	b25b      	sxtb	r3, r3
 800acae:	f003 030f 	and.w	r3, r3, #15
 800acb2:	b25a      	sxtb	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	b25b      	sxtb	r3, r3
 800acbc:	4313      	orrs	r3, r2
 800acbe:	b25b      	sxtb	r3, r3
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	e001      	b.n	800acc8 <put_fat+0xa8>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2201      	movs	r2, #1
 800acd0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	0a5b      	lsrs	r3, r3, #9
 800acda:	4413      	add	r3, r2
 800acdc:	4619      	mov	r1, r3
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7ff fdc6 	bl	800a870 <move_window>
 800ace4:	4603      	mov	r3, r0
 800ace6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ace8:	7ffb      	ldrb	r3, [r7, #31]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d17e      	bne.n	800adec <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfa:	4413      	add	r3, r2
 800acfc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <put_fat+0xf0>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	091b      	lsrs	r3, r3, #4
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	e00e      	b.n	800ad2e <put_fat+0x10e>
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	b25b      	sxtb	r3, r3
 800ad16:	f023 030f 	bic.w	r3, r3, #15
 800ad1a:	b25a      	sxtb	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	0a1b      	lsrs	r3, r3, #8
 800ad20:	b25b      	sxtb	r3, r3
 800ad22:	f003 030f 	and.w	r3, r3, #15
 800ad26:	b25b      	sxtb	r3, r3
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	b25b      	sxtb	r3, r3
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	70da      	strb	r2, [r3, #3]
			break;
 800ad38:	e05d      	b.n	800adf6 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	0a1b      	lsrs	r3, r3, #8
 800ad42:	4413      	add	r3, r2
 800ad44:	4619      	mov	r1, r3
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff fd92 	bl	800a870 <move_window>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad50:	7ffb      	ldrb	r3, [r7, #31]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d14c      	bne.n	800adf0 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ad64:	4413      	add	r3, r2
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	b292      	uxth	r2, r2
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7ff fa81 	bl	800a274 <st_word>
			fs->wflag = 1;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2201      	movs	r2, #1
 800ad76:	70da      	strb	r2, [r3, #3]
			break;
 800ad78:	e03d      	b.n	800adf6 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	09db      	lsrs	r3, r3, #7
 800ad82:	4413      	add	r3, r2
 800ad84:	4619      	mov	r1, r3
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f7ff fd72 	bl	800a870 <move_window>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad90:	7ffb      	ldrb	r3, [r7, #31]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d12e      	bne.n	800adf4 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	2b04      	cmp	r3, #4
 800ad9c:	d012      	beq.n	800adc4 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800adb2:	4413      	add	r3, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff f97f 	bl	800a0b8 <ld_dword>
 800adba:	4603      	mov	r3, r0
 800adbc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800adc0:	4323      	orrs	r3, r4
 800adc2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800add2:	4413      	add	r3, r2
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff fa67 	bl	800a2aa <st_dword>
			fs->wflag = 1;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2201      	movs	r2, #1
 800ade0:	70da      	strb	r2, [r3, #3]
			break;
 800ade2:	e008      	b.n	800adf6 <put_fat+0x1d6>
		}
	}
 800ade4:	bf00      	nop
 800ade6:	e006      	b.n	800adf6 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800ade8:	bf00      	nop
 800adea:	e004      	b.n	800adf6 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800adec:	bf00      	nop
 800adee:	e002      	b.n	800adf6 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800adf0:	bf00      	nop
 800adf2:	e000      	b.n	800adf6 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800adf4:	bf00      	nop
	return res;
 800adf6:	7ffb      	ldrb	r3, [r7, #31]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3724      	adds	r7, #36	; 0x24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd90      	pop	{r4, r7, pc}

0800ae00 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b08a      	sub	sp, #40	; 0x28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	3b02      	subs	r3, #2
 800ae10:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	3b02      	subs	r3, #2
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d301      	bcc.n	800ae22 <find_bitmap+0x22>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	61fb      	str	r3, [r7, #28]
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	61bb      	str	r3, [r7, #24]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	0b1b      	lsrs	r3, r3, #12
 800ae36:	4413      	add	r3, r2
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f7ff fd18 	bl	800a870 <move_window>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <find_bitmap+0x4c>
 800ae46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae4a:	e051      	b.n	800aef0 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	08db      	lsrs	r3, r3, #3
 800ae50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae54:	623b      	str	r3, [r7, #32]
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	f003 0307 	and.w	r3, r3, #7
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3348      	adds	r3, #72	; 0x48
 800ae6e:	781a      	ldrb	r2, [r3, #0]
 800ae70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae74:	4013      	ands	r3, r2
 800ae76:	74fb      	strb	r3, [r7, #19]
 800ae78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	3301      	adds	r3, #1
 800ae86:	61fb      	str	r3, [r7, #28]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	3b02      	subs	r3, #2
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d307      	bcc.n	800aea4 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800ae94:	2300      	movs	r3, #0
 800ae96:	61fb      	str	r3, [r7, #28]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aea2:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800aea4:	7cfb      	ldrb	r3, [r7, #19]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d109      	bne.n	800aebe <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	3301      	adds	r3, #1
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d106      	bne.n	800aec6 <find_bitmap+0xc6>
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	3302      	adds	r3, #2
 800aebc:	e018      	b.n	800aef0 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	61bb      	str	r3, [r7, #24]
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d101      	bne.n	800aed2 <find_bitmap+0xd2>
 800aece:	2300      	movs	r3, #0
 800aed0:	e00e      	b.n	800aef0 <find_bitmap+0xf0>
			} while (bm);
 800aed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1c5      	bne.n	800ae66 <find_bitmap+0x66>
			bm = 1;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	3301      	adds	r3, #1
 800aee4:	623b      	str	r3, [r7, #32]
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeec:	d3bb      	bcc.n	800ae66 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800aeee:	e79e      	b.n	800ae2e <find_bitmap+0x2e>
	}
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3728      	adds	r7, #40	; 0x28
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	3b02      	subs	r3, #2
 800af0a:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	0b1b      	lsrs	r3, r3, #12
 800af14:	4413      	add	r3, r2
 800af16:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	08db      	lsrs	r3, r3, #3
 800af1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af20:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f003 0307 	and.w	r3, r3, #7
 800af28:	2201      	movs	r2, #1
 800af2a:	fa02 f303 	lsl.w	r3, r2, r3
 800af2e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	617a      	str	r2, [r7, #20]
 800af36:	4619      	mov	r1, r3
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f7ff fc99 	bl	800a870 <move_window>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <change_bitmap+0x50>
 800af44:	2301      	movs	r3, #1
 800af46:	e03d      	b.n	800afc4 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	4413      	add	r3, r2
 800af4e:	3348      	adds	r3, #72	; 0x48
 800af50:	781a      	ldrb	r2, [r3, #0]
 800af52:	7ffb      	ldrb	r3, [r7, #31]
 800af54:	4013      	ands	r3, r2
 800af56:	b2db      	uxtb	r3, r3
 800af58:	2b00      	cmp	r3, #0
 800af5a:	bf14      	ite	ne
 800af5c:	2301      	movne	r3, #1
 800af5e:	2300      	moveq	r3, #0
 800af60:	b2db      	uxtb	r3, r3
 800af62:	461a      	mov	r2, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	4293      	cmp	r3, r2
 800af68:	d101      	bne.n	800af6e <change_bitmap+0x76>
 800af6a:	2302      	movs	r3, #2
 800af6c:	e02a      	b.n	800afc4 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	4413      	add	r3, r2
 800af74:	3348      	adds	r3, #72	; 0x48
 800af76:	781a      	ldrb	r2, [r3, #0]
 800af78:	7ffb      	ldrb	r3, [r7, #31]
 800af7a:	4053      	eors	r3, r2
 800af7c:	b2d9      	uxtb	r1, r3
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	4413      	add	r3, r2
 800af84:	3348      	adds	r3, #72	; 0x48
 800af86:	460a      	mov	r2, r1
 800af88:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2201      	movs	r2, #1
 800af8e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3b01      	subs	r3, #1
 800af94:	607b      	str	r3, [r7, #4]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <change_bitmap+0xa8>
 800af9c:	2300      	movs	r3, #0
 800af9e:	e011      	b.n	800afc4 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800afa0:	7ffb      	ldrb	r3, [r7, #31]
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	77fb      	strb	r3, [r7, #31]
 800afa6:	7ffb      	ldrb	r3, [r7, #31]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1cd      	bne.n	800af48 <change_bitmap+0x50>
			bm = 1;
 800afac:	2301      	movs	r3, #1
 800afae:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	3301      	adds	r3, #1
 800afb4:	61bb      	str	r3, [r7, #24]
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afbc:	d3c4      	bcc.n	800af48 <change_bitmap+0x50>
		i = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800afc2:	e7b5      	b.n	800af30 <change_bitmap+0x38>
	}
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3720      	adds	r7, #32
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	79db      	ldrb	r3, [r3, #7]
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d121      	bne.n	800b020 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	617b      	str	r3, [r7, #20]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	613b      	str	r3, [r7, #16]
 800afe8:	e014      	b.n	800b014 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	3301      	adds	r3, #1
 800aff2:	461a      	mov	r2, r3
 800aff4:	6979      	ldr	r1, [r7, #20]
 800aff6:	f7ff fe13 	bl	800ac20 <put_fat>
 800affa:	4603      	mov	r3, r0
 800affc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <fill_first_frag+0x3c>
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	e00c      	b.n	800b022 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	3301      	adds	r3, #1
 800b00c:	617b      	str	r3, [r7, #20]
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	3b01      	subs	r3, #1
 800b012:	613b      	str	r3, [r7, #16]
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1e7      	bne.n	800afea <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3718      	adds	r7, #24
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b086      	sub	sp, #24
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b036:	e020      	b.n	800b07a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6818      	ldr	r0, [r3, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	69db      	ldr	r3, [r3, #28]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	1c59      	adds	r1, r3, #1
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d905      	bls.n	800b05a <fill_last_frag+0x30>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	3302      	adds	r3, #2
 800b058:	e000      	b.n	800b05c <fill_last_frag+0x32>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	461a      	mov	r2, r3
 800b05e:	f7ff fddf 	bl	800ac20 <put_fat>
 800b062:	4603      	mov	r3, r0
 800b064:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b066:	7dfb      	ldrb	r3, [r7, #23]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <fill_last_frag+0x46>
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
 800b06e:	e009      	b.n	800b084 <fill_last_frag+0x5a>
		obj->n_frag--;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	1e5a      	subs	r2, r3, #1
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1da      	bne.n	800b038 <fill_last_frag+0xe>
	}
	return FR_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08a      	sub	sp, #40	; 0x28
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d904      	bls.n	800b0ba <remove_chain+0x2e>
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d301      	bcc.n	800b0be <remove_chain+0x32>
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e096      	b.n	800b1ec <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d014      	beq.n	800b0ee <remove_chain+0x62>
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b04      	cmp	r3, #4
 800b0ca:	d103      	bne.n	800b0d4 <remove_chain+0x48>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	79db      	ldrb	r3, [r3, #7]
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d00c      	beq.n	800b0ee <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b0d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	69b8      	ldr	r0, [r7, #24]
 800b0dc:	f7ff fda0 	bl	800ac20 <put_fat>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b0e4:	7ffb      	ldrb	r3, [r7, #31]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <remove_chain+0x62>
 800b0ea:	7ffb      	ldrb	r3, [r7, #31]
 800b0ec:	e07e      	b.n	800b1ec <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f7ff fc79 	bl	800a9e8 <get_fat>
 800b0f6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d055      	beq.n	800b1aa <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d101      	bne.n	800b108 <remove_chain+0x7c>
 800b104:	2302      	movs	r3, #2
 800b106:	e071      	b.n	800b1ec <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b10e:	d101      	bne.n	800b114 <remove_chain+0x88>
 800b110:	2301      	movs	r3, #1
 800b112:	e06b      	b.n	800b1ec <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d00b      	beq.n	800b134 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b11c:	2200      	movs	r2, #0
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	69b8      	ldr	r0, [r7, #24]
 800b122:	f7ff fd7d 	bl	800ac20 <put_fat>
 800b126:	4603      	mov	r3, r0
 800b128:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b12a:	7ffb      	ldrb	r3, [r7, #31]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <remove_chain+0xa8>
 800b130:	7ffb      	ldrb	r3, [r7, #31]
 800b132:	e05b      	b.n	800b1ec <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	699a      	ldr	r2, [r3, #24]
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	3b02      	subs	r3, #2
 800b13e:	429a      	cmp	r2, r3
 800b140:	d20b      	bcs.n	800b15a <remove_chain+0xce>
			fs->free_clst++;
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	791b      	ldrb	r3, [r3, #4]
 800b150:	f043 0301 	orr.w	r3, r3, #1
 800b154:	b2da      	uxtb	r2, r3
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	3301      	adds	r3, #1
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	429a      	cmp	r2, r3
 800b162:	d102      	bne.n	800b16a <remove_chain+0xde>
			ecl = nxt;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	623b      	str	r3, [r7, #32]
 800b168:	e017      	b.n	800b19a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2b04      	cmp	r3, #4
 800b170:	d10f      	bne.n	800b192 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b172:	6a3a      	ldr	r2, [r7, #32]
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	2300      	movs	r3, #0
 800b17c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b17e:	69b8      	ldr	r0, [r7, #24]
 800b180:	f7ff feba 	bl	800aef8 <change_bitmap>
 800b184:	4603      	mov	r3, r0
 800b186:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b188:	7ffb      	ldrb	r3, [r7, #31]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <remove_chain+0x106>
 800b18e:	7ffb      	ldrb	r3, [r7, #31]
 800b190:	e02c      	b.n	800b1ec <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	623b      	str	r3, [r7, #32]
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d3a2      	bcc.n	800b0ee <remove_chain+0x62>
 800b1a8:	e000      	b.n	800b1ac <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b1aa:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d11a      	bne.n	800b1ea <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d103      	bne.n	800b1c2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	71da      	strb	r2, [r3, #7]
 800b1c0:	e013      	b.n	800b1ea <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	79db      	ldrb	r3, [r3, #7]
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d10f      	bne.n	800b1ea <remove_chain+0x15e>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d30a      	bcc.n	800b1ea <remove_chain+0x15e>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	4413      	add	r3, r2
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d802      	bhi.n	800b1ea <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3728      	adds	r7, #40	; 0x28
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b088      	sub	sp, #32
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10d      	bne.n	800b226 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d004      	beq.n	800b220 <create_chain+0x2c>
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21a:	69ba      	ldr	r2, [r7, #24]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d31b      	bcc.n	800b258 <create_chain+0x64>
 800b220:	2301      	movs	r3, #1
 800b222:	61bb      	str	r3, [r7, #24]
 800b224:	e018      	b.n	800b258 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7ff fbdd 	bl	800a9e8 <get_fat>
 800b22e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d801      	bhi.n	800b23a <create_chain+0x46>
 800b236:	2301      	movs	r3, #1
 800b238:	e0d9      	b.n	800b3ee <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b240:	d101      	bne.n	800b246 <create_chain+0x52>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	e0d3      	b.n	800b3ee <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d201      	bcs.n	800b254 <create_chain+0x60>
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	e0cc      	b.n	800b3ee <create_chain+0x1fa>
		scl = clst;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	2b04      	cmp	r3, #4
 800b25e:	d164      	bne.n	800b32a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800b260:	2201      	movs	r2, #1
 800b262:	69b9      	ldr	r1, [r7, #24]
 800b264:	6938      	ldr	r0, [r7, #16]
 800b266:	f7ff fdcb 	bl	800ae00 <find_bitmap>
 800b26a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <create_chain+0x86>
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b278:	d101      	bne.n	800b27e <create_chain+0x8a>
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	e0b7      	b.n	800b3ee <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800b27e:	2301      	movs	r3, #1
 800b280:	2201      	movs	r2, #1
 800b282:	69f9      	ldr	r1, [r7, #28]
 800b284:	6938      	ldr	r0, [r7, #16]
 800b286:	f7ff fe37 	bl	800aef8 <change_bitmap>
 800b28a:	4603      	mov	r3, r0
 800b28c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b28e:	7dfb      	ldrb	r3, [r7, #23]
 800b290:	2b02      	cmp	r3, #2
 800b292:	d101      	bne.n	800b298 <create_chain+0xa4>
 800b294:	2301      	movs	r3, #1
 800b296:	e0aa      	b.n	800b3ee <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d102      	bne.n	800b2a4 <create_chain+0xb0>
 800b29e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2a2:	e0a4      	b.n	800b3ee <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d103      	bne.n	800b2b2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	71da      	strb	r2, [r3, #7]
 800b2b0:	e011      	b.n	800b2d6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	79db      	ldrb	r3, [r3, #7]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d10d      	bne.n	800b2d6 <create_chain+0xe2>
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	69fa      	ldr	r2, [r7, #28]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d008      	beq.n	800b2d6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2203      	movs	r2, #3
 800b2d4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	79db      	ldrb	r3, [r3, #7]
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d064      	beq.n	800b3a8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	69fa      	ldr	r2, [r7, #28]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d10b      	bne.n	800b300 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <create_chain+0x104>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	e000      	b.n	800b2fa <create_chain+0x106>
 800b2f8:	2302      	movs	r3, #2
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	61d3      	str	r3, [r2, #28]
 800b2fe:	e053      	b.n	800b3a8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	69db      	ldr	r3, [r3, #28]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d102      	bne.n	800b30e <create_chain+0x11a>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff fe89 	bl	800b02a <fill_last_frag>
 800b318:	4603      	mov	r3, r0
 800b31a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d142      	bne.n	800b3a8 <create_chain+0x1b4>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2201      	movs	r2, #1
 800b326:	61da      	str	r2, [r3, #28]
 800b328:	e03e      	b.n	800b3a8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	3301      	adds	r3, #1
 800b332:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	69fa      	ldr	r2, [r7, #28]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d307      	bcc.n	800b34e <create_chain+0x15a>
				ncl = 2;
 800b33e:	2302      	movs	r3, #2
 800b340:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b342:	69fa      	ldr	r2, [r7, #28]
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	429a      	cmp	r2, r3
 800b348:	d901      	bls.n	800b34e <create_chain+0x15a>
 800b34a:	2300      	movs	r3, #0
 800b34c:	e04f      	b.n	800b3ee <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b34e:	69f9      	ldr	r1, [r7, #28]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff fb49 	bl	800a9e8 <get_fat>
 800b356:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00e      	beq.n	800b37c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d003      	beq.n	800b36c <create_chain+0x178>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b36a:	d101      	bne.n	800b370 <create_chain+0x17c>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	e03e      	b.n	800b3ee <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b370:	69fa      	ldr	r2, [r7, #28]
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	429a      	cmp	r2, r3
 800b376:	d1da      	bne.n	800b32e <create_chain+0x13a>
 800b378:	2300      	movs	r3, #0
 800b37a:	e038      	b.n	800b3ee <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b37c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b37e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b382:	69f9      	ldr	r1, [r7, #28]
 800b384:	6938      	ldr	r0, [r7, #16]
 800b386:	f7ff fc4b 	bl	800ac20 <put_fat>
 800b38a:	4603      	mov	r3, r0
 800b38c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d109      	bne.n	800b3a8 <create_chain+0x1b4>
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d006      	beq.n	800b3a8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6938      	ldr	r0, [r7, #16]
 800b3a0:	f7ff fc3e 	bl	800ac20 <put_fat>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d116      	bne.n	800b3dc <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	699a      	ldr	r2, [r3, #24]
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	3b02      	subs	r3, #2
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d804      	bhi.n	800b3cc <create_chain+0x1d8>
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	1e5a      	subs	r2, r3, #1
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	791b      	ldrb	r3, [r3, #4]
 800b3d0:	f043 0301 	orr.w	r3, r3, #1
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	711a      	strb	r2, [r3, #4]
 800b3da:	e007      	b.n	800b3ec <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d102      	bne.n	800b3e8 <create_chain+0x1f4>
 800b3e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3e6:	e000      	b.n	800b3ea <create_chain+0x1f6>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b3ec:	69fb      	ldr	r3, [r7, #28]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3720      	adds	r7, #32
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b088      	sub	sp, #32
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b40c:	3304      	adds	r3, #4
 800b40e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b414:	f04f 0000 	mov.w	r0, #0
 800b418:	f04f 0100 	mov.w	r1, #0
 800b41c:	0a50      	lsrs	r0, r2, #9
 800b41e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b422:	0a59      	lsrs	r1, r3, #9
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	895b      	ldrh	r3, [r3, #10]
 800b428:	b29a      	uxth	r2, r3
 800b42a:	f04f 0300 	mov.w	r3, #0
 800b42e:	f7f4 ffaf 	bl	8000390 <__aeabi_uldivmod>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4613      	mov	r3, r2
 800b438:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	1d1a      	adds	r2, r3, #4
 800b43e:	61ba      	str	r2, [r7, #24]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <clmt_clust+0x58>
 800b44a:	2300      	movs	r3, #0
 800b44c:	e010      	b.n	800b470 <clmt_clust+0x7a>
		if (cl < ncl) break;	/* In this fragment? */
 800b44e:	69fa      	ldr	r2, [r7, #28]
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	429a      	cmp	r2, r3
 800b454:	d307      	bcc.n	800b466 <clmt_clust+0x70>
		cl -= ncl; tbl++;		/* Next fragment */
 800b456:	69fa      	ldr	r2, [r7, #28]
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	61fb      	str	r3, [r7, #28]
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	3304      	adds	r3, #4
 800b462:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b464:	e7e9      	b.n	800b43a <clmt_clust+0x44>
		if (cl < ncl) break;	/* In this fragment? */
 800b466:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	4413      	add	r3, r2
}
 800b470:	4618      	mov	r0, r3
 800b472:	3720      	adds	r7, #32
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	d102      	bne.n	800b496 <dir_sdi+0x1e>
 800b490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b494:	e001      	b.n	800b49a <dir_sdi+0x22>
 800b496:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d904      	bls.n	800b4aa <dir_sdi+0x32>
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	f003 031f 	and.w	r3, r3, #31
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <dir_sdi+0x36>
		return FR_INT_ERR;
 800b4aa:	2302      	movs	r3, #2
 800b4ac:	e066      	b.n	800b57c <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d109      	bne.n	800b4d4 <dir_sdi+0x5c>
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d905      	bls.n	800b4d4 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4cc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10c      	bne.n	800b4f4 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	095b      	lsrs	r3, r3, #5
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	8912      	ldrh	r2, [r2, #8]
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d301      	bcc.n	800b4ea <dir_sdi+0x72>
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	e048      	b.n	800b57c <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	639a      	str	r2, [r3, #56]	; 0x38
 800b4f2:	e029      	b.n	800b548 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	895b      	ldrh	r3, [r3, #10]
 800b4f8:	025b      	lsls	r3, r3, #9
 800b4fa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b4fc:	e019      	b.n	800b532 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6979      	ldr	r1, [r7, #20]
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff fa70 	bl	800a9e8 <get_fat>
 800b508:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b510:	d101      	bne.n	800b516 <dir_sdi+0x9e>
 800b512:	2301      	movs	r3, #1
 800b514:	e032      	b.n	800b57c <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d904      	bls.n	800b526 <dir_sdi+0xae>
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	429a      	cmp	r2, r3
 800b524:	d301      	bcc.n	800b52a <dir_sdi+0xb2>
 800b526:	2302      	movs	r3, #2
 800b528:	e028      	b.n	800b57c <dir_sdi+0x104>
			ofs -= csz;
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	429a      	cmp	r2, r3
 800b538:	d2e1      	bcs.n	800b4fe <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800b53a:	6979      	ldr	r1, [r7, #20]
 800b53c:	6938      	ldr	r0, [r7, #16]
 800b53e:	f7ff fa33 	bl	800a9a8 <clust2sect>
 800b542:	4602      	mov	r2, r0
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <dir_sdi+0xe2>
 800b556:	2302      	movs	r3, #2
 800b558:	e010      	b.n	800b57c <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	0a5b      	lsrs	r3, r3, #9
 800b562:	441a      	add	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b574:	441a      	add	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b598:	3320      	adds	r3, #32
 800b59a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00b      	beq.n	800b5bc <dir_next+0x38>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b04      	cmp	r3, #4
 800b5aa:	d102      	bne.n	800b5b2 <dir_next+0x2e>
 800b5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5b0:	e001      	b.n	800b5b6 <dir_next+0x32>
 800b5b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d801      	bhi.n	800b5c0 <dir_next+0x3c>
 800b5bc:	2304      	movs	r3, #4
 800b5be:	e0b2      	b.n	800b726 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f040 80a0 	bne.w	800b70c <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10b      	bne.n	800b5f6 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	095b      	lsrs	r3, r3, #5
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	8912      	ldrh	r2, [r2, #8]
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	f0c0 8090 	bcc.w	800b70c <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	639a      	str	r2, [r3, #56]	; 0x38
 800b5f2:	2304      	movs	r3, #4
 800b5f4:	e097      	b.n	800b726 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	0a5b      	lsrs	r3, r3, #9
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	8952      	ldrh	r2, [r2, #10]
 800b5fe:	3a01      	subs	r2, #1
 800b600:	4013      	ands	r3, r2
 800b602:	2b00      	cmp	r3, #0
 800b604:	f040 8082 	bne.w	800b70c <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60e:	4619      	mov	r1, r3
 800b610:	4610      	mov	r0, r2
 800b612:	f7ff f9e9 	bl	800a9e8 <get_fat>
 800b616:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d801      	bhi.n	800b622 <dir_next+0x9e>
 800b61e:	2302      	movs	r3, #2
 800b620:	e081      	b.n	800b726 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b628:	d101      	bne.n	800b62e <dir_next+0xaa>
 800b62a:	2301      	movs	r3, #1
 800b62c:	e07b      	b.n	800b726 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b632:	697a      	ldr	r2, [r7, #20]
 800b634:	429a      	cmp	r2, r3
 800b636:	d35f      	bcc.n	800b6f8 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d104      	bne.n	800b648 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	639a      	str	r2, [r3, #56]	; 0x38
 800b644:	2304      	movs	r3, #4
 800b646:	e06e      	b.n	800b726 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f7ff fdcf 	bl	800b1f4 <create_chain>
 800b656:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <dir_next+0xde>
 800b65e:	2307      	movs	r3, #7
 800b660:	e061      	b.n	800b726 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d101      	bne.n	800b66c <dir_next+0xe8>
 800b668:	2302      	movs	r3, #2
 800b66a:	e05c      	b.n	800b726 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b672:	d101      	bne.n	800b678 <dir_next+0xf4>
 800b674:	2301      	movs	r3, #1
 800b676:	e056      	b.n	800b726 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	79db      	ldrb	r3, [r3, #7]
 800b67c:	f043 0304 	orr.w	r3, r3, #4
 800b680:	b2da      	uxtb	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f7ff f8ae 	bl	800a7e8 <sync_window>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <dir_next+0x112>
 800b692:	2301      	movs	r3, #1
 800b694:	e047      	b.n	800b726 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3348      	adds	r3, #72	; 0x48
 800b69a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b69e:	2100      	movs	r1, #0
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fed7 	bl	800a454 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	613b      	str	r3, [r7, #16]
 800b6aa:	6979      	ldr	r1, [r7, #20]
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f7ff f97b 	bl	800a9a8 <clust2sect>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	645a      	str	r2, [r3, #68]	; 0x44
 800b6b8:	e012      	b.n	800b6e0 <dir_next+0x15c>
						fs->wflag = 1;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f7ff f891 	bl	800a7e8 <sync_window>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <dir_next+0x14c>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e02a      	b.n	800b726 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	613b      	str	r3, [r7, #16]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	645a      	str	r2, [r3, #68]	; 0x44
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	895b      	ldrh	r3, [r3, #10]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d3e6      	bcc.n	800b6ba <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	1ad2      	subs	r2, r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	645a      	str	r2, [r3, #68]	; 0x44
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b6fe:	6979      	ldr	r1, [r7, #20]
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f7ff f951 	bl	800a9a8 <clust2sect>
 800b706:	4602      	mov	r2, r0
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71e:	441a      	add	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b086      	sub	sp, #24
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b73e:	2100      	movs	r1, #0
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7ff fe99 	bl	800b478 <dir_sdi>
 800b746:	4603      	mov	r3, r0
 800b748:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d140      	bne.n	800b7d2 <dir_alloc+0xa4>
		n = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b758:	4619      	mov	r1, r3
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f7ff f888 	bl	800a870 <move_window>
 800b760:	4603      	mov	r3, r0
 800b762:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d132      	bne.n	800b7d0 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d108      	bne.n	800b784 <dir_alloc+0x56>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b25b      	sxtb	r3, r3
 800b77a:	43db      	mvns	r3, r3
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	09db      	lsrs	r3, r3, #7
 800b780:	b2db      	uxtb	r3, r3
 800b782:	e00f      	b.n	800b7a4 <dir_alloc+0x76>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	2be5      	cmp	r3, #229	; 0xe5
 800b78c:	d004      	beq.n	800b798 <dir_alloc+0x6a>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <dir_alloc+0x6e>
 800b798:	2301      	movs	r3, #1
 800b79a:	e000      	b.n	800b79e <dir_alloc+0x70>
 800b79c:	2300      	movs	r3, #0
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d007      	beq.n	800b7b8 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	613b      	str	r3, [r7, #16]
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d102      	bne.n	800b7bc <dir_alloc+0x8e>
 800b7b6:	e00c      	b.n	800b7d2 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b7bc:	2101      	movs	r1, #1
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7ff fee0 	bl	800b584 <dir_next>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0c2      	beq.n	800b754 <dir_alloc+0x26>
 800b7ce:	e000      	b.n	800b7d2 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b7d0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	d101      	bne.n	800b7dc <dir_alloc+0xae>
 800b7d8:	2307      	movs	r3, #7
 800b7da:	75fb      	strb	r3, [r7, #23]
	return res;
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	331a      	adds	r3, #26
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe fc47 	bl	800a088 <ld_word>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2b03      	cmp	r3, #3
 800b804:	d109      	bne.n	800b81a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	3314      	adds	r3, #20
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fc3c 	bl	800a088 <ld_word>
 800b810:	4603      	mov	r3, r0
 800b812:	041b      	lsls	r3, r3, #16
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	4313      	orrs	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b81a:	68fb      	ldr	r3, [r7, #12]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	331a      	adds	r3, #26
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	b292      	uxth	r2, r2
 800b838:	4611      	mov	r1, r2
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe fd1a 	bl	800a274 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	2b03      	cmp	r3, #3
 800b846:	d109      	bne.n	800b85c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f103 0214 	add.w	r2, r3, #20
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	0c1b      	lsrs	r3, r3, #16
 800b852:	b29b      	uxth	r3, r3
 800b854:	4619      	mov	r1, r3
 800b856:	4610      	mov	r0, r2
 800b858:	f7fe fd0c 	bl	800a274 <st_word>
	}
}
 800b85c:	bf00      	nop
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	331a      	adds	r3, #26
 800b872:	4618      	mov	r0, r3
 800b874:	f7fe fc08 	bl	800a088 <ld_word>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <cmp_lfn+0x1e>
 800b87e:	2300      	movs	r3, #0
 800b880:	e059      	b.n	800b936 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b88a:	1e5a      	subs	r2, r3, #1
 800b88c:	4613      	mov	r3, r2
 800b88e:	005b      	lsls	r3, r3, #1
 800b890:	4413      	add	r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	4413      	add	r3, r2
 800b896:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b898:	2301      	movs	r3, #1
 800b89a:	81fb      	strh	r3, [r7, #14]
 800b89c:	2300      	movs	r3, #0
 800b89e:	613b      	str	r3, [r7, #16]
 800b8a0:	e033      	b.n	800b90a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b8a2:	4a27      	ldr	r2, [pc, #156]	; (800b940 <cmp_lfn+0xdc>)
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fe fbe9 	bl	800a088 <ld_word>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b8ba:	89fb      	ldrh	r3, [r7, #14]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d01a      	beq.n	800b8f6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	2bfe      	cmp	r3, #254	; 0xfe
 800b8c4:	d812      	bhi.n	800b8ec <cmp_lfn+0x88>
 800b8c6:	89bb      	ldrh	r3, [r7, #12]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f002 fec1 	bl	800e650 <ff_wtoupper>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	461c      	mov	r4, r3
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	617a      	str	r2, [r7, #20]
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	4413      	add	r3, r2
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f002 feb5 	bl	800e650 <ff_wtoupper>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	429c      	cmp	r4, r3
 800b8ea:	d001      	beq.n	800b8f0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	e022      	b.n	800b936 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b8f0:	89bb      	ldrh	r3, [r7, #12]
 800b8f2:	81fb      	strh	r3, [r7, #14]
 800b8f4:	e006      	b.n	800b904 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b8f6:	89bb      	ldrh	r3, [r7, #12]
 800b8f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d001      	beq.n	800b904 <cmp_lfn+0xa0>
 800b900:	2300      	movs	r3, #0
 800b902:	e018      	b.n	800b936 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	3301      	adds	r3, #1
 800b908:	613b      	str	r3, [r7, #16]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	2b0c      	cmp	r3, #12
 800b90e:	d9c8      	bls.n	800b8a2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <cmp_lfn+0xd0>
 800b91c:	89fb      	ldrh	r3, [r7, #14]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d008      	beq.n	800b934 <cmp_lfn+0xd0>
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	005b      	lsls	r3, r3, #1
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	4413      	add	r3, r2
 800b92a:	881b      	ldrh	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d001      	beq.n	800b934 <cmp_lfn+0xd0>
 800b930:	2300      	movs	r3, #0
 800b932:	e000      	b.n	800b936 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b934:	2301      	movs	r3, #1
}
 800b936:	4618      	mov	r0, r3
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd90      	pop	{r4, r7, pc}
 800b93e:	bf00      	nop
 800b940:	0800faf4 	.word	0x0800faf4

0800b944 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	331a      	adds	r3, #26
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe fb98 	bl	800a088 <ld_word>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <pick_lfn+0x1e>
 800b95e:	2300      	movs	r3, #0
 800b960:	e04d      	b.n	800b9fe <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b96a:	1e5a      	subs	r2, r3, #1
 800b96c:	4613      	mov	r3, r2
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4413      	add	r3, r2
 800b976:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b978:	2301      	movs	r3, #1
 800b97a:	81fb      	strh	r3, [r7, #14]
 800b97c:	2300      	movs	r3, #0
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	e028      	b.n	800b9d4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b982:	4a21      	ldr	r2, [pc, #132]	; (800ba08 <pick_lfn+0xc4>)
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	4413      	add	r3, r2
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	4413      	add	r3, r2
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe fb79 	bl	800a088 <ld_word>
 800b996:	4603      	mov	r3, r0
 800b998:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b99a:	89fb      	ldrh	r3, [r7, #14]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00f      	beq.n	800b9c0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2bfe      	cmp	r3, #254	; 0xfe
 800b9a4:	d901      	bls.n	800b9aa <pick_lfn+0x66>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e029      	b.n	800b9fe <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b9aa:	89bb      	ldrh	r3, [r7, #12]
 800b9ac:	81fb      	strh	r3, [r7, #14]
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	617a      	str	r2, [r7, #20]
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	89fa      	ldrh	r2, [r7, #14]
 800b9bc:	801a      	strh	r2, [r3, #0]
 800b9be:	e006      	b.n	800b9ce <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b9c0:	89bb      	ldrh	r3, [r7, #12]
 800b9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d001      	beq.n	800b9ce <pick_lfn+0x8a>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e017      	b.n	800b9fe <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	613b      	str	r3, [r7, #16]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	2b0c      	cmp	r3, #12
 800b9d8:	d9d3      	bls.n	800b982 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2bfe      	cmp	r3, #254	; 0xfe
 800b9ea:	d901      	bls.n	800b9f0 <pick_lfn+0xac>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	e006      	b.n	800b9fe <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b9fc:	2301      	movs	r3, #1
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3718      	adds	r7, #24
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	0800faf4 	.word	0x0800faf4

0800ba0c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	4611      	mov	r1, r2
 800ba18:	461a      	mov	r2, r3
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	71fb      	strb	r3, [r7, #7]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	330d      	adds	r3, #13
 800ba26:	79ba      	ldrb	r2, [r7, #6]
 800ba28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	330b      	adds	r3, #11
 800ba2e:	220f      	movs	r2, #15
 800ba30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	330c      	adds	r3, #12
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	331a      	adds	r3, #26
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fc17 	bl	800a274 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	1e5a      	subs	r2, r3, #1
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	82fb      	strh	r3, [r7, #22]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ba5e:	8afb      	ldrh	r3, [r7, #22]
 800ba60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d007      	beq.n	800ba78 <put_lfn+0x6c>
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	61fa      	str	r2, [r7, #28]
 800ba6e:	005b      	lsls	r3, r3, #1
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	4413      	add	r3, r2
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ba78:	4a17      	ldr	r2, [pc, #92]	; (800bad8 <put_lfn+0xcc>)
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	461a      	mov	r2, r3
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4413      	add	r3, r2
 800ba86:	8afa      	ldrh	r2, [r7, #22]
 800ba88:	4611      	mov	r1, r2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe fbf2 	bl	800a274 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ba90:	8afb      	ldrh	r3, [r7, #22]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d102      	bne.n	800ba9c <put_lfn+0x90>
 800ba96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba9a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	61bb      	str	r3, [r7, #24]
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	2b0c      	cmp	r3, #12
 800baa6:	d9da      	bls.n	800ba5e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800baa8:	8afb      	ldrh	r3, [r7, #22]
 800baaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baae:	4293      	cmp	r3, r2
 800bab0:	d006      	beq.n	800bac0 <put_lfn+0xb4>
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	4413      	add	r3, r2
 800baba:	881b      	ldrh	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d103      	bne.n	800bac8 <put_lfn+0xbc>
 800bac0:	79fb      	ldrb	r3, [r7, #7]
 800bac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bac6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	79fa      	ldrb	r2, [r7, #7]
 800bacc:	701a      	strb	r2, [r3, #0]
}
 800bace:	bf00      	nop
 800bad0:	3720      	adds	r7, #32
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	0800faf4 	.word	0x0800faf4

0800badc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08c      	sub	sp, #48	; 0x30
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800baea:	220b      	movs	r2, #11
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f7fe fc8f 	bl	800a412 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b05      	cmp	r3, #5
 800baf8:	d929      	bls.n	800bb4e <gen_numname+0x72>
		sr = seq;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bafe:	e020      	b.n	800bb42 <gen_numname+0x66>
			wc = *lfn++;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	1c9a      	adds	r2, r3, #2
 800bb04:	607a      	str	r2, [r7, #4]
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb0e:	e015      	b.n	800bb3c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	005a      	lsls	r2, r3, #1
 800bb14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	4413      	add	r3, r2
 800bb1c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bb1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb20:	085b      	lsrs	r3, r3, #1
 800bb22:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <gen_numname+0x5a>
 800bb2e:	69fa      	ldr	r2, [r7, #28]
 800bb30:	4b31      	ldr	r3, [pc, #196]	; (800bbf8 <gen_numname+0x11c>)
 800bb32:	4053      	eors	r3, r2
 800bb34:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	3301      	adds	r3, #1
 800bb3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	2b0f      	cmp	r3, #15
 800bb40:	d9e6      	bls.n	800bb10 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1da      	bne.n	800bb00 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bb4e:	2307      	movs	r3, #7
 800bb50:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	f003 030f 	and.w	r3, r3, #15
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	3330      	adds	r3, #48	; 0x30
 800bb5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bb62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb66:	2b39      	cmp	r3, #57	; 0x39
 800bb68:	d904      	bls.n	800bb74 <gen_numname+0x98>
 800bb6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb6e:	3307      	adds	r3, #7
 800bb70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb76:	1e5a      	subs	r2, r3, #1
 800bb78:	62ba      	str	r2, [r7, #40]	; 0x28
 800bb7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bb7e:	4413      	add	r3, r2
 800bb80:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bb84:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	091b      	lsrs	r3, r3, #4
 800bb8c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1de      	bne.n	800bb52 <gen_numname+0x76>
	ns[i] = '~';
 800bb94:	f107 0214 	add.w	r2, r7, #20
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	4413      	add	r3, r2
 800bb9c:	227e      	movs	r2, #126	; 0x7e
 800bb9e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bba0:	2300      	movs	r3, #0
 800bba2:	627b      	str	r3, [r7, #36]	; 0x24
 800bba4:	e002      	b.n	800bbac <gen_numname+0xd0>
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	3301      	adds	r3, #1
 800bbaa:	627b      	str	r3, [r7, #36]	; 0x24
 800bbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d205      	bcs.n	800bbc0 <gen_numname+0xe4>
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb8:	4413      	add	r3, r2
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b20      	cmp	r3, #32
 800bbbe:	d1f2      	bne.n	800bba6 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	2b07      	cmp	r3, #7
 800bbc4:	d808      	bhi.n	800bbd8 <gen_numname+0xfc>
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	62ba      	str	r2, [r7, #40]	; 0x28
 800bbcc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bbd6:	e000      	b.n	800bbda <gen_numname+0xfe>
 800bbd8:	2120      	movs	r1, #32
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	1c5a      	adds	r2, r3, #1
 800bbde:	627a      	str	r2, [r7, #36]	; 0x24
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	460a      	mov	r2, r1
 800bbe6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	2b07      	cmp	r3, #7
 800bbec:	d9e8      	bls.n	800bbc0 <gen_numname+0xe4>
}
 800bbee:	bf00      	nop
 800bbf0:	bf00      	nop
 800bbf2:	3730      	adds	r7, #48	; 0x30
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	00011021 	.word	0x00011021

0800bbfc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bc08:	230b      	movs	r3, #11
 800bc0a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	0852      	lsrs	r2, r2, #1
 800bc12:	01db      	lsls	r3, r3, #7
 800bc14:	4313      	orrs	r3, r2
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	1c59      	adds	r1, r3, #1
 800bc1c:	6079      	str	r1, [r7, #4]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	4413      	add	r3, r2
 800bc22:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	3b01      	subs	r3, #1
 800bc28:	60bb      	str	r3, [r7, #8]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1ed      	bne.n	800bc0c <sum_sfn+0x10>
	return sum;
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b087      	sub	sp, #28
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	015b      	lsls	r3, r3, #5
 800bc50:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800bc52:	2300      	movs	r3, #0
 800bc54:	827b      	strh	r3, [r7, #18]
 800bc56:	2300      	movs	r3, #0
 800bc58:	617b      	str	r3, [r7, #20]
 800bc5a:	e018      	b.n	800bc8e <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d103      	bne.n	800bc6a <xdir_sum+0x2c>
			i++;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	3301      	adds	r3, #1
 800bc66:	617b      	str	r3, [r7, #20]
 800bc68:	e00e      	b.n	800bc88 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800bc6a:	8a7b      	ldrh	r3, [r7, #18]
 800bc6c:	03db      	lsls	r3, r3, #15
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	8a7b      	ldrh	r3, [r7, #18]
 800bc72:	085b      	lsrs	r3, r3, #1
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	4413      	add	r3, r2
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	440b      	add	r3, r1
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	4413      	add	r3, r2
 800bc86:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	617b      	str	r3, [r7, #20]
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d3e2      	bcc.n	800bc5c <xdir_sum+0x1e>
		}
	}
	return sum;
 800bc96:	8a7b      	ldrh	r3, [r7, #18]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	371c      	adds	r7, #28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800bcac:	2300      	movs	r3, #0
 800bcae:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800bcb0:	e01f      	b.n	800bcf2 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800bcb2:	89bb      	ldrh	r3, [r7, #12]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f002 fccb 	bl	800e650 <ff_wtoupper>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800bcbe:	89fb      	ldrh	r3, [r7, #14]
 800bcc0:	03db      	lsls	r3, r3, #15
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	89fb      	ldrh	r3, [r7, #14]
 800bcc6:	085b      	lsrs	r3, r3, #1
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	4413      	add	r3, r2
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	89bb      	ldrh	r3, [r7, #12]
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	4413      	add	r3, r2
 800bcd6:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800bcd8:	89fb      	ldrh	r3, [r7, #14]
 800bcda:	03db      	lsls	r3, r3, #15
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	89fb      	ldrh	r3, [r7, #14]
 800bce0:	085b      	lsrs	r3, r3, #1
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	4413      	add	r3, r2
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	89bb      	ldrh	r3, [r7, #12]
 800bcea:	0a1b      	lsrs	r3, r3, #8
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	4413      	add	r3, r2
 800bcf0:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	1c9a      	adds	r2, r3, #2
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	81bb      	strh	r3, [r7, #12]
 800bcfc:	89bb      	ldrh	r3, [r7, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1d7      	bne.n	800bcb2 <xname_sum+0xe>
	}
	return sum;
 800bd02:	89fb      	ldrh	r3, [r7, #14]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800bd0c:	b590      	push	{r4, r7, lr}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f7fe fda2 	bl	800a870 <move_window>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <load_xdir+0x2e>
 800bd36:	7bfb      	ldrb	r3, [r7, #15]
 800bd38:	e09f      	b.n	800be7a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b85      	cmp	r3, #133	; 0x85
 800bd42:	d001      	beq.n	800bd48 <load_xdir+0x3c>
 800bd44:	2302      	movs	r3, #2
 800bd46:	e098      	b.n	800be7a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd4c:	2220      	movs	r2, #32
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6938      	ldr	r0, [r7, #16]
 800bd52:	f7fe fb5e 	bl	800a412 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	015b      	lsls	r3, r3, #5
 800bd60:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2b5f      	cmp	r3, #95	; 0x5f
 800bd66:	d903      	bls.n	800bd70 <load_xdir+0x64>
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800bd6e:	d901      	bls.n	800bd74 <load_xdir+0x68>
 800bd70:	2302      	movs	r3, #2
 800bd72:	e082      	b.n	800be7a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800bd74:	2100      	movs	r1, #0
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7ff fc04 	bl	800b584 <dir_next>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d001      	beq.n	800bd8a <load_xdir+0x7e>
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	e077      	b.n	800be7a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd92:	4619      	mov	r1, r3
 800bd94:	4610      	mov	r0, r2
 800bd96:	f7fe fd6b 	bl	800a870 <move_window>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <load_xdir+0x9c>
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
 800bda6:	e068      	b.n	800be7a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2bc0      	cmp	r3, #192	; 0xc0
 800bdb0:	d001      	beq.n	800bdb6 <load_xdir+0xaa>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	e061      	b.n	800be7a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	f103 0020 	add.w	r0, r3, #32
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc0:	2220      	movs	r2, #32
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	f7fe fb25 	bl	800a412 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	3323      	adds	r3, #35	; 0x23
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	332c      	adds	r3, #44	; 0x2c
 800bdd0:	4a2c      	ldr	r2, [pc, #176]	; (800be84 <load_xdir+0x178>)
 800bdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd6:	08db      	lsrs	r3, r3, #3
 800bdd8:	015b      	lsls	r3, r3, #5
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d201      	bcs.n	800bde4 <load_xdir+0xd8>
 800bde0:	2302      	movs	r3, #2
 800bde2:	e04a      	b.n	800be7a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800bde4:	2340      	movs	r3, #64	; 0x40
 800bde6:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800bde8:	2100      	movs	r1, #0
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7ff fbca 	bl	800b584 <dir_next>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <load_xdir+0xf2>
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	e03d      	b.n	800be7a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	4619      	mov	r1, r3
 800be08:	4610      	mov	r0, r2
 800be0a:	f7fe fd31 	bl	800a870 <move_window>
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d001      	beq.n	800be1c <load_xdir+0x110>
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	e02e      	b.n	800be7a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	2bc1      	cmp	r3, #193	; 0xc1
 800be24:	d001      	beq.n	800be2a <load_xdir+0x11e>
 800be26:	2302      	movs	r3, #2
 800be28:	e027      	b.n	800be7a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800be30:	d208      	bcs.n	800be44 <load_xdir+0x138>
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	18d0      	adds	r0, r2, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3c:	2220      	movs	r2, #32
 800be3e:	4619      	mov	r1, r3
 800be40:	f7fe fae7 	bl	800a412 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	3320      	adds	r3, #32
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d3ca      	bcc.n	800bde8 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800be58:	d80e      	bhi.n	800be78 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800be5a:	6938      	ldr	r0, [r7, #16]
 800be5c:	f7ff feef 	bl	800bc3e <xdir_sum>
 800be60:	4603      	mov	r3, r0
 800be62:	461c      	mov	r4, r3
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	3302      	adds	r3, #2
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fe f90d 	bl	800a088 <ld_word>
 800be6e:	4603      	mov	r3, r0
 800be70:	429c      	cmp	r4, r3
 800be72:	d001      	beq.n	800be78 <load_xdir+0x16c>
 800be74:	2302      	movs	r3, #2
 800be76:	e000      	b.n	800be7a <load_xdir+0x16e>
	}
	return FR_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	371c      	adds	r7, #28
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd90      	pop	{r4, r7, pc}
 800be82:	bf00      	nop
 800be84:	88888889 	.word	0x88888889

0800be88 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800be88:	b5b0      	push	{r4, r5, r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800be92:	6839      	ldr	r1, [r7, #0]
 800be94:	6808      	ldr	r0, [r1, #0]
 800be96:	6879      	ldr	r1, [r7, #4]
 800be98:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6a08      	ldr	r0, [r1, #32]
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800bea6:	b2c8      	uxtb	r0, r1
 800bea8:	6879      	ldr	r1, [r7, #4]
 800beaa:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800beb0:	4608      	mov	r0, r1
 800beb2:	f04f 0100 	mov.w	r1, #0
 800beb6:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800beba:	f04f 0500 	mov.w	r5, #0
 800bebe:	ea00 0204 	and.w	r2, r0, r4
 800bec2:	ea01 0305 	and.w	r3, r1, r5
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed8:	4619      	mov	r1, r3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7ff facc 	bl	800b478 <dir_sdi>
 800bee0:	4603      	mov	r3, r0
 800bee2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d104      	bne.n	800bef4 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff ff0e 	bl	800bd0c <load_xdir>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bdb0      	pop	{r4, r5, r7, pc}

0800befe <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800befe:	b590      	push	{r4, r7, lr}
 800bf00:	b087      	sub	sp, #28
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	1c9c      	adds	r4, r3, #2
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff fe93 	bl	800bc3e <xdir_sum>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f7fe f9a9 	bl	800a274 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	3301      	adds	r3, #1
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff faa0 	bl	800b478 <dir_sdi>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bf3c:	e026      	b.n	800bf8c <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf46:	4619      	mov	r1, r3
 800bf48:	4610      	mov	r0, r2
 800bf4a:	f7fe fc91 	bl	800a870 <move_window>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d11d      	bne.n	800bf94 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fe fa56 	bl	800a412 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	613b      	str	r3, [r7, #16]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00e      	beq.n	800bf98 <store_xdir+0x9a>
		dirb += SZDIRE;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	3320      	adds	r3, #32
 800bf7e:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800bf80:	2100      	movs	r1, #0
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff fafe 	bl	800b584 <dir_next>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bf8c:	7dfb      	ldrb	r3, [r7, #23]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0d5      	beq.n	800bf3e <store_xdir+0x40>
 800bf92:	e002      	b.n	800bf9a <store_xdir+0x9c>
		if (res != FR_OK) break;
 800bf94:	bf00      	nop
 800bf96:	e000      	b.n	800bf9a <store_xdir+0x9c>
		if (--nent == 0) break;
 800bf98:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <store_xdir+0xa8>
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d101      	bne.n	800bfaa <store_xdir+0xac>
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	e000      	b.n	800bfac <store_xdir+0xae>
 800bfaa:	2302      	movs	r3, #2
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	371c      	adds	r7, #28
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd90      	pop	{r4, r7, pc}

0800bfb4 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800bfb4:	b590      	push	{r4, r7, lr}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800bfbe:	2240      	movs	r2, #64	; 0x40
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7fe fa46 	bl	800a454 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2285      	movs	r2, #133	; 0x85
 800bfcc:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	3320      	adds	r3, #32
 800bfd2:	22c0      	movs	r2, #192	; 0xc0
 800bfd4:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	72bb      	strb	r3, [r7, #10]
 800bfda:	2301      	movs	r3, #1
 800bfdc:	72fb      	strb	r3, [r7, #11]
 800bfde:	2301      	movs	r3, #1
 800bfe0:	813b      	strh	r3, [r7, #8]
 800bfe2:	2340      	movs	r3, #64	; 0x40
 800bfe4:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	60fa      	str	r2, [r7, #12]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	4413      	add	r3, r2
 800bff0:	22c1      	movs	r2, #193	; 0xc1
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	1c5a      	adds	r2, r3, #1
 800bff8:	60fa      	str	r2, [r7, #12]
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	4413      	add	r3, r2
 800bffe:	2200      	movs	r2, #0
 800c000:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c002:	893b      	ldrh	r3, [r7, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00b      	beq.n	800c020 <create_xdir+0x6c>
 800c008:	7abb      	ldrb	r3, [r7, #10]
 800c00a:	005b      	lsls	r3, r3, #1
 800c00c:	683a      	ldr	r2, [r7, #0]
 800c00e:	4413      	add	r3, r2
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	813b      	strh	r3, [r7, #8]
 800c014:	893b      	ldrh	r3, [r7, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d002      	beq.n	800c020 <create_xdir+0x6c>
 800c01a:	7abb      	ldrb	r3, [r7, #10]
 800c01c:	3301      	adds	r3, #1
 800c01e:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	4413      	add	r3, r2
 800c026:	893a      	ldrh	r2, [r7, #8]
 800c028:	4611      	mov	r1, r2
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe f922 	bl	800a274 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	3302      	adds	r3, #2
 800c034:	60fb      	str	r3, [r7, #12]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f003 031f 	and.w	r3, r3, #31
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1e0      	bne.n	800c002 <create_xdir+0x4e>
		nb++;
 800c040:	7afb      	ldrb	r3, [r7, #11]
 800c042:	3301      	adds	r3, #1
 800c044:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c046:	7abb      	ldrb	r3, [r7, #10]
 800c048:	005b      	lsls	r3, r3, #1
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	4413      	add	r3, r2
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1c8      	bne.n	800bfe6 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3323      	adds	r3, #35	; 0x23
 800c058:	7aba      	ldrb	r2, [r7, #10]
 800c05a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3301      	adds	r3, #1
 800c060:	7afa      	ldrb	r2, [r7, #11]
 800c062:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800c06a:	6838      	ldr	r0, [r7, #0]
 800c06c:	f7ff fe1a 	bl	800bca4 <xname_sum>
 800c070:	4603      	mov	r3, r0
 800c072:	4619      	mov	r1, r3
 800c074:	4620      	mov	r0, r4
 800c076:	f7fe f8fd 	bl	800a274 <st_word>
}
 800c07a:	bf00      	nop
 800c07c:	3714      	adds	r7, #20
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd90      	pop	{r4, r7, pc}

0800c082 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b086      	sub	sp, #24
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c08c:	2304      	movs	r3, #4
 800c08e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c096:	23ff      	movs	r3, #255	; 0xff
 800c098:	757b      	strb	r3, [r7, #21]
 800c09a:	23ff      	movs	r3, #255	; 0xff
 800c09c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c09e:	e09f      	b.n	800c1e0 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6938      	ldr	r0, [r7, #16]
 800c0a8:	f7fe fbe2 	bl	800a870 <move_window>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c0b0:	7dfb      	ldrb	r3, [r7, #23]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f040 809a 	bne.w	800c1ec <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c0c0:	7dbb      	ldrb	r3, [r7, #22]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d102      	bne.n	800c0cc <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c0c6:	2304      	movs	r3, #4
 800c0c8:	75fb      	strb	r3, [r7, #23]
 800c0ca:	e096      	b.n	800c1fa <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	2b04      	cmp	r3, #4
 800c0d2:	d118      	bne.n	800c106 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c0d4:	7dbb      	ldrb	r3, [r7, #22]
 800c0d6:	2b85      	cmp	r3, #133	; 0x85
 800c0d8:	d179      	bne.n	800c1ce <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff fe12 	bl	800bd0c <load_xdir>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d17e      	bne.n	800c1f0 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	691b      	ldr	r3, [r3, #16]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c104:	e074      	b.n	800c1f0 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c10a:	330b      	adds	r3, #11
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c112:	73fb      	strb	r3, [r7, #15]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	7bfa      	ldrb	r2, [r7, #15]
 800c118:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c11a:	7dbb      	ldrb	r3, [r7, #22]
 800c11c:	2be5      	cmp	r3, #229	; 0xe5
 800c11e:	d00e      	beq.n	800c13e <dir_read+0xbc>
 800c120:	7dbb      	ldrb	r3, [r7, #22]
 800c122:	2b2e      	cmp	r3, #46	; 0x2e
 800c124:	d00b      	beq.n	800c13e <dir_read+0xbc>
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	f023 0320 	bic.w	r3, r3, #32
 800c12c:	2b08      	cmp	r3, #8
 800c12e:	bf0c      	ite	eq
 800c130:	2301      	moveq	r3, #1
 800c132:	2300      	movne	r3, #0
 800c134:	b2db      	uxtb	r3, r3
 800c136:	461a      	mov	r2, r3
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d002      	beq.n	800c144 <dir_read+0xc2>
				ord = 0xFF;
 800c13e:	23ff      	movs	r3, #255	; 0xff
 800c140:	757b      	strb	r3, [r7, #21]
 800c142:	e044      	b.n	800c1ce <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c144:	7bfb      	ldrb	r3, [r7, #15]
 800c146:	2b0f      	cmp	r3, #15
 800c148:	d12f      	bne.n	800c1aa <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c14a:	7dbb      	ldrb	r3, [r7, #22]
 800c14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00d      	beq.n	800c170 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c158:	7b5b      	ldrb	r3, [r3, #13]
 800c15a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c15c:	7dbb      	ldrb	r3, [r7, #22]
 800c15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c162:	75bb      	strb	r3, [r7, #22]
 800c164:	7dbb      	ldrb	r3, [r7, #22]
 800c166:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c170:	7dba      	ldrb	r2, [r7, #22]
 800c172:	7d7b      	ldrb	r3, [r7, #21]
 800c174:	429a      	cmp	r2, r3
 800c176:	d115      	bne.n	800c1a4 <dir_read+0x122>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c17c:	330d      	adds	r3, #13
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	7d3a      	ldrb	r2, [r7, #20]
 800c182:	429a      	cmp	r2, r3
 800c184:	d10e      	bne.n	800c1a4 <dir_read+0x122>
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	68da      	ldr	r2, [r3, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c18e:	4619      	mov	r1, r3
 800c190:	4610      	mov	r0, r2
 800c192:	f7ff fbd7 	bl	800b944 <pick_lfn>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d003      	beq.n	800c1a4 <dir_read+0x122>
 800c19c:	7d7b      	ldrb	r3, [r7, #21]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	e000      	b.n	800c1a6 <dir_read+0x124>
 800c1a4:	23ff      	movs	r3, #255	; 0xff
 800c1a6:	757b      	strb	r3, [r7, #21]
 800c1a8:	e011      	b.n	800c1ce <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c1aa:	7d7b      	ldrb	r3, [r7, #21]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d109      	bne.n	800c1c4 <dir_read+0x142>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff fd21 	bl	800bbfc <sum_sfn>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	461a      	mov	r2, r3
 800c1be:	7d3b      	ldrb	r3, [r7, #20]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d017      	beq.n	800c1f4 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ca:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800c1cc:	e012      	b.n	800c1f4 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f7ff f9d7 	bl	800b584 <dir_next>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10b      	bne.n	800c1f8 <dir_read+0x176>
	while (dp->sect) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	f47f af5b 	bne.w	800c0a0 <dir_read+0x1e>
 800c1ea:	e006      	b.n	800c1fa <dir_read+0x178>
		if (res != FR_OK) break;
 800c1ec:	bf00      	nop
 800c1ee:	e004      	b.n	800c1fa <dir_read+0x178>
					break;
 800c1f0:	bf00      	nop
 800c1f2:	e002      	b.n	800c1fa <dir_read+0x178>
					break;
 800c1f4:	bf00      	nop
 800c1f6:	e000      	b.n	800c1fa <dir_read+0x178>
		if (res != FR_OK) break;
 800c1f8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c1fa:	7dfb      	ldrb	r3, [r7, #23]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <dir_read+0x184>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800c206:	7dfb      	ldrb	r3, [r7, #23]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c210:	b590      	push	{r4, r7, lr}
 800c212:	b089      	sub	sp, #36	; 0x24
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c21e:	2100      	movs	r1, #0
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7ff f929 	bl	800b478 <dir_sdi>
 800c226:	4603      	mov	r3, r0
 800c228:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c22a:	7ffb      	ldrb	r3, [r7, #31]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <dir_find+0x24>
 800c230:	7ffb      	ldrb	r3, [r7, #31]
 800c232:	e112      	b.n	800c45a <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b04      	cmp	r3, #4
 800c23a:	d164      	bne.n	800c306 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff fd2f 	bl	800bca4 <xname_sum>
 800c246:	4603      	mov	r3, r0
 800c248:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c24a:	e04f      	b.n	800c2ec <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	3324      	adds	r3, #36	; 0x24
 800c252:	4618      	mov	r0, r3
 800c254:	f7fd ff18 	bl	800a088 <ld_word>
 800c258:	4603      	mov	r3, r0
 800c25a:	461a      	mov	r2, r3
 800c25c:	893b      	ldrh	r3, [r7, #8]
 800c25e:	4293      	cmp	r3, r2
 800c260:	d000      	beq.n	800c264 <dir_find+0x54>
 800c262:	e043      	b.n	800c2ec <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c26c:	76fb      	strb	r3, [r7, #27]
 800c26e:	2340      	movs	r3, #64	; 0x40
 800c270:	617b      	str	r3, [r7, #20]
 800c272:	2300      	movs	r3, #0
 800c274:	613b      	str	r3, [r7, #16]
 800c276:	e029      	b.n	800c2cc <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f003 031f 	and.w	r3, r3, #31
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d102      	bne.n	800c288 <dir_find+0x78>
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	3302      	adds	r3, #2
 800c286:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	691a      	ldr	r2, [r3, #16]
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	4413      	add	r3, r2
 800c290:	4618      	mov	r0, r3
 800c292:	f7fd fef9 	bl	800a088 <ld_word>
 800c296:	4603      	mov	r3, r0
 800c298:	4618      	mov	r0, r3
 800c29a:	f002 f9d9 	bl	800e650 <ff_wtoupper>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	461c      	mov	r4, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68da      	ldr	r2, [r3, #12]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	005b      	lsls	r3, r3, #1
 800c2aa:	4413      	add	r3, r2
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f002 f9ce 	bl	800e650 <ff_wtoupper>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	429c      	cmp	r4, r3
 800c2b8:	d10c      	bne.n	800c2d4 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c2ba:	7efb      	ldrb	r3, [r7, #27]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	76fb      	strb	r3, [r7, #27]
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	3302      	adds	r3, #2
 800c2c4:	617b      	str	r3, [r7, #20]
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	613b      	str	r3, [r7, #16]
 800c2cc:	7efb      	ldrb	r3, [r7, #27]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1d2      	bne.n	800c278 <dir_find+0x68>
 800c2d2:	e000      	b.n	800c2d6 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c2d4:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c2d6:	7efb      	ldrb	r3, [r7, #27]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d107      	bne.n	800c2ec <dir_find+0xdc>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	68da      	ldr	r2, [r3, #12]
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	4413      	add	r3, r2
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d009      	beq.n	800c300 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff fec7 	bl	800c082 <dir_read>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	77fb      	strb	r3, [r7, #31]
 800c2f8:	7ffb      	ldrb	r3, [r7, #31]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0a6      	beq.n	800c24c <dir_find+0x3c>
 800c2fe:	e000      	b.n	800c302 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c300:	bf00      	nop
		}
		return res;
 800c302:	7ffb      	ldrb	r3, [r7, #31]
 800c304:	e0a9      	b.n	800c45a <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c306:	23ff      	movs	r3, #255	; 0xff
 800c308:	773b      	strb	r3, [r7, #28]
 800c30a:	7f3b      	ldrb	r3, [r7, #28]
 800c30c:	777b      	strb	r3, [r7, #29]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c314:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	4619      	mov	r1, r3
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f7fe faa7 	bl	800a870 <move_window>
 800c322:	4603      	mov	r3, r0
 800c324:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c326:	7ffb      	ldrb	r3, [r7, #31]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f040 8090 	bne.w	800c44e <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c336:	7fbb      	ldrb	r3, [r7, #30]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <dir_find+0x132>
 800c33c:	2304      	movs	r3, #4
 800c33e:	77fb      	strb	r3, [r7, #31]
 800c340:	e08a      	b.n	800c458 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c346:	330b      	adds	r3, #11
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c34e:	72fb      	strb	r3, [r7, #11]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	7afa      	ldrb	r2, [r7, #11]
 800c354:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c356:	7fbb      	ldrb	r3, [r7, #30]
 800c358:	2be5      	cmp	r3, #229	; 0xe5
 800c35a:	d007      	beq.n	800c36c <dir_find+0x15c>
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	f003 0308 	and.w	r3, r3, #8
 800c362:	2b00      	cmp	r3, #0
 800c364:	d009      	beq.n	800c37a <dir_find+0x16a>
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	2b0f      	cmp	r3, #15
 800c36a:	d006      	beq.n	800c37a <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c36c:	23ff      	movs	r3, #255	; 0xff
 800c36e:	777b      	strb	r3, [r7, #29]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c376:	64da      	str	r2, [r3, #76]	; 0x4c
 800c378:	e05e      	b.n	800c438 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c37a:	7afb      	ldrb	r3, [r7, #11]
 800c37c:	2b0f      	cmp	r3, #15
 800c37e:	d136      	bne.n	800c3ee <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d154      	bne.n	800c438 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c38e:	7fbb      	ldrb	r3, [r7, #30]
 800c390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00d      	beq.n	800c3b4 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c39c:	7b5b      	ldrb	r3, [r3, #13]
 800c39e:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c3a0:	7fbb      	ldrb	r3, [r7, #30]
 800c3a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3a6:	77bb      	strb	r3, [r7, #30]
 800c3a8:	7fbb      	ldrb	r3, [r7, #30]
 800c3aa:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c3b4:	7fba      	ldrb	r2, [r7, #30]
 800c3b6:	7f7b      	ldrb	r3, [r7, #29]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d115      	bne.n	800c3e8 <dir_find+0x1d8>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c0:	330d      	adds	r3, #13
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	7f3a      	ldrb	r2, [r7, #28]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d10e      	bne.n	800c3e8 <dir_find+0x1d8>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	f7ff fa45 	bl	800b864 <cmp_lfn>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d003      	beq.n	800c3e8 <dir_find+0x1d8>
 800c3e0:	7f7b      	ldrb	r3, [r7, #29]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	e000      	b.n	800c3ea <dir_find+0x1da>
 800c3e8:	23ff      	movs	r3, #255	; 0xff
 800c3ea:	777b      	strb	r3, [r7, #29]
 800c3ec:	e024      	b.n	800c438 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c3ee:	7f7b      	ldrb	r3, [r7, #29]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d109      	bne.n	800c408 <dir_find+0x1f8>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff fbff 	bl	800bbfc <sum_sfn>
 800c3fe:	4603      	mov	r3, r0
 800c400:	461a      	mov	r2, r3
 800c402:	7f3b      	ldrb	r3, [r7, #28]
 800c404:	4293      	cmp	r3, r2
 800c406:	d024      	beq.n	800c452 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10a      	bne.n	800c42c <dir_find+0x21c>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	3340      	adds	r3, #64	; 0x40
 800c41e:	220b      	movs	r2, #11
 800c420:	4619      	mov	r1, r3
 800c422:	f7fe f832 	bl	800a48a <mem_cmp>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d014      	beq.n	800c456 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c42c:	23ff      	movs	r3, #255	; 0xff
 800c42e:	777b      	strb	r3, [r7, #29]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c436:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c438:	2100      	movs	r1, #0
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7ff f8a2 	bl	800b584 <dir_next>
 800c440:	4603      	mov	r3, r0
 800c442:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c444:	7ffb      	ldrb	r3, [r7, #31]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f43f af65 	beq.w	800c316 <dir_find+0x106>
 800c44c:	e004      	b.n	800c458 <dir_find+0x248>
		if (res != FR_OK) break;
 800c44e:	bf00      	nop
 800c450:	e002      	b.n	800c458 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c452:	bf00      	nop
 800c454:	e000      	b.n	800c458 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c456:	bf00      	nop

	return res;
 800c458:	7ffb      	ldrb	r3, [r7, #31]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3724      	adds	r7, #36	; 0x24
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd90      	pop	{r4, r7, pc}
	...

0800c464 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c464:	b5b0      	push	{r4, r5, r7, lr}
 800c466:	b0a2      	sub	sp, #136	; 0x88
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	677b      	str	r3, [r7, #116]	; 0x74
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c478:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d001      	beq.n	800c484 <dir_register+0x20>
 800c480:	2306      	movs	r3, #6
 800c482:	e18e      	b.n	800c7a2 <dir_register+0x33e>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c484:	2300      	movs	r3, #0
 800c486:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c488:	e002      	b.n	800c490 <dir_register+0x2c>
 800c48a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c48c:	3301      	adds	r3, #1
 800c48e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c492:	68da      	ldr	r2, [r3, #12]
 800c494:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	4413      	add	r3, r2
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1f4      	bne.n	800c48a <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c4a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b04      	cmp	r3, #4
 800c4a6:	f040 809e 	bne.w	800c5e6 <dir_register+0x182>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c4aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c4ac:	330e      	adds	r3, #14
 800c4ae:	4abf      	ldr	r2, [pc, #764]	; (800c7ac <dir_register+0x348>)
 800c4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b4:	08db      	lsrs	r3, r3, #3
 800c4b6:	3302      	adds	r3, #2
 800c4b8:	67bb      	str	r3, [r7, #120]	; 0x78
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c4ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f7ff f936 	bl	800b72e <dir_alloc>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res != FR_OK) return res;
 800c4c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <dir_register+0x72>
 800c4d0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c4d4:	e165      	b.n	800c7a2 <dir_register+0x33e>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	015b      	lsls	r3, r3, #5
 800c4e0:	1ad2      	subs	r2, r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d071      	beq.n	800c5d2 <dir_register+0x16e>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	79db      	ldrb	r3, [r3, #7]
 800c4f2:	f003 0304 	and.w	r3, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d06b      	beq.n	800c5d2 <dir_register+0x16e>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c502:	895b      	ldrh	r3, [r3, #10]
 800c504:	025b      	lsls	r3, r3, #9
 800c506:	461a      	mov	r2, r3
 800c508:	f04f 0300 	mov.w	r3, #0
 800c50c:	1884      	adds	r4, r0, r2
 800c50e:	eb41 0503 	adc.w	r5, r1, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe fd56 	bl	800afcc <fill_first_frag>
 800c520:	4603      	mov	r3, r0
 800c522:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c526:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <dir_register+0xd0>
 800c52e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c532:	e136      	b.n	800c7a2 <dir_register+0x33e>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c53e:	4619      	mov	r1, r3
 800c540:	f7fe fd73 	bl	800b02a <fill_last_frag>
 800c544:	4603      	mov	r3, r0
 800c546:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c54a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d002      	beq.n	800c558 <dir_register+0xf4>
 800c552:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c556:	e124      	b.n	800c7a2 <dir_register+0x33e>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	f107 0308 	add.w	r3, r7, #8
 800c55e:	4611      	mov	r1, r2
 800c560:	4618      	mov	r0, r3
 800c562:	f7ff fc91 	bl	800be88 <load_obj_dir>
 800c566:	4603      	mov	r3, r0
 800c568:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c56c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <dir_register+0x116>
 800c574:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c578:	e113      	b.n	800c7a2 <dir_register+0x33e>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c57a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c588:	4608      	mov	r0, r1
 800c58a:	f7fd feba 	bl	800a302 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c59c:	4608      	mov	r0, r1
 800c59e:	f7fd feb0 	bl	800a302 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	79da      	ldrb	r2, [r3, #7]
 800c5a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	3321      	adds	r3, #33	; 0x21
 800c5ac:	f042 0201 	orr.w	r2, r2, #1
 800c5b0:	b2d2      	uxtb	r2, r2
 800c5b2:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c5b4:	f107 0308 	add.w	r3, r7, #8
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff fca0 	bl	800befe <store_xdir>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c5c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <dir_register+0x16e>
 800c5cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c5d0:	e0e7      	b.n	800c7a2 <dir_register+0x33e>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c5d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5d4:	691a      	ldr	r2, [r3, #16]
 800c5d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4610      	mov	r0, r2
 800c5de:	f7ff fce9 	bl	800bfb4 <create_xdir>
		return FR_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e0dd      	b.n	800c7a2 <dir_register+0x33e>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c5ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c5f0:	220c      	movs	r2, #12
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fd ff0d 	bl	800a412 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c5f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c5fc:	f003 0301 	and.w	r3, r3, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	d039      	beq.n	800c678 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2240      	movs	r2, #64	; 0x40
 800c608:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800c60c:	2301      	movs	r3, #1
 800c60e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c612:	e019      	b.n	800c648 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c61a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c61c:	68da      	ldr	r2, [r3, #12]
 800c61e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800c622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c626:	f7ff fa59 	bl	800badc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff fdf0 	bl	800c210 <dir_find>
 800c630:	4603      	mov	r3, r0
 800c632:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) break;
 800c636:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d109      	bne.n	800c652 <dir_register+0x1ee>
		for (n = 1; n < 100; n++) {
 800c63e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c642:	3301      	adds	r3, #1
 800c644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c64c:	2b63      	cmp	r3, #99	; 0x63
 800c64e:	d9e1      	bls.n	800c614 <dir_register+0x1b0>
 800c650:	e000      	b.n	800c654 <dir_register+0x1f0>
			if (res != FR_OK) break;
 800c652:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c654:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c658:	2b64      	cmp	r3, #100	; 0x64
 800c65a:	d101      	bne.n	800c660 <dir_register+0x1fc>
 800c65c:	2307      	movs	r3, #7
 800c65e:	e0a0      	b.n	800c7a2 <dir_register+0x33e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c660:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c664:	2b04      	cmp	r3, #4
 800c666:	d002      	beq.n	800c66e <dir_register+0x20a>
 800c668:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c66c:	e099      	b.n	800c7a2 <dir_register+0x33e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c66e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c678:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c67c:	f003 0302 	and.w	r3, r3, #2
 800c680:	2b00      	cmp	r3, #0
 800c682:	d007      	beq.n	800c694 <dir_register+0x230>
 800c684:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c686:	330c      	adds	r3, #12
 800c688:	4a49      	ldr	r2, [pc, #292]	; (800c7b0 <dir_register+0x34c>)
 800c68a:	fba2 2303 	umull	r2, r3, r2, r3
 800c68e:	089b      	lsrs	r3, r3, #2
 800c690:	3301      	adds	r3, #1
 800c692:	e000      	b.n	800c696 <dir_register+0x232>
 800c694:	2301      	movs	r3, #1
 800c696:	67bb      	str	r3, [r7, #120]	; 0x78
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c698:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff f847 	bl	800b72e <dir_alloc>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c6a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d14a      	bne.n	800c744 <dir_register+0x2e0>
 800c6ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	67bb      	str	r3, [r7, #120]	; 0x78
 800c6b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d044      	beq.n	800c744 <dir_register+0x2e0>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6c0:	015b      	lsls	r3, r3, #5
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7fe fed6 	bl	800b478 <dir_sdi>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 800c6d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d134      	bne.n	800c744 <dir_register+0x2e0>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3340      	adds	r3, #64	; 0x40
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff fa8c 	bl	800bbfc <sum_sfn>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c6f2:	f7fe f8bd 	bl	800a870 <move_window>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res != FR_OK) break;
 800c6fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c700:	2b00      	cmp	r3, #0
 800c702:	d11e      	bne.n	800c742 <dir_register+0x2de>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c706:	68d8      	ldr	r0, [r3, #12]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c70c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800c714:	f7ff f97a 	bl	800ba0c <put_lfn>
				fs->wflag = 1;
 800c718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c71a:	2201      	movs	r2, #1
 800c71c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c71e:	2100      	movs	r1, #0
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7fe ff2f 	bl	800b584 <dir_next>
 800c726:	4603      	mov	r3, r0
 800c728:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			} while (res == FR_OK && --nent);
 800c72c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c730:	2b00      	cmp	r3, #0
 800c732:	d107      	bne.n	800c744 <dir_register+0x2e0>
 800c734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c736:	3b01      	subs	r3, #1
 800c738:	67bb      	str	r3, [r7, #120]	; 0x78
 800c73a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1d4      	bne.n	800c6ea <dir_register+0x286>
 800c740:	e000      	b.n	800c744 <dir_register+0x2e0>
				if (res != FR_OK) break;
 800c742:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c744:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d128      	bne.n	800c79e <dir_register+0x33a>
		res = move_window(fs, dp->sect);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c750:	4619      	mov	r1, r3
 800c752:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c754:	f7fe f88c 	bl	800a870 <move_window>
 800c758:	4603      	mov	r3, r0
 800c75a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 800c75e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c762:	2b00      	cmp	r3, #0
 800c764:	d11b      	bne.n	800c79e <dir_register+0x33a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c76a:	2220      	movs	r2, #32
 800c76c:	2100      	movs	r1, #0
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fd fe70 	bl	800a454 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	3340      	adds	r3, #64	; 0x40
 800c77c:	220b      	movs	r2, #11
 800c77e:	4619      	mov	r1, r3
 800c780:	f7fd fe47 	bl	800a412 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c78e:	330c      	adds	r3, #12
 800c790:	f002 0218 	and.w	r2, r2, #24
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c79a:	2201      	movs	r2, #1
 800c79c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c79e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3788      	adds	r7, #136	; 0x88
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bdb0      	pop	{r4, r5, r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	88888889 	.word	0x88888889
 800c7b0:	4ec4ec4f 	.word	0x4ec4ec4f

0800c7b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08a      	sub	sp, #40	; 0x28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	613b      	str	r3, [r7, #16]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	60fb      	str	r3, [r7, #12]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	61ba      	str	r2, [r7, #24]
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	4413      	add	r3, r2
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c7e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7e4:	2b1f      	cmp	r3, #31
 800c7e6:	d940      	bls.n	800c86a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7ea:	2b2f      	cmp	r3, #47	; 0x2f
 800c7ec:	d006      	beq.n	800c7fc <create_name+0x48>
 800c7ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7f0:	2b5c      	cmp	r3, #92	; 0x5c
 800c7f2:	d110      	bne.n	800c816 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c7f4:	e002      	b.n	800c7fc <create_name+0x48>
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	61bb      	str	r3, [r7, #24]
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	4413      	add	r3, r2
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b2f      	cmp	r3, #47	; 0x2f
 800c806:	d0f6      	beq.n	800c7f6 <create_name+0x42>
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	4413      	add	r3, r2
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b5c      	cmp	r3, #92	; 0x5c
 800c812:	d0f0      	beq.n	800c7f6 <create_name+0x42>
			break;
 800c814:	e02a      	b.n	800c86c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	2bfe      	cmp	r3, #254	; 0xfe
 800c81a:	d901      	bls.n	800c820 <create_name+0x6c>
 800c81c:	2306      	movs	r3, #6
 800c81e:	e1cb      	b.n	800cbb8 <create_name+0x404>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c822:	b2db      	uxtb	r3, r3
 800c824:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c828:	2101      	movs	r1, #1
 800c82a:	4618      	mov	r0, r3
 800c82c:	f001 fed4 	bl	800e5d8 <ff_convert>
 800c830:	4603      	mov	r3, r0
 800c832:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c836:	2b00      	cmp	r3, #0
 800c838:	d101      	bne.n	800c83e <create_name+0x8a>
 800c83a:	2306      	movs	r3, #6
 800c83c:	e1bc      	b.n	800cbb8 <create_name+0x404>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c83e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c840:	2b7f      	cmp	r3, #127	; 0x7f
 800c842:	d809      	bhi.n	800c858 <create_name+0xa4>
 800c844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c846:	4619      	mov	r1, r3
 800c848:	48a5      	ldr	r0, [pc, #660]	; (800cae0 <create_name+0x32c>)
 800c84a:	f7fd fe45 	bl	800a4d8 <chk_chr>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <create_name+0xa4>
 800c854:	2306      	movs	r3, #6
 800c856:	e1af      	b.n	800cbb8 <create_name+0x404>
		lfn[di++] = w;					/* Store the Unicode character */
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	1c5a      	adds	r2, r3, #1
 800c85c:	617a      	str	r2, [r7, #20]
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c866:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c868:	e7b4      	b.n	800c7d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c86a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	441a      	add	r2, r3
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c878:	2b1f      	cmp	r3, #31
 800c87a:	d801      	bhi.n	800c880 <create_name+0xcc>
 800c87c:	2304      	movs	r3, #4
 800c87e:	e000      	b.n	800c882 <create_name+0xce>
 800c880:	2300      	movs	r3, #0
 800c882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d109      	bne.n	800c8a0 <create_name+0xec>
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c892:	4413      	add	r3, r2
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	4413      	add	r3, r2
 800c89a:	881b      	ldrh	r3, [r3, #0]
 800c89c:	2b2e      	cmp	r3, #46	; 0x2e
 800c89e:	d015      	beq.n	800c8cc <create_name+0x118>
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d14d      	bne.n	800c942 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c8ac:	4413      	add	r3, r2
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	2b2e      	cmp	r3, #46	; 0x2e
 800c8b8:	d143      	bne.n	800c942 <create_name+0x18e>
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	4b89      	ldr	r3, [pc, #548]	; (800cae4 <create_name+0x330>)
 800c8be:	4413      	add	r3, r2
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c8ca:	d13a      	bne.n	800c942 <create_name+0x18e>
		lfn[di] = 0;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c8d8:	2300      	movs	r3, #0
 800c8da:	623b      	str	r3, [r7, #32]
 800c8dc:	e00f      	b.n	800c8fe <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800c8de:	6a3a      	ldr	r2, [r7, #32]
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d201      	bcs.n	800c8ea <create_name+0x136>
 800c8e6:	212e      	movs	r1, #46	; 0x2e
 800c8e8:	e000      	b.n	800c8ec <create_name+0x138>
 800c8ea:	2120      	movs	r1, #32
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	3340      	adds	r3, #64	; 0x40
 800c8f4:	460a      	mov	r2, r1
 800c8f6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	623b      	str	r3, [r7, #32]
 800c8fe:	6a3b      	ldr	r3, [r7, #32]
 800c900:	2b0a      	cmp	r3, #10
 800c902:	d9ec      	bls.n	800c8de <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800c904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c908:	f043 0320 	orr.w	r3, r3, #32
 800c90c:	b2d9      	uxtb	r1, r3
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	4413      	add	r3, r2
 800c914:	3340      	adds	r3, #64	; 0x40
 800c916:	460a      	mov	r2, r1
 800c918:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	e14c      	b.n	800cbb8 <create_name+0x404>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800c91e:	697a      	ldr	r2, [r7, #20]
 800c920:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c924:	4413      	add	r3, r2
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	4413      	add	r3, r2
 800c92c:	881b      	ldrh	r3, [r3, #0]
 800c92e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c932:	2b20      	cmp	r3, #32
 800c934:	d002      	beq.n	800c93c <create_name+0x188>
 800c936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c938:	2b2e      	cmp	r3, #46	; 0x2e
 800c93a:	d106      	bne.n	800c94a <create_name+0x196>
		di--;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	3b01      	subs	r3, #1
 800c940:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1ea      	bne.n	800c91e <create_name+0x16a>
 800c948:	e000      	b.n	800c94c <create_name+0x198>
		if (w != ' ' && w != '.') break;
 800c94a:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	4413      	add	r3, r2
 800c954:	2200      	movs	r2, #0
 800c956:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <create_name+0x1ae>
 800c95e:	2306      	movs	r3, #6
 800c960:	e12a      	b.n	800cbb8 <create_name+0x404>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3340      	adds	r3, #64	; 0x40
 800c966:	220b      	movs	r2, #11
 800c968:	2120      	movs	r1, #32
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fd fd72 	bl	800a454 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c970:	2300      	movs	r3, #0
 800c972:	61bb      	str	r3, [r7, #24]
 800c974:	e002      	b.n	800c97c <create_name+0x1c8>
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	3301      	adds	r3, #1
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	4413      	add	r3, r2
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	2b20      	cmp	r3, #32
 800c988:	d0f5      	beq.n	800c976 <create_name+0x1c2>
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	4413      	add	r3, r2
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	2b2e      	cmp	r3, #46	; 0x2e
 800c996:	d0ee      	beq.n	800c976 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d009      	beq.n	800c9b2 <create_name+0x1fe>
 800c99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9a2:	f043 0303 	orr.w	r3, r3, #3
 800c9a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c9aa:	e002      	b.n	800c9b2 <create_name+0x1fe>
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	617b      	str	r3, [r7, #20]
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d009      	beq.n	800c9cc <create_name+0x218>
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c9be:	4413      	add	r3, r2
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	881b      	ldrh	r3, [r3, #0]
 800c9c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ca:	d1ef      	bne.n	800c9ac <create_name+0x1f8>

	i = b = 0; ni = 8;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	623b      	str	r3, [r7, #32]
 800c9d6:	2308      	movs	r3, #8
 800c9d8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	1c5a      	adds	r2, r3, #1
 800c9de:	61ba      	str	r2, [r7, #24]
 800c9e0:	005b      	lsls	r3, r3, #1
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c9ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 8099 	beq.w	800cb24 <create_name+0x370>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9f4:	2b20      	cmp	r3, #32
 800c9f6:	d006      	beq.n	800ca06 <create_name+0x252>
 800c9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c9fc:	d10a      	bne.n	800ca14 <create_name+0x260>
 800c9fe:	69ba      	ldr	r2, [r7, #24]
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d006      	beq.n	800ca14 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 800ca06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca0a:	f043 0303 	orr.w	r3, r3, #3
 800ca0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca12:	e086      	b.n	800cb22 <create_name+0x36e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ca14:	6a3a      	ldr	r2, [r7, #32]
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d203      	bcs.n	800ca24 <create_name+0x270>
 800ca1c:	69ba      	ldr	r2, [r7, #24]
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d123      	bne.n	800ca6c <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	2b0b      	cmp	r3, #11
 800ca28:	d106      	bne.n	800ca38 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 800ca2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca2e:	f043 0303 	orr.w	r3, r3, #3
 800ca32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca36:	e078      	b.n	800cb2a <create_name+0x376>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ca38:	69ba      	ldr	r2, [r7, #24]
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d005      	beq.n	800ca4c <create_name+0x298>
 800ca40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca44:	f043 0303 	orr.w	r3, r3, #3
 800ca48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ca4c:	69ba      	ldr	r2, [r7, #24]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d869      	bhi.n	800cb28 <create_name+0x374>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	61bb      	str	r3, [r7, #24]
 800ca58:	2308      	movs	r3, #8
 800ca5a:	623b      	str	r3, [r7, #32]
 800ca5c:	230b      	movs	r3, #11
 800ca5e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ca60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca6a:	e05a      	b.n	800cb22 <create_name+0x36e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ca6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca6e:	2b7f      	cmp	r3, #127	; 0x7f
 800ca70:	d914      	bls.n	800ca9c <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ca72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca74:	2100      	movs	r1, #0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f001 fdae 	bl	800e5d8 <ff_convert>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ca80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d004      	beq.n	800ca90 <create_name+0x2dc>
 800ca86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca88:	3b80      	subs	r3, #128	; 0x80
 800ca8a:	4a17      	ldr	r2, [pc, #92]	; (800cae8 <create_name+0x334>)
 800ca8c:	5cd3      	ldrb	r3, [r2, r3]
 800ca8e:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ca90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca94:	f043 0302 	orr.w	r3, r3, #2
 800ca98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ca9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <create_name+0x2fe>
 800caa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caa4:	4619      	mov	r1, r3
 800caa6:	4811      	ldr	r0, [pc, #68]	; (800caec <create_name+0x338>)
 800caa8:	f7fd fd16 	bl	800a4d8 <chk_chr>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d008      	beq.n	800cac4 <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cab2:	235f      	movs	r3, #95	; 0x5f
 800cab4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caba:	f043 0303 	orr.w	r3, r3, #3
 800cabe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cac2:	e024      	b.n	800cb0e <create_name+0x35a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cac6:	2b40      	cmp	r3, #64	; 0x40
 800cac8:	d912      	bls.n	800caf0 <create_name+0x33c>
 800caca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cacc:	2b5a      	cmp	r3, #90	; 0x5a
 800cace:	d80f      	bhi.n	800caf0 <create_name+0x33c>
					b |= 2;
 800cad0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cad4:	f043 0302 	orr.w	r3, r3, #2
 800cad8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cadc:	e017      	b.n	800cb0e <create_name+0x35a>
 800cade:	bf00      	nop
 800cae0:	0800f9d4 	.word	0x0800f9d4
 800cae4:	7ffffffe 	.word	0x7ffffffe
 800cae8:	0800fa74 	.word	0x0800fa74
 800caec:	0800f9e0 	.word	0x0800f9e0
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800caf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caf2:	2b60      	cmp	r3, #96	; 0x60
 800caf4:	d90b      	bls.n	800cb0e <create_name+0x35a>
 800caf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caf8:	2b7a      	cmp	r3, #122	; 0x7a
 800cafa:	d808      	bhi.n	800cb0e <create_name+0x35a>
						b |= 1; w -= 0x20;
 800cafc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb00:	f043 0301 	orr.w	r3, r3, #1
 800cb04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb0a:	3b20      	subs	r3, #32
 800cb0c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	623a      	str	r2, [r7, #32]
 800cb14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb16:	b2d1      	uxtb	r1, r2
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	460a      	mov	r2, r1
 800cb1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cb22:	e75a      	b.n	800c9da <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 800cb24:	bf00      	nop
 800cb26:	e000      	b.n	800cb2a <create_name+0x376>
			if (si > di) break;			/* No extension */
 800cb28:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb30:	2be5      	cmp	r3, #229	; 0xe5
 800cb32:	d103      	bne.n	800cb3c <create_name+0x388>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2205      	movs	r2, #5
 800cb38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	2b08      	cmp	r3, #8
 800cb40:	d104      	bne.n	800cb4c <create_name+0x398>
 800cb42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cb4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb50:	f003 030c 	and.w	r3, r3, #12
 800cb54:	2b0c      	cmp	r3, #12
 800cb56:	d005      	beq.n	800cb64 <create_name+0x3b0>
 800cb58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb5c:	f003 0303 	and.w	r3, r3, #3
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d105      	bne.n	800cb70 <create_name+0x3bc>
 800cb64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb68:	f043 0302 	orr.w	r3, r3, #2
 800cb6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cb70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb74:	f003 0302 	and.w	r3, r3, #2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d117      	bne.n	800cbac <create_name+0x3f8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cb7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb80:	f003 0303 	and.w	r3, r3, #3
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d105      	bne.n	800cb94 <create_name+0x3e0>
 800cb88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb8c:	f043 0310 	orr.w	r3, r3, #16
 800cb90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cb94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb98:	f003 030c 	and.w	r3, r3, #12
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d105      	bne.n	800cbac <create_name+0x3f8>
 800cba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba4:	f043 0308 	orr.w	r3, r3, #8
 800cba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cbb2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800cbb6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3728      	adds	r7, #40	; 0x28
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b09c      	sub	sp, #112	; 0x70
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	66bb      	str	r3, [r7, #104]	; 0x68
	FATFS *fs = obj->fs;
 800cbce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	667b      	str	r3, [r7, #100]	; 0x64


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b2f      	cmp	r3, #47	; 0x2f
 800cbda:	d00b      	beq.n	800cbf4 <follow_path+0x34>
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2b5c      	cmp	r3, #92	; 0x5c
 800cbe2:	d007      	beq.n	800cbf4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800cbe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbe6:	69da      	ldr	r2, [r3, #28]
 800cbe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbea:	609a      	str	r2, [r3, #8]
 800cbec:	e00d      	b.n	800cc0a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	603b      	str	r3, [r7, #0]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	2b2f      	cmp	r3, #47	; 0x2f
 800cbfa:	d0f8      	beq.n	800cbee <follow_path+0x2e>
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	2b5c      	cmp	r3, #92	; 0x5c
 800cc02:	d0f4      	beq.n	800cbee <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800cc04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc06:	2200      	movs	r2, #0
 800cc08:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800cc0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	61da      	str	r2, [r3, #28]
#if _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 800cc10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b04      	cmp	r3, #4
 800cc16:	d135      	bne.n	800cc84 <follow_path+0xc4>
 800cc18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d031      	beq.n	800cc84 <follow_path+0xc4>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
 800cc20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc22:	6a1a      	ldr	r2, [r3, #32]
 800cc24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc26:	621a      	str	r2, [r3, #32]
		obj->c_size = fs->cdc_size;
 800cc28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc2e:	625a      	str	r2, [r3, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 800cc30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc36:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 800cc38:	f107 0308 	add.w	r3, r7, #8
 800cc3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff f922 	bl	800be88 <load_obj_dir>
 800cc44:	4603      	mov	r3, r0
 800cc46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (res != FR_OK) return res;
 800cc4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d002      	beq.n	800cc58 <follow_path+0x98>
 800cc52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cc56:	e0c1      	b.n	800cddc <follow_path+0x21c>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 800cc58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	3338      	adds	r3, #56	; 0x38
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fd fa2a 	bl	800a0b8 <ld_dword>
 800cc64:	4603      	mov	r3, r0
 800cc66:	461a      	mov	r2, r3
 800cc68:	f04f 0300 	mov.w	r3, #0
 800cc6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cc6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cc72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	3321      	adds	r3, #33	; 0x21
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	f003 0302 	and.w	r3, r3, #2
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc82:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	2b1f      	cmp	r3, #31
 800cc8a:	d80b      	bhi.n	800cca4 <follow_path+0xe4>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2280      	movs	r2, #128	; 0x80
 800cc90:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800cc94:	2100      	movs	r1, #0
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7fe fbee 	bl	800b478 <dir_sdi>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800cca2:	e099      	b.n	800cdd8 <follow_path+0x218>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cca4:	463b      	mov	r3, r7
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff fd83 	bl	800c7b4 <create_name>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (res != FR_OK) break;
 800ccb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f040 8088 	bne.w	800cdce <follow_path+0x20e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff faa6 	bl	800c210 <dir_find>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			ns = dp->fn[NSFLAG];
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ccd0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			if (res != FR_OK) {				/* Failed to find the object */
 800ccd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d021      	beq.n	800cd20 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ccdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cce0:	2b04      	cmp	r3, #4
 800cce2:	d176      	bne.n	800cdd2 <follow_path+0x212>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800cce4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800cce8:	f003 0320 	and.w	r3, r3, #32
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00d      	beq.n	800cd0c <follow_path+0x14c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ccf0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ccf4:	f003 0304 	and.w	r3, r3, #4
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d066      	beq.n	800cdca <follow_path+0x20a>
						dp->fn[NSFLAG] = NS_NONAME;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2280      	movs	r2, #128	; 0x80
 800cd00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 800cd04:	2300      	movs	r3, #0
 800cd06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800cd0a:	e062      	b.n	800cdd2 <follow_path+0x212>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cd0c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800cd10:	f003 0304 	and.w	r3, r3, #4
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d15c      	bne.n	800cdd2 <follow_path+0x212>
 800cd18:	2305      	movs	r3, #5
 800cd1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
 800cd1e:	e058      	b.n	800cdd2 <follow_path+0x212>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd20:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800cd24:	f003 0304 	and.w	r3, r3, #4
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d154      	bne.n	800cdd6 <follow_path+0x216>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cd2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd2e:	799b      	ldrb	r3, [r3, #6]
 800cd30:	f003 0310 	and.w	r3, r3, #16
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d103      	bne.n	800cd40 <follow_path+0x180>
				res = FR_NO_PATH; break;
 800cd38:	2305      	movs	r3, #5
 800cd3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800cd3e:	e04b      	b.n	800cdd8 <follow_path+0x218>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800cd40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	d130      	bne.n	800cdaa <follow_path+0x1ea>
				obj->c_scl = obj->sclust;
 800cd48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd4a:	689a      	ldr	r2, [r3, #8]
 800cd4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd4e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800cd50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cd56:	4613      	mov	r3, r2
 800cd58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd5e:	79d2      	ldrb	r2, [r2, #7]
 800cd60:	431a      	orrs	r2, r3
 800cd62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd64:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd6c:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800cd6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	3334      	adds	r3, #52	; 0x34
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fd f99f 	bl	800a0b8 <ld_dword>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd7e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cd80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	3321      	adds	r3, #33	; 0x21
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd90:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800cd92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	3338      	adds	r3, #56	; 0x38
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fd f9b0 	bl	800a0fe <ld_qword>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	460b      	mov	r3, r1
 800cda2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cda4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800cda8:	e77c      	b.n	800cca4 <follow_path+0xe4>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cdaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdac:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdb8:	4413      	add	r3, r2
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800cdbe:	f7fe fd12 	bl	800b7e6 <ld_clust>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdc6:	609a      	str	r2, [r3, #8]
 800cdc8:	e76c      	b.n	800cca4 <follow_path+0xe4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800cdca:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cdcc:	e76a      	b.n	800cca4 <follow_path+0xe4>
			if (res != FR_OK) break;
 800cdce:	bf00      	nop
 800cdd0:	e002      	b.n	800cdd8 <follow_path+0x218>
				break;
 800cdd2:	bf00      	nop
 800cdd4:	e000      	b.n	800cdd8 <follow_path+0x218>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cdd6:	bf00      	nop
			}
		}
	}

	return res;
 800cdd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3770      	adds	r7, #112	; 0x70
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b087      	sub	sp, #28
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cdec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdf0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d031      	beq.n	800ce5e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	617b      	str	r3, [r7, #20]
 800ce00:	e002      	b.n	800ce08 <get_ldnumber+0x24>
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	3301      	adds	r3, #1
 800ce06:	617b      	str	r3, [r7, #20]
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b1f      	cmp	r3, #31
 800ce0e:	d903      	bls.n	800ce18 <get_ldnumber+0x34>
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	2b3a      	cmp	r3, #58	; 0x3a
 800ce16:	d1f4      	bne.n	800ce02 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b3a      	cmp	r3, #58	; 0x3a
 800ce1e:	d11c      	bne.n	800ce5a <get_ldnumber+0x76>
			tp = *path;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	60fa      	str	r2, [r7, #12]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	3b30      	subs	r3, #48	; 0x30
 800ce30:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	2b09      	cmp	r3, #9
 800ce36:	d80e      	bhi.n	800ce56 <get_ldnumber+0x72>
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d10a      	bne.n	800ce56 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d107      	bne.n	800ce56 <get_ldnumber+0x72>
					vol = (int)i;
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	617b      	str	r3, [r7, #20]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	697a      	ldr	r2, [r7, #20]
 800ce54:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	e002      	b.n	800ce60 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ce5e:	693b      	ldr	r3, [r7, #16]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	371c      	adds	r7, #28
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	70da      	strb	r2, [r3, #3]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce82:	645a      	str	r2, [r3, #68]	; 0x44
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ce84:	6839      	ldr	r1, [r7, #0]
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7fd fcf2 	bl	800a870 <move_window>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <check_fs+0x2a>
 800ce92:	2304      	movs	r3, #4
 800ce94:	e044      	b.n	800cf20 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3348      	adds	r3, #72	; 0x48
 800ce9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fd f8f2 	bl	800a088 <ld_word>
 800cea4:	4603      	mov	r3, r0
 800cea6:	461a      	mov	r2, r3
 800cea8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d001      	beq.n	800ceb4 <check_fs+0x48>
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e035      	b.n	800cf20 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ceba:	2be9      	cmp	r3, #233	; 0xe9
 800cebc:	d009      	beq.n	800ced2 <check_fs+0x66>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cec4:	2beb      	cmp	r3, #235	; 0xeb
 800cec6:	d11e      	bne.n	800cf06 <check_fs+0x9a>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800cece:	2b90      	cmp	r3, #144	; 0x90
 800ced0:	d119      	bne.n	800cf06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	3348      	adds	r3, #72	; 0x48
 800ced6:	3336      	adds	r3, #54	; 0x36
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fd f8ed 	bl	800a0b8 <ld_dword>
 800cede:	4603      	mov	r3, r0
 800cee0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cee4:	4a10      	ldr	r2, [pc, #64]	; (800cf28 <check_fs+0xbc>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d101      	bne.n	800ceee <check_fs+0x82>
 800ceea:	2300      	movs	r3, #0
 800ceec:	e018      	b.n	800cf20 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	3348      	adds	r3, #72	; 0x48
 800cef2:	3352      	adds	r3, #82	; 0x52
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fd f8df 	bl	800a0b8 <ld_dword>
 800cefa:	4603      	mov	r3, r0
 800cefc:	4a0b      	ldr	r2, [pc, #44]	; (800cf2c <check_fs+0xc0>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d101      	bne.n	800cf06 <check_fs+0x9a>
 800cf02:	2300      	movs	r3, #0
 800cf04:	e00c      	b.n	800cf20 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	3348      	adds	r3, #72	; 0x48
 800cf0a:	220b      	movs	r2, #11
 800cf0c:	4908      	ldr	r1, [pc, #32]	; (800cf30 <check_fs+0xc4>)
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fd fabb 	bl	800a48a <mem_cmp>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <check_fs+0xb2>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e000      	b.n	800cf20 <check_fs+0xb4>
#endif
	return 2;
 800cf1e:	2302      	movs	r3, #2
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	00544146 	.word	0x00544146
 800cf2c:	33544146 	.word	0x33544146
 800cf30:	0800f9e8 	.word	0x0800f9e8

0800cf34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cf34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cf38:	b098      	sub	sp, #96	; 0x60
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	4613      	mov	r3, r2
 800cf42:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2200      	movs	r2, #0
 800cf48:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	f7ff ff4a 	bl	800cde4 <get_ldnumber>
 800cf50:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da01      	bge.n	800cf5c <find_volume+0x28>
 800cf58:	230b      	movs	r3, #11
 800cf5a:	e32e      	b.n	800d5ba <find_volume+0x686>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cf5c:	4ab0      	ldr	r2, [pc, #704]	; (800d220 <find_volume+0x2ec>)
 800cf5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf64:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cf66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <find_volume+0x3c>
 800cf6c:	230c      	movs	r3, #12
 800cf6e:	e324      	b.n	800d5ba <find_volume+0x686>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf74:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cf76:	79fb      	ldrb	r3, [r7, #7]
 800cf78:	f023 0301 	bic.w	r3, r3, #1
 800cf7c:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cf7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d01a      	beq.n	800cfbc <find_volume+0x88>
		stat = disk_status(fs->drv);
 800cf86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf88:	785b      	ldrb	r3, [r3, #1]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fc ffde 	bl	8009f4c <disk_status>
 800cf90:	4603      	mov	r3, r0
 800cf92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cf96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10c      	bne.n	800cfbc <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cfa2:	79fb      	ldrb	r3, [r7, #7]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d007      	beq.n	800cfb8 <find_volume+0x84>
 800cfa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cfac:	f003 0304 	and.w	r3, r3, #4
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800cfb4:	230a      	movs	r3, #10
 800cfb6:	e300      	b.n	800d5ba <find_volume+0x686>
			}
			return FR_OK;				/* The file system object is valid */
 800cfb8:	2300      	movs	r3, #0
 800cfba:	e2fe      	b.n	800d5ba <find_volume+0x686>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cfbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cfc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cfca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfcc:	785b      	ldrb	r3, [r3, #1]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fc ffd6 	bl	8009f80 <disk_initialize>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cfda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cfde:	f003 0301 	and.w	r3, r3, #1
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e2e7      	b.n	800d5ba <find_volume+0x686>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cfea:	79fb      	ldrb	r3, [r7, #7]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d007      	beq.n	800d000 <find_volume+0xcc>
 800cff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cff4:	f003 0304 	and.w	r3, r3, #4
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800cffc:	230a      	movs	r3, #10
 800cffe:	e2dc      	b.n	800d5ba <find_volume+0x686>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d004:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d006:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d008:	f7ff ff30 	bl	800ce6c <check_fs>
 800d00c:	4603      	mov	r3, r0
 800d00e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d016:	2b02      	cmp	r3, #2
 800d018:	d14b      	bne.n	800d0b2 <find_volume+0x17e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d01a:	2300      	movs	r3, #0
 800d01c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d01e:	e01f      	b.n	800d060 <find_volume+0x12c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d022:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d028:	011b      	lsls	r3, r3, #4
 800d02a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d02e:	4413      	add	r3, r2
 800d030:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d034:	3304      	adds	r3, #4
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d006      	beq.n	800d04a <find_volume+0x116>
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	3308      	adds	r3, #8
 800d040:	4618      	mov	r0, r3
 800d042:	f7fd f839 	bl	800a0b8 <ld_dword>
 800d046:	4602      	mov	r2, r0
 800d048:	e000      	b.n	800d04c <find_volume+0x118>
 800d04a:	2200      	movs	r2, #0
 800d04c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d054:	440b      	add	r3, r1
 800d056:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05c:	3301      	adds	r3, #1
 800d05e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d062:	2b03      	cmp	r3, #3
 800d064:	d9dc      	bls.n	800d020 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d066:	2300      	movs	r3, #0
 800d068:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800d06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <find_volume+0x142>
 800d070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d072:	3b01      	subs	r3, #1
 800d074:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d07e:	4413      	add	r3, r2
 800d080:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d084:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d005      	beq.n	800d098 <find_volume+0x164>
 800d08c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d08e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d090:	f7ff feec 	bl	800ce6c <check_fs>
 800d094:	4603      	mov	r3, r0
 800d096:	e000      	b.n	800d09a <find_volume+0x166>
 800d098:	2303      	movs	r3, #3
 800d09a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d09e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d905      	bls.n	800d0b2 <find_volume+0x17e>
 800d0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	d9e1      	bls.n	800d076 <find_volume+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d0b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0b6:	2b04      	cmp	r3, #4
 800d0b8:	d101      	bne.n	800d0be <find_volume+0x18a>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e27d      	b.n	800d5ba <find_volume+0x686>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d0be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d901      	bls.n	800d0ca <find_volume+0x196>
 800d0c6:	230d      	movs	r3, #13
 800d0c8:	e277      	b.n	800d5ba <find_volume+0x686>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d0ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	f040 80f4 	bne.w	800d2bc <find_volume+0x388>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d0d4:	230b      	movs	r3, #11
 800d0d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0d8:	e002      	b.n	800d0e0 <find_volume+0x1ac>
 800d0da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0dc:	3301      	adds	r3, #1
 800d0de:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e2:	2b3f      	cmp	r3, #63	; 0x3f
 800d0e4:	d806      	bhi.n	800d0f4 <find_volume+0x1c0>
 800d0e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ea:	4413      	add	r3, r2
 800d0ec:	3348      	adds	r3, #72	; 0x48
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0f2      	beq.n	800d0da <find_volume+0x1a6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d0f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0f6:	2b3f      	cmp	r3, #63	; 0x3f
 800d0f8:	d801      	bhi.n	800d0fe <find_volume+0x1ca>
 800d0fa:	230d      	movs	r3, #13
 800d0fc:	e25d      	b.n	800d5ba <find_volume+0x686>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d100:	3348      	adds	r3, #72	; 0x48
 800d102:	3368      	adds	r3, #104	; 0x68
 800d104:	4618      	mov	r0, r3
 800d106:	f7fc ffbf 	bl	800a088 <ld_word>
 800d10a:	4603      	mov	r3, r0
 800d10c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d110:	d001      	beq.n	800d116 <find_volume+0x1e2>
 800d112:	230d      	movs	r3, #13
 800d114:	e251      	b.n	800d5ba <find_volume+0x686>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d118:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800d11c:	2b09      	cmp	r3, #9
 800d11e:	d001      	beq.n	800d124 <find_volume+0x1f0>
			return FR_NO_FILESYSTEM;
 800d120:	230d      	movs	r3, #13
 800d122:	e24a      	b.n	800d5ba <find_volume+0x686>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d126:	3348      	adds	r3, #72	; 0x48
 800d128:	3348      	adds	r3, #72	; 0x48
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fc ffe7 	bl	800a0fe <ld_qword>
 800d130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d132:	461a      	mov	r2, r3
 800d134:	f04f 0300 	mov.w	r3, #0
 800d138:	eb10 0802 	adds.w	r8, r0, r2
 800d13c:	eb41 0903 	adc.w	r9, r1, r3
 800d140:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d144:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	bf08      	it	eq
 800d14c:	2a00      	cmpeq	r2, #0
 800d14e:	d301      	bcc.n	800d154 <find_volume+0x220>
 800d150:	230d      	movs	r3, #13
 800d152:	e232      	b.n	800d5ba <find_volume+0x686>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d156:	3348      	adds	r3, #72	; 0x48
 800d158:	3354      	adds	r3, #84	; 0x54
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fc ffac 	bl	800a0b8 <ld_dword>
 800d160:	4602      	mov	r2, r0
 800d162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d164:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d168:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
 800d16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d16e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d172:	789b      	ldrb	r3, [r3, #2]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d001      	beq.n	800d17c <find_volume+0x248>
 800d178:	230d      	movs	r3, #13
 800d17a:	e21e      	b.n	800d5ba <find_volume+0x686>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d17e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800d182:	461a      	mov	r2, r3
 800d184:	2301      	movs	r3, #1
 800d186:	4093      	lsls	r3, r2
 800d188:	b29a      	uxth	r2, r3
 800d18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d18c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d190:	895b      	ldrh	r3, [r3, #10]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <find_volume+0x266>
 800d196:	230d      	movs	r3, #13
 800d198:	e20f      	b.n	800d5ba <find_volume+0x686>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d19c:	3348      	adds	r3, #72	; 0x48
 800d19e:	335c      	adds	r3, #92	; 0x5c
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fc ff89 	bl	800a0b8 <ld_dword>
 800d1a6:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	4a1e      	ldr	r2, [pc, #120]	; (800d224 <find_volume+0x2f0>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d901      	bls.n	800d1b4 <find_volume+0x280>
 800d1b0:	230d      	movs	r3, #13
 800d1b2:	e202      	b.n	800d5ba <find_volume+0x686>
		fs->n_fatent = nclst + 2;
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	1c9a      	adds	r2, r3, #2
 800d1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ba:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1c0:	635a      	str	r2, [r3, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d1c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c4:	3348      	adds	r3, #72	; 0x48
 800d1c6:	3358      	adds	r3, #88	; 0x58
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fc ff75 	bl	800a0b8 <ld_dword>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1d2:	441a      	add	r2, r3
 800d1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1d6:	641a      	str	r2, [r3, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1da:	3348      	adds	r3, #72	; 0x48
 800d1dc:	3350      	adds	r3, #80	; 0x50
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fc ff6a 	bl	800a0b8 <ld_dword>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1e8:	441a      	add	r2, r3
 800d1ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ec:	639a      	str	r2, [r3, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f04f 0100 	mov.w	r1, #0
 800d1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1fa:	895b      	ldrh	r3, [r3, #10]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d200:	fb03 f302 	mul.w	r3, r3, r2
 800d204:	461a      	mov	r2, r3
 800d206:	f04f 0300 	mov.w	r3, #0
 800d20a:	1884      	adds	r4, r0, r2
 800d20c:	eb41 0503 	adc.w	r5, r1, r3
 800d210:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d214:	42ab      	cmp	r3, r5
 800d216:	bf08      	it	eq
 800d218:	42a2      	cmpeq	r2, r4
 800d21a:	d205      	bcs.n	800d228 <find_volume+0x2f4>
 800d21c:	230d      	movs	r3, #13
 800d21e:	e1cc      	b.n	800d5ba <find_volume+0x686>
 800d220:	240002f0 	.word	0x240002f0
 800d224:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d22a:	3348      	adds	r3, #72	; 0x48
 800d22c:	3360      	adds	r3, #96	; 0x60
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fc ff42 	bl	800a0b8 <ld_dword>
 800d234:	4602      	mov	r2, r0
 800d236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d238:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23e:	4619      	mov	r1, r3
 800d240:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d242:	f7fd fbb1 	bl	800a9a8 <clust2sect>
 800d246:	4603      	mov	r3, r0
 800d248:	4619      	mov	r1, r3
 800d24a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d24c:	f7fd fb10 	bl	800a870 <move_window>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <find_volume+0x326>
 800d256:	2301      	movs	r3, #1
 800d258:	e1af      	b.n	800d5ba <find_volume+0x686>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d25a:	2300      	movs	r3, #0
 800d25c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d25e:	e015      	b.n	800d28c <find_volume+0x358>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d264:	4413      	add	r3, r2
 800d266:	3348      	adds	r3, #72	; 0x48
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	2b81      	cmp	r3, #129	; 0x81
 800d26c:	d10b      	bne.n	800d286 <find_volume+0x352>
 800d26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d270:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d276:	3314      	adds	r3, #20
 800d278:	4413      	add	r3, r2
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fc ff1c 	bl	800a0b8 <ld_dword>
 800d280:	4603      	mov	r3, r0
 800d282:	2b02      	cmp	r3, #2
 800d284:	d007      	beq.n	800d296 <find_volume+0x362>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d288:	3320      	adds	r3, #32
 800d28a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d28c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d28e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d292:	d3e5      	bcc.n	800d260 <find_volume+0x32c>
 800d294:	e000      	b.n	800d298 <find_volume+0x364>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d296:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d29a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d29e:	d101      	bne.n	800d2a4 <find_volume+0x370>
 800d2a0:	230d      	movs	r3, #13
 800d2a2:	e18a      	b.n	800d5ba <find_volume+0x686>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2aa:	619a      	str	r2, [r3, #24]
 800d2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ae:	699a      	ldr	r2, [r3, #24]
 800d2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2b2:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d2b4:	2304      	movs	r3, #4
 800d2b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d2ba:	e163      	b.n	800d584 <find_volume+0x650>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2be:	3348      	adds	r3, #72	; 0x48
 800d2c0:	330b      	adds	r3, #11
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fc fee0 	bl	800a088 <ld_word>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2ce:	d001      	beq.n	800d2d4 <find_volume+0x3a0>
 800d2d0:	230d      	movs	r3, #13
 800d2d2:	e172      	b.n	800d5ba <find_volume+0x686>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d6:	3348      	adds	r3, #72	; 0x48
 800d2d8:	3316      	adds	r3, #22
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fc fed4 	bl	800a088 <ld_word>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d106      	bne.n	800d2f8 <find_volume+0x3c4>
 800d2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ec:	3348      	adds	r3, #72	; 0x48
 800d2ee:	3324      	adds	r3, #36	; 0x24
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7fc fee1 	bl	800a0b8 <ld_dword>
 800d2f6:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800d2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2fc:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d300:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800d304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d306:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d30a:	789b      	ldrb	r3, [r3, #2]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d005      	beq.n	800d31c <find_volume+0x3e8>
 800d310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d312:	789b      	ldrb	r3, [r3, #2]
 800d314:	2b02      	cmp	r3, #2
 800d316:	d001      	beq.n	800d31c <find_volume+0x3e8>
 800d318:	230d      	movs	r3, #13
 800d31a:	e14e      	b.n	800d5ba <find_volume+0x686>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d31e:	789b      	ldrb	r3, [r3, #2]
 800d320:	461a      	mov	r2, r3
 800d322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d324:	fb02 f303 	mul.w	r3, r2, r3
 800d328:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d32a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d32c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d330:	b29a      	uxth	r2, r3
 800d332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d334:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d338:	895b      	ldrh	r3, [r3, #10]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d008      	beq.n	800d350 <find_volume+0x41c>
 800d33e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d340:	895b      	ldrh	r3, [r3, #10]
 800d342:	461a      	mov	r2, r3
 800d344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d346:	895b      	ldrh	r3, [r3, #10]
 800d348:	3b01      	subs	r3, #1
 800d34a:	4013      	ands	r3, r2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <find_volume+0x420>
 800d350:	230d      	movs	r3, #13
 800d352:	e132      	b.n	800d5ba <find_volume+0x686>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d356:	3348      	adds	r3, #72	; 0x48
 800d358:	3311      	adds	r3, #17
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fc fe94 	bl	800a088 <ld_word>
 800d360:	4603      	mov	r3, r0
 800d362:	461a      	mov	r2, r3
 800d364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d366:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d36a:	891b      	ldrh	r3, [r3, #8]
 800d36c:	f003 030f 	and.w	r3, r3, #15
 800d370:	b29b      	uxth	r3, r3
 800d372:	2b00      	cmp	r3, #0
 800d374:	d001      	beq.n	800d37a <find_volume+0x446>
 800d376:	230d      	movs	r3, #13
 800d378:	e11f      	b.n	800d5ba <find_volume+0x686>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37c:	3348      	adds	r3, #72	; 0x48
 800d37e:	3313      	adds	r3, #19
 800d380:	4618      	mov	r0, r3
 800d382:	f7fc fe81 	bl	800a088 <ld_word>
 800d386:	4603      	mov	r3, r0
 800d388:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d106      	bne.n	800d39e <find_volume+0x46a>
 800d390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d392:	3348      	adds	r3, #72	; 0x48
 800d394:	3320      	adds	r3, #32
 800d396:	4618      	mov	r0, r3
 800d398:	f7fc fe8e 	bl	800a0b8 <ld_dword>
 800d39c:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d39e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3a0:	3348      	adds	r3, #72	; 0x48
 800d3a2:	330e      	adds	r3, #14
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fc fe6f 	bl	800a088 <ld_word>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d3ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d101      	bne.n	800d3b8 <find_volume+0x484>
 800d3b4:	230d      	movs	r3, #13
 800d3b6:	e100      	b.n	800d5ba <find_volume+0x686>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d3b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d3ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3bc:	4413      	add	r3, r2
 800d3be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3c0:	8912      	ldrh	r2, [r2, #8]
 800d3c2:	0912      	lsrs	r2, r2, #4
 800d3c4:	b292      	uxth	r2, r2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d3ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d201      	bcs.n	800d3d6 <find_volume+0x4a2>
 800d3d2:	230d      	movs	r3, #13
 800d3d4:	e0f1      	b.n	800d5ba <find_volume+0x686>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d3d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3de:	8952      	ldrh	r2, [r2, #10]
 800d3e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <find_volume+0x4bc>
 800d3ec:	230d      	movs	r3, #13
 800d3ee:	e0e4      	b.n	800d5ba <find_volume+0x686>
		fmt = FS_FAT32;
 800d3f0:	2303      	movs	r3, #3
 800d3f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d802      	bhi.n	800d406 <find_volume+0x4d2>
 800d400:	2302      	movs	r3, #2
 800d402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d408:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d802      	bhi.n	800d416 <find_volume+0x4e2>
 800d410:	2301      	movs	r3, #1
 800d412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d418:	1c9a      	adds	r2, r3, #2
 800d41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d41c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800d41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d422:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d424:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d428:	441a      	add	r2, r3
 800d42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d42c:	639a      	str	r2, [r3, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 800d42e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d432:	441a      	add	r2, r3
 800d434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d436:	641a      	str	r2, [r3, #64]	; 0x40
		if (fmt == FS_FAT32) {
 800d438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	d11e      	bne.n	800d47e <find_volume+0x54a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d442:	3348      	adds	r3, #72	; 0x48
 800d444:	332a      	adds	r3, #42	; 0x2a
 800d446:	4618      	mov	r0, r3
 800d448:	f7fc fe1e 	bl	800a088 <ld_word>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <find_volume+0x522>
 800d452:	230d      	movs	r3, #13
 800d454:	e0b1      	b.n	800d5ba <find_volume+0x686>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d458:	891b      	ldrh	r3, [r3, #8]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <find_volume+0x52e>
 800d45e:	230d      	movs	r3, #13
 800d460:	e0ab      	b.n	800d5ba <find_volume+0x686>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d464:	3348      	adds	r3, #72	; 0x48
 800d466:	332c      	adds	r3, #44	; 0x2c
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fc fe25 	bl	800a0b8 <ld_dword>
 800d46e:	4602      	mov	r2, r0
 800d470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d472:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d47c:	e01f      	b.n	800d4be <find_volume+0x58a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d47e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d480:	891b      	ldrh	r3, [r3, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <find_volume+0x556>
 800d486:	230d      	movs	r3, #13
 800d488:	e097      	b.n	800d5ba <find_volume+0x686>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d48c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d48e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d490:	441a      	add	r2, r3
 800d492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d494:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	d103      	bne.n	800d4a6 <find_volume+0x572>
 800d49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	e00a      	b.n	800d4bc <find_volume+0x588>
 800d4a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	4413      	add	r3, r2
 800d4b0:	085a      	lsrs	r2, r3, #1
 800d4b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d4bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d4c8:	0a5b      	lsrs	r3, r3, #9
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d201      	bcs.n	800d4d2 <find_volume+0x59e>
 800d4ce:	230d      	movs	r3, #13
 800d4d0:	e073      	b.n	800d5ba <find_volume+0x686>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4d8:	619a      	str	r2, [r3, #24]
 800d4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4dc:	699a      	ldr	r2, [r3, #24]
 800d4de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4e4:	2280      	movs	r2, #128	; 0x80
 800d4e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4ec:	2b03      	cmp	r3, #3
 800d4ee:	d149      	bne.n	800d584 <find_volume+0x650>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f2:	3348      	adds	r3, #72	; 0x48
 800d4f4:	3330      	adds	r3, #48	; 0x30
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fc fdc6 	bl	800a088 <ld_word>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d140      	bne.n	800d584 <find_volume+0x650>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d504:	3301      	adds	r3, #1
 800d506:	4619      	mov	r1, r3
 800d508:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d50a:	f7fd f9b1 	bl	800a870 <move_window>
 800d50e:	4603      	mov	r3, r0
 800d510:	2b00      	cmp	r3, #0
 800d512:	d137      	bne.n	800d584 <find_volume+0x650>
		{
			fs->fsi_flag = 0;
 800d514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d516:	2200      	movs	r2, #0
 800d518:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d51a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d51c:	3348      	adds	r3, #72	; 0x48
 800d51e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d522:	4618      	mov	r0, r3
 800d524:	f7fc fdb0 	bl	800a088 <ld_word>
 800d528:	4603      	mov	r3, r0
 800d52a:	461a      	mov	r2, r3
 800d52c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d530:	429a      	cmp	r2, r3
 800d532:	d127      	bne.n	800d584 <find_volume+0x650>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d536:	3348      	adds	r3, #72	; 0x48
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fc fdbd 	bl	800a0b8 <ld_dword>
 800d53e:	4603      	mov	r3, r0
 800d540:	4a20      	ldr	r2, [pc, #128]	; (800d5c4 <find_volume+0x690>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d11e      	bne.n	800d584 <find_volume+0x650>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d548:	3348      	adds	r3, #72	; 0x48
 800d54a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fc fdb2 	bl	800a0b8 <ld_dword>
 800d554:	4603      	mov	r3, r0
 800d556:	4a1c      	ldr	r2, [pc, #112]	; (800d5c8 <find_volume+0x694>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d113      	bne.n	800d584 <find_volume+0x650>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d55e:	3348      	adds	r3, #72	; 0x48
 800d560:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d564:	4618      	mov	r0, r3
 800d566:	f7fc fda7 	bl	800a0b8 <ld_dword>
 800d56a:	4602      	mov	r2, r0
 800d56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d56e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d572:	3348      	adds	r3, #72	; 0x48
 800d574:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d578:	4618      	mov	r0, r3
 800d57a:	f7fc fd9d 	bl	800a0b8 <ld_dword>
 800d57e:	4602      	mov	r2, r0
 800d580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d582:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d586:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d58a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d58c:	4b0f      	ldr	r3, [pc, #60]	; (800d5cc <find_volume+0x698>)
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	3301      	adds	r3, #1
 800d592:	b29a      	uxth	r2, r3
 800d594:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <find_volume+0x698>)
 800d596:	801a      	strh	r2, [r3, #0]
 800d598:	4b0c      	ldr	r3, [pc, #48]	; (800d5cc <find_volume+0x698>)
 800d59a:	881a      	ldrh	r2, [r3, #0]
 800d59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d5a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a2:	4a0b      	ldr	r2, [pc, #44]	; (800d5d0 <find_volume+0x69c>)
 800d5a4:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a8:	4a0a      	ldr	r2, [pc, #40]	; (800d5d4 <find_volume+0x6a0>)
 800d5aa:	611a      	str	r2, [r3, #16]
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800d5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d5b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d5b4:	f7fd f8f4 	bl	800a7a0 <clear_lock>
#endif
	return FR_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3760      	adds	r7, #96	; 0x60
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d5c4:	41615252 	.word	0x41615252
 800d5c8:	61417272 	.word	0x61417272
 800d5cc:	240002f4 	.word	0x240002f4
 800d5d0:	24001548 	.word	0x24001548
 800d5d4:	240012e8 	.word	0x240012e8

0800d5d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d5e2:	2309      	movs	r3, #9
 800d5e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d01c      	beq.n	800d626 <validate+0x4e>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d018      	beq.n	800d626 <validate+0x4e>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d013      	beq.n	800d626 <validate+0x4e>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	889a      	ldrh	r2, [r3, #4]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	88db      	ldrh	r3, [r3, #6]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d10c      	bne.n	800d626 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	785b      	ldrb	r3, [r3, #1]
 800d612:	4618      	mov	r0, r3
 800d614:	f7fc fc9a 	bl	8009f4c <disk_status>
 800d618:	4603      	mov	r3, r0
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <validate+0x4e>
			res = FR_OK;
 800d622:	2300      	movs	r3, #0
 800d624:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <validate+0x5a>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	e000      	b.n	800d634 <validate+0x5c>
 800d632:	2300      	movs	r3, #0
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	6013      	str	r3, [r2, #0]
	return res;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b088      	sub	sp, #32
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	4613      	mov	r3, r2
 800d650:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d656:	f107 0310 	add.w	r3, r7, #16
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff fbc2 	bl	800cde4 <get_ldnumber>
 800d660:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	2b00      	cmp	r3, #0
 800d666:	da01      	bge.n	800d66c <f_mount+0x28>
 800d668:	230b      	movs	r3, #11
 800d66a:	e02b      	b.n	800d6c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d66c:	4a17      	ldr	r2, [pc, #92]	; (800d6cc <f_mount+0x88>)
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d674:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d005      	beq.n	800d688 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d67c:	69b8      	ldr	r0, [r7, #24]
 800d67e:	f7fd f88f 	bl	800a7a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	2200      	movs	r2, #0
 800d686:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	490d      	ldr	r1, [pc, #52]	; (800d6cc <f_mount+0x88>)
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d002      	beq.n	800d6aa <f_mount+0x66>
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d001      	beq.n	800d6ae <f_mount+0x6a>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	e00a      	b.n	800d6c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d6ae:	f107 010c 	add.w	r1, r7, #12
 800d6b2:	f107 0308 	add.w	r3, r7, #8
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7ff fc3b 	bl	800cf34 <find_volume>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3720      	adds	r7, #32
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	240002f0 	.word	0x240002f0

0800d6d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d6d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d6d4:	b0a4      	sub	sp, #144	; 0x90
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	60f8      	str	r0, [r7, #12]
 800d6da:	60b9      	str	r1, [r7, #8]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <f_open+0x1a>
 800d6e6:	2309      	movs	r3, #9
 800d6e8:	e29e      	b.n	800dc28 <f_open+0x558>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6f0:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d6f2:	79fa      	ldrb	r2, [r7, #7]
 800d6f4:	f107 0114 	add.w	r1, r7, #20
 800d6f8:	f107 0308 	add.w	r3, r7, #8
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7ff fc19 	bl	800cf34 <find_volume>
 800d702:	4603      	mov	r3, r0
 800d704:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800d708:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f040 8282 	bne.w	800dc16 <f_open+0x546>
		dj.obj.fs = fs;
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	f107 0318 	add.w	r3, r7, #24
 800d71c:	4611      	mov	r1, r2
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff fa4e 	bl	800cbc0 <follow_path>
 800d724:	4603      	mov	r3, r0
 800d726:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d72a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d11a      	bne.n	800d768 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d732:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d736:	b25b      	sxtb	r3, r3
 800d738:	2b00      	cmp	r3, #0
 800d73a:	da03      	bge.n	800d744 <f_open+0x74>
				res = FR_INVALID_NAME;
 800d73c:	2306      	movs	r3, #6
 800d73e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d742:	e011      	b.n	800d768 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d744:	79fb      	ldrb	r3, [r7, #7]
 800d746:	f023 0301 	bic.w	r3, r3, #1
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	bf14      	ite	ne
 800d74e:	2301      	movne	r3, #1
 800d750:	2300      	moveq	r3, #0
 800d752:	b2db      	uxtb	r3, r3
 800d754:	461a      	mov	r2, r3
 800d756:	f107 0318 	add.w	r3, r7, #24
 800d75a:	4611      	mov	r1, r2
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fc fed7 	bl	800a510 <chk_lock>
 800d762:	4603      	mov	r3, r0
 800d764:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d768:	79fb      	ldrb	r3, [r7, #7]
 800d76a:	f003 031c 	and.w	r3, r3, #28
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 8109 	beq.w	800d986 <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 800d774:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d017      	beq.n	800d7ac <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d77c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d780:	2b04      	cmp	r3, #4
 800d782:	d10e      	bne.n	800d7a2 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d784:	f7fc ff20 	bl	800a5c8 <enq_lock>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d006      	beq.n	800d79c <f_open+0xcc>
 800d78e:	f107 0318 	add.w	r3, r7, #24
 800d792:	4618      	mov	r0, r3
 800d794:	f7fe fe66 	bl	800c464 <dir_register>
 800d798:	4603      	mov	r3, r0
 800d79a:	e000      	b.n	800d79e <f_open+0xce>
 800d79c:	2312      	movs	r3, #18
 800d79e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d7a2:	79fb      	ldrb	r3, [r7, #7]
 800d7a4:	f043 0308 	orr.w	r3, r3, #8
 800d7a8:	71fb      	strb	r3, [r7, #7]
 800d7aa:	e010      	b.n	800d7ce <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d7ac:	7fbb      	ldrb	r3, [r7, #30]
 800d7ae:	f003 0311 	and.w	r3, r3, #17
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <f_open+0xee>
					res = FR_DENIED;
 800d7b6:	2307      	movs	r3, #7
 800d7b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d7bc:	e007      	b.n	800d7ce <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d7be:	79fb      	ldrb	r3, [r7, #7]
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <f_open+0xfe>
 800d7c8:	2308      	movs	r3, #8
 800d7ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d7ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f040 80f1 	bne.w	800d9ba <f_open+0x2ea>
 800d7d8:	79fb      	ldrb	r3, [r7, #7]
 800d7da:	f003 0308 	and.w	r3, r3, #8
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 80eb 	beq.w	800d9ba <f_open+0x2ea>
				dw = GET_FATTIME();
 800d7e4:	f7fc fa18 	bl	8009c18 <get_fattime>
 800d7e8:	67f8      	str	r0, [r7, #124]	; 0x7c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b04      	cmp	r3, #4
 800d7f0:	f040 8082 	bne.w	800d8f8 <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d7f4:	697a      	ldr	r2, [r7, #20]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	691b      	ldr	r3, [r3, #16]
 800d7fe:	3334      	adds	r3, #52	; 0x34
 800d800:	4618      	mov	r0, r3
 800d802:	f7fc fc59 	bl	800a0b8 <ld_dword>
 800d806:	4602      	mov	r2, r0
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	3338      	adds	r3, #56	; 0x38
 800d812:	4618      	mov	r0, r3
 800d814:	f7fc fc73 	bl	800a0fe <ld_qword>
 800d818:	4602      	mov	r2, r0
 800d81a:	460b      	mov	r3, r1
 800d81c:	68f9      	ldr	r1, [r7, #12]
 800d81e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	3321      	adds	r3, #33	; 0x21
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	f003 0302 	and.w	r3, r3, #2
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2200      	movs	r2, #0
 800d838:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	3308      	adds	r3, #8
 800d840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d842:	4618      	mov	r0, r3
 800d844:	f7fc fd31 	bl	800a2aa <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	3314      	adds	r3, #20
 800d84e:	2200      	movs	r2, #0
 800d850:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	691b      	ldr	r3, [r3, #16]
 800d856:	330c      	adds	r3, #12
 800d858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fc fd25 	bl	800a2aa <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	3315      	adds	r3, #21
 800d866:	2200      	movs	r2, #0
 800d868:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	3304      	adds	r3, #4
 800d870:	2220      	movs	r2, #32
 800d872:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	3334      	adds	r3, #52	; 0x34
 800d87a:	2100      	movs	r1, #0
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fc fd14 	bl	800a2aa <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	691b      	ldr	r3, [r3, #16]
 800d886:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d88a:	f04f 0200 	mov.w	r2, #0
 800d88e:	f04f 0300 	mov.w	r3, #0
 800d892:	4608      	mov	r0, r1
 800d894:	f7fc fd35 	bl	800a302 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d8a0:	f04f 0200 	mov.w	r2, #0
 800d8a4:	f04f 0300 	mov.w	r3, #0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	f7fc fd2a 	bl	800a302 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	3321      	adds	r3, #33	; 0x21
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800d8b8:	f107 0318 	add.w	r3, r7, #24
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fe fb1e 	bl	800befe <store_xdir>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d8c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d174      	bne.n	800d9ba <f_open+0x2ea>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d070      	beq.n	800d9ba <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	f7fd fbd3 	bl	800b08c <remove_chain>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	689a      	ldr	r2, [r3, #8]
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	3a01      	subs	r2, #1
 800d8f4:	615a      	str	r2, [r3, #20]
 800d8f6:	e060      	b.n	800d9ba <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d8f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8fa:	330e      	adds	r3, #14
 800d8fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fc fcd3 	bl	800a2aa <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d906:	3316      	adds	r3, #22
 800d908:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fc fccd 	bl	800a2aa <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d912:	330b      	adds	r3, #11
 800d914:	2220      	movs	r2, #32
 800d916:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d91c:	4611      	mov	r1, r2
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fd ff61 	bl	800b7e6 <ld_clust>
 800d924:	67b8      	str	r0, [r7, #120]	; 0x78
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d92a:	2200      	movs	r2, #0
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fd ff79 	bl	800b824 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d934:	331c      	adds	r3, #28
 800d936:	2100      	movs	r1, #0
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fc fcb6 	bl	800a2aa <st_dword>
					fs->wflag = 1;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	2201      	movs	r2, #1
 800d942:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d946:	2b00      	cmp	r3, #0
 800d948:	d037      	beq.n	800d9ba <f_open+0x2ea>
						dw = fs->winsect;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d94e:	67fb      	str	r3, [r7, #124]	; 0x7c
						res = remove_chain(&dj.obj, cl, 0);
 800d950:	f107 0318 	add.w	r3, r7, #24
 800d954:	2200      	movs	r2, #0
 800d956:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fd fb97 	bl	800b08c <remove_chain>
 800d95e:	4603      	mov	r3, r0
 800d960:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 800d964:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d126      	bne.n	800d9ba <f_open+0x2ea>
							res = move_window(fs, dw);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d970:	4618      	mov	r0, r3
 800d972:	f7fc ff7d 	bl	800a870 <move_window>
 800d976:	4603      	mov	r3, r0
 800d978:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d980:	3a01      	subs	r2, #1
 800d982:	615a      	str	r2, [r3, #20]
 800d984:	e019      	b.n	800d9ba <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d986:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d115      	bne.n	800d9ba <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d98e:	7fbb      	ldrb	r3, [r7, #30]
 800d990:	f003 0310 	and.w	r3, r3, #16
 800d994:	2b00      	cmp	r3, #0
 800d996:	d003      	beq.n	800d9a0 <f_open+0x2d0>
					res = FR_NO_FILE;
 800d998:	2304      	movs	r3, #4
 800d99a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d99e:	e00c      	b.n	800d9ba <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d9a0:	79fb      	ldrb	r3, [r7, #7]
 800d9a2:	f003 0302 	and.w	r3, r3, #2
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d007      	beq.n	800d9ba <f_open+0x2ea>
 800d9aa:	7fbb      	ldrb	r3, [r7, #30]
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <f_open+0x2ea>
						res = FR_DENIED;
 800d9b4:	2307      	movs	r3, #7
 800d9b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d9ba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d128      	bne.n	800da14 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d9c2:	79fb      	ldrb	r3, [r7, #7]
 800d9c4:	f003 0308 	and.w	r3, r3, #8
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d003      	beq.n	800d9d4 <f_open+0x304>
				mode |= FA_MODIFIED;
 800d9cc:	79fb      	ldrb	r3, [r7, #7]
 800d9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9d2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800d9dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	f023 0301 	bic.w	r3, r3, #1
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	bf14      	ite	ne
 800d9ec:	2301      	movne	r3, #1
 800d9ee:	2300      	moveq	r3, #0
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	f107 0318 	add.w	r3, r7, #24
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7fc fe06 	bl	800a60c <inc_lock>
 800da00:	4602      	mov	r2, r0
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d102      	bne.n	800da14 <f_open+0x344>
 800da0e:	2302      	movs	r3, #2
 800da10:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800da14:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f040 80fc 	bne.w	800dc16 <f_open+0x546>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	2b04      	cmp	r3, #4
 800da24:	d12c      	bne.n	800da80 <f_open+0x3b0>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800da26:	6a3a      	ldr	r2, [r7, #32]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800da2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800da30:	4613      	mov	r3, r2
 800da32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800da36:	7ffa      	ldrb	r2, [r7, #31]
 800da38:	431a      	orrs	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800da3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	3334      	adds	r3, #52	; 0x34
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fc fb34 	bl	800a0b8 <ld_dword>
 800da50:	4602      	mov	r2, r0
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	3338      	adds	r3, #56	; 0x38
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fc fb4e 	bl	800a0fe <ld_qword>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	68f9      	ldr	r1, [r7, #12]
 800da68:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	3321      	adds	r3, #33	; 0x21
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	f003 0302 	and.w	r3, r3, #2
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	71da      	strb	r2, [r3, #7]
 800da7e:	e014      	b.n	800daaa <f_open+0x3da>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da84:	4611      	mov	r1, r2
 800da86:	4618      	mov	r0, r3
 800da88:	f7fd fead 	bl	800b7e6 <ld_clust>
 800da8c:	4602      	mov	r2, r0
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800da92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da94:	331c      	adds	r3, #28
 800da96:	4618      	mov	r0, r3
 800da98:	f7fc fb0e 	bl	800a0b8 <ld_dword>
 800da9c:	4603      	mov	r3, r0
 800da9e:	461a      	mov	r2, r3
 800daa0:	f04f 0300 	mov.w	r3, #0
 800daa4:	68f9      	ldr	r1, [r7, #12]
 800daa6:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2200      	movs	r2, #0
 800daae:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	88da      	ldrh	r2, [r3, #6]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	79fa      	ldrb	r2, [r7, #7]
 800dac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2200      	movs	r2, #0
 800dad2:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dad4:	68f9      	ldr	r1, [r7, #12]
 800dad6:	f04f 0200 	mov.w	r2, #0
 800dada:	f04f 0300 	mov.w	r3, #0
 800dade:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	3354      	adds	r3, #84	; 0x54
 800dae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daea:	2100      	movs	r1, #0
 800daec:	4618      	mov	r0, r3
 800daee:	f7fc fcb1 	bl	800a454 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800daf2:	79fb      	ldrb	r3, [r7, #7]
 800daf4:	f003 0320 	and.w	r3, r3, #32
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 808c 	beq.w	800dc16 <f_open+0x546>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800db04:	4313      	orrs	r3, r2
 800db06:	f000 8086 	beq.w	800dc16 <f_open+0x546>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800db10:	68f9      	ldr	r1, [r7, #12]
 800db12:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	895b      	ldrh	r3, [r3, #10]
 800db1a:	025b      	lsls	r3, r3, #9
 800db1c:	677b      	str	r3, [r7, #116]	; 0x74
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800db2c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800db30:	e022      	b.n	800db78 <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fc ff55 	bl	800a9e8 <get_fat>
 800db3e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 800db42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db46:	2b01      	cmp	r3, #1
 800db48:	d802      	bhi.n	800db50 <f_open+0x480>
 800db4a:	2302      	movs	r3, #2
 800db4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db58:	d102      	bne.n	800db60 <f_open+0x490>
 800db5a:	2301      	movs	r3, #1
 800db5c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db62:	461a      	mov	r2, r3
 800db64:	f04f 0300 	mov.w	r3, #0
 800db68:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800db6c:	ebb0 0802 	subs.w	r8, r0, r2
 800db70:	eb61 0903 	sbc.w	r9, r1, r3
 800db74:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
 800db78:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d109      	bne.n	800db94 <f_open+0x4c4>
 800db80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db82:	4618      	mov	r0, r3
 800db84:	f04f 0100 	mov.w	r1, #0
 800db88:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800db8c:	4299      	cmp	r1, r3
 800db8e:	bf08      	it	eq
 800db90:	4290      	cmpeq	r0, r2
 800db92:	d3ce      	bcc.n	800db32 <f_open+0x462>
				}
				fp->clust = clst;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800db9a:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800db9c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d138      	bne.n	800dc16 <f_open+0x546>
 800dba4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800dba8:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dbac:	f04f 0100 	mov.w	r1, #0
 800dbb0:	ea02 0400 	and.w	r4, r2, r0
 800dbb4:	ea03 0501 	and.w	r5, r3, r1
 800dbb8:	ea54 0305 	orrs.w	r3, r4, r5
 800dbbc:	d02b      	beq.n	800dc16 <f_open+0x546>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fc feef 	bl	800a9a8 <clust2sect>
 800dbca:	6738      	str	r0, [r7, #112]	; 0x70
 800dbcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d103      	bne.n	800dbda <f_open+0x50a>
						res = FR_INT_ERR;
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800dbd8:	e01d      	b.n	800dc16 <f_open+0x546>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dbda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dbde:	f04f 0200 	mov.w	r2, #0
 800dbe2:	f04f 0300 	mov.w	r3, #0
 800dbe6:	0a42      	lsrs	r2, r0, #9
 800dbe8:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800dbec:	0a4b      	lsrs	r3, r1, #9
 800dbee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbf0:	441a      	add	r2, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	7858      	ldrb	r0, [r3, #1]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc04:	2301      	movs	r3, #1
 800dc06:	f7fc f9e1 	bl	8009fcc <disk_read>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d002      	beq.n	800dc16 <f_open+0x546>
 800dc10:	2301      	movs	r3, #1
 800dc12:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dc16:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d002      	beq.n	800dc24 <f_open+0x554>
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2200      	movs	r2, #0
 800dc22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dc24:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3790      	adds	r7, #144	; 0x90
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800dc32 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800dc32:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc36:	b090      	sub	sp, #64	; 0x40
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
 800dc40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f107 0214 	add.w	r2, r7, #20
 800dc52:	4611      	mov	r1, r2
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7ff fcbf 	bl	800d5d8 <validate>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d108      	bne.n	800dc7a <f_read+0x48>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dc72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <f_read+0x4e>
 800dc7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc7e:	e149      	b.n	800df14 <f_read+0x2e2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <f_read+0x60>
 800dc8e:	2307      	movs	r3, #7
 800dc90:	e140      	b.n	800df14 <f_read+0x2e2>
	remain = fp->obj.objsize - fp->fptr;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dc9e:	ebb0 0a02 	subs.w	sl, r0, r2
 800dca2:	eb61 0b03 	sbc.w	fp, r1, r3
 800dca6:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	461a      	mov	r2, r3
 800dcae:	f04f 0300 	mov.w	r3, #0
 800dcb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800dcb6:	4299      	cmp	r1, r3
 800dcb8:	bf08      	it	eq
 800dcba:	4290      	cmpeq	r0, r2
 800dcbc:	f080 8125 	bcs.w	800df0a <f_read+0x2d8>
 800dcc0:	6a3b      	ldr	r3, [r7, #32]
 800dcc2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800dcc4:	e121      	b.n	800df0a <f_read+0x2d8>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dccc:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dcd0:	f04f 0100 	mov.w	r1, #0
 800dcd4:	ea02 0400 	and.w	r4, r2, r0
 800dcd8:	ea03 0501 	and.w	r5, r3, r1
 800dcdc:	ea54 0305 	orrs.w	r3, r4, r5
 800dce0:	f040 80d9 	bne.w	800de96 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800dcea:	f04f 0200 	mov.w	r2, #0
 800dcee:	f04f 0300 	mov.w	r3, #0
 800dcf2:	0a42      	lsrs	r2, r0, #9
 800dcf4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800dcf8:	0a4b      	lsrs	r3, r1, #9
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	895b      	ldrh	r3, [r3, #10]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	4013      	ands	r3, r2
 800dd02:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d132      	bne.n	800dd70 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd10:	4313      	orrs	r3, r2
 800dd12:	d103      	bne.n	800dd1c <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd1a:	e013      	b.n	800dd44 <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d007      	beq.n	800dd34 <f_read+0x102>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f7fd fb63 	bl	800b3f6 <clmt_clust>
 800dd30:	63b8      	str	r0, [r7, #56]	; 0x38
 800dd32:	e007      	b.n	800dd44 <f_read+0x112>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	f7fc fe53 	bl	800a9e8 <get_fat>
 800dd42:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800dd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d805      	bhi.n	800dd56 <f_read+0x124>
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2202      	movs	r2, #2
 800dd4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dd52:	2302      	movs	r3, #2
 800dd54:	e0de      	b.n	800df14 <f_read+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd5c:	d105      	bne.n	800dd6a <f_read+0x138>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2201      	movs	r2, #1
 800dd62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dd66:	2301      	movs	r3, #1
 800dd68:	e0d4      	b.n	800df14 <f_read+0x2e2>
				fp->clust = clst;				/* Update current cluster */
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd6e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dd70:	697a      	ldr	r2, [r7, #20]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd76:	4619      	mov	r1, r3
 800dd78:	4610      	mov	r0, r2
 800dd7a:	f7fc fe15 	bl	800a9a8 <clust2sect>
 800dd7e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d105      	bne.n	800dd92 <f_read+0x160>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2202      	movs	r2, #2
 800dd8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dd8e:	2302      	movs	r3, #2
 800dd90:	e0c0      	b.n	800df14 <f_read+0x2e2>
			sect += csect;
 800dd92:	69ba      	ldr	r2, [r7, #24]
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	4413      	add	r3, r2
 800dd98:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	0a5b      	lsrs	r3, r3, #9
 800dd9e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d03b      	beq.n	800de1e <f_read+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dda6:	69fa      	ldr	r2, [r7, #28]
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	4413      	add	r3, r2
 800ddac:	697a      	ldr	r2, [r7, #20]
 800ddae:	8952      	ldrh	r2, [r2, #10]
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d905      	bls.n	800ddc0 <f_read+0x18e>
					cc = fs->csize - csect;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	895b      	ldrh	r3, [r3, #10]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	7858      	ldrb	r0, [r3, #1]
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc6:	69ba      	ldr	r2, [r7, #24]
 800ddc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddca:	f7fc f8ff 	bl	8009fcc <disk_read>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d005      	beq.n	800dde0 <f_read+0x1ae>
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dddc:	2301      	movs	r3, #1
 800ddde:	e099      	b.n	800df14 <f_read+0x2e2>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dde6:	b25b      	sxtb	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	da14      	bge.n	800de16 <f_read+0x1e4>
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d90d      	bls.n	800de16 <f_read+0x1e4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	025b      	lsls	r3, r3, #9
 800de04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de06:	18d0      	adds	r0, r2, r3
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	3354      	adds	r3, #84	; 0x54
 800de0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de10:	4619      	mov	r1, r3
 800de12:	f7fc fafe 	bl	800a412 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de18:	025b      	lsls	r3, r3, #9
 800de1a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800de1c:	e059      	b.n	800ded2 <f_read+0x2a0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de22:	69ba      	ldr	r2, [r7, #24]
 800de24:	429a      	cmp	r2, r3
 800de26:	d033      	beq.n	800de90 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de2e:	b25b      	sxtb	r3, r3
 800de30:	2b00      	cmp	r3, #0
 800de32:	da1b      	bge.n	800de6c <f_read+0x23a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	7858      	ldrb	r0, [r3, #1]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de42:	2301      	movs	r3, #1
 800de44:	f7fc f8e2 	bl	800a00c <disk_write>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d005      	beq.n	800de5a <f_read+0x228>
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2201      	movs	r2, #1
 800de52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800de56:	2301      	movs	r3, #1
 800de58:	e05c      	b.n	800df14 <f_read+0x2e2>
					fp->flag &= (BYTE)~FA_DIRTY;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de64:	b2da      	uxtb	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	7858      	ldrb	r0, [r3, #1]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800de76:	2301      	movs	r3, #1
 800de78:	69ba      	ldr	r2, [r7, #24]
 800de7a:	f7fc f8a7 	bl	8009fcc <disk_read>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d005      	beq.n	800de90 <f_read+0x25e>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2201      	movs	r2, #1
 800de88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800de8c:	2301      	movs	r3, #1
 800de8e:	e041      	b.n	800df14 <f_read+0x2e2>
			}
#endif
			fp->sect = sect;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	69ba      	ldr	r2, [r7, #24]
 800de94:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800de9c:	4613      	mov	r3, r2
 800de9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dea2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dea6:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	429a      	cmp	r2, r3
 800deae:	d901      	bls.n	800deb4 <f_read+0x282>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dec0:	4613      	mov	r3, r2
 800dec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec6:	440b      	add	r3, r1
 800dec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800deca:	4619      	mov	r1, r3
 800decc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dece:	f7fc faa0 	bl	800a412 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ded2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ded4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded6:	4413      	add	r3, r2
 800ded8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800dee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee2:	461a      	mov	r2, r3
 800dee4:	f04f 0300 	mov.w	r3, #0
 800dee8:	eb10 0802 	adds.w	r8, r0, r2
 800deec:	eb41 0903 	adc.w	r9, r1, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defc:	441a      	add	r2, r3
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	601a      	str	r2, [r3, #0]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f47f aeda 	bne.w	800dcc6 <f_read+0x94>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3740      	adds	r7, #64	; 0x40
 800df18:	46bd      	mov	sp, r7
 800df1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df1e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800df1e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800df22:	b08c      	sub	sp, #48	; 0x30
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	607a      	str	r2, [r7, #4]
 800df2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	2200      	movs	r2, #0
 800df36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f107 0210 	add.w	r2, r7, #16
 800df3e:	4611      	mov	r1, r2
 800df40:	4618      	mov	r0, r3
 800df42:	f7ff fb49 	bl	800d5d8 <validate>
 800df46:	4603      	mov	r3, r0
 800df48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df50:	2b00      	cmp	r3, #0
 800df52:	d108      	bne.n	800df66 <f_write+0x48>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800df5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800df5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df62:	2b00      	cmp	r3, #0
 800df64:	d002      	beq.n	800df6c <f_write+0x4e>
 800df66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df6a:	e18c      	b.n	800e286 <f_write+0x368>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df72:	f003 0302 	and.w	r3, r3, #2
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <f_write+0x60>
 800df7a:	2307      	movs	r3, #7
 800df7c:	e183      	b.n	800e286 <f_write+0x368>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	2b04      	cmp	r3, #4
 800df84:	f000 816f 	beq.w	800e266 <f_write+0x348>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	18d1      	adds	r1, r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800df98:	4613      	mov	r3, r2
 800df9a:	4299      	cmp	r1, r3
 800df9c:	f080 8163 	bcs.w	800e266 <f_write+0x348>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	43db      	mvns	r3, r3
 800dfaa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dfac:	e15b      	b.n	800e266 <f_write+0x348>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dfb4:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dfb8:	f04f 0100 	mov.w	r1, #0
 800dfbc:	ea02 0400 	and.w	r4, r2, r0
 800dfc0:	ea03 0501 	and.w	r5, r3, r1
 800dfc4:	ea54 0305 	orrs.w	r3, r4, r5
 800dfc8:	f040 80fb 	bne.w	800e1c2 <f_write+0x2a4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800dfd2:	f04f 0200 	mov.w	r2, #0
 800dfd6:	f04f 0300 	mov.w	r3, #0
 800dfda:	0a42      	lsrs	r2, r0, #9
 800dfdc:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800dfe0:	0a4b      	lsrs	r3, r1, #9
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	895b      	ldrh	r3, [r3, #10]
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	4013      	ands	r3, r2
 800dfea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d146      	bne.n	800e080 <f_write+0x162>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dff8:	4313      	orrs	r3, r2
 800dffa:	d10c      	bne.n	800e016 <f_write+0xf8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	2b00      	cmp	r3, #0
 800e006:	d11a      	bne.n	800e03e <f_write+0x120>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2100      	movs	r1, #0
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fd f8f1 	bl	800b1f4 <create_chain>
 800e012:	62b8      	str	r0, [r7, #40]	; 0x28
 800e014:	e013      	b.n	800e03e <f_write+0x120>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d007      	beq.n	800e02e <f_write+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f7fd f9e6 	bl	800b3f6 <clmt_clust>
 800e02a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e02c:	e007      	b.n	800e03e <f_write+0x120>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e02e:	68fa      	ldr	r2, [r7, #12]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e034:	4619      	mov	r1, r3
 800e036:	4610      	mov	r0, r2
 800e038:	f7fd f8dc 	bl	800b1f4 <create_chain>
 800e03c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 8115 	beq.w	800e270 <f_write+0x352>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d105      	bne.n	800e058 <f_write+0x13a>
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2202      	movs	r2, #2
 800e050:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e054:	2302      	movs	r3, #2
 800e056:	e116      	b.n	800e286 <f_write+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e05e:	d105      	bne.n	800e06c <f_write+0x14e>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e068:	2301      	movs	r3, #1
 800e06a:	e10c      	b.n	800e286 <f_write+0x368>
				fp->clust = clst;			/* Update current cluster */
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e070:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	689b      	ldr	r3, [r3, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d102      	bne.n	800e080 <f_write+0x162>
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e07e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e086:	b25b      	sxtb	r3, r3
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da1b      	bge.n	800e0c4 <f_write+0x1a6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	7858      	ldrb	r0, [r3, #1]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e09a:	2301      	movs	r3, #1
 800e09c:	f7fb ffb6 	bl	800a00c <disk_write>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d005      	beq.n	800e0b2 <f_write+0x194>
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e0e9      	b.n	800e286 <f_write+0x368>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e0c4:	693a      	ldr	r2, [r7, #16]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	f7fc fc6b 	bl	800a9a8 <clust2sect>
 800e0d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d105      	bne.n	800e0e6 <f_write+0x1c8>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2202      	movs	r2, #2
 800e0de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e0e2:	2302      	movs	r3, #2
 800e0e4:	e0cf      	b.n	800e286 <f_write+0x368>
			sect += csect;
 800e0e6:	697a      	ldr	r2, [r7, #20]
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	0a5b      	lsrs	r3, r3, #9
 800e0f2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e0f4:	6a3b      	ldr	r3, [r7, #32]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d03f      	beq.n	800e17a <f_write+0x25c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e0fa:	69ba      	ldr	r2, [r7, #24]
 800e0fc:	6a3b      	ldr	r3, [r7, #32]
 800e0fe:	4413      	add	r3, r2
 800e100:	693a      	ldr	r2, [r7, #16]
 800e102:	8952      	ldrh	r2, [r2, #10]
 800e104:	4293      	cmp	r3, r2
 800e106:	d905      	bls.n	800e114 <f_write+0x1f6>
					cc = fs->csize - csect;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	895b      	ldrh	r3, [r3, #10]
 800e10c:	461a      	mov	r2, r3
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	7858      	ldrb	r0, [r3, #1]
 800e118:	6a3b      	ldr	r3, [r7, #32]
 800e11a:	697a      	ldr	r2, [r7, #20]
 800e11c:	69f9      	ldr	r1, [r7, #28]
 800e11e:	f7fb ff75 	bl	800a00c <disk_write>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d005      	beq.n	800e134 <f_write+0x216>
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e130:	2301      	movs	r3, #1
 800e132:	e0a8      	b.n	800e286 <f_write+0x368>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	6a3a      	ldr	r2, [r7, #32]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d917      	bls.n	800e172 <f_write+0x254>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	1ad3      	subs	r3, r2, r3
 800e150:	025b      	lsls	r3, r3, #9
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	4413      	add	r3, r2
 800e156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e15a:	4619      	mov	r1, r3
 800e15c:	f7fc f959 	bl	800a412 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	025b      	lsls	r3, r3, #9
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e178:	e04a      	b.n	800e210 <f_write+0x2f2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e17e:	697a      	ldr	r2, [r7, #20]
 800e180:	429a      	cmp	r2, r3
 800e182:	d01b      	beq.n	800e1bc <f_write+0x29e>
				fp->fptr < fp->obj.objsize &&
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e190:	4299      	cmp	r1, r3
 800e192:	bf08      	it	eq
 800e194:	4290      	cmpeq	r0, r2
 800e196:	d211      	bcs.n	800e1bc <f_write+0x29e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	7858      	ldrb	r0, [r3, #1]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	f7fb ff11 	bl	8009fcc <disk_read>
 800e1aa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d005      	beq.n	800e1bc <f_write+0x29e>
					ABORT(fs, FR_DISK_ERR);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e064      	b.n	800e286 <f_write+0x368>
			}
#endif
			fp->sect = sect;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1ce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e1d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d901      	bls.n	800e1e0 <f_write+0x2c2>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1f2:	440b      	add	r3, r1
 800e1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1f6:	69f9      	ldr	r1, [r7, #28]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fc f90a 	bl	800a412 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e208:	b2da      	uxtb	r2, r3
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e210:	69fa      	ldr	r2, [r7, #28]
 800e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e214:	4413      	add	r3, r2
 800e216:	61fb      	str	r3, [r7, #28]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e220:	461a      	mov	r2, r3
 800e222:	f04f 0300 	mov.w	r3, #0
 800e226:	eb10 0802 	adds.w	r8, r0, r2
 800e22a:	eb41 0903 	adc.w	r9, r1, r3
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e23a:	68f9      	ldr	r1, [r7, #12]
 800e23c:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800e240:	428b      	cmp	r3, r1
 800e242:	bf08      	it	eq
 800e244:	4282      	cmpeq	r2, r0
 800e246:	d201      	bcs.n	800e24c <f_write+0x32e>
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	68f9      	ldr	r1, [r7, #12]
 800e24e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	441a      	add	r2, r3
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	601a      	str	r2, [r3, #0]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f47f aea0 	bne.w	800dfae <f_write+0x90>
 800e26e:	e000      	b.n	800e272 <f_write+0x354>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e270:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800e284:	2300      	movs	r3, #0
}
 800e286:	4618      	mov	r0, r3
 800e288:	3730      	adds	r7, #48	; 0x30
 800e28a:	46bd      	mov	sp, r7
 800e28c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e290 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b09c      	sub	sp, #112	; 0x70
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e29e:	4611      	mov	r1, r2
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7ff f999 	bl	800d5d8 <validate>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800e2ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f040 8105 	bne.w	800e4c0 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f000 80fd 	beq.w	800e4c0 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2cc:	b25b      	sxtb	r3, r3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	da17      	bge.n	800e302 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e2d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2d4:	7858      	ldrb	r0, [r3, #1]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f7fb fe93 	bl	800a00c <disk_write>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d001      	beq.n	800e2f0 <f_sync+0x60>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e0e9      	b.n	800e4c4 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e302:	f7fb fc89 	bl	8009c18 <get_fattime>
 800e306:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	2b04      	cmp	r3, #4
 800e30e:	f040 808c 	bne.w	800e42a <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	4618      	mov	r0, r3
 800e316:	f7fc fe59 	bl	800afcc <fill_first_frag>
 800e31a:	4603      	mov	r3, r0
 800e31c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e320:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e32e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e332:	4619      	mov	r1, r3
 800e334:	f7fc fe79 	bl	800b02a <fill_last_frag>
 800e338:	4603      	mov	r3, r0
 800e33a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800e33e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e342:	2b00      	cmp	r3, #0
 800e344:	f040 80bc 	bne.w	800e4c0 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	f107 0308 	add.w	r3, r7, #8
 800e34e:	4611      	mov	r1, r2
 800e350:	4618      	mov	r0, r3
 800e352:	f7fd fd99 	bl	800be88 <load_obj_dir>
 800e356:	4603      	mov	r3, r0
 800e358:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800e35c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e360:	2b00      	cmp	r3, #0
 800e362:	f040 80ad 	bne.w	800e4c0 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	3304      	adds	r3, #4
 800e36c:	781a      	ldrb	r2, [r3, #0]
 800e36e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e370:	691b      	ldr	r3, [r3, #16]
 800e372:	3304      	adds	r3, #4
 800e374:	f042 0220 	orr.w	r2, r2, #32
 800e378:	b2d2      	uxtb	r2, r2
 800e37a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	79da      	ldrb	r2, [r3, #7]
 800e380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	3321      	adds	r3, #33	; 0x21
 800e386:	f042 0201 	orr.w	r2, r2, #1
 800e38a:	b2d2      	uxtb	r2, r2
 800e38c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e38e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	4619      	mov	r1, r3
 800e39c:	4610      	mov	r0, r2
 800e39e:	f7fb ff84 	bl	800a2aa <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e3a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e3b0:	4608      	mov	r0, r1
 800e3b2:	f7fb ffa6 	bl	800a302 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e3b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3b8:	691b      	ldr	r3, [r3, #16]
 800e3ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e3c4:	4608      	mov	r0, r1
 800e3c6:	f7fb ff9c 	bl	800a302 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e3ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	330c      	adds	r3, #12
 800e3d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fb ff69 	bl	800a2aa <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e3d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3da:	691b      	ldr	r3, [r3, #16]
 800e3dc:	3315      	adds	r3, #21
 800e3de:	2200      	movs	r2, #0
 800e3e0:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e3e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3e4:	691b      	ldr	r3, [r3, #16]
 800e3e6:	3310      	adds	r3, #16
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7fb ff5d 	bl	800a2aa <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e3f0:	f107 0308 	add.w	r3, r7, #8
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fd fd82 	bl	800befe <store_xdir>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800e400:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e404:	2b00      	cmp	r3, #0
 800e406:	d15b      	bne.n	800e4c0 <f_sync+0x230>
							res = sync_fs(fs);
 800e408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fc fa5e 	bl	800a8cc <sync_fs>
 800e410:	4603      	mov	r3, r0
 800e412:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e41c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e420:	b2da      	uxtb	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800e428:	e04a      	b.n	800e4c0 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e42a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e430:	4619      	mov	r1, r3
 800e432:	4610      	mov	r0, r2
 800e434:	f7fc fa1c 	bl	800a870 <move_window>
 800e438:	4603      	mov	r3, r0
 800e43a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e43e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e442:	2b00      	cmp	r3, #0
 800e444:	d13c      	bne.n	800e4c0 <f_sync+0x230>
					dir = fp->dir_ptr;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e44a:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e44c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e44e:	330b      	adds	r3, #11
 800e450:	781a      	ldrb	r2, [r3, #0]
 800e452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e454:	330b      	adds	r3, #11
 800e456:	f042 0220 	orr.w	r2, r2, #32
 800e45a:	b2d2      	uxtb	r2, r2
 800e45c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6818      	ldr	r0, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	689b      	ldr	r3, [r3, #8]
 800e466:	461a      	mov	r2, r3
 800e468:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e46a:	f7fd f9db 	bl	800b824 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e46e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e470:	f103 001c 	add.w	r0, r3, #28
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e47a:	4613      	mov	r3, r2
 800e47c:	4619      	mov	r1, r3
 800e47e:	f7fb ff14 	bl	800a2aa <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e484:	3316      	adds	r3, #22
 800e486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fb ff0e 	bl	800a2aa <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e48e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e490:	3312      	adds	r3, #18
 800e492:	2100      	movs	r1, #0
 800e494:	4618      	mov	r0, r3
 800e496:	f7fb feed 	bl	800a274 <st_word>
					fs->wflag = 1;
 800e49a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e49c:	2201      	movs	r2, #1
 800e49e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e4a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fc fa12 	bl	800a8cc <sync_fs>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e4c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3770      	adds	r7, #112	; 0x70
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7ff fedb 	bl	800e290 <f_sync>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d118      	bne.n	800e516 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f107 0208 	add.w	r2, r7, #8
 800e4ea:	4611      	mov	r1, r2
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7ff f873 	bl	800d5d8 <validate>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e4f6:	7bfb      	ldrb	r3, [r7, #15]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10c      	bne.n	800e516 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e500:	4618      	mov	r0, r3
 800e502:	f7fc f911 	bl	800a728 <dec_lock>
 800e506:	4603      	mov	r3, r0
 800e508:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e50a:	7bfb      	ldrb	r3, [r7, #15]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d102      	bne.n	800e516 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e516:	7bfb      	ldrb	r3, [r7, #15]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e520:	b480      	push	{r7}
 800e522:	b087      	sub	sp, #28
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	4613      	mov	r3, r2
 800e52c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e52e:	2301      	movs	r3, #1
 800e530:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e536:	4b1f      	ldr	r3, [pc, #124]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e538:	7a5b      	ldrb	r3, [r3, #9]
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d131      	bne.n	800e5a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e540:	4b1c      	ldr	r3, [pc, #112]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e542:	7a5b      	ldrb	r3, [r3, #9]
 800e544:	b2db      	uxtb	r3, r3
 800e546:	461a      	mov	r2, r3
 800e548:	4b1a      	ldr	r3, [pc, #104]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e54a:	2100      	movs	r1, #0
 800e54c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e54e:	4b19      	ldr	r3, [pc, #100]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e550:	7a5b      	ldrb	r3, [r3, #9]
 800e552:	b2db      	uxtb	r3, r3
 800e554:	4a17      	ldr	r2, [pc, #92]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4413      	add	r3, r2
 800e55a:	68fa      	ldr	r2, [r7, #12]
 800e55c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e55e:	4b15      	ldr	r3, [pc, #84]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e560:	7a5b      	ldrb	r3, [r3, #9]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	461a      	mov	r2, r3
 800e566:	4b13      	ldr	r3, [pc, #76]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e568:	4413      	add	r3, r2
 800e56a:	79fa      	ldrb	r2, [r7, #7]
 800e56c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e56e:	4b11      	ldr	r3, [pc, #68]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e570:	7a5b      	ldrb	r3, [r3, #9]
 800e572:	b2db      	uxtb	r3, r3
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	b2d1      	uxtb	r1, r2
 800e578:	4a0e      	ldr	r2, [pc, #56]	; (800e5b4 <FATFS_LinkDriverEx+0x94>)
 800e57a:	7251      	strb	r1, [r2, #9]
 800e57c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e57e:	7dbb      	ldrb	r3, [r7, #22]
 800e580:	3330      	adds	r3, #48	; 0x30
 800e582:	b2da      	uxtb	r2, r3
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	3301      	adds	r3, #1
 800e58c:	223a      	movs	r2, #58	; 0x3a
 800e58e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	3302      	adds	r3, #2
 800e594:	222f      	movs	r2, #47	; 0x2f
 800e596:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	3303      	adds	r3, #3
 800e59c:	2200      	movs	r2, #0
 800e59e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	371c      	adds	r7, #28
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	24001748 	.word	0x24001748

0800e5b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	6839      	ldr	r1, [r7, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7ff ffaa 	bl	800e520 <FATFS_LinkDriverEx>
 800e5cc:	4603      	mov	r3, r0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3708      	adds	r7, #8
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
	...

0800e5d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	6039      	str	r1, [r7, #0]
 800e5e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e5e4:	88fb      	ldrh	r3, [r7, #6]
 800e5e6:	2b7f      	cmp	r3, #127	; 0x7f
 800e5e8:	d802      	bhi.n	800e5f0 <ff_convert+0x18>
		c = chr;
 800e5ea:	88fb      	ldrh	r3, [r7, #6]
 800e5ec:	81fb      	strh	r3, [r7, #14]
 800e5ee:	e025      	b.n	800e63c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00b      	beq.n	800e60e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e5f6:	88fb      	ldrh	r3, [r7, #6]
 800e5f8:	2bff      	cmp	r3, #255	; 0xff
 800e5fa:	d805      	bhi.n	800e608 <ff_convert+0x30>
 800e5fc:	88fb      	ldrh	r3, [r7, #6]
 800e5fe:	3b80      	subs	r3, #128	; 0x80
 800e600:	4a12      	ldr	r2, [pc, #72]	; (800e64c <ff_convert+0x74>)
 800e602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e606:	e000      	b.n	800e60a <ff_convert+0x32>
 800e608:	2300      	movs	r3, #0
 800e60a:	81fb      	strh	r3, [r7, #14]
 800e60c:	e016      	b.n	800e63c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e60e:	2300      	movs	r3, #0
 800e610:	81fb      	strh	r3, [r7, #14]
 800e612:	e009      	b.n	800e628 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e614:	89fb      	ldrh	r3, [r7, #14]
 800e616:	4a0d      	ldr	r2, [pc, #52]	; (800e64c <ff_convert+0x74>)
 800e618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e61c:	88fa      	ldrh	r2, [r7, #6]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d006      	beq.n	800e630 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e622:	89fb      	ldrh	r3, [r7, #14]
 800e624:	3301      	adds	r3, #1
 800e626:	81fb      	strh	r3, [r7, #14]
 800e628:	89fb      	ldrh	r3, [r7, #14]
 800e62a:	2b7f      	cmp	r3, #127	; 0x7f
 800e62c:	d9f2      	bls.n	800e614 <ff_convert+0x3c>
 800e62e:	e000      	b.n	800e632 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e630:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e632:	89fb      	ldrh	r3, [r7, #14]
 800e634:	3380      	adds	r3, #128	; 0x80
 800e636:	b29b      	uxth	r3, r3
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e63c:	89fb      	ldrh	r3, [r7, #14]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3714      	adds	r7, #20
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	0800fb04 	.word	0x0800fb04

0800e650 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e650:	b480      	push	{r7}
 800e652:	b087      	sub	sp, #28
 800e654:	af00      	add	r7, sp, #0
 800e656:	4603      	mov	r3, r0
 800e658:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e65a:	88fb      	ldrh	r3, [r7, #6]
 800e65c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e660:	d201      	bcs.n	800e666 <ff_wtoupper+0x16>
 800e662:	4b3e      	ldr	r3, [pc, #248]	; (800e75c <ff_wtoupper+0x10c>)
 800e664:	e000      	b.n	800e668 <ff_wtoupper+0x18>
 800e666:	4b3e      	ldr	r3, [pc, #248]	; (800e760 <ff_wtoupper+0x110>)
 800e668:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	1c9a      	adds	r2, r3, #2
 800e66e:	617a      	str	r2, [r7, #20]
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e674:	8a7b      	ldrh	r3, [r7, #18]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d068      	beq.n	800e74c <ff_wtoupper+0xfc>
 800e67a:	88fa      	ldrh	r2, [r7, #6]
 800e67c:	8a7b      	ldrh	r3, [r7, #18]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d364      	bcc.n	800e74c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	1c9a      	adds	r2, r3, #2
 800e686:	617a      	str	r2, [r7, #20]
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	823b      	strh	r3, [r7, #16]
 800e68c:	8a3b      	ldrh	r3, [r7, #16]
 800e68e:	0a1b      	lsrs	r3, r3, #8
 800e690:	81fb      	strh	r3, [r7, #14]
 800e692:	8a3b      	ldrh	r3, [r7, #16]
 800e694:	b2db      	uxtb	r3, r3
 800e696:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e698:	88fa      	ldrh	r2, [r7, #6]
 800e69a:	8a79      	ldrh	r1, [r7, #18]
 800e69c:	8a3b      	ldrh	r3, [r7, #16]
 800e69e:	440b      	add	r3, r1
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	da49      	bge.n	800e738 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e6a4:	89fb      	ldrh	r3, [r7, #14]
 800e6a6:	2b08      	cmp	r3, #8
 800e6a8:	d84f      	bhi.n	800e74a <ff_wtoupper+0xfa>
 800e6aa:	a201      	add	r2, pc, #4	; (adr r2, 800e6b0 <ff_wtoupper+0x60>)
 800e6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b0:	0800e6d5 	.word	0x0800e6d5
 800e6b4:	0800e6e7 	.word	0x0800e6e7
 800e6b8:	0800e6fd 	.word	0x0800e6fd
 800e6bc:	0800e705 	.word	0x0800e705
 800e6c0:	0800e70d 	.word	0x0800e70d
 800e6c4:	0800e715 	.word	0x0800e715
 800e6c8:	0800e71d 	.word	0x0800e71d
 800e6cc:	0800e725 	.word	0x0800e725
 800e6d0:	0800e72d 	.word	0x0800e72d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e6d4:	88fa      	ldrh	r2, [r7, #6]
 800e6d6:	8a7b      	ldrh	r3, [r7, #18]
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	005b      	lsls	r3, r3, #1
 800e6dc:	697a      	ldr	r2, [r7, #20]
 800e6de:	4413      	add	r3, r2
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	80fb      	strh	r3, [r7, #6]
 800e6e4:	e027      	b.n	800e736 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e6e6:	88fa      	ldrh	r2, [r7, #6]
 800e6e8:	8a7b      	ldrh	r3, [r7, #18]
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	88fa      	ldrh	r2, [r7, #6]
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	80fb      	strh	r3, [r7, #6]
 800e6fa:	e01c      	b.n	800e736 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e6fc:	88fb      	ldrh	r3, [r7, #6]
 800e6fe:	3b10      	subs	r3, #16
 800e700:	80fb      	strh	r3, [r7, #6]
 800e702:	e018      	b.n	800e736 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e704:	88fb      	ldrh	r3, [r7, #6]
 800e706:	3b20      	subs	r3, #32
 800e708:	80fb      	strh	r3, [r7, #6]
 800e70a:	e014      	b.n	800e736 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e70c:	88fb      	ldrh	r3, [r7, #6]
 800e70e:	3b30      	subs	r3, #48	; 0x30
 800e710:	80fb      	strh	r3, [r7, #6]
 800e712:	e010      	b.n	800e736 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e714:	88fb      	ldrh	r3, [r7, #6]
 800e716:	3b1a      	subs	r3, #26
 800e718:	80fb      	strh	r3, [r7, #6]
 800e71a:	e00c      	b.n	800e736 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e71c:	88fb      	ldrh	r3, [r7, #6]
 800e71e:	3308      	adds	r3, #8
 800e720:	80fb      	strh	r3, [r7, #6]
 800e722:	e008      	b.n	800e736 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e724:	88fb      	ldrh	r3, [r7, #6]
 800e726:	3b50      	subs	r3, #80	; 0x50
 800e728:	80fb      	strh	r3, [r7, #6]
 800e72a:	e004      	b.n	800e736 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e72c:	88fb      	ldrh	r3, [r7, #6]
 800e72e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e732:	80fb      	strh	r3, [r7, #6]
 800e734:	bf00      	nop
			}
			break;
 800e736:	e008      	b.n	800e74a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e738:	89fb      	ldrh	r3, [r7, #14]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d195      	bne.n	800e66a <ff_wtoupper+0x1a>
 800e73e:	8a3b      	ldrh	r3, [r7, #16]
 800e740:	005b      	lsls	r3, r3, #1
 800e742:	697a      	ldr	r2, [r7, #20]
 800e744:	4413      	add	r3, r2
 800e746:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e748:	e78f      	b.n	800e66a <ff_wtoupper+0x1a>
			break;
 800e74a:	bf00      	nop
	}

	return chr;
 800e74c:	88fb      	ldrh	r3, [r7, #6]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	371c      	adds	r7, #28
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	0800fc04 	.word	0x0800fc04
 800e760:	0800fdf8 	.word	0x0800fdf8

0800e764 <_Znwj>:
 800e764:	2801      	cmp	r0, #1
 800e766:	bf38      	it	cc
 800e768:	2001      	movcc	r0, #1
 800e76a:	b510      	push	{r4, lr}
 800e76c:	4604      	mov	r4, r0
 800e76e:	4620      	mov	r0, r4
 800e770:	f000 f8ce 	bl	800e910 <malloc>
 800e774:	b930      	cbnz	r0, 800e784 <_Znwj+0x20>
 800e776:	f000 f889 	bl	800e88c <_ZSt15get_new_handlerv>
 800e77a:	b908      	cbnz	r0, 800e780 <_Znwj+0x1c>
 800e77c:	f000 f897 	bl	800e8ae <abort>
 800e780:	4780      	blx	r0
 800e782:	e7f4      	b.n	800e76e <_Znwj+0xa>
 800e784:	bd10      	pop	{r4, pc}

0800e786 <_ZNSaIcEC1Ev>:
 800e786:	4770      	bx	lr

0800e788 <_ZNSaIcED1Ev>:
 800e788:	4770      	bx	lr

0800e78a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800e78a:	b10a      	cbz	r2, 800e790 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800e78c:	f000 b8d0 	b.w	800e930 <memcpy>
 800e790:	4770      	bx	lr
	...

0800e794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800e794:	b508      	push	{r3, lr}
 800e796:	680b      	ldr	r3, [r1, #0]
 800e798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e79c:	d302      	bcc.n	800e7a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800e79e:	480d      	ldr	r0, [pc, #52]	; (800e7d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800e7a0:	f000 f882 	bl	800e8a8 <_ZSt20__throw_length_errorPKc>
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	d90b      	bls.n	800e7c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800e7a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800e7ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800e7b0:	d206      	bcs.n	800e7c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800e7b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800e7b6:	bf2a      	itet	cs
 800e7b8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800e7bc:	6008      	strcc	r0, [r1, #0]
 800e7be:	600b      	strcs	r3, [r1, #0]
 800e7c0:	6808      	ldr	r0, [r1, #0]
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	d501      	bpl.n	800e7ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800e7c6:	f000 f869 	bl	800e89c <_ZSt17__throw_bad_allocv>
 800e7ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e7ce:	f7ff bfc9 	b.w	800e764 <_Znwj>
 800e7d2:	bf00      	nop
 800e7d4:	0800feb4 	.word	0x0800feb4

0800e7d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800e7d8:	f850 3b08 	ldr.w	r3, [r0], #8
 800e7dc:	4283      	cmp	r3, r0
 800e7de:	d002      	beq.n	800e7e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f000 b851 	b.w	800e888 <_ZdlPv>
 800e7e6:	4770      	bx	lr

0800e7e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800e7e8:	2a01      	cmp	r2, #1
 800e7ea:	b510      	push	{r4, lr}
 800e7ec:	d102      	bne.n	800e7f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800e7ee:	780a      	ldrb	r2, [r1, #0]
 800e7f0:	7002      	strb	r2, [r0, #0]
 800e7f2:	bd10      	pop	{r4, pc}
 800e7f4:	f7ff ffc9 	bl	800e78a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800e7f8:	e7fb      	b.n	800e7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800e7fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800e7fa:	b508      	push	{r3, lr}
 800e7fc:	1a52      	subs	r2, r2, r1
 800e7fe:	f7ff fff3 	bl	800e7e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800e802:	bd08      	pop	{r3, pc}

0800e804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800e804:	b510      	push	{r4, lr}
 800e806:	4604      	mov	r4, r0
 800e808:	f7ff ffe6 	bl	800e7d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800e80c:	4620      	mov	r0, r4
 800e80e:	bd10      	pop	{r4, pc}

0800e810 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800e810:	6800      	ldr	r0, [r0, #0]
 800e812:	4770      	bx	lr

0800e814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800e814:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e816:	4604      	mov	r4, r0
 800e818:	4616      	mov	r6, r2
 800e81a:	460d      	mov	r5, r1
 800e81c:	b919      	cbnz	r1, 800e826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800e81e:	b112      	cbz	r2, 800e826 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800e820:	480d      	ldr	r0, [pc, #52]	; (800e858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800e822:	f000 f83e 	bl	800e8a2 <_ZSt19__throw_logic_errorPKc>
 800e826:	1b73      	subs	r3, r6, r5
 800e828:	2b0f      	cmp	r3, #15
 800e82a:	9301      	str	r3, [sp, #4]
 800e82c:	d907      	bls.n	800e83e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800e82e:	2200      	movs	r2, #0
 800e830:	a901      	add	r1, sp, #4
 800e832:	4620      	mov	r0, r4
 800e834:	f7ff ffae 	bl	800e794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800e838:	9b01      	ldr	r3, [sp, #4]
 800e83a:	6020      	str	r0, [r4, #0]
 800e83c:	60a3      	str	r3, [r4, #8]
 800e83e:	4632      	mov	r2, r6
 800e840:	4629      	mov	r1, r5
 800e842:	6820      	ldr	r0, [r4, #0]
 800e844:	f7ff ffd9 	bl	800e7fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800e848:	9b01      	ldr	r3, [sp, #4]
 800e84a:	6822      	ldr	r2, [r4, #0]
 800e84c:	6063      	str	r3, [r4, #4]
 800e84e:	2100      	movs	r1, #0
 800e850:	54d1      	strb	r1, [r2, r3]
 800e852:	b002      	add	sp, #8
 800e854:	bd70      	pop	{r4, r5, r6, pc}
 800e856:	bf00      	nop
 800e858:	0800fecc 	.word	0x0800fecc

0800e85c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800e85c:	b538      	push	{r3, r4, r5, lr}
 800e85e:	f100 0308 	add.w	r3, r0, #8
 800e862:	4604      	mov	r4, r0
 800e864:	6003      	str	r3, [r0, #0]
 800e866:	460d      	mov	r5, r1
 800e868:	b159      	cbz	r1, 800e882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800e86a:	4608      	mov	r0, r1
 800e86c:	f7f1 fd88 	bl	8000380 <strlen>
 800e870:	182a      	adds	r2, r5, r0
 800e872:	4620      	mov	r0, r4
 800e874:	f04f 0300 	mov.w	r3, #0
 800e878:	4629      	mov	r1, r5
 800e87a:	f7ff ffcb 	bl	800e814 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800e87e:	4620      	mov	r0, r4
 800e880:	bd38      	pop	{r3, r4, r5, pc}
 800e882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e886:	e7f4      	b.n	800e872 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800e888 <_ZdlPv>:
 800e888:	f000 b84a 	b.w	800e920 <free>

0800e88c <_ZSt15get_new_handlerv>:
 800e88c:	4b02      	ldr	r3, [pc, #8]	; (800e898 <_ZSt15get_new_handlerv+0xc>)
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	f3bf 8f5b 	dmb	ish
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	24001754 	.word	0x24001754

0800e89c <_ZSt17__throw_bad_allocv>:
 800e89c:	b508      	push	{r3, lr}
 800e89e:	f000 f806 	bl	800e8ae <abort>

0800e8a2 <_ZSt19__throw_logic_errorPKc>:
 800e8a2:	b508      	push	{r3, lr}
 800e8a4:	f000 f803 	bl	800e8ae <abort>

0800e8a8 <_ZSt20__throw_length_errorPKc>:
 800e8a8:	b508      	push	{r3, lr}
 800e8aa:	f000 f800 	bl	800e8ae <abort>

0800e8ae <abort>:
 800e8ae:	b508      	push	{r3, lr}
 800e8b0:	2006      	movs	r0, #6
 800e8b2:	f000 f94f 	bl	800eb54 <raise>
 800e8b6:	2001      	movs	r0, #1
 800e8b8:	f7f3 fc90 	bl	80021dc <_exit>

0800e8bc <__errno>:
 800e8bc:	4b01      	ldr	r3, [pc, #4]	; (800e8c4 <__errno+0x8>)
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	24000010 	.word	0x24000010

0800e8c8 <__libc_init_array>:
 800e8c8:	b570      	push	{r4, r5, r6, lr}
 800e8ca:	4d0d      	ldr	r5, [pc, #52]	; (800e900 <__libc_init_array+0x38>)
 800e8cc:	4c0d      	ldr	r4, [pc, #52]	; (800e904 <__libc_init_array+0x3c>)
 800e8ce:	1b64      	subs	r4, r4, r5
 800e8d0:	10a4      	asrs	r4, r4, #2
 800e8d2:	2600      	movs	r6, #0
 800e8d4:	42a6      	cmp	r6, r4
 800e8d6:	d109      	bne.n	800e8ec <__libc_init_array+0x24>
 800e8d8:	4d0b      	ldr	r5, [pc, #44]	; (800e908 <__libc_init_array+0x40>)
 800e8da:	4c0c      	ldr	r4, [pc, #48]	; (800e90c <__libc_init_array+0x44>)
 800e8dc:	f000 fcdc 	bl	800f298 <_init>
 800e8e0:	1b64      	subs	r4, r4, r5
 800e8e2:	10a4      	asrs	r4, r4, #2
 800e8e4:	2600      	movs	r6, #0
 800e8e6:	42a6      	cmp	r6, r4
 800e8e8:	d105      	bne.n	800e8f6 <__libc_init_array+0x2e>
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}
 800e8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8f0:	4798      	blx	r3
 800e8f2:	3601      	adds	r6, #1
 800e8f4:	e7ee      	b.n	800e8d4 <__libc_init_array+0xc>
 800e8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8fa:	4798      	blx	r3
 800e8fc:	3601      	adds	r6, #1
 800e8fe:	e7f2      	b.n	800e8e6 <__libc_init_array+0x1e>
 800e900:	0800ff34 	.word	0x0800ff34
 800e904:	0800ff34 	.word	0x0800ff34
 800e908:	0800ff34 	.word	0x0800ff34
 800e90c:	0800ff38 	.word	0x0800ff38

0800e910 <malloc>:
 800e910:	4b02      	ldr	r3, [pc, #8]	; (800e91c <malloc+0xc>)
 800e912:	4601      	mov	r1, r0
 800e914:	6818      	ldr	r0, [r3, #0]
 800e916:	f000 b88b 	b.w	800ea30 <_malloc_r>
 800e91a:	bf00      	nop
 800e91c:	24000010 	.word	0x24000010

0800e920 <free>:
 800e920:	4b02      	ldr	r3, [pc, #8]	; (800e92c <free+0xc>)
 800e922:	4601      	mov	r1, r0
 800e924:	6818      	ldr	r0, [r3, #0]
 800e926:	f000 b833 	b.w	800e990 <_free_r>
 800e92a:	bf00      	nop
 800e92c:	24000010 	.word	0x24000010

0800e930 <memcpy>:
 800e930:	440a      	add	r2, r1
 800e932:	4291      	cmp	r1, r2
 800e934:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e938:	d100      	bne.n	800e93c <memcpy+0xc>
 800e93a:	4770      	bx	lr
 800e93c:	b510      	push	{r4, lr}
 800e93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e942:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e946:	4291      	cmp	r1, r2
 800e948:	d1f9      	bne.n	800e93e <memcpy+0xe>
 800e94a:	bd10      	pop	{r4, pc}

0800e94c <memmove>:
 800e94c:	4288      	cmp	r0, r1
 800e94e:	b510      	push	{r4, lr}
 800e950:	eb01 0402 	add.w	r4, r1, r2
 800e954:	d902      	bls.n	800e95c <memmove+0x10>
 800e956:	4284      	cmp	r4, r0
 800e958:	4623      	mov	r3, r4
 800e95a:	d807      	bhi.n	800e96c <memmove+0x20>
 800e95c:	1e43      	subs	r3, r0, #1
 800e95e:	42a1      	cmp	r1, r4
 800e960:	d008      	beq.n	800e974 <memmove+0x28>
 800e962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e96a:	e7f8      	b.n	800e95e <memmove+0x12>
 800e96c:	4402      	add	r2, r0
 800e96e:	4601      	mov	r1, r0
 800e970:	428a      	cmp	r2, r1
 800e972:	d100      	bne.n	800e976 <memmove+0x2a>
 800e974:	bd10      	pop	{r4, pc}
 800e976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e97a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e97e:	e7f7      	b.n	800e970 <memmove+0x24>

0800e980 <memset>:
 800e980:	4402      	add	r2, r0
 800e982:	4603      	mov	r3, r0
 800e984:	4293      	cmp	r3, r2
 800e986:	d100      	bne.n	800e98a <memset+0xa>
 800e988:	4770      	bx	lr
 800e98a:	f803 1b01 	strb.w	r1, [r3], #1
 800e98e:	e7f9      	b.n	800e984 <memset+0x4>

0800e990 <_free_r>:
 800e990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e992:	2900      	cmp	r1, #0
 800e994:	d048      	beq.n	800ea28 <_free_r+0x98>
 800e996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e99a:	9001      	str	r0, [sp, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f1a1 0404 	sub.w	r4, r1, #4
 800e9a2:	bfb8      	it	lt
 800e9a4:	18e4      	addlt	r4, r4, r3
 800e9a6:	f000 f94b 	bl	800ec40 <__malloc_lock>
 800e9aa:	4a20      	ldr	r2, [pc, #128]	; (800ea2c <_free_r+0x9c>)
 800e9ac:	9801      	ldr	r0, [sp, #4]
 800e9ae:	6813      	ldr	r3, [r2, #0]
 800e9b0:	4615      	mov	r5, r2
 800e9b2:	b933      	cbnz	r3, 800e9c2 <_free_r+0x32>
 800e9b4:	6063      	str	r3, [r4, #4]
 800e9b6:	6014      	str	r4, [r2, #0]
 800e9b8:	b003      	add	sp, #12
 800e9ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9be:	f000 b945 	b.w	800ec4c <__malloc_unlock>
 800e9c2:	42a3      	cmp	r3, r4
 800e9c4:	d90b      	bls.n	800e9de <_free_r+0x4e>
 800e9c6:	6821      	ldr	r1, [r4, #0]
 800e9c8:	1862      	adds	r2, r4, r1
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	bf04      	itt	eq
 800e9ce:	681a      	ldreq	r2, [r3, #0]
 800e9d0:	685b      	ldreq	r3, [r3, #4]
 800e9d2:	6063      	str	r3, [r4, #4]
 800e9d4:	bf04      	itt	eq
 800e9d6:	1852      	addeq	r2, r2, r1
 800e9d8:	6022      	streq	r2, [r4, #0]
 800e9da:	602c      	str	r4, [r5, #0]
 800e9dc:	e7ec      	b.n	800e9b8 <_free_r+0x28>
 800e9de:	461a      	mov	r2, r3
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	b10b      	cbz	r3, 800e9e8 <_free_r+0x58>
 800e9e4:	42a3      	cmp	r3, r4
 800e9e6:	d9fa      	bls.n	800e9de <_free_r+0x4e>
 800e9e8:	6811      	ldr	r1, [r2, #0]
 800e9ea:	1855      	adds	r5, r2, r1
 800e9ec:	42a5      	cmp	r5, r4
 800e9ee:	d10b      	bne.n	800ea08 <_free_r+0x78>
 800e9f0:	6824      	ldr	r4, [r4, #0]
 800e9f2:	4421      	add	r1, r4
 800e9f4:	1854      	adds	r4, r2, r1
 800e9f6:	42a3      	cmp	r3, r4
 800e9f8:	6011      	str	r1, [r2, #0]
 800e9fa:	d1dd      	bne.n	800e9b8 <_free_r+0x28>
 800e9fc:	681c      	ldr	r4, [r3, #0]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	6053      	str	r3, [r2, #4]
 800ea02:	4421      	add	r1, r4
 800ea04:	6011      	str	r1, [r2, #0]
 800ea06:	e7d7      	b.n	800e9b8 <_free_r+0x28>
 800ea08:	d902      	bls.n	800ea10 <_free_r+0x80>
 800ea0a:	230c      	movs	r3, #12
 800ea0c:	6003      	str	r3, [r0, #0]
 800ea0e:	e7d3      	b.n	800e9b8 <_free_r+0x28>
 800ea10:	6825      	ldr	r5, [r4, #0]
 800ea12:	1961      	adds	r1, r4, r5
 800ea14:	428b      	cmp	r3, r1
 800ea16:	bf04      	itt	eq
 800ea18:	6819      	ldreq	r1, [r3, #0]
 800ea1a:	685b      	ldreq	r3, [r3, #4]
 800ea1c:	6063      	str	r3, [r4, #4]
 800ea1e:	bf04      	itt	eq
 800ea20:	1949      	addeq	r1, r1, r5
 800ea22:	6021      	streq	r1, [r4, #0]
 800ea24:	6054      	str	r4, [r2, #4]
 800ea26:	e7c7      	b.n	800e9b8 <_free_r+0x28>
 800ea28:	b003      	add	sp, #12
 800ea2a:	bd30      	pop	{r4, r5, pc}
 800ea2c:	24001758 	.word	0x24001758

0800ea30 <_malloc_r>:
 800ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea32:	1ccd      	adds	r5, r1, #3
 800ea34:	f025 0503 	bic.w	r5, r5, #3
 800ea38:	3508      	adds	r5, #8
 800ea3a:	2d0c      	cmp	r5, #12
 800ea3c:	bf38      	it	cc
 800ea3e:	250c      	movcc	r5, #12
 800ea40:	2d00      	cmp	r5, #0
 800ea42:	4606      	mov	r6, r0
 800ea44:	db01      	blt.n	800ea4a <_malloc_r+0x1a>
 800ea46:	42a9      	cmp	r1, r5
 800ea48:	d903      	bls.n	800ea52 <_malloc_r+0x22>
 800ea4a:	230c      	movs	r3, #12
 800ea4c:	6033      	str	r3, [r6, #0]
 800ea4e:	2000      	movs	r0, #0
 800ea50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea52:	f000 f8f5 	bl	800ec40 <__malloc_lock>
 800ea56:	4921      	ldr	r1, [pc, #132]	; (800eadc <_malloc_r+0xac>)
 800ea58:	680a      	ldr	r2, [r1, #0]
 800ea5a:	4614      	mov	r4, r2
 800ea5c:	b99c      	cbnz	r4, 800ea86 <_malloc_r+0x56>
 800ea5e:	4f20      	ldr	r7, [pc, #128]	; (800eae0 <_malloc_r+0xb0>)
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	b923      	cbnz	r3, 800ea6e <_malloc_r+0x3e>
 800ea64:	4621      	mov	r1, r4
 800ea66:	4630      	mov	r0, r6
 800ea68:	f000 f83c 	bl	800eae4 <_sbrk_r>
 800ea6c:	6038      	str	r0, [r7, #0]
 800ea6e:	4629      	mov	r1, r5
 800ea70:	4630      	mov	r0, r6
 800ea72:	f000 f837 	bl	800eae4 <_sbrk_r>
 800ea76:	1c43      	adds	r3, r0, #1
 800ea78:	d123      	bne.n	800eac2 <_malloc_r+0x92>
 800ea7a:	230c      	movs	r3, #12
 800ea7c:	6033      	str	r3, [r6, #0]
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f000 f8e4 	bl	800ec4c <__malloc_unlock>
 800ea84:	e7e3      	b.n	800ea4e <_malloc_r+0x1e>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	1b5b      	subs	r3, r3, r5
 800ea8a:	d417      	bmi.n	800eabc <_malloc_r+0x8c>
 800ea8c:	2b0b      	cmp	r3, #11
 800ea8e:	d903      	bls.n	800ea98 <_malloc_r+0x68>
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	441c      	add	r4, r3
 800ea94:	6025      	str	r5, [r4, #0]
 800ea96:	e004      	b.n	800eaa2 <_malloc_r+0x72>
 800ea98:	6863      	ldr	r3, [r4, #4]
 800ea9a:	42a2      	cmp	r2, r4
 800ea9c:	bf0c      	ite	eq
 800ea9e:	600b      	streq	r3, [r1, #0]
 800eaa0:	6053      	strne	r3, [r2, #4]
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	f000 f8d2 	bl	800ec4c <__malloc_unlock>
 800eaa8:	f104 000b 	add.w	r0, r4, #11
 800eaac:	1d23      	adds	r3, r4, #4
 800eaae:	f020 0007 	bic.w	r0, r0, #7
 800eab2:	1ac2      	subs	r2, r0, r3
 800eab4:	d0cc      	beq.n	800ea50 <_malloc_r+0x20>
 800eab6:	1a1b      	subs	r3, r3, r0
 800eab8:	50a3      	str	r3, [r4, r2]
 800eaba:	e7c9      	b.n	800ea50 <_malloc_r+0x20>
 800eabc:	4622      	mov	r2, r4
 800eabe:	6864      	ldr	r4, [r4, #4]
 800eac0:	e7cc      	b.n	800ea5c <_malloc_r+0x2c>
 800eac2:	1cc4      	adds	r4, r0, #3
 800eac4:	f024 0403 	bic.w	r4, r4, #3
 800eac8:	42a0      	cmp	r0, r4
 800eaca:	d0e3      	beq.n	800ea94 <_malloc_r+0x64>
 800eacc:	1a21      	subs	r1, r4, r0
 800eace:	4630      	mov	r0, r6
 800ead0:	f000 f808 	bl	800eae4 <_sbrk_r>
 800ead4:	3001      	adds	r0, #1
 800ead6:	d1dd      	bne.n	800ea94 <_malloc_r+0x64>
 800ead8:	e7cf      	b.n	800ea7a <_malloc_r+0x4a>
 800eada:	bf00      	nop
 800eadc:	24001758 	.word	0x24001758
 800eae0:	2400175c 	.word	0x2400175c

0800eae4 <_sbrk_r>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	4d06      	ldr	r5, [pc, #24]	; (800eb00 <_sbrk_r+0x1c>)
 800eae8:	2300      	movs	r3, #0
 800eaea:	4604      	mov	r4, r0
 800eaec:	4608      	mov	r0, r1
 800eaee:	602b      	str	r3, [r5, #0]
 800eaf0:	f7f3 fb7e 	bl	80021f0 <_sbrk>
 800eaf4:	1c43      	adds	r3, r0, #1
 800eaf6:	d102      	bne.n	800eafe <_sbrk_r+0x1a>
 800eaf8:	682b      	ldr	r3, [r5, #0]
 800eafa:	b103      	cbz	r3, 800eafe <_sbrk_r+0x1a>
 800eafc:	6023      	str	r3, [r4, #0]
 800eafe:	bd38      	pop	{r3, r4, r5, pc}
 800eb00:	24001c10 	.word	0x24001c10

0800eb04 <_raise_r>:
 800eb04:	291f      	cmp	r1, #31
 800eb06:	b538      	push	{r3, r4, r5, lr}
 800eb08:	4604      	mov	r4, r0
 800eb0a:	460d      	mov	r5, r1
 800eb0c:	d904      	bls.n	800eb18 <_raise_r+0x14>
 800eb0e:	2316      	movs	r3, #22
 800eb10:	6003      	str	r3, [r0, #0]
 800eb12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb1a:	b112      	cbz	r2, 800eb22 <_raise_r+0x1e>
 800eb1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb20:	b94b      	cbnz	r3, 800eb36 <_raise_r+0x32>
 800eb22:	4620      	mov	r0, r4
 800eb24:	f000 f830 	bl	800eb88 <_getpid_r>
 800eb28:	462a      	mov	r2, r5
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb32:	f000 b817 	b.w	800eb64 <_kill_r>
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d00a      	beq.n	800eb50 <_raise_r+0x4c>
 800eb3a:	1c59      	adds	r1, r3, #1
 800eb3c:	d103      	bne.n	800eb46 <_raise_r+0x42>
 800eb3e:	2316      	movs	r3, #22
 800eb40:	6003      	str	r3, [r0, #0]
 800eb42:	2001      	movs	r0, #1
 800eb44:	e7e7      	b.n	800eb16 <_raise_r+0x12>
 800eb46:	2400      	movs	r4, #0
 800eb48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	4798      	blx	r3
 800eb50:	2000      	movs	r0, #0
 800eb52:	e7e0      	b.n	800eb16 <_raise_r+0x12>

0800eb54 <raise>:
 800eb54:	4b02      	ldr	r3, [pc, #8]	; (800eb60 <raise+0xc>)
 800eb56:	4601      	mov	r1, r0
 800eb58:	6818      	ldr	r0, [r3, #0]
 800eb5a:	f7ff bfd3 	b.w	800eb04 <_raise_r>
 800eb5e:	bf00      	nop
 800eb60:	24000010 	.word	0x24000010

0800eb64 <_kill_r>:
 800eb64:	b538      	push	{r3, r4, r5, lr}
 800eb66:	4d07      	ldr	r5, [pc, #28]	; (800eb84 <_kill_r+0x20>)
 800eb68:	2300      	movs	r3, #0
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	4608      	mov	r0, r1
 800eb6e:	4611      	mov	r1, r2
 800eb70:	602b      	str	r3, [r5, #0]
 800eb72:	f7f3 fb23 	bl	80021bc <_kill>
 800eb76:	1c43      	adds	r3, r0, #1
 800eb78:	d102      	bne.n	800eb80 <_kill_r+0x1c>
 800eb7a:	682b      	ldr	r3, [r5, #0]
 800eb7c:	b103      	cbz	r3, 800eb80 <_kill_r+0x1c>
 800eb7e:	6023      	str	r3, [r4, #0]
 800eb80:	bd38      	pop	{r3, r4, r5, pc}
 800eb82:	bf00      	nop
 800eb84:	24001c10 	.word	0x24001c10

0800eb88 <_getpid_r>:
 800eb88:	f7f3 bb10 	b.w	80021ac <_getpid>

0800eb8c <siprintf>:
 800eb8c:	b40e      	push	{r1, r2, r3}
 800eb8e:	b500      	push	{lr}
 800eb90:	b09c      	sub	sp, #112	; 0x70
 800eb92:	ab1d      	add	r3, sp, #116	; 0x74
 800eb94:	9002      	str	r0, [sp, #8]
 800eb96:	9006      	str	r0, [sp, #24]
 800eb98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb9c:	4809      	ldr	r0, [pc, #36]	; (800ebc4 <siprintf+0x38>)
 800eb9e:	9107      	str	r1, [sp, #28]
 800eba0:	9104      	str	r1, [sp, #16]
 800eba2:	4909      	ldr	r1, [pc, #36]	; (800ebc8 <siprintf+0x3c>)
 800eba4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba8:	9105      	str	r1, [sp, #20]
 800ebaa:	6800      	ldr	r0, [r0, #0]
 800ebac:	9301      	str	r3, [sp, #4]
 800ebae:	a902      	add	r1, sp, #8
 800ebb0:	f000 f8ae 	bl	800ed10 <_svfiprintf_r>
 800ebb4:	9b02      	ldr	r3, [sp, #8]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	701a      	strb	r2, [r3, #0]
 800ebba:	b01c      	add	sp, #112	; 0x70
 800ebbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebc0:	b003      	add	sp, #12
 800ebc2:	4770      	bx	lr
 800ebc4:	24000010 	.word	0x24000010
 800ebc8:	ffff0208 	.word	0xffff0208

0800ebcc <_vsniprintf_r>:
 800ebcc:	b530      	push	{r4, r5, lr}
 800ebce:	1e14      	subs	r4, r2, #0
 800ebd0:	4605      	mov	r5, r0
 800ebd2:	b09b      	sub	sp, #108	; 0x6c
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	da05      	bge.n	800ebe4 <_vsniprintf_r+0x18>
 800ebd8:	238b      	movs	r3, #139	; 0x8b
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebe0:	b01b      	add	sp, #108	; 0x6c
 800ebe2:	bd30      	pop	{r4, r5, pc}
 800ebe4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ebe8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ebec:	bf14      	ite	ne
 800ebee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ebf2:	4623      	moveq	r3, r4
 800ebf4:	9302      	str	r3, [sp, #8]
 800ebf6:	9305      	str	r3, [sp, #20]
 800ebf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebfc:	9100      	str	r1, [sp, #0]
 800ebfe:	9104      	str	r1, [sp, #16]
 800ec00:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ec04:	4602      	mov	r2, r0
 800ec06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ec08:	4669      	mov	r1, sp
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f000 f880 	bl	800ed10 <_svfiprintf_r>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	bfbc      	itt	lt
 800ec14:	238b      	movlt	r3, #139	; 0x8b
 800ec16:	602b      	strlt	r3, [r5, #0]
 800ec18:	2c00      	cmp	r4, #0
 800ec1a:	d0e1      	beq.n	800ebe0 <_vsniprintf_r+0x14>
 800ec1c:	9b00      	ldr	r3, [sp, #0]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	701a      	strb	r2, [r3, #0]
 800ec22:	e7dd      	b.n	800ebe0 <_vsniprintf_r+0x14>

0800ec24 <vsniprintf>:
 800ec24:	b507      	push	{r0, r1, r2, lr}
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	4613      	mov	r3, r2
 800ec2a:	460a      	mov	r2, r1
 800ec2c:	4601      	mov	r1, r0
 800ec2e:	4803      	ldr	r0, [pc, #12]	; (800ec3c <vsniprintf+0x18>)
 800ec30:	6800      	ldr	r0, [r0, #0]
 800ec32:	f7ff ffcb 	bl	800ebcc <_vsniprintf_r>
 800ec36:	b003      	add	sp, #12
 800ec38:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec3c:	24000010 	.word	0x24000010

0800ec40 <__malloc_lock>:
 800ec40:	4801      	ldr	r0, [pc, #4]	; (800ec48 <__malloc_lock+0x8>)
 800ec42:	f000 baf9 	b.w	800f238 <__retarget_lock_acquire_recursive>
 800ec46:	bf00      	nop
 800ec48:	24001c18 	.word	0x24001c18

0800ec4c <__malloc_unlock>:
 800ec4c:	4801      	ldr	r0, [pc, #4]	; (800ec54 <__malloc_unlock+0x8>)
 800ec4e:	f000 baf4 	b.w	800f23a <__retarget_lock_release_recursive>
 800ec52:	bf00      	nop
 800ec54:	24001c18 	.word	0x24001c18

0800ec58 <__ssputs_r>:
 800ec58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec5c:	688e      	ldr	r6, [r1, #8]
 800ec5e:	429e      	cmp	r6, r3
 800ec60:	4682      	mov	sl, r0
 800ec62:	460c      	mov	r4, r1
 800ec64:	4690      	mov	r8, r2
 800ec66:	461f      	mov	r7, r3
 800ec68:	d838      	bhi.n	800ecdc <__ssputs_r+0x84>
 800ec6a:	898a      	ldrh	r2, [r1, #12]
 800ec6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec70:	d032      	beq.n	800ecd8 <__ssputs_r+0x80>
 800ec72:	6825      	ldr	r5, [r4, #0]
 800ec74:	6909      	ldr	r1, [r1, #16]
 800ec76:	eba5 0901 	sub.w	r9, r5, r1
 800ec7a:	6965      	ldr	r5, [r4, #20]
 800ec7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec84:	3301      	adds	r3, #1
 800ec86:	444b      	add	r3, r9
 800ec88:	106d      	asrs	r5, r5, #1
 800ec8a:	429d      	cmp	r5, r3
 800ec8c:	bf38      	it	cc
 800ec8e:	461d      	movcc	r5, r3
 800ec90:	0553      	lsls	r3, r2, #21
 800ec92:	d531      	bpl.n	800ecf8 <__ssputs_r+0xa0>
 800ec94:	4629      	mov	r1, r5
 800ec96:	f7ff fecb 	bl	800ea30 <_malloc_r>
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	b950      	cbnz	r0, 800ecb4 <__ssputs_r+0x5c>
 800ec9e:	230c      	movs	r3, #12
 800eca0:	f8ca 3000 	str.w	r3, [sl]
 800eca4:	89a3      	ldrh	r3, [r4, #12]
 800eca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecaa:	81a3      	strh	r3, [r4, #12]
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb4:	6921      	ldr	r1, [r4, #16]
 800ecb6:	464a      	mov	r2, r9
 800ecb8:	f7ff fe3a 	bl	800e930 <memcpy>
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecc6:	81a3      	strh	r3, [r4, #12]
 800ecc8:	6126      	str	r6, [r4, #16]
 800ecca:	6165      	str	r5, [r4, #20]
 800eccc:	444e      	add	r6, r9
 800ecce:	eba5 0509 	sub.w	r5, r5, r9
 800ecd2:	6026      	str	r6, [r4, #0]
 800ecd4:	60a5      	str	r5, [r4, #8]
 800ecd6:	463e      	mov	r6, r7
 800ecd8:	42be      	cmp	r6, r7
 800ecda:	d900      	bls.n	800ecde <__ssputs_r+0x86>
 800ecdc:	463e      	mov	r6, r7
 800ecde:	4632      	mov	r2, r6
 800ece0:	6820      	ldr	r0, [r4, #0]
 800ece2:	4641      	mov	r1, r8
 800ece4:	f7ff fe32 	bl	800e94c <memmove>
 800ece8:	68a3      	ldr	r3, [r4, #8]
 800ecea:	6822      	ldr	r2, [r4, #0]
 800ecec:	1b9b      	subs	r3, r3, r6
 800ecee:	4432      	add	r2, r6
 800ecf0:	60a3      	str	r3, [r4, #8]
 800ecf2:	6022      	str	r2, [r4, #0]
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	e7db      	b.n	800ecb0 <__ssputs_r+0x58>
 800ecf8:	462a      	mov	r2, r5
 800ecfa:	f000 fa9f 	bl	800f23c <_realloc_r>
 800ecfe:	4606      	mov	r6, r0
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d1e1      	bne.n	800ecc8 <__ssputs_r+0x70>
 800ed04:	6921      	ldr	r1, [r4, #16]
 800ed06:	4650      	mov	r0, sl
 800ed08:	f7ff fe42 	bl	800e990 <_free_r>
 800ed0c:	e7c7      	b.n	800ec9e <__ssputs_r+0x46>
	...

0800ed10 <_svfiprintf_r>:
 800ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed14:	4698      	mov	r8, r3
 800ed16:	898b      	ldrh	r3, [r1, #12]
 800ed18:	061b      	lsls	r3, r3, #24
 800ed1a:	b09d      	sub	sp, #116	; 0x74
 800ed1c:	4607      	mov	r7, r0
 800ed1e:	460d      	mov	r5, r1
 800ed20:	4614      	mov	r4, r2
 800ed22:	d50e      	bpl.n	800ed42 <_svfiprintf_r+0x32>
 800ed24:	690b      	ldr	r3, [r1, #16]
 800ed26:	b963      	cbnz	r3, 800ed42 <_svfiprintf_r+0x32>
 800ed28:	2140      	movs	r1, #64	; 0x40
 800ed2a:	f7ff fe81 	bl	800ea30 <_malloc_r>
 800ed2e:	6028      	str	r0, [r5, #0]
 800ed30:	6128      	str	r0, [r5, #16]
 800ed32:	b920      	cbnz	r0, 800ed3e <_svfiprintf_r+0x2e>
 800ed34:	230c      	movs	r3, #12
 800ed36:	603b      	str	r3, [r7, #0]
 800ed38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed3c:	e0d1      	b.n	800eee2 <_svfiprintf_r+0x1d2>
 800ed3e:	2340      	movs	r3, #64	; 0x40
 800ed40:	616b      	str	r3, [r5, #20]
 800ed42:	2300      	movs	r3, #0
 800ed44:	9309      	str	r3, [sp, #36]	; 0x24
 800ed46:	2320      	movs	r3, #32
 800ed48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed50:	2330      	movs	r3, #48	; 0x30
 800ed52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eefc <_svfiprintf_r+0x1ec>
 800ed56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed5a:	f04f 0901 	mov.w	r9, #1
 800ed5e:	4623      	mov	r3, r4
 800ed60:	469a      	mov	sl, r3
 800ed62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed66:	b10a      	cbz	r2, 800ed6c <_svfiprintf_r+0x5c>
 800ed68:	2a25      	cmp	r2, #37	; 0x25
 800ed6a:	d1f9      	bne.n	800ed60 <_svfiprintf_r+0x50>
 800ed6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed70:	d00b      	beq.n	800ed8a <_svfiprintf_r+0x7a>
 800ed72:	465b      	mov	r3, fp
 800ed74:	4622      	mov	r2, r4
 800ed76:	4629      	mov	r1, r5
 800ed78:	4638      	mov	r0, r7
 800ed7a:	f7ff ff6d 	bl	800ec58 <__ssputs_r>
 800ed7e:	3001      	adds	r0, #1
 800ed80:	f000 80aa 	beq.w	800eed8 <_svfiprintf_r+0x1c8>
 800ed84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed86:	445a      	add	r2, fp
 800ed88:	9209      	str	r2, [sp, #36]	; 0x24
 800ed8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f000 80a2 	beq.w	800eed8 <_svfiprintf_r+0x1c8>
 800ed94:	2300      	movs	r3, #0
 800ed96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed9e:	f10a 0a01 	add.w	sl, sl, #1
 800eda2:	9304      	str	r3, [sp, #16]
 800eda4:	9307      	str	r3, [sp, #28]
 800eda6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edaa:	931a      	str	r3, [sp, #104]	; 0x68
 800edac:	4654      	mov	r4, sl
 800edae:	2205      	movs	r2, #5
 800edb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edb4:	4851      	ldr	r0, [pc, #324]	; (800eefc <_svfiprintf_r+0x1ec>)
 800edb6:	f7f1 fa93 	bl	80002e0 <memchr>
 800edba:	9a04      	ldr	r2, [sp, #16]
 800edbc:	b9d8      	cbnz	r0, 800edf6 <_svfiprintf_r+0xe6>
 800edbe:	06d0      	lsls	r0, r2, #27
 800edc0:	bf44      	itt	mi
 800edc2:	2320      	movmi	r3, #32
 800edc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edc8:	0711      	lsls	r1, r2, #28
 800edca:	bf44      	itt	mi
 800edcc:	232b      	movmi	r3, #43	; 0x2b
 800edce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edd2:	f89a 3000 	ldrb.w	r3, [sl]
 800edd6:	2b2a      	cmp	r3, #42	; 0x2a
 800edd8:	d015      	beq.n	800ee06 <_svfiprintf_r+0xf6>
 800edda:	9a07      	ldr	r2, [sp, #28]
 800eddc:	4654      	mov	r4, sl
 800edde:	2000      	movs	r0, #0
 800ede0:	f04f 0c0a 	mov.w	ip, #10
 800ede4:	4621      	mov	r1, r4
 800ede6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edea:	3b30      	subs	r3, #48	; 0x30
 800edec:	2b09      	cmp	r3, #9
 800edee:	d94e      	bls.n	800ee8e <_svfiprintf_r+0x17e>
 800edf0:	b1b0      	cbz	r0, 800ee20 <_svfiprintf_r+0x110>
 800edf2:	9207      	str	r2, [sp, #28]
 800edf4:	e014      	b.n	800ee20 <_svfiprintf_r+0x110>
 800edf6:	eba0 0308 	sub.w	r3, r0, r8
 800edfa:	fa09 f303 	lsl.w	r3, r9, r3
 800edfe:	4313      	orrs	r3, r2
 800ee00:	9304      	str	r3, [sp, #16]
 800ee02:	46a2      	mov	sl, r4
 800ee04:	e7d2      	b.n	800edac <_svfiprintf_r+0x9c>
 800ee06:	9b03      	ldr	r3, [sp, #12]
 800ee08:	1d19      	adds	r1, r3, #4
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	9103      	str	r1, [sp, #12]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	bfbb      	ittet	lt
 800ee12:	425b      	neglt	r3, r3
 800ee14:	f042 0202 	orrlt.w	r2, r2, #2
 800ee18:	9307      	strge	r3, [sp, #28]
 800ee1a:	9307      	strlt	r3, [sp, #28]
 800ee1c:	bfb8      	it	lt
 800ee1e:	9204      	strlt	r2, [sp, #16]
 800ee20:	7823      	ldrb	r3, [r4, #0]
 800ee22:	2b2e      	cmp	r3, #46	; 0x2e
 800ee24:	d10c      	bne.n	800ee40 <_svfiprintf_r+0x130>
 800ee26:	7863      	ldrb	r3, [r4, #1]
 800ee28:	2b2a      	cmp	r3, #42	; 0x2a
 800ee2a:	d135      	bne.n	800ee98 <_svfiprintf_r+0x188>
 800ee2c:	9b03      	ldr	r3, [sp, #12]
 800ee2e:	1d1a      	adds	r2, r3, #4
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	9203      	str	r2, [sp, #12]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	bfb8      	it	lt
 800ee38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ee3c:	3402      	adds	r4, #2
 800ee3e:	9305      	str	r3, [sp, #20]
 800ee40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef0c <_svfiprintf_r+0x1fc>
 800ee44:	7821      	ldrb	r1, [r4, #0]
 800ee46:	2203      	movs	r2, #3
 800ee48:	4650      	mov	r0, sl
 800ee4a:	f7f1 fa49 	bl	80002e0 <memchr>
 800ee4e:	b140      	cbz	r0, 800ee62 <_svfiprintf_r+0x152>
 800ee50:	2340      	movs	r3, #64	; 0x40
 800ee52:	eba0 000a 	sub.w	r0, r0, sl
 800ee56:	fa03 f000 	lsl.w	r0, r3, r0
 800ee5a:	9b04      	ldr	r3, [sp, #16]
 800ee5c:	4303      	orrs	r3, r0
 800ee5e:	3401      	adds	r4, #1
 800ee60:	9304      	str	r3, [sp, #16]
 800ee62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee66:	4826      	ldr	r0, [pc, #152]	; (800ef00 <_svfiprintf_r+0x1f0>)
 800ee68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee6c:	2206      	movs	r2, #6
 800ee6e:	f7f1 fa37 	bl	80002e0 <memchr>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d038      	beq.n	800eee8 <_svfiprintf_r+0x1d8>
 800ee76:	4b23      	ldr	r3, [pc, #140]	; (800ef04 <_svfiprintf_r+0x1f4>)
 800ee78:	bb1b      	cbnz	r3, 800eec2 <_svfiprintf_r+0x1b2>
 800ee7a:	9b03      	ldr	r3, [sp, #12]
 800ee7c:	3307      	adds	r3, #7
 800ee7e:	f023 0307 	bic.w	r3, r3, #7
 800ee82:	3308      	adds	r3, #8
 800ee84:	9303      	str	r3, [sp, #12]
 800ee86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee88:	4433      	add	r3, r6
 800ee8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee8c:	e767      	b.n	800ed5e <_svfiprintf_r+0x4e>
 800ee8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee92:	460c      	mov	r4, r1
 800ee94:	2001      	movs	r0, #1
 800ee96:	e7a5      	b.n	800ede4 <_svfiprintf_r+0xd4>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	3401      	adds	r4, #1
 800ee9c:	9305      	str	r3, [sp, #20]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	f04f 0c0a 	mov.w	ip, #10
 800eea4:	4620      	mov	r0, r4
 800eea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeaa:	3a30      	subs	r2, #48	; 0x30
 800eeac:	2a09      	cmp	r2, #9
 800eeae:	d903      	bls.n	800eeb8 <_svfiprintf_r+0x1a8>
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d0c5      	beq.n	800ee40 <_svfiprintf_r+0x130>
 800eeb4:	9105      	str	r1, [sp, #20]
 800eeb6:	e7c3      	b.n	800ee40 <_svfiprintf_r+0x130>
 800eeb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eebc:	4604      	mov	r4, r0
 800eebe:	2301      	movs	r3, #1
 800eec0:	e7f0      	b.n	800eea4 <_svfiprintf_r+0x194>
 800eec2:	ab03      	add	r3, sp, #12
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	462a      	mov	r2, r5
 800eec8:	4b0f      	ldr	r3, [pc, #60]	; (800ef08 <_svfiprintf_r+0x1f8>)
 800eeca:	a904      	add	r1, sp, #16
 800eecc:	4638      	mov	r0, r7
 800eece:	f3af 8000 	nop.w
 800eed2:	1c42      	adds	r2, r0, #1
 800eed4:	4606      	mov	r6, r0
 800eed6:	d1d6      	bne.n	800ee86 <_svfiprintf_r+0x176>
 800eed8:	89ab      	ldrh	r3, [r5, #12]
 800eeda:	065b      	lsls	r3, r3, #25
 800eedc:	f53f af2c 	bmi.w	800ed38 <_svfiprintf_r+0x28>
 800eee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eee2:	b01d      	add	sp, #116	; 0x74
 800eee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee8:	ab03      	add	r3, sp, #12
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	462a      	mov	r2, r5
 800eeee:	4b06      	ldr	r3, [pc, #24]	; (800ef08 <_svfiprintf_r+0x1f8>)
 800eef0:	a904      	add	r1, sp, #16
 800eef2:	4638      	mov	r0, r7
 800eef4:	f000 f87a 	bl	800efec <_printf_i>
 800eef8:	e7eb      	b.n	800eed2 <_svfiprintf_r+0x1c2>
 800eefa:	bf00      	nop
 800eefc:	0800fef6 	.word	0x0800fef6
 800ef00:	0800ff00 	.word	0x0800ff00
 800ef04:	00000000 	.word	0x00000000
 800ef08:	0800ec59 	.word	0x0800ec59
 800ef0c:	0800fefc 	.word	0x0800fefc

0800ef10 <_printf_common>:
 800ef10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef14:	4616      	mov	r6, r2
 800ef16:	4699      	mov	r9, r3
 800ef18:	688a      	ldr	r2, [r1, #8]
 800ef1a:	690b      	ldr	r3, [r1, #16]
 800ef1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef20:	4293      	cmp	r3, r2
 800ef22:	bfb8      	it	lt
 800ef24:	4613      	movlt	r3, r2
 800ef26:	6033      	str	r3, [r6, #0]
 800ef28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	460c      	mov	r4, r1
 800ef30:	b10a      	cbz	r2, 800ef36 <_printf_common+0x26>
 800ef32:	3301      	adds	r3, #1
 800ef34:	6033      	str	r3, [r6, #0]
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	0699      	lsls	r1, r3, #26
 800ef3a:	bf42      	ittt	mi
 800ef3c:	6833      	ldrmi	r3, [r6, #0]
 800ef3e:	3302      	addmi	r3, #2
 800ef40:	6033      	strmi	r3, [r6, #0]
 800ef42:	6825      	ldr	r5, [r4, #0]
 800ef44:	f015 0506 	ands.w	r5, r5, #6
 800ef48:	d106      	bne.n	800ef58 <_printf_common+0x48>
 800ef4a:	f104 0a19 	add.w	sl, r4, #25
 800ef4e:	68e3      	ldr	r3, [r4, #12]
 800ef50:	6832      	ldr	r2, [r6, #0]
 800ef52:	1a9b      	subs	r3, r3, r2
 800ef54:	42ab      	cmp	r3, r5
 800ef56:	dc26      	bgt.n	800efa6 <_printf_common+0x96>
 800ef58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef5c:	1e13      	subs	r3, r2, #0
 800ef5e:	6822      	ldr	r2, [r4, #0]
 800ef60:	bf18      	it	ne
 800ef62:	2301      	movne	r3, #1
 800ef64:	0692      	lsls	r2, r2, #26
 800ef66:	d42b      	bmi.n	800efc0 <_printf_common+0xb0>
 800ef68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef6c:	4649      	mov	r1, r9
 800ef6e:	4638      	mov	r0, r7
 800ef70:	47c0      	blx	r8
 800ef72:	3001      	adds	r0, #1
 800ef74:	d01e      	beq.n	800efb4 <_printf_common+0xa4>
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	68e5      	ldr	r5, [r4, #12]
 800ef7a:	6832      	ldr	r2, [r6, #0]
 800ef7c:	f003 0306 	and.w	r3, r3, #6
 800ef80:	2b04      	cmp	r3, #4
 800ef82:	bf08      	it	eq
 800ef84:	1aad      	subeq	r5, r5, r2
 800ef86:	68a3      	ldr	r3, [r4, #8]
 800ef88:	6922      	ldr	r2, [r4, #16]
 800ef8a:	bf0c      	ite	eq
 800ef8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef90:	2500      	movne	r5, #0
 800ef92:	4293      	cmp	r3, r2
 800ef94:	bfc4      	itt	gt
 800ef96:	1a9b      	subgt	r3, r3, r2
 800ef98:	18ed      	addgt	r5, r5, r3
 800ef9a:	2600      	movs	r6, #0
 800ef9c:	341a      	adds	r4, #26
 800ef9e:	42b5      	cmp	r5, r6
 800efa0:	d11a      	bne.n	800efd8 <_printf_common+0xc8>
 800efa2:	2000      	movs	r0, #0
 800efa4:	e008      	b.n	800efb8 <_printf_common+0xa8>
 800efa6:	2301      	movs	r3, #1
 800efa8:	4652      	mov	r2, sl
 800efaa:	4649      	mov	r1, r9
 800efac:	4638      	mov	r0, r7
 800efae:	47c0      	blx	r8
 800efb0:	3001      	adds	r0, #1
 800efb2:	d103      	bne.n	800efbc <_printf_common+0xac>
 800efb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efbc:	3501      	adds	r5, #1
 800efbe:	e7c6      	b.n	800ef4e <_printf_common+0x3e>
 800efc0:	18e1      	adds	r1, r4, r3
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	2030      	movs	r0, #48	; 0x30
 800efc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efca:	4422      	add	r2, r4
 800efcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efd4:	3302      	adds	r3, #2
 800efd6:	e7c7      	b.n	800ef68 <_printf_common+0x58>
 800efd8:	2301      	movs	r3, #1
 800efda:	4622      	mov	r2, r4
 800efdc:	4649      	mov	r1, r9
 800efde:	4638      	mov	r0, r7
 800efe0:	47c0      	blx	r8
 800efe2:	3001      	adds	r0, #1
 800efe4:	d0e6      	beq.n	800efb4 <_printf_common+0xa4>
 800efe6:	3601      	adds	r6, #1
 800efe8:	e7d9      	b.n	800ef9e <_printf_common+0x8e>
	...

0800efec <_printf_i>:
 800efec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eff0:	460c      	mov	r4, r1
 800eff2:	4691      	mov	r9, r2
 800eff4:	7e27      	ldrb	r7, [r4, #24]
 800eff6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eff8:	2f78      	cmp	r7, #120	; 0x78
 800effa:	4680      	mov	r8, r0
 800effc:	469a      	mov	sl, r3
 800effe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f002:	d807      	bhi.n	800f014 <_printf_i+0x28>
 800f004:	2f62      	cmp	r7, #98	; 0x62
 800f006:	d80a      	bhi.n	800f01e <_printf_i+0x32>
 800f008:	2f00      	cmp	r7, #0
 800f00a:	f000 80d8 	beq.w	800f1be <_printf_i+0x1d2>
 800f00e:	2f58      	cmp	r7, #88	; 0x58
 800f010:	f000 80a3 	beq.w	800f15a <_printf_i+0x16e>
 800f014:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f01c:	e03a      	b.n	800f094 <_printf_i+0xa8>
 800f01e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f022:	2b15      	cmp	r3, #21
 800f024:	d8f6      	bhi.n	800f014 <_printf_i+0x28>
 800f026:	a001      	add	r0, pc, #4	; (adr r0, 800f02c <_printf_i+0x40>)
 800f028:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f02c:	0800f085 	.word	0x0800f085
 800f030:	0800f099 	.word	0x0800f099
 800f034:	0800f015 	.word	0x0800f015
 800f038:	0800f015 	.word	0x0800f015
 800f03c:	0800f015 	.word	0x0800f015
 800f040:	0800f015 	.word	0x0800f015
 800f044:	0800f099 	.word	0x0800f099
 800f048:	0800f015 	.word	0x0800f015
 800f04c:	0800f015 	.word	0x0800f015
 800f050:	0800f015 	.word	0x0800f015
 800f054:	0800f015 	.word	0x0800f015
 800f058:	0800f1a5 	.word	0x0800f1a5
 800f05c:	0800f0c9 	.word	0x0800f0c9
 800f060:	0800f187 	.word	0x0800f187
 800f064:	0800f015 	.word	0x0800f015
 800f068:	0800f015 	.word	0x0800f015
 800f06c:	0800f1c7 	.word	0x0800f1c7
 800f070:	0800f015 	.word	0x0800f015
 800f074:	0800f0c9 	.word	0x0800f0c9
 800f078:	0800f015 	.word	0x0800f015
 800f07c:	0800f015 	.word	0x0800f015
 800f080:	0800f18f 	.word	0x0800f18f
 800f084:	680b      	ldr	r3, [r1, #0]
 800f086:	1d1a      	adds	r2, r3, #4
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	600a      	str	r2, [r1, #0]
 800f08c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f094:	2301      	movs	r3, #1
 800f096:	e0a3      	b.n	800f1e0 <_printf_i+0x1f4>
 800f098:	6825      	ldr	r5, [r4, #0]
 800f09a:	6808      	ldr	r0, [r1, #0]
 800f09c:	062e      	lsls	r6, r5, #24
 800f09e:	f100 0304 	add.w	r3, r0, #4
 800f0a2:	d50a      	bpl.n	800f0ba <_printf_i+0xce>
 800f0a4:	6805      	ldr	r5, [r0, #0]
 800f0a6:	600b      	str	r3, [r1, #0]
 800f0a8:	2d00      	cmp	r5, #0
 800f0aa:	da03      	bge.n	800f0b4 <_printf_i+0xc8>
 800f0ac:	232d      	movs	r3, #45	; 0x2d
 800f0ae:	426d      	negs	r5, r5
 800f0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0b4:	485e      	ldr	r0, [pc, #376]	; (800f230 <_printf_i+0x244>)
 800f0b6:	230a      	movs	r3, #10
 800f0b8:	e019      	b.n	800f0ee <_printf_i+0x102>
 800f0ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f0be:	6805      	ldr	r5, [r0, #0]
 800f0c0:	600b      	str	r3, [r1, #0]
 800f0c2:	bf18      	it	ne
 800f0c4:	b22d      	sxthne	r5, r5
 800f0c6:	e7ef      	b.n	800f0a8 <_printf_i+0xbc>
 800f0c8:	680b      	ldr	r3, [r1, #0]
 800f0ca:	6825      	ldr	r5, [r4, #0]
 800f0cc:	1d18      	adds	r0, r3, #4
 800f0ce:	6008      	str	r0, [r1, #0]
 800f0d0:	0628      	lsls	r0, r5, #24
 800f0d2:	d501      	bpl.n	800f0d8 <_printf_i+0xec>
 800f0d4:	681d      	ldr	r5, [r3, #0]
 800f0d6:	e002      	b.n	800f0de <_printf_i+0xf2>
 800f0d8:	0669      	lsls	r1, r5, #25
 800f0da:	d5fb      	bpl.n	800f0d4 <_printf_i+0xe8>
 800f0dc:	881d      	ldrh	r5, [r3, #0]
 800f0de:	4854      	ldr	r0, [pc, #336]	; (800f230 <_printf_i+0x244>)
 800f0e0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0e2:	bf0c      	ite	eq
 800f0e4:	2308      	moveq	r3, #8
 800f0e6:	230a      	movne	r3, #10
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0ee:	6866      	ldr	r6, [r4, #4]
 800f0f0:	60a6      	str	r6, [r4, #8]
 800f0f2:	2e00      	cmp	r6, #0
 800f0f4:	bfa2      	ittt	ge
 800f0f6:	6821      	ldrge	r1, [r4, #0]
 800f0f8:	f021 0104 	bicge.w	r1, r1, #4
 800f0fc:	6021      	strge	r1, [r4, #0]
 800f0fe:	b90d      	cbnz	r5, 800f104 <_printf_i+0x118>
 800f100:	2e00      	cmp	r6, #0
 800f102:	d04d      	beq.n	800f1a0 <_printf_i+0x1b4>
 800f104:	4616      	mov	r6, r2
 800f106:	fbb5 f1f3 	udiv	r1, r5, r3
 800f10a:	fb03 5711 	mls	r7, r3, r1, r5
 800f10e:	5dc7      	ldrb	r7, [r0, r7]
 800f110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f114:	462f      	mov	r7, r5
 800f116:	42bb      	cmp	r3, r7
 800f118:	460d      	mov	r5, r1
 800f11a:	d9f4      	bls.n	800f106 <_printf_i+0x11a>
 800f11c:	2b08      	cmp	r3, #8
 800f11e:	d10b      	bne.n	800f138 <_printf_i+0x14c>
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	07df      	lsls	r7, r3, #31
 800f124:	d508      	bpl.n	800f138 <_printf_i+0x14c>
 800f126:	6923      	ldr	r3, [r4, #16]
 800f128:	6861      	ldr	r1, [r4, #4]
 800f12a:	4299      	cmp	r1, r3
 800f12c:	bfde      	ittt	le
 800f12e:	2330      	movle	r3, #48	; 0x30
 800f130:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f134:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f138:	1b92      	subs	r2, r2, r6
 800f13a:	6122      	str	r2, [r4, #16]
 800f13c:	f8cd a000 	str.w	sl, [sp]
 800f140:	464b      	mov	r3, r9
 800f142:	aa03      	add	r2, sp, #12
 800f144:	4621      	mov	r1, r4
 800f146:	4640      	mov	r0, r8
 800f148:	f7ff fee2 	bl	800ef10 <_printf_common>
 800f14c:	3001      	adds	r0, #1
 800f14e:	d14c      	bne.n	800f1ea <_printf_i+0x1fe>
 800f150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f154:	b004      	add	sp, #16
 800f156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f15a:	4835      	ldr	r0, [pc, #212]	; (800f230 <_printf_i+0x244>)
 800f15c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	680e      	ldr	r6, [r1, #0]
 800f164:	061f      	lsls	r7, r3, #24
 800f166:	f856 5b04 	ldr.w	r5, [r6], #4
 800f16a:	600e      	str	r6, [r1, #0]
 800f16c:	d514      	bpl.n	800f198 <_printf_i+0x1ac>
 800f16e:	07d9      	lsls	r1, r3, #31
 800f170:	bf44      	itt	mi
 800f172:	f043 0320 	orrmi.w	r3, r3, #32
 800f176:	6023      	strmi	r3, [r4, #0]
 800f178:	b91d      	cbnz	r5, 800f182 <_printf_i+0x196>
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	f023 0320 	bic.w	r3, r3, #32
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	2310      	movs	r3, #16
 800f184:	e7b0      	b.n	800f0e8 <_printf_i+0xfc>
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	f043 0320 	orr.w	r3, r3, #32
 800f18c:	6023      	str	r3, [r4, #0]
 800f18e:	2378      	movs	r3, #120	; 0x78
 800f190:	4828      	ldr	r0, [pc, #160]	; (800f234 <_printf_i+0x248>)
 800f192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f196:	e7e3      	b.n	800f160 <_printf_i+0x174>
 800f198:	065e      	lsls	r6, r3, #25
 800f19a:	bf48      	it	mi
 800f19c:	b2ad      	uxthmi	r5, r5
 800f19e:	e7e6      	b.n	800f16e <_printf_i+0x182>
 800f1a0:	4616      	mov	r6, r2
 800f1a2:	e7bb      	b.n	800f11c <_printf_i+0x130>
 800f1a4:	680b      	ldr	r3, [r1, #0]
 800f1a6:	6826      	ldr	r6, [r4, #0]
 800f1a8:	6960      	ldr	r0, [r4, #20]
 800f1aa:	1d1d      	adds	r5, r3, #4
 800f1ac:	600d      	str	r5, [r1, #0]
 800f1ae:	0635      	lsls	r5, r6, #24
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	d501      	bpl.n	800f1b8 <_printf_i+0x1cc>
 800f1b4:	6018      	str	r0, [r3, #0]
 800f1b6:	e002      	b.n	800f1be <_printf_i+0x1d2>
 800f1b8:	0671      	lsls	r1, r6, #25
 800f1ba:	d5fb      	bpl.n	800f1b4 <_printf_i+0x1c8>
 800f1bc:	8018      	strh	r0, [r3, #0]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	6123      	str	r3, [r4, #16]
 800f1c2:	4616      	mov	r6, r2
 800f1c4:	e7ba      	b.n	800f13c <_printf_i+0x150>
 800f1c6:	680b      	ldr	r3, [r1, #0]
 800f1c8:	1d1a      	adds	r2, r3, #4
 800f1ca:	600a      	str	r2, [r1, #0]
 800f1cc:	681e      	ldr	r6, [r3, #0]
 800f1ce:	6862      	ldr	r2, [r4, #4]
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7f1 f884 	bl	80002e0 <memchr>
 800f1d8:	b108      	cbz	r0, 800f1de <_printf_i+0x1f2>
 800f1da:	1b80      	subs	r0, r0, r6
 800f1dc:	6060      	str	r0, [r4, #4]
 800f1de:	6863      	ldr	r3, [r4, #4]
 800f1e0:	6123      	str	r3, [r4, #16]
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1e8:	e7a8      	b.n	800f13c <_printf_i+0x150>
 800f1ea:	6923      	ldr	r3, [r4, #16]
 800f1ec:	4632      	mov	r2, r6
 800f1ee:	4649      	mov	r1, r9
 800f1f0:	4640      	mov	r0, r8
 800f1f2:	47d0      	blx	sl
 800f1f4:	3001      	adds	r0, #1
 800f1f6:	d0ab      	beq.n	800f150 <_printf_i+0x164>
 800f1f8:	6823      	ldr	r3, [r4, #0]
 800f1fa:	079b      	lsls	r3, r3, #30
 800f1fc:	d413      	bmi.n	800f226 <_printf_i+0x23a>
 800f1fe:	68e0      	ldr	r0, [r4, #12]
 800f200:	9b03      	ldr	r3, [sp, #12]
 800f202:	4298      	cmp	r0, r3
 800f204:	bfb8      	it	lt
 800f206:	4618      	movlt	r0, r3
 800f208:	e7a4      	b.n	800f154 <_printf_i+0x168>
 800f20a:	2301      	movs	r3, #1
 800f20c:	4632      	mov	r2, r6
 800f20e:	4649      	mov	r1, r9
 800f210:	4640      	mov	r0, r8
 800f212:	47d0      	blx	sl
 800f214:	3001      	adds	r0, #1
 800f216:	d09b      	beq.n	800f150 <_printf_i+0x164>
 800f218:	3501      	adds	r5, #1
 800f21a:	68e3      	ldr	r3, [r4, #12]
 800f21c:	9903      	ldr	r1, [sp, #12]
 800f21e:	1a5b      	subs	r3, r3, r1
 800f220:	42ab      	cmp	r3, r5
 800f222:	dcf2      	bgt.n	800f20a <_printf_i+0x21e>
 800f224:	e7eb      	b.n	800f1fe <_printf_i+0x212>
 800f226:	2500      	movs	r5, #0
 800f228:	f104 0619 	add.w	r6, r4, #25
 800f22c:	e7f5      	b.n	800f21a <_printf_i+0x22e>
 800f22e:	bf00      	nop
 800f230:	0800ff07 	.word	0x0800ff07
 800f234:	0800ff18 	.word	0x0800ff18

0800f238 <__retarget_lock_acquire_recursive>:
 800f238:	4770      	bx	lr

0800f23a <__retarget_lock_release_recursive>:
 800f23a:	4770      	bx	lr

0800f23c <_realloc_r>:
 800f23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23e:	4607      	mov	r7, r0
 800f240:	4614      	mov	r4, r2
 800f242:	460e      	mov	r6, r1
 800f244:	b921      	cbnz	r1, 800f250 <_realloc_r+0x14>
 800f246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f24a:	4611      	mov	r1, r2
 800f24c:	f7ff bbf0 	b.w	800ea30 <_malloc_r>
 800f250:	b922      	cbnz	r2, 800f25c <_realloc_r+0x20>
 800f252:	f7ff fb9d 	bl	800e990 <_free_r>
 800f256:	4625      	mov	r5, r4
 800f258:	4628      	mov	r0, r5
 800f25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f25c:	f000 f814 	bl	800f288 <_malloc_usable_size_r>
 800f260:	42a0      	cmp	r0, r4
 800f262:	d20f      	bcs.n	800f284 <_realloc_r+0x48>
 800f264:	4621      	mov	r1, r4
 800f266:	4638      	mov	r0, r7
 800f268:	f7ff fbe2 	bl	800ea30 <_malloc_r>
 800f26c:	4605      	mov	r5, r0
 800f26e:	2800      	cmp	r0, #0
 800f270:	d0f2      	beq.n	800f258 <_realloc_r+0x1c>
 800f272:	4631      	mov	r1, r6
 800f274:	4622      	mov	r2, r4
 800f276:	f7ff fb5b 	bl	800e930 <memcpy>
 800f27a:	4631      	mov	r1, r6
 800f27c:	4638      	mov	r0, r7
 800f27e:	f7ff fb87 	bl	800e990 <_free_r>
 800f282:	e7e9      	b.n	800f258 <_realloc_r+0x1c>
 800f284:	4635      	mov	r5, r6
 800f286:	e7e7      	b.n	800f258 <_realloc_r+0x1c>

0800f288 <_malloc_usable_size_r>:
 800f288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f28c:	1f18      	subs	r0, r3, #4
 800f28e:	2b00      	cmp	r3, #0
 800f290:	bfbc      	itt	lt
 800f292:	580b      	ldrlt	r3, [r1, r0]
 800f294:	18c0      	addlt	r0, r0, r3
 800f296:	4770      	bx	lr

0800f298 <_init>:
 800f298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f29a:	bf00      	nop
 800f29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f29e:	bc08      	pop	{r3}
 800f2a0:	469e      	mov	lr, r3
 800f2a2:	4770      	bx	lr

0800f2a4 <_fini>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	bf00      	nop
 800f2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	469e      	mov	lr, r3
 800f2ae:	4770      	bx	lr
