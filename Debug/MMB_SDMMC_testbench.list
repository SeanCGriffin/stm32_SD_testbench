
MMB_SDMMC_testbench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb04  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  0800eda4  0800eda4  0001eda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f7f8  0800f7f8  0001f7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f800  0800f800  0001f800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f804  0800f804  0001f804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800f808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ba8  24000088  0800f88c  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001c30  0800f88c  00021c30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00045524  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000064fe  00000000  00000000  000655d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019a8  00000000  00000000  0006bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001830  00000000  00000000  0006d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c3d5  00000000  00000000  0006ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024f1e  00000000  00000000  0007b085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175306  00000000  00000000  0009ffa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002152a9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007278  00000000  00000000  002152fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ed8c 	.word	0x0800ed8c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800ed8c 	.word	0x0800ed8c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print(const char *fmt, ...) {
 8000688:	b40f      	push	{r0, r1, r2, r3}
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	480a      	ldr	r0, [pc, #40]	; (80006c8 <print+0x40>)
 80006a0:	f00e f83a 	bl	800e718 <vsniprintf>
	va_end(args);

	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, strlen(buffer), -1);
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <print+0x40>)
 80006a6:	f7ff fe6b 	bl	8000380 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b2:	4905      	ldr	r1, [pc, #20]	; (80006c8 <print+0x40>)
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <print+0x44>)
 80006b6:	f007 fa79 	bl	8007bac <HAL_UART_Transmit>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr
 80006c8:	240001fc 	.word	0x240001fc
 80006cc:	2400016c 	.word	0x2400016c

080006d0 <_Z11flash_errorv>:

void flash_error() {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <_Z11flash_errorv+0x2c>)
 80006da:	f002 f834 	bl	8002746 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80006de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e2:	f001 fd0f 	bl	8002104 <HAL_Delay>
	HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	4804      	ldr	r0, [pc, #16]	; (80006fc <_Z11flash_errorv+0x2c>)
 80006ec:	f002 f82b 	bl	8002746 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f001 fd07 	bl	8002104 <HAL_Delay>

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	58020400 	.word	0x58020400

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f001 fc6c 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f812 	bl	8000730 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 f986 	bl	8000a1c <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000710:	f000 f924 	bl	800095c <_ZL19MX_USART3_UART_Initv>
  MX_SDMMC1_SD_Init();
 8000714:	f000 f894 	bl	8000840 <_ZL17MX_SDMMC1_SD_Initv>
  MX_FATFS_Init();
 8000718:	f009 f878 	bl	800980c <MX_FATFS_Init>
  MX_TIM5_Init();
 800071c:	f000 f8c0 	bl	80008a0 <_ZL12MX_TIM5_Initv>
  /* USER CODE BEGIN 2 */

	//Start timers.
	HAL_TIM_Base_Start_IT(&htim5); //1 MHz; 32 bit
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <main+0x2c>)
 8000722:	f006 fd69 	bl	80071f8 <HAL_TIM_Base_Start_IT>

	run_SDMMC_testbench();
 8000726:	f000 fb49 	bl	8000dbc <_Z19run_SDMMC_testbenchv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800072a:	e7fe      	b.n	800072a <main+0x2a>
 800072c:	24000120 	.word	0x24000120

08000730 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b09c      	sub	sp, #112	; 0x70
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	224c      	movs	r2, #76	; 0x4c
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00d fe98 	bl	800e474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2220      	movs	r2, #32
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f00d fe92 	bl	800e474 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000750:	2002      	movs	r0, #2
 8000752:	f002 f813 	bl	800277c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <_Z18SystemClock_Configv+0x108>)
 800075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075e:	4a36      	ldr	r2, [pc, #216]	; (8000838 <_Z18SystemClock_Configv+0x108>)
 8000760:	f023 0301 	bic.w	r3, r3, #1
 8000764:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <_Z18SystemClock_Configv+0x108>)
 8000768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <_Z18SystemClock_Configv+0x10c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a31      	ldr	r2, [pc, #196]	; (800083c <_Z18SystemClock_Configv+0x10c>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <_Z18SystemClock_Configv+0x10c>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <_Z18SystemClock_Configv+0x10c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d000      	beq.n	80007a2 <_Z18SystemClock_Configv+0x72>
 80007a0:	e7f2      	b.n	8000788 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a2:	2301      	movs	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80007b8:	2319      	movs	r3, #25
 80007ba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c8:	230c      	movs	r3, #12
 80007ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f809 	bl	80027f0 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf14      	ite	ne
 80007e4:	2301      	movne	r3, #1
 80007e6:	2300      	moveq	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80007ee:	f000 fa2b 	bl	8000c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	233f      	movs	r3, #63	; 0x3f
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2101      	movs	r1, #1
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fbfa 	bl	8003010 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf14      	ite	ne
 8000822:	2301      	movne	r3, #1
 8000824:	2300      	moveq	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <_Z18SystemClock_Configv+0x100>
  {
    Error_Handler();
 800082c:	f000 fa0c 	bl	8000c48 <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3770      	adds	r7, #112	; 0x70
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	58000400 	.word	0x58000400
 800083c:	58024800 	.word	0x58024800

08000840 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDMMC1_Init 0 */
	__HAL_RCC_SDMMC1_CLK_ENABLE();
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8000848:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800084c:	4a11      	ldr	r2, [pc, #68]	; (8000894 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800084e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000852:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8000858:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800085c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000866:	4a0d      	ldr	r2, [pc, #52]	; (800089c <_ZL17MX_SDMMC1_SD_Initv+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 5;
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <_ZL17MX_SDMMC1_SD_Initv+0x58>)
 8000884:	2205      	movs	r2, #5
 8000886:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	58024400 	.word	0x58024400
 8000898:	240000a4 	.word	0x240000a4
 800089c:	52007000 	.word	0x52007000

080008a0 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 80008c0:	4a24      	ldr	r2, [pc, #144]	; (8000954 <_ZL12MX_TIM5_Initv+0xb4>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 80008c6:	2263      	movs	r2, #99	; 0x63
 80008c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000000-1;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 80008d2:	4a21      	ldr	r2, [pc, #132]	; (8000958 <_ZL12MX_TIM5_Initv+0xb8>)
 80008d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 80008e4:	f006 fc30 	bl	8007148 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf14      	ite	ne
 80008ee:	2301      	movne	r3, #1
 80008f0:	2300      	moveq	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <_ZL12MX_TIM5_Initv+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f9a6 	bl	8000c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 800090a:	f006 fe05 	bl	8007518 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf14      	ite	ne
 8000914:	2301      	movne	r3, #1
 8000916:	2300      	moveq	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <_ZL12MX_TIM5_Initv+0x82>
  {
    Error_Handler();
 800091e:	f000 f993 	bl	8000c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4808      	ldr	r0, [pc, #32]	; (8000950 <_ZL12MX_TIM5_Initv+0xb0>)
 8000930:	f007 f846 	bl	80079c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	bf14      	ite	ne
 800093a:	2301      	movne	r3, #1
 800093c:	2300      	moveq	r3, #0
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <_ZL12MX_TIM5_Initv+0xa8>
  {
    Error_Handler();
 8000944:	f000 f980 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000120 	.word	0x24000120
 8000954:	40000c00 	.word	0x40000c00
 8000958:	000f423f 	.word	0x000f423f

0800095c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000962:	4a2d      	ldr	r2, [pc, #180]	; (8000a18 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000964:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a6:	f007 f8b1 	bl	8007b0c <HAL_UART_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80009ba:	f000 f945 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	4814      	ldr	r0, [pc, #80]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009c2:	f008 f88f 	bl	8008ae4 <HAL_UARTEx_SetTxFifoThreshold>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80009d6:	f000 f937 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009de:	f008 f8bf 	bl	8008b60 <HAL_UARTEx_SetRxFifoThreshold>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80009f2:	f000 f929 	bl	8000c48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009f8:	f008 f83b 	bl	8008a72 <HAL_UARTEx_DisableFifoMode>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bf14      	ite	ne
 8000a02:	2301      	movne	r3, #1
 8000a04:	2300      	moveq	r3, #0
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000a0c:	f000 f91c 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2400016c 	.word	0x2400016c
 8000a18:	40004800 	.word	0x40004800

08000a1c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b7f      	ldr	r3, [pc, #508]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	4a7d      	ldr	r2, [pc, #500]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a42:	4b7b      	ldr	r3, [pc, #492]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a50:	4b77      	ldr	r3, [pc, #476]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	4a76      	ldr	r2, [pc, #472]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a60:	4b73      	ldr	r3, [pc, #460]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b70      	ldr	r3, [pc, #448]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a6e      	ldr	r2, [pc, #440]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b68      	ldr	r3, [pc, #416]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a67      	ldr	r2, [pc, #412]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b64      	ldr	r3, [pc, #400]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b61      	ldr	r3, [pc, #388]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a5f      	ldr	r2, [pc, #380]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b5d      	ldr	r3, [pc, #372]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac8:	4b59      	ldr	r3, [pc, #356]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a58      	ldr	r2, [pc, #352]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b55      	ldr	r3, [pc, #340]	; (8000c30 <_ZL12MX_GPIO_Initv+0x214>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aec:	4851      	ldr	r0, [pc, #324]	; (8000c34 <_ZL12MX_GPIO_Initv+0x218>)
 8000aee:	f001 fe11 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	4850      	ldr	r0, [pc, #320]	; (8000c38 <_ZL12MX_GPIO_Initv+0x21c>)
 8000af8:	f001 fe0c 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	4b4e      	ldr	r3, [pc, #312]	; (8000c3c <_ZL12MX_GPIO_Initv+0x220>)
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	484b      	ldr	r0, [pc, #300]	; (8000c40 <_ZL12MX_GPIO_Initv+0x224>)
 8000b12:	f001 fc37 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b16:	2332      	movs	r3, #50	; 0x32
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b26:	230b      	movs	r3, #11
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4843      	ldr	r0, [pc, #268]	; (8000c40 <_ZL12MX_GPIO_Initv+0x224>)
 8000b32:	f001 fc27 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b36:	2386      	movs	r3, #134	; 0x86
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b46:	230b      	movs	r3, #11
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	483c      	ldr	r0, [pc, #240]	; (8000c44 <_ZL12MX_GPIO_Initv+0x228>)
 8000b52:	f001 fc17 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b56:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4831      	ldr	r0, [pc, #196]	; (8000c34 <_ZL12MX_GPIO_Initv+0x218>)
 8000b70:	f001 fc08 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b86:	230b      	movs	r3, #11
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4828      	ldr	r0, [pc, #160]	; (8000c34 <_ZL12MX_GPIO_Initv+0x218>)
 8000b92:	f001 fbf7 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4822      	ldr	r0, [pc, #136]	; (8000c38 <_ZL12MX_GPIO_Initv+0x21c>)
 8000bae:	f001 fbe9 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481c      	ldr	r0, [pc, #112]	; (8000c38 <_ZL12MX_GPIO_Initv+0x21c>)
 8000bc6:	f001 fbdd 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bdc:	230a      	movs	r3, #10
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	; (8000c44 <_ZL12MX_GPIO_Initv+0x228>)
 8000be8:	f001 fbcc 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000bec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480f      	ldr	r0, [pc, #60]	; (8000c40 <_ZL12MX_GPIO_Initv+0x224>)
 8000c02:	f001 fbbf 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c18:	230b      	movs	r3, #11
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <_ZL12MX_GPIO_Initv+0x21c>)
 8000c24:	f001 fbae 	bl	8002384 <HAL_GPIO_Init>

}
 8000c28:	bf00      	nop
 8000c2a:	3730      	adds	r7, #48	; 0x30
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400
 8000c34:	58020400 	.word	0x58020400
 8000c38:	58021800 	.word	0x58021800
 8000c3c:	11110000 	.word	0x11110000
 8000c40:	58020800 	.word	0x58020800
 8000c44:	58020000 	.word	0x58020000

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		flash_error();
 8000c50:	f7ff fd3e 	bl	80006d0 <_Z11flash_errorv>
 8000c54:	e7fc      	b.n	8000c50 <Error_Handler+0x8>

08000c56 <_ZN8hitspool3HitC1E13PayloadType_tth>:

    //Base hit constructor/destructor
    Hit::Hit(){
        this->pl_type = PL_INVALID;
    }
    Hit::Hit(PayloadType_t pl_type, u16 launch_time, u8 tdc){
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	4608      	mov	r0, r1
 8000c60:	4611      	mov	r1, r2
 8000c62:	461a      	mov	r2, r3
 8000c64:	4603      	mov	r3, r0
 8000c66:	70fb      	strb	r3, [r7, #3]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	803b      	strh	r3, [r7, #0]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	70bb      	strb	r3, [r7, #2]
        this->pl_type = pl_type;
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	b2d9      	uxtb	r1, r3
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	7813      	ldrb	r3, [r2, #0]
 8000c7c:	f361 0301 	bfi	r3, r1, #0, #2
 8000c80:	7013      	strb	r3, [r2, #0]
        this->launch_time = launch_time;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	883a      	ldrh	r2, [r7, #0]
 8000c86:	f8a3 2001 	strh.w	r2, [r3, #1]
        this->tdc = tdc;
 8000c8a:	78bb      	ldrb	r3, [r7, #2]
 8000c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c90:	b2d9      	uxtb	r1, r3
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	7813      	ldrb	r3, [r2, #0]
 8000c96:	f361 0387 	bfi	r3, r1, #2, #6
 8000c9a:	7013      	strb	r3, [r2, #0]
    }
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_ZN8hitspool6SPEHitC1Eyhht>:

    SPEHit::SPEHit() : Hit(PL_SPE, 0, 0){

    }
    //SPEHit constructor/destructor
    SPEHit::SPEHit(u64 launch_time, u8 tdc, u8 subsample, u16 charge) : Hit(PL_SPE, launch_time, tdc){
 8000caa:	b590      	push	{r4, r7, lr}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	e9c7 2300 	strd	r2, r3, [r7]
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	883a      	ldrh	r2, [r7, #0]
 8000cba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f7ff ffc9 	bl	8000c56 <_ZN8hitspool3HitC1E13PayloadType_tth>

        this->subsample = subsample;
 8000cc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ccc:	b2d9      	uxtb	r1, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	78d3      	ldrb	r3, [r2, #3]
 8000cd2:	f361 0306 	bfi	r3, r1, #0, #7
 8000cd6:	70d3      	strb	r3, [r2, #3]
        this->charge = charge;
 8000cd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f002 0101 	and.w	r1, r2, #1
 8000ce6:	01cc      	lsls	r4, r1, #7
 8000ce8:	78d9      	ldrb	r1, [r3, #3]
 8000cea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000cee:	4608      	mov	r0, r1
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	4301      	orrs	r1, r0
 8000cf4:	70d9      	strb	r1, [r3, #3]
 8000cf6:	0851      	lsrs	r1, r2, #1
 8000cf8:	b289      	uxth	r1, r1
 8000cfa:	b2c9      	uxtb	r1, r1
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	4301      	orrs	r1, r0
 8000d00:	7119      	strb	r1, [r3, #4]
 8000d02:	0a52      	lsrs	r2, r2, #9
 8000d04:	b292      	uxth	r2, r2
 8000d06:	f002 0207 	and.w	r2, r2, #7
 8000d0a:	f002 0007 	and.w	r0, r2, #7
 8000d0e:	795a      	ldrb	r2, [r3, #5]
 8000d10:	f022 0207 	bic.w	r2, r2, #7
 8000d14:	4611      	mov	r1, r2
 8000d16:	4602      	mov	r2, r0
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	715a      	strb	r2, [r3, #5]

    }
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}

08000d26 <_ZN8hitspool6SPEHit9calc_sizeEv>:
    
    SPEHit::~SPEHit(){}

    size_t SPEHit::calc_size(){
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
        return sizeof(SPEHit);
 8000d2e:	2306      	movs	r3, #6
    }
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_ZN8hitspool6MPEHitC1EyhtPh>:

    //MPEHit constructor/destructor
    MPEHit::MPEHit() : Hit(PL_MPE, 0, 0){

    }
    MPEHit::MPEHit(u64 launch_time, u8 tdc, u16 nsamples, u8 *waveform) : Hit(PL_MPE, launch_time, tdc){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	e9c7 2300 	strd	r2, r3, [r7]
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	883a      	ldrh	r2, [r7, #0]
 8000d4c:	7e3b      	ldrb	r3, [r7, #24]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f7ff ff81 	bl	8000c56 <_ZN8hitspool3HitC1E13PayloadType_tth>
            this->nsamples = nsamples;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	8bba      	ldrh	r2, [r7, #28]
 8000d58:	f8a3 2003 	strh.w	r2, [r3, #3]
            //this->waveform = new u8(2 * 2 * nsamples); //nsamples, 2 bytes / sample, 2 traces
            memcpy(&this->waveform[0], waveform, 2 * 2 * nsamples);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1d58      	adds	r0, r3, #5
 8000d60:	8bbb      	ldrh	r3, [r7, #28]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	461a      	mov	r2, r3
 8000d66:	6a39      	ldr	r1, [r7, #32]
 8000d68:	f00d fb5c 	bl	800e424 <memcpy>

    }
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_ZN8hitspool6MPEHitnwEjt>:
    MPEHit::~MPEHit(){
        //delete this->waveform;
        free(this);
    }

    void* MPEHit::operator new(size_t size, u16 nsamples){
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	807b      	strh	r3, [r7, #2]
        void* p = ::operator new(size + nsamples * sizeof(u8));     
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4413      	add	r3, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00d faf7 	bl	800e37c <_Znwj>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	60fb      	str	r3, [r7, #12]

        return p;
 8000d92:	68fb      	ldr	r3, [r7, #12]
    };
 8000d94:	4618      	mov	r0, r3
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZN8hitspool6MPEHit9calc_sizeEv>:
    }




    size_t MPEHit::calc_size(){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
        return sizeof(MPEHit) + sizeof(u16) * (2*this->nsamples);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	3306      	adds	r3, #6
    }
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_Z19run_SDMMC_testbenchv>:
#include <cstdio>//sprintf
#include <new>

using namespace hitspool;

void run_SDMMC_testbench(){
 8000dbc:	b5b0      	push	{r4, r5, r7, lr}
 8000dbe:	b0bc      	sub	sp, #240	; 0xf0
 8000dc0:	af00      	add	r7, sp, #0
	sprintf(fs_buffer, "/");
	fres = f_mount(0, fs_buffer, 0);
	if(fres != FR_OK)
		Error_Handler();

	print("Done.\r\n");
 8000dc2:	466b      	mov	r3, sp
 8000dc4:	461d      	mov	r5, r3
	u16 nsamples = 300;
 8000dc6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000dca:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	u8 sample_buf[nsamples];
 8000dce:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8000dd2:	1e5c      	subs	r4, r3, #1
 8000dd4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8000dd8:	4623      	mov	r3, r4
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f04f 0100 	mov.w	r1, #0
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	00cb      	lsls	r3, r1, #3
 8000dec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000df0:	00c2      	lsls	r2, r0, #3
 8000df2:	4623      	mov	r3, r4
 8000df4:	3301      	adds	r3, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f04f 0100 	mov.w	r1, #0
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	00cb      	lsls	r3, r1, #3
 8000e06:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e0a:	00c2      	lsls	r2, r0, #3
 8000e0c:	4623      	mov	r3, r4
 8000e0e:	3301      	adds	r3, #1
 8000e10:	3307      	adds	r3, #7
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	ebad 0d03 	sub.w	sp, sp, r3
 8000e1a:	466b      	mov	r3, sp
 8000e1c:	3300      	adds	r3, #0
 8000e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for (int i = 0; i < nsamples; i++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e28:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8000e2c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000e30:	429a      	cmp	r2, r3
 8000e32:	da0f      	bge.n	8000e54 <_Z19run_SDMMC_testbenchv+0x98>
		sample_buf[i] = i;
 8000e34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e38:	b2d9      	uxtb	r1, r3
 8000e3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000e3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e42:	4413      	add	r3, r2
 8000e44:	460a      	mov	r2, r1
 8000e46:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < nsamples; i++)
 8000e48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e52:	e7e9      	b.n	8000e28 <_Z19run_SDMMC_testbenchv+0x6c>
	print("-----------------------------------\r\n");
 8000e54:	484b      	ldr	r0, [pc, #300]	; (8000f84 <_Z19run_SDMMC_testbenchv+0x1c8>)
 8000e56:	f7ff fc17 	bl	8000688 <print>
	print("---- SDMMC Interface Testbench ----\r\n");
 8000e5a:	484b      	ldr	r0, [pc, #300]	; (8000f88 <_Z19run_SDMMC_testbenchv+0x1cc>)
 8000e5c:	f7ff fc14 	bl	8000688 <print>
	print("-----------------------------------\r\n\n");
 8000e60:	484a      	ldr	r0, [pc, #296]	; (8000f8c <_Z19run_SDMMC_testbenchv+0x1d0>)
 8000e62:	f7ff fc11 	bl	8000688 <print>
	for (int i = 0; i < 10; i++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000e6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000e70:	2b09      	cmp	r3, #9
 8000e72:	dc1b      	bgt.n	8000eac <_Z19run_SDMMC_testbenchv+0xf0>
		HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	4846      	ldr	r0, [pc, #280]	; (8000f90 <_Z19run_SDMMC_testbenchv+0x1d4>)
 8000e78:	f001 fc65 	bl	8002746 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000e7c:	2064      	movs	r0, #100	; 0x64
 8000e7e:	f001 f941 	bl	8002104 <HAL_Delay>
		HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 8000e82:	2101      	movs	r1, #1
 8000e84:	4842      	ldr	r0, [pc, #264]	; (8000f90 <_Z19run_SDMMC_testbenchv+0x1d4>)
 8000e86:	f001 fc5e 	bl	8002746 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f001 f93a 	bl	8002104 <HAL_Delay>
		HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 8000e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e94:	483e      	ldr	r0, [pc, #248]	; (8000f90 <_Z19run_SDMMC_testbenchv+0x1d4>)
 8000e96:	f001 fc56 	bl	8002746 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000e9a:	2064      	movs	r0, #100	; 0x64
 8000e9c:	f001 f932 	bl	8002104 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 8000ea0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000eaa:	e7df      	b.n	8000e6c <_Z19run_SDMMC_testbenchv+0xb0>
	HAL_Delay(500);
 8000eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb0:	f001 f928 	bl	8002104 <HAL_Delay>
	FIL *fil = (FIL*) malloc(sizeof(FIL));		       //File handle
 8000eb4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000eb8:	f00d faac 	bl	800e414 <malloc>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	FILINFO *finfo = (FILINFO*) malloc(sizeof(FILINFO));  //File information hanle
 8000ec2:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000ec6:	f00d faa5 	bl	800e414 <malloc>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	FRESULT fres = FR_OK;   				   //Result after operati ons
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	FATFS *fs = (FATFS*) malloc(sizeof(FATFS)); 	       //Filesystem handle
 8000ed6:	f44f 7012 	mov.w	r0, #584	; 0x248
 8000eda:	f00d fa9b 	bl	800e414 <malloc>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	print("Mounting filesystem.\r\n");
 8000ee4:	482b      	ldr	r0, [pc, #172]	; (8000f94 <_Z19run_SDMMC_testbenchv+0x1d8>)
 8000ee6:	f7ff fbcf 	bl	8000688 <print>
	sprintf(fs_buffer, "/");
 8000eea:	463b      	mov	r3, r7
 8000eec:	492a      	ldr	r1, [pc, #168]	; (8000f98 <_Z19run_SDMMC_testbenchv+0x1dc>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00d fbc6 	bl	800e680 <siprintf>
	fres = f_mount(fs, fs_buffer, 1);
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8000efe:	f00c f9ad 	bl	800d25c <f_mount>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	if (fres != FR_OK){
 8000f08:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <_Z19run_SDMMC_testbenchv+0x15e>
		print("Failed to mount filesystem!!!\r\n");
 8000f10:	4822      	ldr	r0, [pc, #136]	; (8000f9c <_Z19run_SDMMC_testbenchv+0x1e0>)
 8000f12:	f7ff fbb9 	bl	8000688 <print>
		Error_Handler();
 8000f16:	f7ff fe97 	bl	8000c48 <Error_Handler>
	print("Done.\r\n");
 8000f1a:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <_Z19run_SDMMC_testbenchv+0x1e4>)
 8000f1c:	f7ff fbb4 	bl	8000688 <print>
	G_STATUS gres = G_NOTOK;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	gres = hs_hit_io_unit_test();
 8000f26:	f000 f847 	bl	8000fb8 <_Z19hs_hit_io_unit_testv>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
	print("%s hs_unit_write_loop()\r\n", gres == G_OK ? "PASSED" : "FAILED");
 8000f30:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <_Z19run_SDMMC_testbenchv+0x180>
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <_Z19run_SDMMC_testbenchv+0x1e8>)
 8000f3a:	e000      	b.n	8000f3e <_Z19run_SDMMC_testbenchv+0x182>
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <_Z19run_SDMMC_testbenchv+0x1ec>)
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481a      	ldr	r0, [pc, #104]	; (8000fac <_Z19run_SDMMC_testbenchv+0x1f0>)
 8000f42:	f7ff fba1 	bl	8000688 <print>
	print("Unmounting filesystem.\r\n");
 8000f46:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <_Z19run_SDMMC_testbenchv+0x1f4>)
 8000f48:	f7ff fb9e 	bl	8000688 <print>
	sprintf(fs_buffer, "/");
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4912      	ldr	r1, [pc, #72]	; (8000f98 <_Z19run_SDMMC_testbenchv+0x1dc>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00d fb95 	bl	800e680 <siprintf>
	fres = f_mount(0, fs_buffer, 0);
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f00c f97d 	bl	800d25c <f_mount>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	if(fres != FR_OK)
 8000f68:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <_Z19run_SDMMC_testbenchv+0x1b8>
		Error_Handler();
 8000f70:	f7ff fe6a 	bl	8000c48 <Error_Handler>
	print("Done.\r\n");
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <_Z19run_SDMMC_testbenchv+0x1e4>)
 8000f76:	f7ff fb87 	bl	8000688 <print>
 8000f7a:	46ad      	mov	sp, r5


}
 8000f7c:	bf00      	nop
 8000f7e:	37f0      	adds	r7, #240	; 0xf0
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bdb0      	pop	{r4, r5, r7, pc}
 8000f84:	0800eda4 	.word	0x0800eda4
 8000f88:	0800edcc 	.word	0x0800edcc
 8000f8c:	0800edf4 	.word	0x0800edf4
 8000f90:	58020400 	.word	0x58020400
 8000f94:	0800ee1c 	.word	0x0800ee1c
 8000f98:	0800ee34 	.word	0x0800ee34
 8000f9c:	0800ee38 	.word	0x0800ee38
 8000fa0:	0800ee58 	.word	0x0800ee58
 8000fa4:	0800ee60 	.word	0x0800ee60
 8000fa8:	0800ee68 	.word	0x0800ee68
 8000fac:	0800ee70 	.word	0x0800ee70
 8000fb0:	0800ee8c 	.word	0x0800ee8c
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <_Z19hs_hit_io_unit_testv>:

G_STATUS hs_hit_io_unit_test(){
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8000fbe:	af04      	add	r7, sp, #16
            }
			break;
		}
        nhits_read++;
	}
	return G_OK;
 8000fc0:	466b      	mov	r3, sp
 8000fc2:	461d      	mov	r5, r3
	print("-----------------------------------\r\n");
 8000fc4:	48d2      	ldr	r0, [pc, #840]	; (8001310 <_Z19hs_hit_io_unit_testv+0x358>)
 8000fc6:	f7ff fb5f 	bl	8000688 <print>
	print("---- Streamer Testbench ----\r\n");
 8000fca:	48d2      	ldr	r0, [pc, #840]	; (8001314 <_Z19hs_hit_io_unit_testv+0x35c>)
 8000fcc:	f7ff fb5c 	bl	8000688 <print>
	print("-----------------------------------\r\n\n");
 8000fd0:	48d1      	ldr	r0, [pc, #836]	; (8001318 <_Z19hs_hit_io_unit_testv+0x360>)
 8000fd2:	f7ff fb59 	bl	8000688 <print>
	streamer *s = new streamer();
 8000fd6:	f241 5090 	movw	r0, #5520	; 0x1590
 8000fda:	f00d f9cf 	bl	800e37c <_Znwj>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461c      	mov	r4, r3
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f000 fbec 	bl	80017c0 <_ZN8hitspool8streamerC1Ev>
 8000fe8:	f8c7 4444 	str.w	r4, [r7, #1092]	; 0x444
	print("Initializing write buffers, heads... ");
 8000fec:	48cb      	ldr	r0, [pc, #812]	; (800131c <_Z19hs_hit_io_unit_testv+0x364>)
 8000fee:	f7ff fb4b 	bl	8000688 <print>
	s->init_write_heads();
 8000ff2:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8000ff6:	f000 fc3d 	bl	8001874 <_ZN8hitspool8streamer16init_write_headsEv>
	print("Done.\r\n");
 8000ffa:	48c9      	ldr	r0, [pc, #804]	; (8001320 <_Z19hs_hit_io_unit_testv+0x368>)
 8000ffc:	f7ff fb44 	bl	8000688 <print>
	print("Initializing file handlers...\r\n");
 8001000:	48c8      	ldr	r0, [pc, #800]	; (8001324 <_Z19hs_hit_io_unit_testv+0x36c>)
 8001002:	f7ff fb41 	bl	8000688 <print>
	s->init_file_handlers(0xFF000000);
 8001006:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 800100a:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 800100e:	f000 fcc5 	bl	800199c <_ZN8hitspool8streamer18init_file_handlersEm>
	print("File handlers done.\r\n");
 8001012:	48c5      	ldr	r0, [pc, #788]	; (8001328 <_Z19hs_hit_io_unit_testv+0x370>)
 8001014:	f7ff fb38 	bl	8000688 <print>
    print("-----------------------------------\r\n");	
 8001018:	48bd      	ldr	r0, [pc, #756]	; (8001310 <_Z19hs_hit_io_unit_testv+0x358>)
 800101a:	f7ff fb35 	bl	8000688 <print>
    s->print_buffer_heads();
 800101e:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001022:	f000 fc5f 	bl	80018e4 <_ZN8hitspool8streamer18print_buffer_headsEv>
    print("-----------------------------------\r\n");
 8001026:	48ba      	ldr	r0, [pc, #744]	; (8001310 <_Z19hs_hit_io_unit_testv+0x358>)
 8001028:	f7ff fb2e 	bl	8000688 <print>
	u16 nsamples = 256;
 800102c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001030:	f8a7 3442 	strh.w	r3, [r7, #1090]	; 0x442
	u16 waveform_buffer[2 * nsamples];
 8001034:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	1e5c      	subs	r4, r3, #1
 800103c:	f8c7 443c 	str.w	r4, [r7, #1084]	; 0x43c
 8001040:	4623      	mov	r3, r4
 8001042:	3301      	adds	r3, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f04f 0100 	mov.w	r1, #0
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	010b      	lsls	r3, r1, #4
 8001054:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001058:	0102      	lsls	r2, r0, #4
 800105a:	4623      	mov	r3, r4
 800105c:	3301      	adds	r3, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f04f 0100 	mov.w	r1, #0
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	010b      	lsls	r3, r1, #4
 800106e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001072:	0102      	lsls	r2, r0, #4
 8001074:	4623      	mov	r3, r4
 8001076:	3301      	adds	r3, #1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	3307      	adds	r3, #7
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	ebad 0d03 	sub.w	sp, sp, r3
 8001084:	ab04      	add	r3, sp, #16
 8001086:	3301      	adds	r3, #1
 8001088:	085b      	lsrs	r3, r3, #1
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
	for (int i = 0; i < 2 * nsamples; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8001096:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80010a0:	429a      	cmp	r2, r3
 80010a2:	da14      	bge.n	80010ce <_Z19hs_hit_io_unit_testv+0x116>
		waveform_buffer[i] = 2 * nsamples - i;
 80010a4:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	b299      	uxth	r1, r3
 80010b6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80010ba:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80010be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 2 * nsamples; i++)
 80010c2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80010c6:	3301      	adds	r3, #1
 80010c8:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 80010cc:	e7e3      	b.n	8001096 <_Z19hs_hit_io_unit_testv+0xde>
	sprintf(pattern, "SCGPHD");
 80010ce:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80010d2:	4996      	ldr	r1, [pc, #600]	; (800132c <_Z19hs_hit_io_unit_testv+0x374>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00d fad3 	bl	800e680 <siprintf>
	SPEHit *spe_pattern = (SPEHit *)pattern; // new SPEHit(0xABCD, 0x5, 0xA, 0xF);
 80010da:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80010de:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
    SPEHit *speh = new SPEHit(0xABCD, 0x5, 0xA, 0xF);
 80010e2:	2006      	movs	r0, #6
 80010e4:	f00d f94a 	bl	800e37c <_Znwj>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461c      	mov	r4, r3
 80010ec:	230f      	movs	r3, #15
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	230a      	movs	r3, #10
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2305      	movs	r3, #5
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	4620      	mov	r0, r4
 8001102:	f7ff fdd2 	bl	8000caa <_ZN8hitspool6SPEHitC1Eyhht>
 8001106:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
	MPEHit *mpeh = new (nsamples) MPEHit(0xAAAABBBB, 0x2, nsamples, (u8 *)waveform_buffer);
 800110a:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 800110e:	4619      	mov	r1, r3
 8001110:	2006      	movs	r0, #6
 8001112:	f7ff fe30 	bl	8000d76 <_ZN8hitspool6MPEHitnwEjt>
 8001116:	4604      	mov	r4, r0
 8001118:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	f8b7 3442 	ldrh.w	r3, [r7, #1090]	; 0x442
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	2302      	movs	r3, #2
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	a375      	add	r3, pc, #468	; (adr r3, 8001300 <_Z19hs_hit_io_unit_testv+0x348>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	4620      	mov	r0, r4
 8001130:	f7ff fe04 	bl	8000d3c <_ZN8hitspool6MPEHitC1EyhtPh>
 8001134:	f8c7 442c 	str.w	r4, [r7, #1068]	; 0x42c
	hitpacket<SPEHit> *spep = new hitpacket<SPEHit>(0, 0x1234ABCD, speh);
 8001138:	200b      	movs	r0, #11
 800113a:	f00d f91f 	bl	800e37c <_Znwj>
 800113e:	4603      	mov	r3, r0
 8001140:	461c      	mov	r4, r3
 8001142:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	a36f      	add	r3, pc, #444	; (adr r3, 8001308 <_Z19hs_hit_io_unit_testv+0x350>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	2100      	movs	r1, #0
 8001150:	4620      	mov	r0, r4
 8001152:	f000 f8f9 	bl	8001348 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>
 8001156:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
	hitpacket<MPEHit> *mpep = new hitpacket<MPEHit>(0, 0x1234ABCD, mpeh);
 800115a:	200b      	movs	r0, #11
 800115c:	f00d f90e 	bl	800e37c <_Znwj>
 8001160:	4603      	mov	r3, r0
 8001162:	461c      	mov	r4, r3
 8001164:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	a367      	add	r3, pc, #412	; (adr r3, 8001308 <_Z19hs_hit_io_unit_testv+0x350>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	2100      	movs	r1, #0
 8001172:	4620      	mov	r0, r4
 8001174:	f000 f920 	bl	80013b8 <_ZN8hitspool9hitpacketINS_6MPEHitEEC1EhyPS1_>
 8001178:	f8c7 4424 	str.w	r4, [r7, #1060]	; 0x424
    hitpacket<SPEHit> *spep_pattern = new hitpacket<SPEHit>(0, 0x1234ABCD, spe_pattern);
 800117c:	200b      	movs	r0, #11
 800117e:	f00d f8fd 	bl	800e37c <_Znwj>
 8001182:	4603      	mov	r3, r0
 8001184:	461c      	mov	r4, r3
 8001186:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	a35e      	add	r3, pc, #376	; (adr r3, 8001308 <_Z19hs_hit_io_unit_testv+0x350>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	2100      	movs	r1, #0
 8001194:	4620      	mov	r0, r4
 8001196:	f000 f8d7 	bl	8001348 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>
 800119a:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
    spep_pattern->hit->pl_type = PL_SPE;
 800119e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80011a2:	f8d3 2007 	ldr.w	r2, [r3, #7]
 80011a6:	7813      	ldrb	r3, [r2, #0]
 80011a8:	f36f 0301 	bfc	r3, #0, #2
 80011ac:	7013      	strb	r3, [r2, #0]
    int nhits_to_write = 5000;
 80011ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80011b2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	for (int i = 0; i < nhits_to_write; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80011bc:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 80011c0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80011c4:	429a      	cmp	r2, r3
 80011c6:	da21      	bge.n	800120c <_Z19hs_hit_io_unit_testv+0x254>
        spep->hit->tdc += 1;
 80011c8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80011cc:	f8d3 3007 	ldr.w	r3, [r3, #7]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	3301      	adds	r3, #1
 80011da:	b2d9      	uxtb	r1, r3
 80011dc:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80011e0:	f8d3 2007 	ldr.w	r2, [r3, #7]
 80011e4:	460b      	mov	r3, r1
 80011e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ea:	b2d9      	uxtb	r1, r3
 80011ec:	7813      	ldrb	r3, [r2, #0]
 80011ee:	f361 0387 	bfi	r3, r1, #2, #6
 80011f2:	7013      	strb	r3, [r2, #0]
		s->add_hit(spep);
 80011f4:	f8d7 1428 	ldr.w	r1, [r7, #1064]	; 0x428
 80011f8:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 80011fc:	f000 f914 	bl	8001428 <_ZN8hitspool8streamer7add_hitINS_9hitpacketINS_6SPEHitEEEEEmPT_>
	for (int i = 0; i < nhits_to_write; i++) {
 8001200:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001204:	3301      	adds	r3, #1
 8001206:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800120a:	e7d7      	b.n	80011bc <_Z19hs_hit_io_unit_testv+0x204>
	for (int i = 0; i < NUM_PMT; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8001212:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001216:	2b00      	cmp	r3, #0
 8001218:	dc0e      	bgt.n	8001238 <_Z19hs_hit_io_unit_testv+0x280>
		s->check_and_write_buffer(i, true);
 800121a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2201      	movs	r2, #1
 8001222:	4619      	mov	r1, r3
 8001224:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8001228:	f000 fc58 	bl	8001adc <_ZN8hitspool8streamer22check_and_write_bufferEhb>
	for (int i = 0; i < NUM_PMT; i++) {
 800122c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001230:	3301      	adds	r3, #1
 8001232:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8001236:	e7ec      	b.n	8001212 <_Z19hs_hit_io_unit_testv+0x25a>
	s->close_file_handlers();
 8001238:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 800123c:	f000 fc0a 	bl	8001a54 <_ZN8hitspool8streamer19close_file_handlersEv>
    print("-----------------------------------\r\n");
 8001240:	4833      	ldr	r0, [pc, #204]	; (8001310 <_Z19hs_hit_io_unit_testv+0x358>)
 8001242:	f7ff fa21 	bl	8000688 <print>
	print("Opening PMT0 file for reading.\r\n");
 8001246:	483a      	ldr	r0, [pc, #232]	; (8001330 <_Z19hs_hit_io_unit_testv+0x378>)
 8001248:	f7ff fa1e 	bl	8000688 <print>
	FRESULT fres = f_open(&(s->file_handlers[0]), s->live_filenames[0], FA_READ);
 800124c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001250:	f503 7084 	add.w	r0, r3, #264	; 0x108
 8001254:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001258:	3304      	adds	r3, #4
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f00c f843 	bl	800d2e8 <f_open>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
	if (fres != FR_OK)
 8001268:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <_Z19hs_hit_io_unit_testv+0x2be>
		print("Error opening file for reading.\r\n");
 8001270:	4830      	ldr	r0, [pc, #192]	; (8001334 <_Z19hs_hit_io_unit_testv+0x37c>)
 8001272:	f7ff fa09 	bl	8000688 <print>
	print("Reading hits...\r\n");
 8001276:	4830      	ldr	r0, [pc, #192]	; (8001338 <_Z19hs_hit_io_unit_testv+0x380>)
 8001278:	f7ff fa06 	bl	8000688 <print>
    print("-----------------------------------\r\n");
 800127c:	4824      	ldr	r0, [pc, #144]	; (8001310 <_Z19hs_hit_io_unit_testv+0x358>)
 800127e:	f7ff fa03 	bl	8000688 <print>
     UINT br = 0;   
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
     UINT btr = 6; //or sizeof(MPEHit)
 8001288:	2306      	movs	r3, #6
 800128a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
    int nhits_read = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        print("Attempting to read hit %d\r\n", nhits_read);
 8001294:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8001298:	4828      	ldr	r0, [pc, #160]	; (800133c <_Z19hs_hit_io_unit_testv+0x384>)
 800129a:	f7ff f9f5 	bl	8000688 <print>
		read_status = s->read_next_hit(&(s->file_handlers[0]), &next_hit_type, next_hit_contants);
 800129e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80012a2:	f503 7184 	add.w	r1, r3, #264	; 0x108
 80012a6:	f207 4203 	addw	r2, r7, #1027	; 0x403
 80012aa:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80012ae:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 80012b2:	f000 fd0b 	bl	8001ccc <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
		if (read_status != STREAMER_RC_OK) {
 80012bc:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00e      	beq.n	80012e2 <_Z19hs_hit_io_unit_testv+0x32a>
			if (read_status == STREAMER_RC_EOF){
 80012c4:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d103      	bne.n	80012d4 <_Z19hs_hit_io_unit_testv+0x31c>
				print("Reached EOF; exiting read.\r\n");
 80012cc:	481c      	ldr	r0, [pc, #112]	; (8001340 <_Z19hs_hit_io_unit_testv+0x388>)
 80012ce:	f7ff f9db 	bl	8000688 <print>
			break;
 80012d2:	e00c      	b.n	80012ee <_Z19hs_hit_io_unit_testv+0x336>
				print("Streamer exited with code %d\r\n", read_status);
 80012d4:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 80012d8:	4619      	mov	r1, r3
 80012da:	481a      	ldr	r0, [pc, #104]	; (8001344 <_Z19hs_hit_io_unit_testv+0x38c>)
 80012dc:	f7ff f9d4 	bl	8000688 <print>
			break;
 80012e0:	e005      	b.n	80012ee <_Z19hs_hit_io_unit_testv+0x336>
        nhits_read++;
 80012e2:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80012e6:	3301      	adds	r3, #1
 80012e8:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        print("Attempting to read hit %d\r\n", nhits_read);
 80012ec:	e7d2      	b.n	8001294 <_Z19hs_hit_io_unit_testv+0x2dc>
	return G_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	46ad      	mov	sp, r5
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bdb0      	pop	{r4, r5, r7, pc}
 80012fc:	f3af 8000 	nop.w
 8001300:	aaaabbbb 	.word	0xaaaabbbb
 8001304:	00000000 	.word	0x00000000
 8001308:	1234abcd 	.word	0x1234abcd
 800130c:	00000000 	.word	0x00000000
 8001310:	0800eda4 	.word	0x0800eda4
 8001314:	0800eea8 	.word	0x0800eea8
 8001318:	0800edf4 	.word	0x0800edf4
 800131c:	0800eec8 	.word	0x0800eec8
 8001320:	0800ee58 	.word	0x0800ee58
 8001324:	0800eef0 	.word	0x0800eef0
 8001328:	0800ef10 	.word	0x0800ef10
 800132c:	0800ef28 	.word	0x0800ef28
 8001330:	0800ef30 	.word	0x0800ef30
 8001334:	0800ef54 	.word	0x0800ef54
 8001338:	0800ef78 	.word	0x0800ef78
 800133c:	0800ef8c 	.word	0x0800ef8c
 8001340:	0800efa8 	.word	0x0800efa8
 8001344:	0800efc8 	.word	0x0800efc8

08001348 <_ZN8hitspool9hitpacketINS_6SPEHitEEC1EhyPS1_>:

            u8 PMT : 8;
            u64 trecv : 48;
            T* hit; //SPEHit, MPEHit, WUBBuf

        hitpacket(u8 PMT, u64 trecv, T* h){
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	e9c7 2300 	strd	r2, r3, [r7]
 8001354:	460b      	mov	r3, r1
 8001356:	72fb      	strb	r3, [r7, #11]
        	this->PMT = PMT;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	7afa      	ldrb	r2, [r7, #11]
 800135c:	701a      	strb	r2, [r3, #0]
        	this->trecv = trecv;
 800135e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001366:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800136a:	ea02 0400 	and.w	r4, r2, r0
 800136e:	ea03 0501 	and.w	r5, r3, r1
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f8c3 4001 	str.w	r4, [r3, #1]
 8001378:	462a      	mov	r2, r5
 800137a:	f8a3 2005 	strh.w	r2, [r3, #5]
            this->hit = (T*)malloc(h->calc_size());
 800137e:	6a38      	ldr	r0, [r7, #32]
 8001380:	f7ff fcd1 	bl	8000d26 <_ZN8hitspool6SPEHit9calc_sizeEv>
 8001384:	4603      	mov	r3, r0
 8001386:	4618      	mov	r0, r3
 8001388:	f00d f844 	bl	800e414 <malloc>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f8c3 2007 	str.w	r2, [r3, #7]
            memcpy(this->hit, h, h->calc_size());
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8d3 4007 	ldr.w	r4, [r3, #7]
 800139c:	6a38      	ldr	r0, [r7, #32]
 800139e:	f7ff fcc2 	bl	8000d26 <_ZN8hitspool6SPEHit9calc_sizeEv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	6a39      	ldr	r1, [r7, #32]
 80013a8:	4620      	mov	r0, r4
 80013aa:	f00d f83b 	bl	800e424 <memcpy>
        };
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bdb0      	pop	{r4, r5, r7, pc}

080013b8 <_ZN8hitspool9hitpacketINS_6MPEHitEEC1EhyPS1_>:
        hitpacket(u8 PMT, u64 trecv, T* h){
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	e9c7 2300 	strd	r2, r3, [r7]
 80013c4:	460b      	mov	r3, r1
 80013c6:	72fb      	strb	r3, [r7, #11]
        	this->PMT = PMT;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	7afa      	ldrb	r2, [r7, #11]
 80013cc:	701a      	strb	r2, [r3, #0]
        	this->trecv = trecv;
 80013ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013da:	ea02 0400 	and.w	r4, r2, r0
 80013de:	ea03 0501 	and.w	r5, r3, r1
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8c3 4001 	str.w	r4, [r3, #1]
 80013e8:	462a      	mov	r2, r5
 80013ea:	f8a3 2005 	strh.w	r2, [r3, #5]
            this->hit = (T*)malloc(h->calc_size());
 80013ee:	6a38      	ldr	r0, [r7, #32]
 80013f0:	f7ff fcd4 	bl	8000d9c <_ZN8hitspool6MPEHit9calc_sizeEv>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00d f80c 	bl	800e414 <malloc>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f8c3 2007 	str.w	r2, [r3, #7]
            memcpy(this->hit, h, h->calc_size());
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f8d3 4007 	ldr.w	r4, [r3, #7]
 800140c:	6a38      	ldr	r0, [r7, #32]
 800140e:	f7ff fcc5 	bl	8000d9c <_ZN8hitspool6MPEHit9calc_sizeEv>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	6a39      	ldr	r1, [r7, #32]
 8001418:	4620      	mov	r0, r4
 800141a:	f00d f803 	bl	800e424 <memcpy>
        };
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bdb0      	pop	{r4, r5, r7, pc}

08001428 <_ZN8hitspool8streamer7add_hitINS_9hitpacketINS_6SPEHitEEEEEmPT_>:

            STREAMER_RC read_next_hit(FIL* file, PayloadType_t *type, u8* hitbuffer);

            u32 check_and_write_buffer(u8 PMT, bool force);            

            template <typename T> u32 add_hit(T* hit_packet){
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
                u8 PMT = hit_packet->PMT; 
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	73fb      	strb	r3, [r7, #15]
                u16 write_size = hit_packet->hit->calc_size();
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fc71 	bl	8000d26 <_ZN8hitspool6SPEHit9calc_sizeEv>
 8001444:	4603      	mov	r3, r0
 8001446:	81bb      	strh	r3, [r7, #12]
                PayloadType_t type = hit_packet->hit->pl_type;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001454:	b2db      	uxtb	r3, r3
 8001456:	72fb      	strb	r3, [r7, #11]

                //print("Current hit type: %s size: %d\tlaunch: 0x%8X\n", PLNameText[type], write_size, hit_packet->hit->launch_time);
                
                memcpy(write_head[PMT], (u8*)hit_packet->hit, write_size);
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8001460:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f8d3 3007 	ldr.w	r3, [r3, #7]
 800146a:	89ba      	ldrh	r2, [r7, #12]
 800146c:	4619      	mov	r1, r3
 800146e:	f00c ffd9 	bl	800e424 <memcpy>
                write_head[PMT]+=write_size;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 800147a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800147e:	89bb      	ldrh	r3, [r7, #12]
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	4419      	add	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_consumed[PMT]+=write_size;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	89ba      	ldrh	r2, [r7, #12]
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	440a      	add	r2, r1
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	605a      	str	r2, [r3, #4]
                nhits_inbuff[PMT]++;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	0053      	lsls	r3, r2, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	885b      	ldrh	r3, [r3, #2]
 80014b8:	3301      	adds	r3, #1
 80014ba:	b298      	uxth	r0, r3
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	0053      	lsls	r3, r2, #1
 80014c0:	440b      	add	r3, r1
 80014c2:	4602      	mov	r2, r0
 80014c4:	805a      	strh	r2, [r3, #2]
                
                check_and_write_buffer(PMT, false);
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fb05 	bl	8001adc <_ZN8hitspool8streamer22check_and_write_bufferEhb>
                return 0;
 80014d2:	2300      	movs	r3, #0
            };
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_MspInit+0x30>)
 80014e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014e8:	4a08      	ldr	r2, [pc, #32]	; (800150c <HAL_MspInit+0x30>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_MspInit+0x30>)
 80014f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	58024400 	.word	0x58024400

08001510 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0ba      	sub	sp, #232	; 0xe8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	22bc      	movs	r2, #188	; 0xbc
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00c ff9f 	bl	800e474 <memset>
  if(hsd->Instance==SDMMC1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a37      	ldr	r2, [pc, #220]	; (8001618 <HAL_SD_MspInit+0x108>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d166      	bne.n	800160e <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001546:	2300      	movs	r3, #0
 8001548:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4618      	mov	r0, r3
 8001550:	f002 f8ea 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800155a:	f7ff fb75 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <HAL_SD_MspInit+0x10c>)
 8001560:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001564:	4a2d      	ldr	r2, [pc, #180]	; (800161c <HAL_SD_MspInit+0x10c>)
 8001566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_SD_MspInit+0x10c>)
 8001570:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_SD_MspInit+0x10c>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	4a26      	ldr	r2, [pc, #152]	; (800161c <HAL_SD_MspInit+0x10c>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158c:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_SD_MspInit+0x10c>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_SD_MspInit+0x10c>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	4a1e      	ldr	r2, [pc, #120]	; (800161c <HAL_SD_MspInit+0x10c>)
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_SD_MspInit+0x10c>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80015b8:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80015bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80015d2:	230c      	movs	r3, #12
 80015d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015dc:	4619      	mov	r1, r3
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <HAL_SD_MspInit+0x110>)
 80015e0:	f000 fed0 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015e4:	2304      	movs	r3, #4
 80015e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80015fc:	230c      	movs	r3, #12
 80015fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001606:	4619      	mov	r1, r3
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <HAL_SD_MspInit+0x114>)
 800160a:	f000 febb 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	37e8      	adds	r7, #232	; 0xe8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	52007000 	.word	0x52007000
 800161c:	58024400 	.word	0x58024400
 8001620:	58020800 	.word	0x58020800
 8001624:	58020c00 	.word	0x58020c00

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_TIM_Base_MspInit+0x48>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d116      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2101      	movs	r1, #1
 800165c:	2032      	movs	r0, #50	; 0x32
 800165e:	f000 fe5c 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001662:	2032      	movs	r0, #50	; 0x32
 8001664:	f000 fe73 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40000c00 	.word	0x40000c00
 8001674:	58024400 	.word	0x58024400

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0b8      	sub	sp, #224	; 0xe0
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	22bc      	movs	r2, #188	; 0xbc
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f00c feeb 	bl	800e474 <memset>
  if(huart->Instance==USART3)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a25      	ldr	r2, [pc, #148]	; (8001738 <HAL_UART_MspInit+0xc0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d142      	bne.n	800172e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016a8:	2302      	movs	r3, #2
 80016aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 f836 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016c2:	f7ff fac1 	bl	8000c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_UART_MspInit+0xc4>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800171c:	2307      	movs	r3, #7
 800171e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_UART_MspInit+0xc8>)
 800172a:	f000 fe2b 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	37e0      	adds	r7, #224	; 0xe0
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004800 	.word	0x40004800
 800173c:	58024400 	.word	0x58024400
 8001740:	58020c00 	.word	0x58020c00

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001790:	f000 fc98 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <TIM5_IRQHandler+0x10>)
 800179e:	f005 fd9b 	bl	80072d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000120 	.word	0x24000120

080017ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
//
//	 HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
//
//  }

}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_ZN8hitspool8streamerC1Ev>:
namespace hitspool {


//streamer class members    

streamer::streamer() {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

    for(int i = 0; i < NUM_PMT; i++){
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	dc49      	bgt.n	8001866 <_ZN8hitspool8streamerC1Ev+0xa6>
        nhits_inbuff[i] = 0;
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	2200      	movs	r2, #0
 80017dc:	805a      	strh	r2, [r3, #2]
        sprintf(live_filenames[i], "NULL");
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	3304      	adds	r3, #4
 80017e8:	4921      	ldr	r1, [pc, #132]	; (8001870 <_ZN8hitspool8streamerC1Ev+0xb0>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00c ff48 	bl	800e680 <siprintf>
        handler_active[i] = false;
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
        handler_open[i] = false;
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	f203 1305 	addw	r3, r3, #261	; 0x105
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]

        n_consumed[i] = 0;
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
        buffer_full[i] = false;
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	441a      	add	r2, r3
 8001822:	f241 5368 	movw	r3, #5480	; 0x1568
 8001826:	4413      	add	r3, r2
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]

        n_written[i] = 0;
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
        n_written_tot[i] = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 8001844:	2100      	movs	r1, #0
 8001846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        total_bytes_written = 0;
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	f241 5378 	movw	r3, #5496	; 0x1578
 8001850:	4413      	add	r3, r2
 8001852:	f04f 0000 	mov.w	r0, #0
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	e9c3 0100 	strd	r0, r1, [r3]
    for(int i = 0; i < NUM_PMT; i++){
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3301      	adds	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e7b2      	b.n	80017cc <_ZN8hitspool8streamerC1Ev+0xc>
    }
    
}
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	0800f00c 	.word	0x0800f00c

08001874 <_ZN8hitspool8streamer16init_write_headsEv>:
    // free(mpep);
    // free(wubp);    
}


void streamer::init_write_heads(){
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < NUM_PMT; i++){
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	dc27      	bgt.n	80018d6 <_ZN8hitspool8streamer16init_write_headsEv+0x62>
        sprintf((char*)write_buff[i], "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	4911      	ldr	r1, [pc, #68]	; (80018e0 <_ZN8hitspool8streamer16init_write_headsEv+0x6c>)
 800189a:	4618      	mov	r0, r3
 800189c:	f00c fef0 	bl	800e680 <siprintf>
        n_consumed[i] = 0;
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	2200      	movs	r2, #0
 80018ae:	605a      	str	r2, [r3, #4]
        write_head[i] = (u8*)write_buff[i];
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	18d1      	adds	r1, r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < NUM_PMT; i++){
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e7d4      	b.n	8001880 <_ZN8hitspool8streamer16init_write_headsEv+0xc>
    }
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	0800f014 	.word	0x0800f014

080018e4 <_ZN8hitspool8streamer18print_buffer_headsEv>:

//Print the first 12 bytes of the write buffer and the write head.
void streamer::print_buffer_heads(){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    print("Buffer contents\r\n");
 80018ec:	4825      	ldr	r0, [pc, #148]	; (8001984 <_ZN8hitspool8streamer18print_buffer_headsEv+0xa0>)
 80018ee:	f7fe fecb 	bl	8000688 <print>
    print("-----------------------------------\r\n");
 80018f2:	4825      	ldr	r0, [pc, #148]	; (8001988 <_ZN8hitspool8streamer18print_buffer_headsEv+0xa4>)
 80018f4:	f7fe fec8 	bl	8000688 <print>
    char buff[6];
    for(int i = 0; i < NUM_PMT; i++){        
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	dc3b      	bgt.n	800197a <_ZN8hitspool8streamer18print_buffer_headsEv+0x96>
        print("PMT%02d:\r\n", i);
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	4821      	ldr	r0, [pc, #132]	; (800198c <_ZN8hitspool8streamer18print_buffer_headsEv+0xa8>)
 8001906:	f7fe febf 	bl	8000688 <print>
        print("Address of buffer[%02d] is %p\n", i, (void *)write_buff[i]);  
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	025b      	lsls	r3, r3, #9
 8001914:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	461a      	mov	r2, r3
 800191e:	6979      	ldr	r1, [r7, #20]
 8001920:	481b      	ldr	r0, [pc, #108]	; (8001990 <_ZN8hitspool8streamer18print_buffer_headsEv+0xac>)
 8001922:	f7fe feb1 	bl	8000688 <print>
        print("Address of head[%02d]   is %p\n", i, (void *)write_head[i]);  
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 800192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001932:	461a      	mov	r2, r3
 8001934:	6979      	ldr	r1, [r7, #20]
 8001936:	4817      	ldr	r0, [pc, #92]	; (8001994 <_ZN8hitspool8streamer18print_buffer_headsEv+0xb0>)
 8001938:	f7fe fea6 	bl	8000688 <print>
        memcpy(buff, write_head[i], 6);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	f502 62ab 	add.w	r2, r2, #1368	; 0x558
 8001944:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	6810      	ldr	r0, [r2, #0]
 800194e:	6018      	str	r0, [r3, #0]
 8001950:	8892      	ldrh	r2, [r2, #4]
 8001952:	809a      	strh	r2, [r3, #4]
        print("\tBuffer: %s\r\n"
              "\tHead:   %s\r\n", 
              write_buff[i], 
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	025b      	lsls	r3, r3, #9
 800195e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
        print("\tBuffer: %s\r\n"
 8001966:	f107 020c 	add.w	r2, r7, #12
 800196a:	4619      	mov	r1, r3
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <_ZN8hitspool8streamer18print_buffer_headsEv+0xb4>)
 800196e:	f7fe fe8b 	bl	8000688 <print>
    for(int i = 0; i < NUM_PMT; i++){        
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e7c0      	b.n	80018fc <_ZN8hitspool8streamer18print_buffer_headsEv+0x18>
              buff
              );
    }
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	0800f04c 	.word	0x0800f04c
 8001988:	0800f060 	.word	0x0800f060
 800198c:	0800f088 	.word	0x0800f088
 8001990:	0800f094 	.word	0x0800f094
 8001994:	0800f0b4 	.word	0x0800f0b4
 8001998:	0800f0d4 	.word	0x0800f0d4

0800199c <_ZN8hitspool8streamer18init_file_handlersEm>:

void streamer::init_file_handlers(u32 inittime){
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]

    for(int i = 0; i < NUM_PMT; i++){
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dc48      	bgt.n	8001a42 <_ZN8hitspool8streamer18init_file_handlersEm+0xa6>
        nhits_inbuff[i] = 0;
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	2200      	movs	r2, #0
 80019ba:	805a      	strh	r2, [r3, #2]
        handler_active[i] = FALSE;
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
        buffer_full[i] = FALSE;
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	441a      	add	r2, r3
 80019d0:	f241 5368 	movw	r3, #5480	; 0x1568
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
        sprintf(live_filenames[i], "hitspool/PMT%02d/0x%08lX.spool", i, inittime);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	1d18      	adds	r0, r3, #4
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4918      	ldr	r1, [pc, #96]	; (8001a4c <_ZN8hitspool8streamer18init_file_handlersEm+0xb0>)
 80019ea:	f00c fe49 	bl	800e680 <siprintf>

        f_op_res[i] = f_open(&file_handlers[i], live_filenames[i], FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	18d0      	adds	r0, r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	220b      	movs	r2, #11
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f00b fc6b 	bl	800d2e8 <f_open>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001a20:	460a      	mov	r2, r1
 8001a22:	701a      	strb	r2, [r3, #0]
        print("PMT%02d file opened with fres=(%d)\r\n", i, f_op_res[i]);
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <_ZN8hitspool8streamer18init_file_handlersEm+0xb4>)
 8001a36:	f7fe fe27 	bl	8000688 <print>
    for(int i = 0; i < NUM_PMT; i++){
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e7b3      	b.n	80019aa <_ZN8hitspool8streamer18init_file_handlersEm+0xe>
    }
    //print("\n");   
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	0800f0f0 	.word	0x0800f0f0
 8001a50:	0800f110 	.word	0x0800f110

08001a54 <_ZN8hitspool8streamer19close_file_handlersEv>:
            print("ERROR syncing file %s; fres = %d\r\n", live_filenames[i], f_op_res[i]);
    }
}


void streamer::close_file_handlers(){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    
    for(int i = 0; i < NUM_PMT; i++){
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	dc2f      	bgt.n	8001ac6 <_ZN8hitspool8streamer19close_file_handlersEv+0x72>
        f_op_res[i] = f_close(&file_handlers[i]);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00c fb33 	bl	800e0e4 <f_close>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4619      	mov	r1, r3
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001a8c:	460a      	mov	r2, r1
 8001a8e:	701a      	strb	r2, [r3, #0]
        if(f_op_res[i] != FR_OK)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00e      	beq.n	8001abe <_ZN8hitspool8streamer19close_file_handlersEv+0x6a>
            print("ERROR closing file %s; fres = %d\r\n", live_filenames[i], f_op_res[i]);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	1d19      	adds	r1, r3, #4
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <_ZN8hitspool8streamer19close_file_handlersEv+0x80>)
 8001aba:	f7fe fde5 	bl	8000688 <print>
    for(int i = 0; i < NUM_PMT; i++){
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e7cc      	b.n	8001a60 <_ZN8hitspool8streamer19close_file_handlersEv+0xc>
    }
    print("Done closing all file handlers.\r\n");
 8001ac6:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <_ZN8hitspool8streamer19close_file_handlersEv+0x84>)
 8001ac8:	f7fe fdde 	bl	8000688 <print>
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	0800f15c 	.word	0x0800f15c
 8001ad8:	0800f180 	.word	0x0800f180

08001adc <_ZN8hitspool8streamer22check_and_write_bufferEhb>:
    // print_MPEPacket(mpep);
    // print_WUBPacket(wubp);
}

//FIXME: Return an FSTATUS and pass the n_written by reference.
u32 streamer::check_and_write_buffer(u8 PMT, bool force){
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	72fb      	strb	r3, [r7, #11]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	72bb      	strb	r3, [r7, #10]
    if((n_consumed[PMT] >= TARGET_BLOCKSIZE) || force){
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afe:	d203      	bcs.n	8001b08 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x2c>
 8001b00:	7abb      	ldrb	r3, [r7, #10]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 80cf 	beq.w	8001ca6 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1ca>
        //Kick off the file write process.
        if(force){
 8001b08:	7abb      	ldrb	r3, [r7, #10]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00c      	beq.n	8001b28 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x4c>
            print("Forcing write of PMT%02d buffer.\r\n"
 8001b0e:	7af9      	ldrb	r1, [r7, #11]
                  "\t n_consumed: 0x%04X\r\n", PMT, n_consumed[PMT]);
 8001b10:	7afb      	ldrb	r3, [r7, #11]
            print("Forcing write of PMT%02d buffer.\r\n"
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4866      	ldr	r0, [pc, #408]	; (8001cbc <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1e0>)
 8001b22:	f7fe fdb1 	bl	8000688 <print>
 8001b26:	e00b      	b.n	8001b40 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x64>
        } else {
            print("PMT%02d buffer meets threshold.\r\n"
 8001b28:	7af9      	ldrb	r1, [r7, #11]
                  "\t n_consumed: 0x%04X\r\n", PMT, n_consumed[PMT]);
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
            print("PMT%02d buffer meets threshold.\r\n"
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4861      	ldr	r0, [pc, #388]	; (8001cc0 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1e4>)
 8001b3c:	f7fe fda4 	bl	8000688 <print>
        }

        //do some writing things
        buffer_full[PMT] = TRUE;
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	441a      	add	r2, r3
 8001b46:	f241 5368 	movw	r3, #5480	; 0x1568
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
        handler_active[PMT] = TRUE;
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        f_op_res[PMT] = f_write(&file_handlers[PMT], write_buff[PMT], n_consumed[PMT], &n_written[PMT]);
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	18d0      	adds	r0, r2, r3
 8001b6e:	7afa      	ldrb	r2, [r7, #11]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	18d1      	adds	r1, r2, r3
 8001b80:	7afb      	ldrb	r3, [r7, #11]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	7afe      	ldrb	r6, [r7, #11]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	f00b ffc8 	bl	800db36 <f_write>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4433      	add	r3, r6
 8001bae:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

        if(f_op_res[PMT] != FR_OK){
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0xf6>
            print("Error writing file %s!\r\n", live_filenames[PMT]);
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3304      	adds	r3, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	483d      	ldr	r0, [pc, #244]	; (8001cc4 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1e8>)
 8001bce:	f7fe fd5b 	bl	8000688 <print>
        }

        n_written_tot[PMT] += n_written[PMT];
 8001bd2:	7afa      	ldrb	r2, [r7, #11]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 8001bda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001bde:	7afb      	ldrb	r3, [r7, #11]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	7afa      	ldrb	r2, [r7, #11]
 8001bee:	4419      	add	r1, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 8001bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        total_bytes_written += n_written[PMT];
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	f241 5378 	movw	r3, #5496	; 0x1578
 8001c00:	4413      	add	r3, r2
 8001c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c06:	7afb      	ldrb	r3, [r7, #11]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	1884      	adds	r4, r0, r2
 8001c1c:	eb41 0503 	adc.w	r5, r1, r3
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	f241 5378 	movw	r3, #5496	; 0x1578
 8001c26:	4413      	add	r3, r2
 8001c28:	e9c3 4500 	strd	r4, r5, [r3]
        print("written: now: 0x%04X\ttot/PMT: 0x%04X\ttot: 0x%04X\r\n", n_consumed[PMT], n_written[PMT], n_written_tot[PMT]);
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	7afb      	ldrb	r3, [r7, #11]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	6858      	ldr	r0, [r3, #4]
 8001c48:	7afa      	ldrb	r2, [r7, #11]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f202 525c 	addw	r2, r2, #1372	; 0x55c
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	4602      	mov	r2, r0
 8001c56:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <_ZN8hitspool8streamer22check_and_write_bufferEhb+0x1ec>)
 8001c58:	f7fe fd16 	bl	8000688 <print>

        //reset write heads
        n_consumed[PMT] = 0;
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
        write_head[PMT] = write_buff[PMT];
 8001c6c:	7afa      	ldrb	r2, [r7, #11]
 8001c6e:	7af8      	ldrb	r0, [r7, #11]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	025b      	lsls	r3, r3, #9
 8001c78:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	18d1      	adds	r1, r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f500 62ab 	add.w	r2, r0, #1368	; 0x558
 8001c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        //release the file handler
        buffer_full[PMT] = FALSE;
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	441a      	add	r2, r3
 8001c90:	f241 5368 	movw	r3, #5480	; 0x1568
 8001c94:	4413      	add	r3, r2
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
        handler_active[PMT] = FALSE;
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    }

    return n_written[PMT];
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	685b      	ldr	r3, [r3, #4]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbc:	0800f1f4 	.word	0x0800f1f4
 8001cc0:	0800f230 	.word	0x0800f230
 8001cc4:	0800f268 	.word	0x0800f268
 8001cc8:	0800f284 	.word	0x0800f284

08001ccc <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh>:

STREAMER_RC streamer::read_next_hit(FIL *file, PayloadType_t *type, u8* hitbuffer){
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	f107 040c 	add.w	r4, r7, #12
 8001cd8:	6020      	str	r0, [r4, #0]
 8001cda:	f107 0008 	add.w	r0, r7, #8
 8001cde:	6001      	str	r1, [r0, #0]
 8001ce0:	1d39      	adds	r1, r7, #4
 8001ce2:	600a      	str	r2, [r1, #0]
 8001ce4:	463a      	mov	r2, r7
 8001ce6:	6013      	str	r3, [r2, #0]
     */

     FRESULT fres; 
     u8 lead[sizeof(SPEHit)]; //this is the size of a SPEHit and MPEHit base unit. 
     u8 data[1024]; //FIXME: Make this match the maximum number of samples in an MPEHit.
     UINT br = 0;
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
     UINT btr = 6; //or sizeof(MPEHit)
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

     fres = f_read(file, lead, btr, &br);
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	f207 4114 	addw	r1, r7, #1044	; 0x414
 8001cfe:	f107 0008 	add.w	r0, r7, #8
 8001d02:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8001d06:	6800      	ldr	r0, [r0, #0]
 8001d08:	f00b fd9f 	bl	800d84a <f_read>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f887 341b 	strb.w	r3, [r7, #1051]	; 0x41b
     if(fres != FR_OK){
 8001d12:	f897 341b 	ldrb.w	r3, [r7, #1051]	; 0x41b
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x60>
        //print("Error reading from file; br=%d btr=%d\r\n", br, btr);
        if(br == 0) //EOF
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0x5c>
            return STREAMER_RC_EOF;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e042      	b.n	8001dae <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xe2>
        else //We read out fewer bytes than expected. 
            return STREAMER_RC_DISK_ERR;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e040      	b.n	8001dae <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xe2>
     }
     // for(int i = 0; i < sizeof(SPEHit); i++){
     //    print("%s ", toBinaryString(lead[i]).c_str());
     // }
     // print("\n");
     memcpy(data, lead, 6);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001d34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d38:	6018      	str	r0, [r3, #0]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	8019      	strh	r1, [r3, #0]
     // data[7] = '\0';
     // print("%s\r\n", data);
     *type = static_cast<PayloadType_t>(lead[0] & 0x3);
 8001d3e:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	701a      	strb	r2, [r3, #0]
     print("Read type: %s\r\n", PLNameText[*type]);
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xec>)
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4817      	ldr	r0, [pc, #92]	; (8001dbc <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xf0>)
 8001d60:	f7fe fc92 	bl	8000688 <print>

     switch(*type){
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xa8>
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d010      	beq.n	8001d94 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xc8>
 8001d72:	e019      	b.n	8001da8 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xdc>
        case PL_SPE: 
            hitbuffer = (u8*)malloc(sizeof(SPEHit));
 8001d74:	463c      	mov	r4, r7
 8001d76:	2006      	movs	r0, #6
 8001d78:	f00c fb4c 	bl	800e414 <malloc>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	6023      	str	r3, [r4, #0]
            memcpy(hitbuffer, lead, 6);
 8001d80:	463b      	mov	r3, r7
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	6010      	str	r0, [r2, #0]
 8001d8e:	889b      	ldrh	r3, [r3, #4]
 8001d90:	8093      	strh	r3, [r2, #4]
            //print("Read:\n%s\n", ((SPEHit*)hitbuffer)->tostring().c_str());
            break;
 8001d92:	e00b      	b.n	8001dac <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xe0>
        
        case PL_MPE: 
            
            print("nsamples from cast: %d\r\n", ((MPEHit*)lead)->nsamples);
 8001d94:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001d98:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xf4>)
 8001da2:	f7fe fc71 	bl	8000688 <print>
            //hitbuffer = (u8*)malloc(sizeof(MPEHit) + )
            break;
 8001da6:	e001      	b.n	8001dac <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xe0>
        
        default:
            return STREAMER_RC_DISK_ERR;
 8001da8:	2302      	movs	r3, #2
 8001daa:	e000      	b.n	8001dae <_ZN8hitspool8streamer13read_next_hitEP3FILP13PayloadType_tPh+0xe2>
            break; //NULL event.

     }
     return STREAMER_RC_OK;
 8001dac:	2300      	movs	r3, #0

}
 8001dae:	4618      	mov	r0, r3
 8001db0:	f207 4724 	addw	r7, r7, #1060	; 0x424
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	24000000 	.word	0x24000000
 8001dbc:	0800f2b8 	.word	0x0800f2b8
 8001dc0:	0800f2c8 	.word	0x0800f2c8

08001dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_kill>:

int _kill(int pid, int sig)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dde:	f00c faef 	bl	800e3c0 <__errno>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2216      	movs	r2, #22
 8001de6:	601a      	str	r2, [r3, #0]
	return -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_exit>:

void _exit (int status)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ffe7 	bl	8001dd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e06:	e7fe      	b.n	8001e06 <_exit+0x12>

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f00c fac2 	bl	800e3c0 <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	24080000 	.word	0x24080000
 8001e68:	00000400 	.word	0x00000400
 8001e6c:	240002fc 	.word	0x240002fc
 8001e70:	24001c30 	.word	0x24001c30

08001e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <SystemInit+0xec>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	4a38      	ldr	r2, [pc, #224]	; (8001f60 <SystemInit+0xec>)
 8001e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e88:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <SystemInit+0xf0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d807      	bhi.n	8001ea4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <SystemInit+0xf0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 030f 	bic.w	r3, r3, #15
 8001e9c:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <SystemInit+0xf0>)
 8001e9e:	f043 0307 	orr.w	r3, r3, #7
 8001ea2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <SystemInit+0xf4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <SystemInit+0xf4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <SystemInit+0xf4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <SystemInit+0xf4>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	492b      	ldr	r1, [pc, #172]	; (8001f68 <SystemInit+0xf4>)
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <SystemInit+0xf8>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <SystemInit+0xf0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <SystemInit+0xf0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 030f 	bic.w	r3, r3, #15
 8001ed6:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <SystemInit+0xf0>)
 8001ed8:	f043 0307 	orr.w	r3, r3, #7
 8001edc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <SystemInit+0xf4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <SystemInit+0xf4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <SystemInit+0xf4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <SystemInit+0xf4>)
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <SystemInit+0xfc>)
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <SystemInit+0xf4>)
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <SystemInit+0x100>)
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <SystemInit+0xf4>)
 8001efe:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <SystemInit+0x104>)
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <SystemInit+0xf4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <SystemInit+0xf4>)
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <SystemInit+0x104>)
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <SystemInit+0xf4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <SystemInit+0xf4>)
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <SystemInit+0x104>)
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <SystemInit+0xf4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <SystemInit+0xf4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a10      	ldr	r2, [pc, #64]	; (8001f68 <SystemInit+0xf4>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <SystemInit+0xf4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <SystemInit+0x108>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <SystemInit+0x10c>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f3e:	d202      	bcs.n	8001f46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <SystemInit+0x110>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <SystemInit+0x114>)
 8001f48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SystemInit+0xec>)
 8001f50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f54:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	52002000 	.word	0x52002000
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f70:	02020200 	.word	0x02020200
 8001f74:	01ff0000 	.word	0x01ff0000
 8001f78:	01010280 	.word	0x01010280
 8001f7c:	5c001000 	.word	0x5c001000
 8001f80:	ffff0000 	.word	0xffff0000
 8001f84:	51008108 	.word	0x51008108
 8001f88:	52004000 	.word	0x52004000

08001f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f90:	f7ff ff70 	bl	8001e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	; (8001fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fba:	f00c fa07 	bl	800e3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f7fe fb9f 	bl	8000700 <main>
  bx  lr
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001fc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fcc:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001fd0:	0800f808 	.word	0x0800f808
  ldr r2, =_sbss
 8001fd4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001fd8:	24001c30 	.word	0x24001c30

08001fdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC3_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	f000 f98c 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fec:	f001 f9c6 	bl	800337c <HAL_RCC_GetSysClockFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_Init+0x68>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	4913      	ldr	r1, [pc, #76]	; (800204c <HAL_Init+0x6c>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_Init+0x68>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_Init+0x6c>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
 8002020:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <HAL_Init+0x70>)
 8002022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002024:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <HAL_Init+0x74>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202a:	2000      	movs	r0, #0
 800202c:	f000 f814 	bl	8002058 <HAL_InitTick>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e002      	b.n	8002040 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800203a:	f7ff fa4f 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	58024400 	.word	0x58024400
 800204c:	0800f338 	.word	0x0800f338
 8002050:	24000014 	.word	0x24000014
 8002054:	24000010 	.word	0x24000010

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_InitTick+0x60>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e021      	b.n	80020b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_InitTick+0x64>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_InitTick+0x60>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f971 	bl	800236a <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a0:	f000 f93b 	bl	800231a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x68>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2400001c 	.word	0x2400001c
 80020bc:	24000010 	.word	0x24000010
 80020c0:	24000018 	.word	0x24000018

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2400001c 	.word	0x2400001c
 80020e8:	24001770 	.word	0x24001770

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	24001770 	.word	0x24001770

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2400001c 	.word	0x2400001c

0800214c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_GetREVID+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0c1b      	lsrs	r3, r3, #16
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	5c001000 	.word	0x5c001000

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	4313      	orrs	r3, r2
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00
 80021a8:	05fa0000 	.word	0x05fa0000

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <__NVIC_EnableIRQ+0x38>)
 80021e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d0:	d301      	bcc.n	80022d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00f      	b.n	80022f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <SysTick_Config+0x40>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022de:	210f      	movs	r1, #15
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e4:	f7ff ff8e 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <SysTick_Config+0x40>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <SysTick_Config+0x40>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000e010 	.word	0xe000e010

08002304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff29 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff40 	bl	80021ac <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff90 	bl	8002258 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5f 	bl	8002204 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff33 	bl	80021c8 <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa4 	bl	80022c0 <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002392:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <HAL_GPIO_Init+0x234>)
 8002394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002396:	e194      	b.n	80026c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2101      	movs	r1, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8186 	beq.w	80026bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d00b      	beq.n	80023d0 <HAL_GPIO_Init+0x4c>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d007      	beq.n	80023d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c4:	2b11      	cmp	r3, #17
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d130      	bne.n	8002432 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002406:	2201      	movs	r2, #1
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0201 	and.w	r2, r3, #1
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0xee>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b12      	cmp	r3, #18
 8002470:	d123      	bne.n	80024ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3208      	adds	r2, #8
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	69b9      	ldr	r1, [r7, #24]
 80024b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	2203      	movs	r2, #3
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0203 	and.w	r2, r3, #3
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80e0 	beq.w	80026bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_GPIO_Init+0x238>)
 80024fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002502:	4a2e      	ldr	r2, [pc, #184]	; (80025bc <HAL_GPIO_Init+0x238>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800250c:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_GPIO_Init+0x238>)
 800250e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251a:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <HAL_GPIO_Init+0x23c>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <HAL_GPIO_Init+0x240>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d052      	beq.n	80025ec <HAL_GPIO_Init+0x268>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <HAL_GPIO_Init+0x244>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d031      	beq.n	80025b2 <HAL_GPIO_Init+0x22e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <HAL_GPIO_Init+0x248>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02b      	beq.n	80025ae <HAL_GPIO_Init+0x22a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_GPIO_Init+0x24c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d025      	beq.n	80025aa <HAL_GPIO_Init+0x226>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_GPIO_Init+0x250>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <HAL_GPIO_Init+0x222>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_GPIO_Init+0x254>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d019      	beq.n	80025a2 <HAL_GPIO_Init+0x21e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1a      	ldr	r2, [pc, #104]	; (80025dc <HAL_GPIO_Init+0x258>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0x21a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_GPIO_Init+0x25c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00d      	beq.n	800259a <HAL_GPIO_Init+0x216>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x260>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x212>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_GPIO_Init+0x264>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_Init+0x20e>
 800258e:	2309      	movs	r3, #9
 8002590:	e02d      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 8002592:	230a      	movs	r3, #10
 8002594:	e02b      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 8002596:	2308      	movs	r3, #8
 8002598:	e029      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 800259a:	2307      	movs	r3, #7
 800259c:	e027      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 800259e:	2306      	movs	r3, #6
 80025a0:	e025      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025a2:	2305      	movs	r3, #5
 80025a4:	e023      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e021      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025aa:	2303      	movs	r3, #3
 80025ac:	e01f      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e01d      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e01b      	b.n	80025ee <HAL_GPIO_Init+0x26a>
 80025b6:	bf00      	nop
 80025b8:	58000080 	.word	0x58000080
 80025bc:	58024400 	.word	0x58024400
 80025c0:	58000400 	.word	0x58000400
 80025c4:	58020000 	.word	0x58020000
 80025c8:	58020400 	.word	0x58020400
 80025cc:	58020800 	.word	0x58020800
 80025d0:	58020c00 	.word	0x58020c00
 80025d4:	58021000 	.word	0x58021000
 80025d8:	58021400 	.word	0x58021400
 80025dc:	58021800 	.word	0x58021800
 80025e0:	58021c00 	.word	0x58021c00
 80025e4:	58022000 	.word	0x58022000
 80025e8:	58022400 	.word	0x58022400
 80025ec:	2300      	movs	r3, #0
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	f002 0203 	and.w	r2, r2, #3
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	4093      	lsls	r3, r2
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fe:	4938      	ldr	r1, [pc, #224]	; (80026e0 <HAL_GPIO_Init+0x35c>)
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f47f ae63 	bne.w	8002398 <HAL_GPIO_Init+0x14>
  }
}
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	3724      	adds	r7, #36	; 0x24
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	58000400 	.word	0x58000400

080026e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e001      	b.n	8002706 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002730:	e003      	b.n	800273a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002758:	887a      	ldrh	r2, [r7, #2]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	041a      	lsls	r2, r3, #16
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43d9      	mvns	r1, r3
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	400b      	ands	r3, r1
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	619a      	str	r2, [r3, #24]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_PWREx_ConfigSupply+0x70>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b04      	cmp	r3, #4
 800278e:	d00a      	beq.n	80027a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <HAL_PWREx_ConfigSupply+0x70>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e01f      	b.n	80027e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e01d      	b.n	80027e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_PWREx_ConfigSupply+0x70>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	490f      	ldr	r1, [pc, #60]	; (80027ec <HAL_PWREx_ConfigSupply+0x70>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027b6:	f7ff fc99 	bl	80020ec <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027bc:	e009      	b.n	80027d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027be:	f7ff fc95 	bl	80020ec <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027cc:	d901      	bls.n	80027d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e007      	b.n	80027e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027d2:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_PWREx_ConfigSupply+0x70>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027de:	d1ee      	bne.n	80027be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	58024800 	.word	0x58024800

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e3ff      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8087 	beq.w	800291e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002810:	4b99      	ldr	r3, [pc, #612]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800281a:	4b97      	ldr	r3, [pc, #604]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	2b10      	cmp	r3, #16
 8002824:	d007      	beq.n	8002836 <HAL_RCC_OscConfig+0x46>
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	2b18      	cmp	r3, #24
 800282a:	d110      	bne.n	800284e <HAL_RCC_OscConfig+0x5e>
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d10b      	bne.n	800284e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002836:	4b90      	ldr	r3, [pc, #576]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d06c      	beq.n	800291c <HAL_RCC_OscConfig+0x12c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d168      	bne.n	800291c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e3d9      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x76>
 8002858:	4b87      	ldr	r3, [pc, #540]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a86      	ldr	r2, [pc, #536]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	e02e      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b82      	ldr	r3, [pc, #520]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a81      	ldr	r2, [pc, #516]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b7f      	ldr	r3, [pc, #508]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7e      	ldr	r2, [pc, #504]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0xbc>
 8002892:	4b79      	ldr	r3, [pc, #484]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a78      	ldr	r2, [pc, #480]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a75      	ldr	r2, [pc, #468]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xd4>
 80028ac:	4b72      	ldr	r3, [pc, #456]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a71      	ldr	r2, [pc, #452]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff fc0e 	bl	80020ec <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff fc0a 	bl	80020ec <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e38d      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028e6:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xe4>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7ff fbfa 	bl	80020ec <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fbf6 	bl	80020ec <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e379      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800290e:	4b5a      	ldr	r3, [pc, #360]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x10c>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80ae 	beq.w	8002a88 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292c:	4b52      	ldr	r3, [pc, #328]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002934:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002936:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_RCC_OscConfig+0x162>
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2b18      	cmp	r3, #24
 8002946:	d13a      	bne.n	80029be <HAL_RCC_OscConfig+0x1ce>
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d135      	bne.n	80029be <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002952:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_RCC_OscConfig+0x17a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e34b      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296a:	f7ff fbef 	bl	800214c <HAL_GetREVID>
 800296e:	4603      	mov	r3, r0
 8002970:	f241 0203 	movw	r2, #4099	; 0x1003
 8002974:	4293      	cmp	r3, r2
 8002976:	d817      	bhi.n	80029a8 <HAL_RCC_OscConfig+0x1b8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d108      	bne.n	8002992 <HAL_RCC_OscConfig+0x1a2>
 8002980:	4b3d      	ldr	r3, [pc, #244]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002988:	4a3b      	ldr	r2, [pc, #236]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 800298a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002990:	e07a      	b.n	8002a88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002992:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	031b      	lsls	r3, r3, #12
 80029a0:	4935      	ldr	r1, [pc, #212]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a6:	e06f      	b.n	8002a88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	4930      	ldr	r1, [pc, #192]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029bc:	e064      	b.n	8002a88 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d045      	beq.n	8002a52 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029c6:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 0219 	bic.w	r2, r3, #25
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4929      	ldr	r1, [pc, #164]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7ff fb88 	bl	80020ec <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f7ff fb84 	bl	80020ec <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e307      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f2:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	f7ff fba5 	bl	800214c <HAL_GetREVID>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d817      	bhi.n	8002a3c <HAL_RCC_OscConfig+0x24c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b40      	cmp	r3, #64	; 0x40
 8002a12:	d108      	bne.n	8002a26 <HAL_RCC_OscConfig+0x236>
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a1c:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a22:	6053      	str	r3, [r2, #4]
 8002a24:	e030      	b.n	8002a88 <HAL_RCC_OscConfig+0x298>
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	031b      	lsls	r3, r3, #12
 8002a34:	4910      	ldr	r1, [pc, #64]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
 8002a3a:	e025      	b.n	8002a88 <HAL_RCC_OscConfig+0x298>
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	490b      	ldr	r1, [pc, #44]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	e01a      	b.n	8002a88 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a08      	ldr	r2, [pc, #32]	; (8002a78 <HAL_RCC_OscConfig+0x288>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7ff fb45 	bl	80020ec <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7ff fb41 	bl	80020ec <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d903      	bls.n	8002a7c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e2c4      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
 8002a78:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a7c:	4ba4      	ldr	r3, [pc, #656]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ee      	bne.n	8002a66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80a9 	beq.w	8002be8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a96:	4b9e      	ldr	r3, [pc, #632]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aa0:	4b9b      	ldr	r3, [pc, #620]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d007      	beq.n	8002abc <HAL_RCC_OscConfig+0x2cc>
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b18      	cmp	r3, #24
 8002ab0:	d13a      	bne.n	8002b28 <HAL_RCC_OscConfig+0x338>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d135      	bne.n	8002b28 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002abc:	4b94      	ldr	r3, [pc, #592]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x2e4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e296      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ad4:	f7ff fb3a 	bl	800214c <HAL_GetREVID>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d817      	bhi.n	8002b12 <HAL_RCC_OscConfig+0x322>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d108      	bne.n	8002afc <HAL_RCC_OscConfig+0x30c>
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002af2:	4a87      	ldr	r2, [pc, #540]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002af8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002afa:	e075      	b.n	8002be8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002afc:	4b84      	ldr	r3, [pc, #528]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	069b      	lsls	r3, r3, #26
 8002b0a:	4981      	ldr	r1, [pc, #516]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b10:	e06a      	b.n	8002be8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b12:	4b7f      	ldr	r3, [pc, #508]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	061b      	lsls	r3, r3, #24
 8002b20:	497b      	ldr	r1, [pc, #492]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b26:	e05f      	b.n	8002be8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d042      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b30:	4b77      	ldr	r3, [pc, #476]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a76      	ldr	r2, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fad6 	bl	80020ec <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b44:	f7ff fad2 	bl	80020ec <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e255      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b56:	4b6e      	ldr	r3, [pc, #440]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b62:	f7ff faf3 	bl	800214c <HAL_GetREVID>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d817      	bhi.n	8002ba0 <HAL_RCC_OscConfig+0x3b0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d108      	bne.n	8002b8a <HAL_RCC_OscConfig+0x39a>
 8002b78:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b80:	4a63      	ldr	r2, [pc, #396]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b86:	6053      	str	r3, [r2, #4]
 8002b88:	e02e      	b.n	8002be8 <HAL_RCC_OscConfig+0x3f8>
 8002b8a:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	495d      	ldr	r1, [pc, #372]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
 8002b9e:	e023      	b.n	8002be8 <HAL_RCC_OscConfig+0x3f8>
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	4958      	ldr	r1, [pc, #352]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60cb      	str	r3, [r1, #12]
 8002bb4:	e018      	b.n	8002be8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bb6:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a55      	ldr	r2, [pc, #340]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7ff fa93 	bl	80020ec <HAL_GetTick>
 8002bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bca:	f7ff fa8f 	bl	80020ec <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e212      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bdc:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f0      	bne.n	8002bca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d036      	beq.n	8002c62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d019      	beq.n	8002c30 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfc:	4b44      	ldr	r3, [pc, #272]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c00:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7ff fa70 	bl	80020ec <HAL_GetTick>
 8002c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7ff fa6c 	bl	80020ec <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1ef      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x420>
 8002c2e:	e018      	b.n	8002c62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7ff fa56 	bl	80020ec <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c44:	f7ff fa52 	bl	80020ec <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1d5      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c56:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d036      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c82:	f7ff fa33 	bl	80020ec <HAL_GetTick>
 8002c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c8a:	f7ff fa2f 	bl	80020ec <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1b2      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x49a>
 8002ca8:	e018      	b.n	8002cdc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fa19 	bl	80020ec <HAL_GetTick>
 8002cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cbe:	f7ff fa15 	bl	80020ec <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e198      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_RCC_OscConfig+0x520>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f0      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8085 	beq.w	8002df4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_OscConfig+0x524>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x524>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cf6:	f7ff f9f9 	bl	80020ec <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cfc:	e00c      	b.n	8002d18 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cfe:	f7ff f9f5 	bl	80020ec <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	; 0x64
 8002d0a:	d905      	bls.n	8002d18 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e178      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
 8002d10:	58024400 	.word	0x58024400
 8002d14:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d18:	4b96      	ldr	r3, [pc, #600]	; (8002f74 <HAL_RCC_OscConfig+0x784>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ec      	beq.n	8002cfe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x54a>
 8002d2c:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a91      	ldr	r2, [pc, #580]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e02d      	b.n	8002d96 <HAL_RCC_OscConfig+0x5a6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x56c>
 8002d42:	4b8d      	ldr	r3, [pc, #564]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a8c      	ldr	r2, [pc, #560]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a89      	ldr	r2, [pc, #548]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e01c      	b.n	8002d96 <HAL_RCC_OscConfig+0x5a6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d10c      	bne.n	8002d7e <HAL_RCC_OscConfig+0x58e>
 8002d64:	4b84      	ldr	r3, [pc, #528]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a83      	ldr	r2, [pc, #524]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	4b81      	ldr	r3, [pc, #516]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a80      	ldr	r2, [pc, #512]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	e00b      	b.n	8002d96 <HAL_RCC_OscConfig+0x5a6>
 8002d7e:	4b7e      	ldr	r3, [pc, #504]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a7d      	ldr	r2, [pc, #500]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8a:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a7a      	ldr	r2, [pc, #488]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d015      	beq.n	8002dca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7ff f9a5 	bl	80020ec <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7ff f9a1 	bl	80020ec <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e122      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbc:	4b6e      	ldr	r3, [pc, #440]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ee      	beq.n	8002da6 <HAL_RCC_OscConfig+0x5b6>
 8002dc8:	e014      	b.n	8002df4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7ff f98f 	bl	80020ec <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7ff f98b 	bl	80020ec <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e10c      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002de8:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8101 	beq.w	8003000 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002dfe:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e06:	2b18      	cmp	r3, #24
 8002e08:	f000 80bc 	beq.w	8002f84 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	f040 8095 	bne.w	8002f40 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a57      	ldr	r2, [pc, #348]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7ff f963 	bl	80020ec <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7ff f95f 	bl	80020ec <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0e2      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e48:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4c:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <HAL_RCC_OscConfig+0x78c>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	4946      	ldr	r1, [pc, #280]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	628b      	str	r3, [r1, #40]	; 0x28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	3b01      	subs	r3, #1
 8002e72:	025b      	lsls	r3, r3, #9
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e92:	4939      	ldr	r1, [pc, #228]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e98:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	4a36      	ldr	r2, [pc, #216]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ea4:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea8:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <HAL_RCC_OscConfig+0x790>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eb0:	00d2      	lsls	r2, r2, #3
 8002eb2:	4931      	ldr	r1, [pc, #196]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f023 020c 	bic.w	r2, r3, #12
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	492c      	ldr	r1, [pc, #176]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002eca:	4b2b      	ldr	r3, [pc, #172]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f023 0202 	bic.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4928      	ldr	r1, [pc, #160]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002edc:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7ff f8e8 	bl	80020ec <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7ff f8e4 	bl	80020ec <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e067      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x730>
 8002f3e:	e05f      	b.n	8003000 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7ff f8ce 	bl	80020ec <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7ff f8ca 	bl	80020ec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e04d      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_RCC_OscConfig+0x788>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x764>
 8002f72:	e045      	b.n	8003000 <HAL_RCC_OscConfig+0x810>
 8002f74:	58024800 	.word	0x58024800
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	fffffc0c 	.word	0xfffffc0c
 8002f80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_OscConfig+0x81c>)
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_RCC_OscConfig+0x81c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d031      	beq.n	8002ffc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f003 0203 	and.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d12a      	bne.n	8002ffc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d122      	bne.n	8002ffc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d11a      	bne.n	8002ffc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	0a5b      	lsrs	r3, r3, #9
 8002fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0c1b      	lsrs	r3, r3, #16
 8002fdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d108      	bne.n	8002ffc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	0e1b      	lsrs	r3, r3, #24
 8002fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3730      	adds	r7, #48	; 0x30
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	58024400 	.word	0x58024400

08003010 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e19c      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b8a      	ldr	r3, [pc, #552]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d910      	bls.n	8003054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b87      	ldr	r3, [pc, #540]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 020f 	bic.w	r2, r3, #15
 800303a:	4985      	ldr	r1, [pc, #532]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b83      	ldr	r3, [pc, #524]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e184      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d010      	beq.n	8003082 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800306c:	429a      	cmp	r2, r3
 800306e:	d908      	bls.n	8003082 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003070:	4b78      	ldr	r3, [pc, #480]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	4975      	ldr	r1, [pc, #468]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 800307e:	4313      	orrs	r3, r2
 8003080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d010      	beq.n	80030b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	4b70      	ldr	r3, [pc, #448]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800309a:	429a      	cmp	r2, r3
 800309c:	d908      	bls.n	80030b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800309e:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	496a      	ldr	r1, [pc, #424]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699a      	ldr	r2, [r3, #24]
 80030c0:	4b64      	ldr	r3, [pc, #400]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d908      	bls.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030cc:	4b61      	ldr	r3, [pc, #388]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	495e      	ldr	r1, [pc, #376]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d908      	bls.n	800310c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030fa:	4b56      	ldr	r3, [pc, #344]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4953      	ldr	r1, [pc, #332]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003108:	4313      	orrs	r3, r2
 800310a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	429a      	cmp	r2, r3
 8003126:	d908      	bls.n	800313a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b4a      	ldr	r3, [pc, #296]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f023 020f 	bic.w	r2, r3, #15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4947      	ldr	r1, [pc, #284]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003136:	4313      	orrs	r3, r2
 8003138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d055      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003146:	4b43      	ldr	r3, [pc, #268]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4940      	ldr	r1, [pc, #256]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003154:	4313      	orrs	r3, r2
 8003156:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d107      	bne.n	8003170 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003160:	4b3c      	ldr	r3, [pc, #240]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d121      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0f6      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d107      	bne.n	8003188 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003178:	4b36      	ldr	r3, [pc, #216]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0ea      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003190:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0de      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0d6      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f023 0207 	bic.w	r2, r3, #7
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4925      	ldr	r1, [pc, #148]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe ff93 	bl	80020ec <HAL_GetTick>
 80031c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ca:	f7fe ff8f 	bl	80020ec <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0be      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e0:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d1eb      	bne.n	80031ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d010      	beq.n	8003220 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	429a      	cmp	r2, r3
 800320c:	d208      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f023 020f 	bic.w	r2, r3, #15
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	490e      	ldr	r1, [pc, #56]	; (8003254 <HAL_RCC_ClockConfig+0x244>)
 800321c:	4313      	orrs	r3, r2
 800321e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d214      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 020f 	bic.w	r2, r3, #15
 8003236:	4906      	ldr	r1, [pc, #24]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <HAL_RCC_ClockConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e086      	b.n	800335e <HAL_RCC_ClockConfig+0x34e>
 8003250:	52002000 	.word	0x52002000
 8003254:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003270:	429a      	cmp	r2, r3
 8003272:	d208      	bcs.n	8003286 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	4939      	ldr	r1, [pc, #228]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003282:	4313      	orrs	r3, r2
 8003284:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800329e:	429a      	cmp	r2, r3
 80032a0:	d208      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	492e      	ldr	r1, [pc, #184]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d208      	bcs.n	80032e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	4922      	ldr	r1, [pc, #136]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d208      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4917      	ldr	r1, [pc, #92]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 800330c:	4313      	orrs	r3, r2
 800330e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003310:	f000 f834 	bl	800337c <HAL_RCC_GetSysClockFreq>
 8003314:	4602      	mov	r2, r0
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	4912      	ldr	r1, [pc, #72]	; (800336c <HAL_RCC_ClockConfig+0x35c>)
 8003322:	5ccb      	ldrb	r3, [r1, r3]
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_RCC_ClockConfig+0x358>)
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	4a0d      	ldr	r2, [pc, #52]	; (800336c <HAL_RCC_ClockConfig+0x35c>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_RCC_ClockConfig+0x360>)
 8003346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003348:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <HAL_RCC_ClockConfig+0x364>)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_RCC_ClockConfig+0x368>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fe80 	bl	8002058 <HAL_InitTick>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	58024400 	.word	0x58024400
 800336c:	0800f338 	.word	0x0800f338
 8003370:	24000014 	.word	0x24000014
 8003374:	24000010 	.word	0x24000010
 8003378:	24000018 	.word	0x24000018

0800337c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003382:	4bb3      	ldr	r3, [pc, #716]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800338a:	2b18      	cmp	r3, #24
 800338c:	f200 8155 	bhi.w	800363a <HAL_RCC_GetSysClockFreq+0x2be>
 8003390:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033fd 	.word	0x080033fd
 800339c:	0800363b 	.word	0x0800363b
 80033a0:	0800363b 	.word	0x0800363b
 80033a4:	0800363b 	.word	0x0800363b
 80033a8:	0800363b 	.word	0x0800363b
 80033ac:	0800363b 	.word	0x0800363b
 80033b0:	0800363b 	.word	0x0800363b
 80033b4:	0800363b 	.word	0x0800363b
 80033b8:	08003423 	.word	0x08003423
 80033bc:	0800363b 	.word	0x0800363b
 80033c0:	0800363b 	.word	0x0800363b
 80033c4:	0800363b 	.word	0x0800363b
 80033c8:	0800363b 	.word	0x0800363b
 80033cc:	0800363b 	.word	0x0800363b
 80033d0:	0800363b 	.word	0x0800363b
 80033d4:	0800363b 	.word	0x0800363b
 80033d8:	08003429 	.word	0x08003429
 80033dc:	0800363b 	.word	0x0800363b
 80033e0:	0800363b 	.word	0x0800363b
 80033e4:	0800363b 	.word	0x0800363b
 80033e8:	0800363b 	.word	0x0800363b
 80033ec:	0800363b 	.word	0x0800363b
 80033f0:	0800363b 	.word	0x0800363b
 80033f4:	0800363b 	.word	0x0800363b
 80033f8:	0800342f 	.word	0x0800342f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033fc:	4b94      	ldr	r3, [pc, #592]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d009      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003408:	4b91      	ldr	r3, [pc, #580]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	08db      	lsrs	r3, r3, #3
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	4a90      	ldr	r2, [pc, #576]	; (8003654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
 8003418:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800341a:	e111      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800341c:	4b8d      	ldr	r3, [pc, #564]	; (8003654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800341e:	61bb      	str	r3, [r7, #24]
    break;
 8003420:	e10e      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003422:	4b8d      	ldr	r3, [pc, #564]	; (8003658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003424:	61bb      	str	r3, [r7, #24]
    break;
 8003426:	e10b      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003428:	4b8c      	ldr	r3, [pc, #560]	; (800365c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800342a:	61bb      	str	r3, [r7, #24]
    break;
 800342c:	e108      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800342e:	4b88      	ldr	r3, [pc, #544]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003438:	4b85      	ldr	r3, [pc, #532]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003442:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003444:	4b82      	ldr	r3, [pc, #520]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800344e:	4b80      	ldr	r3, [pc, #512]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003452:	08db      	lsrs	r3, r3, #3
 8003454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80e1 	beq.w	8003634 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b02      	cmp	r3, #2
 8003476:	f000 8083 	beq.w	8003580 <HAL_RCC_GetSysClockFreq+0x204>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b02      	cmp	r3, #2
 800347e:	f200 80a1 	bhi.w	80035c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x114>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d056      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x1c0>
 800348e:	e099      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003490:	4b6f      	ldr	r3, [pc, #444]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02d      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800349c:	4b6c      	ldr	r3, [pc, #432]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	4a6b      	ldr	r2, [pc, #428]	; (8003654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c6:	4b62      	ldr	r3, [pc, #392]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80034f6:	e087      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003502:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003664 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800350a:	4b51      	ldr	r3, [pc, #324]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351a:	ed97 6a02 	vldr	s12, [r7, #8]
 800351e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800352a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800352e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800353a:	e065      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003668 <HAL_RCC_GetSysClockFreq+0x2ec>
 800354a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354e:	4b40      	ldr	r3, [pc, #256]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003562:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800357e:	e043      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800366c <HAL_RCC_GetSysClockFreq+0x2f0>
 800358e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003592:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035c2:	e021      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003668 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d6:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003660 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003606:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	0a5b      	lsrs	r3, r3, #9
 800360e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003612:	3301      	adds	r3, #1
 8003614:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003620:	edd7 6a07 	vldr	s13, [r7, #28]
 8003624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362c:	ee17 3a90 	vmov	r3, s15
 8003630:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003632:	e005      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
    break;
 8003638:	e002      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800363c:	61bb      	str	r3, [r7, #24]
    break;
 800363e:	bf00      	nop
  }

  return sysclockfreq;
 8003640:	69bb      	ldr	r3, [r7, #24]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
 8003654:	03d09000 	.word	0x03d09000
 8003658:	003d0900 	.word	0x003d0900
 800365c:	007a1200 	.word	0x007a1200
 8003660:	46000000 	.word	0x46000000
 8003664:	4c742400 	.word	0x4c742400
 8003668:	4a742400 	.word	0x4a742400
 800366c:	4af42400 	.word	0x4af42400

08003670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003676:	f7ff fe81 	bl	800337c <HAL_RCC_GetSysClockFreq>
 800367a:	4602      	mov	r2, r0
 800367c:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	490f      	ldr	r1, [pc, #60]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003688:	5ccb      	ldrb	r3, [r1, r3]
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	fa22 f303 	lsr.w	r3, r2, r3
 80036aa:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80036ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ae:	4a07      	ldr	r2, [pc, #28]	; (80036cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	58024400 	.word	0x58024400
 80036c4:	0800f338 	.word	0x0800f338
 80036c8:	24000014 	.word	0x24000014
 80036cc:	24000010 	.word	0x24000010

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036d4:	f7ff ffcc 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4904      	ldr	r1, [pc, #16]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	58024400 	.word	0x58024400
 80036f8:	0800f338 	.word	0x0800f338

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003700:	f7ff ffb6 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4904      	ldr	r1, [pc, #16]	; (8003724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	58024400 	.word	0x58024400
 8003724:	0800f338 	.word	0x0800f338

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003734:	2300      	movs	r3, #0
 8003736:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d03f      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003748:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800374c:	d02a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800374e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003752:	d824      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003758:	d018      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800375a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375e:	d81e      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003768:	d007      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800376a:	e018      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376c:	4bab      	ldr	r3, [pc, #684]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4aaa      	ldr	r2, [pc, #680]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003778:	e015      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	2102      	movs	r1, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fff3 	bl	800576c <RCCEx_PLL2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800378a:	e00c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3324      	adds	r3, #36	; 0x24
 8003790:	2102      	movs	r1, #2
 8003792:	4618      	mov	r0, r3
 8003794:	f002 f89c 	bl	80058d0 <RCCEx_PLL3_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800379c:	e003      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
      break;
 80037a2:	e000      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037ac:	4b9b      	ldr	r3, [pc, #620]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b8:	4998      	ldr	r1, [pc, #608]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	650b      	str	r3, [r1, #80]	; 0x50
 80037be:	e001      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d03d      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d826      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	080037f5 	.word	0x080037f5
 80037e4:	08003803 	.word	0x08003803
 80037e8:	08003815 	.word	0x08003815
 80037ec:	0800382d 	.word	0x0800382d
 80037f0:	0800382d 	.word	0x0800382d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f4:	4b89      	ldr	r3, [pc, #548]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	4a88      	ldr	r2, [pc, #544]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003800:	e015      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f001 ffaf 	bl	800576c <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003812:	e00c      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3324      	adds	r3, #36	; 0x24
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f002 f858 	bl	80058d0 <RCCEx_PLL3_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	75fb      	strb	r3, [r7, #23]
      break;
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800382c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003834:	4b79      	ldr	r3, [pc, #484]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003838:	f023 0207 	bic.w	r2, r3, #7
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	4976      	ldr	r1, [pc, #472]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	650b      	str	r3, [r1, #80]	; 0x50
 8003846:	e001      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003854:	2b00      	cmp	r3, #0
 8003856:	d042      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003860:	d02b      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003866:	d825      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003868:	2bc0      	cmp	r3, #192	; 0xc0
 800386a:	d028      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800386c:	2bc0      	cmp	r3, #192	; 0xc0
 800386e:	d821      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d016      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d81d      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d007      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003880:	e018      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003882:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	4a65      	ldr	r2, [pc, #404]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800388e:	e017      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f001 ff68 	bl	800576c <RCCEx_PLL2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038a0:	e00e      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3324      	adds	r3, #36	; 0x24
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f002 f811 	bl	80058d0 <RCCEx_PLL3_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038b2:	e005      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	75fb      	strb	r3, [r7, #23]
      break;
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038c6:	4b55      	ldr	r3, [pc, #340]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	4952      	ldr	r1, [pc, #328]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	650b      	str	r3, [r1, #80]	; 0x50
 80038d8:	e001      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d049      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038f4:	d030      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80038f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038fa:	d82a      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80038fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003900:	d02c      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003902:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003906:	d824      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390c:	d018      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800390e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003912:	d81e      	bhi.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391c:	d007      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800391e:	e018      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4b3e      	ldr	r3, [pc, #248]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	4a3d      	ldr	r2, [pc, #244]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800392c:	e017      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f001 ff19 	bl	800576c <RCCEx_PLL2_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800393e:	e00e      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3324      	adds	r3, #36	; 0x24
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f001 ffc2 	bl	80058d0 <RCCEx_PLL3_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003950:	e005      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
      break;
 8003956:	e002      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003958:	bf00      	nop
 800395a:	e000      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800395c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003964:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003972:	492a      	ldr	r1, [pc, #168]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	658b      	str	r3, [r1, #88]	; 0x58
 8003978:	e001      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397a:	7dfb      	ldrb	r3, [r7, #23]
 800397c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003986:	2b00      	cmp	r3, #0
 8003988:	d04c      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003994:	d030      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399a:	d82a      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800399c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a0:	d02c      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80039a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039a6:	d824      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ac:	d018      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80039ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039b2:	d81e      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039bc:	d007      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80039be:	e018      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039cc:	e017      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fec9 	bl	800576c <RCCEx_PLL2_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039de:	e00e      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3324      	adds	r3, #36	; 0x24
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 ff72 	bl	80058d0 <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039f0:	e005      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
      break;
 80039f6:	e002      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80039fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10d      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a12:	4902      	ldr	r1, [pc, #8]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	658b      	str	r3, [r1, #88]	; 0x58
 8003a18:	e004      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003a1a:	bf00      	nop
 8003a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d032      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	2b30      	cmp	r3, #48	; 0x30
 8003a36:	d01c      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a38:	2b30      	cmp	r3, #48	; 0x30
 8003a3a:	d817      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d00c      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d813      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d016      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d10f      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4c:	4baf      	ldr	r3, [pc, #700]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4aae      	ldr	r2, [pc, #696]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a58:	e00e      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fe83 	bl	800576c <RCCEx_PLL2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a6a:	e005      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a70:	e002      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a7e:	4ba3      	ldr	r3, [pc, #652]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8a:	49a0      	ldr	r1, [pc, #640]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a90:	e001      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d047      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aaa:	d030      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab0:	d82a      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ab2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ab6:	d02c      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003ab8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003abc:	d824      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac2:	d018      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac8:	d81e      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad2:	d007      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003ad4:	e018      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad6:	4b8d      	ldr	r3, [pc, #564]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	4a8c      	ldr	r2, [pc, #560]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ae2:	e017      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fe3e 	bl	800576c <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003af4:	e00e      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3324      	adds	r3, #36	; 0x24
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fee7 	bl	80058d0 <RCCEx_PLL3_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b06:	e005      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0c:	e002      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b1a:	4b7c      	ldr	r3, [pc, #496]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	4979      	ldr	r1, [pc, #484]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	650b      	str	r3, [r1, #80]	; 0x50
 8003b2c:	e001      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d049      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b46:	d02e      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4c:	d828      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b52:	d02a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003b54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b58:	d822      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b5e:	d026      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003b60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b64:	d81c      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b6a:	d010      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b70:	d816      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01d      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7a:	d111      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 fdf2 	bl	800576c <RCCEx_PLL2_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b8c:	e012      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3324      	adds	r3, #36	; 0x24
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 fe9b 	bl	80058d0 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b9e:	e009      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba4:	e006      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e004      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bba:	4b54      	ldr	r3, [pc, #336]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc6:	4951      	ldr	r1, [pc, #324]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	650b      	str	r3, [r1, #80]	; 0x50
 8003bcc:	e001      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04b      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be8:	d02e      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bee:	d828      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d02a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfa:	d822      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c00:	d026      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003c02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c06:	d81c      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0c:	d010      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c12:	d816      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01d      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003c18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c1c:	d111      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 fda1 	bl	800576c <RCCEx_PLL2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c2e:	e012      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3324      	adds	r3, #36	; 0x24
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f001 fe4a 	bl	80058d0 <RCCEx_PLL3_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c40:	e009      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
      break;
 8003c46:	e006      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c48:	bf00      	nop
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e002      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c5c:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c6a:	4928      	ldr	r1, [pc, #160]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	658b      	str	r3, [r1, #88]	; 0x58
 8003c70:	e001      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02f      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8a:	d00e      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c90:	d814      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d015      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9a:	d10f      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 fd5b 	bl	800576c <RCCEx_PLL2_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd6:	490d      	ldr	r1, [pc, #52]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	650b      	str	r3, [r1, #80]	; 0x50
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d033      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d81c      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d37 	.word	0x08003d37
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d1f 	.word	0x08003d1f
 8003d08:	08003d37 	.word	0x08003d37
 8003d0c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d10:	4bb8      	ldr	r3, [pc, #736]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4ab7      	ldr	r2, [pc, #732]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	2102      	movs	r1, #2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fd21 	bl	800576c <RCCEx_PLL2_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d3e:	4bad      	ldr	r3, [pc, #692]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	49aa      	ldr	r1, [pc, #680]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d50:	e001      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8086 	beq.w	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d64:	4ba4      	ldr	r3, [pc, #656]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4aa3      	ldr	r2, [pc, #652]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d70:	f7fe f9bc 	bl	80020ec <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d76:	e009      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d78:	f7fe f9b8 	bl	80020ec <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d902      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	75fb      	strb	r3, [r7, #23]
        break;
 8003d8a:	e005      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8c:	4b9a      	ldr	r3, [pc, #616]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d166      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d9e:	4b95      	ldr	r3, [pc, #596]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da8:	4053      	eors	r3, r2
 8003daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d013      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db2:	4b90      	ldr	r3, [pc, #576]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dbc:	4b8d      	ldr	r3, [pc, #564]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a8c      	ldr	r2, [pc, #560]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc8:	4b8a      	ldr	r3, [pc, #552]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a89      	ldr	r2, [pc, #548]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003dd4:	4a87      	ldr	r2, [pc, #540]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	d115      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fe f981 	bl	80020ec <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dec:	e00b      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f7fe f97d 	bl	80020ec <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d902      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	75fb      	strb	r3, [r7, #23]
            break;
 8003e04:	e005      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e06:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ed      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d126      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e26:	d10d      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003e28:	4b72      	ldr	r3, [pc, #456]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e36:	0919      	lsrs	r1, r3, #4
 8003e38:	4b70      	ldr	r3, [pc, #448]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	496d      	ldr	r1, [pc, #436]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	610b      	str	r3, [r1, #16]
 8003e42:	e005      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003e44:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	4a6a      	ldr	r2, [pc, #424]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e4e:	6113      	str	r3, [r2, #16]
 8003e50:	4b68      	ldr	r3, [pc, #416]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	4965      	ldr	r1, [pc, #404]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	670b      	str	r3, [r1, #112]	; 0x70
 8003e64:	e004      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	75bb      	strb	r3, [r7, #22]
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d07e      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e80:	2b28      	cmp	r3, #40	; 0x28
 8003e82:	d867      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003f5b 	.word	0x08003f5b
 8003e90:	08003f55 	.word	0x08003f55
 8003e94:	08003f55 	.word	0x08003f55
 8003e98:	08003f55 	.word	0x08003f55
 8003e9c:	08003f55 	.word	0x08003f55
 8003ea0:	08003f55 	.word	0x08003f55
 8003ea4:	08003f55 	.word	0x08003f55
 8003ea8:	08003f55 	.word	0x08003f55
 8003eac:	08003f31 	.word	0x08003f31
 8003eb0:	08003f55 	.word	0x08003f55
 8003eb4:	08003f55 	.word	0x08003f55
 8003eb8:	08003f55 	.word	0x08003f55
 8003ebc:	08003f55 	.word	0x08003f55
 8003ec0:	08003f55 	.word	0x08003f55
 8003ec4:	08003f55 	.word	0x08003f55
 8003ec8:	08003f55 	.word	0x08003f55
 8003ecc:	08003f43 	.word	0x08003f43
 8003ed0:	08003f55 	.word	0x08003f55
 8003ed4:	08003f55 	.word	0x08003f55
 8003ed8:	08003f55 	.word	0x08003f55
 8003edc:	08003f55 	.word	0x08003f55
 8003ee0:	08003f55 	.word	0x08003f55
 8003ee4:	08003f55 	.word	0x08003f55
 8003ee8:	08003f55 	.word	0x08003f55
 8003eec:	08003f5b 	.word	0x08003f5b
 8003ef0:	08003f55 	.word	0x08003f55
 8003ef4:	08003f55 	.word	0x08003f55
 8003ef8:	08003f55 	.word	0x08003f55
 8003efc:	08003f55 	.word	0x08003f55
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003f55 	.word	0x08003f55
 8003f08:	08003f55 	.word	0x08003f55
 8003f0c:	08003f5b 	.word	0x08003f5b
 8003f10:	08003f55 	.word	0x08003f55
 8003f14:	08003f55 	.word	0x08003f55
 8003f18:	08003f55 	.word	0x08003f55
 8003f1c:	08003f55 	.word	0x08003f55
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08003f55 	.word	0x08003f55
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	08003f5b 	.word	0x08003f5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 fc18 	bl	800576c <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f40:	e00c      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3324      	adds	r3, #36	; 0x24
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 fcc1 	bl	80058d0 <RCCEx_PLL3_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f62:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6e:	4921      	ldr	r1, [pc, #132]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	654b      	str	r3, [r1, #84]	; 0x54
 8003f74:	e001      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d03e      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d820      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003f8e:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f94:	08003fd7 	.word	0x08003fd7
 8003f98:	08003fad 	.word	0x08003fad
 8003f9c:	08003fbf 	.word	0x08003fbf
 8003fa0:	08003fd7 	.word	0x08003fd7
 8003fa4:	08003fd7 	.word	0x08003fd7
 8003fa8:	08003fd7 	.word	0x08003fd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 fbda 	bl	800576c <RCCEx_PLL2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fbc:	e00c      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3324      	adds	r3, #36	; 0x24
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fc83 	bl	80058d0 <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fce:	e003      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d110      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f023 0207 	bic.w	r2, r3, #7
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fea:	4902      	ldr	r1, [pc, #8]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	654b      	str	r3, [r1, #84]	; 0x54
 8003ff0:	e008      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	58024800 	.word	0x58024800
 8003ffc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d039      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	2b05      	cmp	r3, #5
 8004018:	d820      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004063 	.word	0x08004063
 8004024:	08004039 	.word	0x08004039
 8004028:	0800404b 	.word	0x0800404b
 800402c:	08004063 	.word	0x08004063
 8004030:	08004063 	.word	0x08004063
 8004034:	08004063 	.word	0x08004063
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f001 fb94 	bl	800576c <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004048:	e00c      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3324      	adds	r3, #36	; 0x24
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fc3d 	bl	80058d0 <RCCEx_PLL3_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800405a:	e003      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800406a:	4bb7      	ldr	r3, [pc, #732]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004078:	49b3      	ldr	r1, [pc, #716]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800407a:	4313      	orrs	r3, r2
 800407c:	658b      	str	r3, [r1, #88]	; 0x58
 800407e:	e001      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d04b      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409a:	d02e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800409c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a0:	d828      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a6:	d02a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d822      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80040ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b2:	d026      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80040b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040b8:	d81c      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80040ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040be:	d010      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80040c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c4:	d816      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01d      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80040ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ce:	d111      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 fb48 	bl	800576c <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040e0:	e012      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 fbf1 	bl	80058d0 <RCCEx_PLL3_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040f2:	e009      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
      break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800410e:	4b8e      	ldr	r3, [pc, #568]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411c:	498a      	ldr	r1, [pc, #552]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800411e:	4313      	orrs	r3, r2
 8004120:	654b      	str	r3, [r1, #84]	; 0x54
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d04b      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800413a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800413e:	d02e      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004140:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004144:	d828      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414a:	d02a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d822      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004152:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004156:	d026      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800415c:	d81c      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800415e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004162:	d010      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004168:	d816      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d111      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f001 faf6 	bl	800576c <RCCEx_PLL2_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004184:	e012      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3324      	adds	r3, #36	; 0x24
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f001 fb9f 	bl	80058d0 <RCCEx_PLL3_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004196:	e009      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
      break;
 800419c:	e006      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800419e:	bf00      	nop
 80041a0:	e004      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80041a2:	bf00      	nop
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80041aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041c0:	4961      	ldr	r1, [pc, #388]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	658b      	str	r3, [r1, #88]	; 0x58
 80041c6:	e001      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d04b      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041e2:	d02e      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80041e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041e8:	d828      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80041ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ee:	d02a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f4:	d822      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80041f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041fa:	d026      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80041fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004200:	d81c      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004206:	d010      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420c:	d816      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	d111      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f001 faa4 	bl	800576c <RCCEx_PLL2_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004228:	e012      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3324      	adds	r3, #36	; 0x24
 800422e:	2102      	movs	r1, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fb4d 	bl	80058d0 <RCCEx_PLL3_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800423a:	e009      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
      break;
 8004240:	e006      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004242:	bf00      	nop
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800424e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004256:	4b3c      	ldr	r3, [pc, #240]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004264:	4938      	ldr	r1, [pc, #224]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004266:	4313      	orrs	r3, r2
 8004268:	658b      	str	r3, [r1, #88]	; 0x58
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004286:	d10a      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3324      	adds	r3, #36	; 0x24
 800428c:	2102      	movs	r1, #2
 800428e:	4618      	mov	r0, r3
 8004290:	f001 fb1e 	bl	80058d0 <RCCEx_PLL3_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ac:	4926      	ldr	r1, [pc, #152]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c8:	d10a      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3324      	adds	r3, #36	; 0x24
 80042ce:	2102      	movs	r1, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fafd 	bl	80058d0 <RCCEx_PLL3_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ee:	4916      	ldr	r1, [pc, #88]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d036      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430a:	d01f      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800430c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004310:	d817      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431a:	d009      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800431c:	e011      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f001 fa21 	bl	800576c <RCCEx_PLL2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800432e:	e00e      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3324      	adds	r3, #36	; 0x24
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f001 faca 	bl	80058d0 <RCCEx_PLL3_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004340:	e005      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
      break;
 8004346:	e002      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004348:	58024400 	.word	0x58024400
      break;
 800434c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004354:	4b93      	ldr	r3, [pc, #588]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004362:	4990      	ldr	r1, [pc, #576]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	658b      	str	r3, [r1, #88]	; 0x58
 8004368:	e001      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d033      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004380:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004384:	d01c      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800438a:	d816      	bhi.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800438c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004390:	d003      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004396:	d007      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004398:	e00f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439a:	4b82      	ldr	r3, [pc, #520]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	4a81      	ldr	r2, [pc, #516]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80043a6:	e00c      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3324      	adds	r3, #36	; 0x24
 80043ac:	2101      	movs	r1, #1
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 fa8e 	bl	80058d0 <RCCEx_PLL3_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80043b8:	e003      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
      break;
 80043be:	e000      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80043c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c8:	4b76      	ldr	r3, [pc, #472]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d6:	4973      	ldr	r1, [pc, #460]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	654b      	str	r3, [r1, #84]	; 0x54
 80043dc:	e001      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d029      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80043f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fa:	d007      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80043fc:	e00f      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fe:	4b69      	ldr	r3, [pc, #420]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a68      	ldr	r2, [pc, #416]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800440a:	e00b      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	2102      	movs	r1, #2
 8004412:	4618      	mov	r0, r3
 8004414:	f001 f9aa 	bl	800576c <RCCEx_PLL2_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800441c:	e002      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
      break;
 8004422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800442a:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	495b      	ldr	r1, [pc, #364]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800443c:	e001      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3324      	adds	r3, #36	; 0x24
 8004452:	2102      	movs	r1, #2
 8004454:	4618      	mov	r0, r3
 8004456:	f001 fa3b 	bl	80058d0 <RCCEx_PLL3_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d030      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004478:	d017      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800447a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800447e:	d811      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004484:	d013      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448a:	d80b      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004494:	d106      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004496:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	4a42      	ldr	r2, [pc, #264]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800449c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80044a2:	e007      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
      break;
 80044a8:	e004      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80044b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044ba:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c6:	4937      	ldr	r1, [pc, #220]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	654b      	str	r3, [r1, #84]	; 0x54
 80044cc:	e001      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
 80044d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044de:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	492e      	ldr	r1, [pc, #184]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044fc:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800450a:	4926      	ldr	r1, [pc, #152]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800451c:	4b21      	ldr	r3, [pc, #132]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800451e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004520:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004528:	491e      	ldr	r1, [pc, #120]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800453a:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4a19      	ldr	r2, [pc, #100]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004540:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004544:	6113      	str	r3, [r2, #16]
 8004546:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004550:	4914      	ldr	r1, [pc, #80]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004552:	4313      	orrs	r3, r2
 8004554:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da08      	bge.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800455e:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	490e      	ldr	r1, [pc, #56]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800456c:	4313      	orrs	r3, r2
 800456e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800457c:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	4906      	ldr	r1, [pc, #24]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004590:	7dbb      	ldrb	r3, [r7, #22]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	58024400 	.word	0x58024400

080045a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b090      	sub	sp, #64	; 0x40
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	f040 8095 	bne.w	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80045ba:	4bae      	ldr	r3, [pc, #696]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	f200 8088 	bhi.w	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	080045e9 	.word	0x080045e9
 80045d8:	08004611 	.word	0x08004611
 80045dc:	08004639 	.word	0x08004639
 80045e0:	080046d5 	.word	0x080046d5
 80045e4:	08004661 	.word	0x08004661

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80045e8:	4ba2      	ldr	r3, [pc, #648]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045f4:	d108      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 ff64 	bl	80054c8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004604:	f000 bc95 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800460c:	f000 bc91 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004610:	4b98      	ldr	r3, [pc, #608]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800461c:	d108      	bne.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800461e:	f107 0318 	add.w	r3, r7, #24
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fca8 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800462c:	f000 bc81 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004634:	f000 bc7d 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004638:	4b8e      	ldr	r3, [pc, #568]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004644:	d108      	bne.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004646:	f107 030c 	add.w	r3, r7, #12
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fde8 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004654:	f000 bc6d 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800465c:	f000 bc69 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004660:	4b84      	ldr	r3, [pc, #528]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004668:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800466a:	4b82      	ldr	r3, [pc, #520]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d10c      	bne.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800467c:	4b7d      	ldr	r3, [pc, #500]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	08db      	lsrs	r3, r3, #3
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	4a7c      	ldr	r2, [pc, #496]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468e:	e01f      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004690:	4b78      	ldr	r3, [pc, #480]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800469c:	d106      	bne.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a4:	d102      	bne.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80046a6:	4b75      	ldr	r3, [pc, #468]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80046a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046aa:	e011      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046ac:	4b71      	ldr	r3, [pc, #452]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046b8:	d106      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c0:	d102      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80046c2:	4b6f      	ldr	r3, [pc, #444]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c6:	e003      	b.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80046cc:	f000 bc31 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80046d0:	f000 bc2f 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80046d4:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046d8:	f000 bc2b 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046e0:	f000 bc27 	b.w	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ea:	f040 8095 	bne.w	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80046ee:	4b61      	ldr	r3, [pc, #388]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80046f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fe:	d04d      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004706:	f200 8084 	bhi.w	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800470a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470c:	2bc0      	cmp	r3, #192	; 0xc0
 800470e:	d07d      	beq.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	2bc0      	cmp	r3, #192	; 0xc0
 8004714:	d87d      	bhi.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b80      	cmp	r3, #128	; 0x80
 800471a:	d02d      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	2b80      	cmp	r3, #128	; 0x80
 8004720:	d877      	bhi.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d012      	beq.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800472e:	e070      	b.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800473c:	d107      	bne.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800473e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fec0 	bl	80054c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800474c:	e3f1      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004752:	e3ee      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004754:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800475c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004760:	d107      	bne.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004762:	f107 0318 	add.w	r3, r7, #24
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fc06 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004770:	e3df      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004776:	e3dc      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004778:	4b3e      	ldr	r3, [pc, #248]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004784:	d107      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004786:	f107 030c 	add.w	r3, r7, #12
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fd48 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004794:	e3cd      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800479a:	e3ca      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800479c:	4b35      	ldr	r3, [pc, #212]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800479e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047a6:	4b33      	ldr	r3, [pc, #204]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d10c      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047b8:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ca:	e01e      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80047cc:	4b29      	ldr	r3, [pc, #164]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d8:	d106      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047e0:	d102      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80047e2:	4b26      	ldr	r3, [pc, #152]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80047e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e6:	e010      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80047e8:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047f4:	d106      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80047f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fc:	d102      	bne.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004802:	e002      	b.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004808:	e393      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800480a:	e392      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800480c:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004810:	e38f      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004816:	e38c      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	f040 80a7 	bne.w	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004822:	4b14      	ldr	r3, [pc, #80]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800482a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004832:	d05f      	beq.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800483a:	f200 8096 	bhi.w	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004844:	f000 808e 	beq.w	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800484e:	f200 808c 	bhi.w	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004858:	d03a      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004860:	f200 8083 	bhi.w	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00e      	beq.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004870:	d01c      	beq.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004872:	e07a      	b.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004874:	58024400 	.word	0x58024400
 8004878:	03d09000 	.word	0x03d09000
 800487c:	003d0900 	.word	0x003d0900
 8004880:	007a1200 	.word	0x007a1200
 8004884:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004888:	4baa      	ldr	r3, [pc, #680]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004894:	d107      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fe14 	bl	80054c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048a4:	e345      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048aa:	e342      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048ac:	4ba1      	ldr	r3, [pc, #644]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b8:	d107      	bne.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048ba:	f107 0318 	add.w	r3, r7, #24
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fb5a 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048c8:	e333      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048ce:	e330      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048d0:	4b98      	ldr	r3, [pc, #608]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048dc:	d107      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048de:	f107 030c 	add.w	r3, r7, #12
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fc9c 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048ec:	e321      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048f2:	e31e      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80048f4:	4b8f      	ldr	r3, [pc, #572]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80048fe:	4b8d      	ldr	r3, [pc, #564]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d10c      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d109      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004910:	4b88      	ldr	r3, [pc, #544]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	4a87      	ldr	r2, [pc, #540]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004922:	e01e      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004924:	4b83      	ldr	r3, [pc, #524]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004930:	d106      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8004932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004938:	d102      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800493a:	4b80      	ldr	r3, [pc, #512]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800493e:	e010      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004940:	4b7c      	ldr	r3, [pc, #496]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800494c:	d106      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004954:	d102      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004956:	4b7a      	ldr	r3, [pc, #488]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495a:	e002      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004960:	e2e7      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004962:	e2e6      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004964:	4b77      	ldr	r3, [pc, #476]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004968:	e2e3      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800496e:	e2e0      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004976:	f040 809c 	bne.w	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800497a:	4b6e      	ldr	r3, [pc, #440]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004982:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800498a:	d054      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004992:	f200 808b 	bhi.w	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800499c:	f000 8083 	beq.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049a6:	f200 8081 	bhi.w	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049b0:	d02f      	beq.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049b8:	d878      	bhi.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049c6:	d012      	beq.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80049c8:	e070      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049ca:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049d6:	d107      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fd73 	bl	80054c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049e6:	e2a4      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ec:	e2a1      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049ee:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049fa:	d107      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049fc:	f107 0318 	add.w	r3, r7, #24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fab9 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004a0a:	e292      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a10:	e28f      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a12:	4b48      	ldr	r3, [pc, #288]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a20:	f107 030c 	add.w	r3, r7, #12
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fbfb 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a2e:	e280      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a34:	e27d      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a36:	4b3f      	ldr	r3, [pc, #252]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a40:	4b3c      	ldr	r3, [pc, #240]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d10c      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a52:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	08db      	lsrs	r3, r3, #3
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	4a36      	ldr	r2, [pc, #216]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a64:	e01e      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d106      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a7c:	4b2f      	ldr	r3, [pc, #188]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a80:	e010      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a82:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a96:	d102      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a98:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9c:	e002      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004aa2:	e246      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004aa4:	e245      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004aa6:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aaa:	e242      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ab0:	e23f      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab8:	f040 80a8 	bne.w	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004abc:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004acc:	d060      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad4:	f200 8097 	bhi.w	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ade:	f000 808f 	beq.w	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ae8:	f200 808d 	bhi.w	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af2:	d03b      	beq.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	f200 8084 	bhi.w	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d01d      	beq.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004b0c:	e07b      	b.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fcd1 	bl	80054c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b2a:	e202      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b30:	e1ff      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b32:	bf00      	nop
 8004b34:	58024400 	.word	0x58024400
 8004b38:	03d09000 	.word	0x03d09000
 8004b3c:	003d0900 	.word	0x003d0900
 8004b40:	007a1200 	.word	0x007a1200
 8004b44:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b48:	4ba3      	ldr	r3, [pc, #652]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b54:	d107      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b56:	f107 0318 	add.w	r3, r7, #24
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fa0c 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b64:	e1e5      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6a:	e1e2      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b6c:	4b9a      	ldr	r3, [pc, #616]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b78:	d107      	bne.n	8004b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b7a:	f107 030c 	add.w	r3, r7, #12
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fb4e 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b88:	e1d3      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b8e:	e1d0      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004b90:	4b91      	ldr	r3, [pc, #580]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b9a:	4b8f      	ldr	r3, [pc, #572]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bac:	4b8a      	ldr	r3, [pc, #552]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	08db      	lsrs	r3, r3, #3
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	4a89      	ldr	r2, [pc, #548]	; (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bbe:	e01e      	b.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bc0:	4b85      	ldr	r3, [pc, #532]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bcc:	d106      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bd4:	d102      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004bd6:	4b82      	ldr	r3, [pc, #520]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bda:	e010      	b.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004bdc:	4b7e      	ldr	r3, [pc, #504]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bf0:	d102      	bne.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004bf2:	4b7c      	ldr	r3, [pc, #496]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf6:	e002      	b.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004bfc:	e199      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004bfe:	e198      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c00:	4b79      	ldr	r3, [pc, #484]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c04:	e195      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c0a:	e192      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c12:	d173      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004c14:	4b70      	ldr	r3, [pc, #448]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c24:	d02f      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c2c:	d863      	bhi.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3a:	d012      	beq.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004c3c:	e05b      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c3e:	4b66      	ldr	r3, [pc, #408]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c4c:	f107 0318 	add.w	r3, r7, #24
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f991 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c5a:	e16a      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c60:	e167      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c62:	4b5d      	ldr	r3, [pc, #372]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6e:	d107      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c70:	f107 030c 	add.w	r3, r7, #12
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fad3 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c7e:	e158      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c84:	e155      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c86:	4b54      	ldr	r3, [pc, #336]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c90:	4b51      	ldr	r3, [pc, #324]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ca2:	4b4d      	ldr	r3, [pc, #308]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	08db      	lsrs	r3, r3, #3
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	4a4b      	ldr	r2, [pc, #300]	; (8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb4:	e01e      	b.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cb6:	4b48      	ldr	r3, [pc, #288]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cca:	d102      	bne.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004ccc:	4b44      	ldr	r3, [pc, #272]	; (8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd0:	e010      	b.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cd2:	4b41      	ldr	r3, [pc, #260]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cde:	d106      	bne.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce6:	d102      	bne.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ce8:	4b3e      	ldr	r3, [pc, #248]	; (8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cec:	e002      	b.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004cf2:	e11e      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004cf4:	e11d      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cfa:	e11a      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d02:	d133      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004d04:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1a:	d012      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004d1c:	e023      	b.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d1e:	4b2e      	ldr	r3, [pc, #184]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fbc9 	bl	80054c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d3a:	e0fa      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d40:	e0f7      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d42:	4b25      	ldr	r3, [pc, #148]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d50:	f107 0318 	add.w	r3, r7, #24
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 f90f 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d5e:	e0e8      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d64:	e0e5      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d6a:	e0e2      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d72:	f040 808f 	bne.w	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004d76:	4b18      	ldr	r3, [pc, #96]	; (8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d86:	d075      	beq.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d8e:	d87e      	bhi.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d060      	beq.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9e:	d876      	bhi.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004da6:	d045      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dae:	d86e      	bhi.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004db6:	d02b      	beq.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dbe:	d866      	bhi.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dcc:	d00e      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004dce:	e05e      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004dd0:	f000 f8bc 	bl	8004f4c <HAL_RCCEx_GetD3PCLK1Freq>
 8004dd4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004dd6:	e0ac      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	03d09000 	.word	0x03d09000
 8004de0:	003d0900 	.word	0x003d0900
 8004de4:	007a1200 	.word	0x007a1200
 8004de8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dec:	4b53      	ldr	r3, [pc, #332]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df8:	d107      	bne.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dfa:	f107 0318 	add.w	r3, r7, #24
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f8ba 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e08:	e093      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e0e:	e090      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e10:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e1c:	d107      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e1e:	f107 030c 	add.w	r3, r7, #12
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f9fc 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e2c:	e081      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e32:	e07e      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e34:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d109      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e40:	4b3e      	ldr	r3, [pc, #248]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	4a3d      	ldr	r2, [pc, #244]	; (8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e52:	e06e      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e58:	e06b      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004e5a:	4b38      	ldr	r3, [pc, #224]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e66:	d102      	bne.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004e68:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e6c:	e061      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e72:	e05e      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e74:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e80:	d102      	bne.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8004e82:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e86:	e054      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e8c:	e051      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e92:	e04e      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d148      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004e9c:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ea4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eac:	d02a      	beq.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb4:	d838      	bhi.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004ec4:	e030      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed2:	d102      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8004ed4:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ed8:	e02b      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ede:	e028      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ee0:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eec:	d107      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fae8 	bl	80054c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004efc:	e019      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f02:	e016      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f04:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f10:	d107      	bne.n	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f12:	f107 0318 	add.w	r3, r7, #24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f82e 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f20:	e007      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f26:	e004      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f2c:	e001      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3740      	adds	r7, #64	; 0x40
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	03d09000 	.word	0x03d09000
 8004f44:	003d0900 	.word	0x003d0900
 8004f48:	007a1200 	.word	0x007a1200

08004f4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f50:	f7fe fb8e 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4904      	ldr	r1, [pc, #16]	; (8004f74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	58024400 	.word	0x58024400
 8004f74:	0800f338 	.word	0x0800f338

08004f78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b089      	sub	sp, #36	; 0x24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f80:	4ba1      	ldr	r3, [pc, #644]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004f8a:	4b9f      	ldr	r3, [pc, #636]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	0b1b      	lsrs	r3, r3, #12
 8004f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f96:	4b9c      	ldr	r3, [pc, #624]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004fa2:	4b99      	ldr	r3, [pc, #612]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	08db      	lsrs	r3, r3, #3
 8004fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	fb02 f303 	mul.w	r3, r2, r3
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8111 	beq.w	80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	f000 8083 	beq.w	80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	f200 80a1 	bhi.w	8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d056      	beq.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004fe2:	e099      	b.n	8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fe4:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d02d      	beq.n	800504c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ff0:	4b85      	ldr	r3, [pc, #532]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	08db      	lsrs	r3, r3, #3
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	4a84      	ldr	r2, [pc, #528]	; (800520c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	ee07 3a90 	vmov	s15, r3
 8005008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501a:	4b7b      	ldr	r3, [pc, #492]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502a:	ed97 6a03 	vldr	s12, [r7, #12]
 800502e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800503e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800504a:	e087      	b.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800505a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505e:	4b6a      	ldr	r3, [pc, #424]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005072:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800508e:	e065      	b.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800509e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a2:	4b59      	ldr	r3, [pc, #356]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050d2:	e043      	b.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800521c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80050e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e6:	4b48      	ldr	r3, [pc, #288]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005116:	e021      	b.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512a:	4b37      	ldr	r3, [pc, #220]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513a:	ed97 6a03 	vldr	s12, [r7, #12]
 800513e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800514e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800515a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800515c:	4b2a      	ldr	r3, [pc, #168]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	0a5b      	lsrs	r3, r3, #9
 8005162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005176:	edd7 6a07 	vldr	s13, [r7, #28]
 800517a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800517e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005182:	ee17 2a90 	vmov	r2, s15
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800518a:	4b1f      	ldr	r3, [pc, #124]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	0c1b      	lsrs	r3, r3, #16
 8005190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005194:	ee07 3a90 	vmov	s15, r3
 8005198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b0:	ee17 2a90 	vmov	r2, s15
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	0e1b      	lsrs	r3, r3, #24
 80051be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051de:	ee17 2a90 	vmov	r2, s15
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80051e6:	e008      	b.n	80051fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
}
 80051fa:	bf00      	nop
 80051fc:	3724      	adds	r7, #36	; 0x24
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	58024400 	.word	0x58024400
 800520c:	03d09000 	.word	0x03d09000
 8005210:	46000000 	.word	0x46000000
 8005214:	4c742400 	.word	0x4c742400
 8005218:	4a742400 	.word	0x4a742400
 800521c:	4af42400 	.word	0x4af42400

08005220 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	; 0x24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005228:	4ba1      	ldr	r3, [pc, #644]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005232:	4b9f      	ldr	r3, [pc, #636]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	0d1b      	lsrs	r3, r3, #20
 8005238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800523c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800523e:	4b9c      	ldr	r3, [pc, #624]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	0a1b      	lsrs	r3, r3, #8
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800524a:	4b99      	ldr	r3, [pc, #612]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	08db      	lsrs	r3, r3, #3
 8005250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8111 	beq.w	8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b02      	cmp	r3, #2
 8005272:	f000 8083 	beq.w	800537c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b02      	cmp	r3, #2
 800527a:	f200 80a1 	bhi.w	80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d056      	beq.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800528a:	e099      	b.n	80053c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800528c:	4b88      	ldr	r3, [pc, #544]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d02d      	beq.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005298:	4b85      	ldr	r3, [pc, #532]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	08db      	lsrs	r3, r3, #3
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	4a84      	ldr	r2, [pc, #528]	; (80054b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
 80052a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	ee07 3a90 	vmov	s15, r3
 80052b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80052f2:	e087      	b.n	8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b6a      	ldr	r3, [pc, #424]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a03 	vldr	s12, [r7, #12]
 800531a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005336:	e065      	b.n	8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534a:	4b59      	ldr	r3, [pc, #356]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535a:	ed97 6a03 	vldr	s12, [r7, #12]
 800535e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800537a:	e043      	b.n	8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800538a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538e:	4b48      	ldr	r3, [pc, #288]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539e:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053be:	e021      	b.n	8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d2:	4b37      	ldr	r3, [pc, #220]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005402:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005404:	4b2a      	ldr	r3, [pc, #168]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	0a5b      	lsrs	r3, r3, #9
 800540a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800541a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800541e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800542a:	ee17 2a90 	vmov	r2, s15
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005432:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800544c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005458:	ee17 2a90 	vmov	r2, s15
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005460:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	0e1b      	lsrs	r3, r3, #24
 8005466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800547a:	edd7 6a07 	vldr	s13, [r7, #28]
 800547e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005486:	ee17 2a90 	vmov	r2, s15
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800548e:	e008      	b.n	80054a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]
}
 80054a2:	bf00      	nop
 80054a4:	3724      	adds	r7, #36	; 0x24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	58024400 	.word	0x58024400
 80054b4:	03d09000 	.word	0x03d09000
 80054b8:	46000000 	.word	0x46000000
 80054bc:	4c742400 	.word	0x4c742400
 80054c0:	4a742400 	.word	0x4a742400
 80054c4:	4af42400 	.word	0x4af42400

080054c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b089      	sub	sp, #36	; 0x24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054d0:	4ba0      	ldr	r3, [pc, #640]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80054da:	4b9e      	ldr	r3, [pc, #632]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80054e6:	4b9b      	ldr	r3, [pc, #620]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80054f0:	4b98      	ldr	r3, [pc, #608]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	08db      	lsrs	r3, r3, #3
 80054f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	ee07 3a90 	vmov	s15, r3
 8005504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005508:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 8111 	beq.w	8005736 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b02      	cmp	r3, #2
 8005518:	f000 8083 	beq.w	8005622 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b02      	cmp	r3, #2
 8005520:	f200 80a1 	bhi.w	8005666 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d056      	beq.n	80055de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005530:	e099      	b.n	8005666 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005532:	4b88      	ldr	r3, [pc, #544]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d02d      	beq.n	800559a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800553e:	4b85      	ldr	r3, [pc, #532]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	08db      	lsrs	r3, r3, #3
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	4a83      	ldr	r2, [pc, #524]	; (8005758 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800554a:	fa22 f303 	lsr.w	r3, r2, r3
 800554e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005568:	4b7a      	ldr	r3, [pc, #488]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005578:	ed97 6a03 	vldr	s12, [r7, #12]
 800557c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800575c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800558c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005594:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005598:	e087      	b.n	80056aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005760 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80055a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ac:	4b69      	ldr	r3, [pc, #420]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80055c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800575c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055dc:	e065      	b.n	80056aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	ee07 3a90 	vmov	s15, r3
 80055e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005764 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80055ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f0:	4b58      	ldr	r3, [pc, #352]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005600:	ed97 6a03 	vldr	s12, [r7, #12]
 8005604:	eddf 5a55 	vldr	s11, [pc, #340]	; 800575c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005620:	e043      	b.n	80056aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005768 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005634:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005644:	ed97 6a03 	vldr	s12, [r7, #12]
 8005648:	eddf 5a44 	vldr	s11, [pc, #272]	; 800575c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800564c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005654:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005660:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005664:	e021      	b.n	80056aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005670:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005760 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005678:	4b36      	ldr	r3, [pc, #216]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005688:	ed97 6a03 	vldr	s12, [r7, #12]
 800568c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800575c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005690:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005694:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80056aa:	4b2a      	ldr	r3, [pc, #168]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	0a5b      	lsrs	r3, r3, #9
 80056b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d0:	ee17 2a90 	vmov	r2, s15
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80056d8:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	0c1b      	lsrs	r3, r3, #16
 80056de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80056f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056fe:	ee17 2a90 	vmov	r2, s15
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005706:	4b13      	ldr	r3, [pc, #76]	; (8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	0e1b      	lsrs	r3, r3, #24
 800570c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005710:	ee07 3a90 	vmov	s15, r3
 8005714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800571c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005720:	edd7 6a07 	vldr	s13, [r7, #28]
 8005724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800572c:	ee17 2a90 	vmov	r2, s15
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005734:	e008      	b.n	8005748 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	609a      	str	r2, [r3, #8]
}
 8005748:	bf00      	nop
 800574a:	3724      	adds	r7, #36	; 0x24
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	58024400 	.word	0x58024400
 8005758:	03d09000 	.word	0x03d09000
 800575c:	46000000 	.word	0x46000000
 8005760:	4c742400 	.word	0x4c742400
 8005764:	4a742400 	.word	0x4a742400
 8005768:	4af42400 	.word	0x4af42400

0800576c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800577a:	4b53      	ldr	r3, [pc, #332]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b03      	cmp	r3, #3
 8005784:	d101      	bne.n	800578a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e099      	b.n	80058be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800578a:	4b4f      	ldr	r3, [pc, #316]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a4e      	ldr	r2, [pc, #312]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005790:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005796:	f7fc fca9 	bl	80020ec <HAL_GetTick>
 800579a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800579c:	e008      	b.n	80057b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800579e:	f7fc fca5 	bl	80020ec <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e086      	b.n	80058be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057b0:	4b45      	ldr	r3, [pc, #276]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f0      	bne.n	800579e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80057bc:	4b42      	ldr	r3, [pc, #264]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	031b      	lsls	r3, r3, #12
 80057ca:	493f      	ldr	r1, [pc, #252]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	628b      	str	r3, [r1, #40]	; 0x28
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	3b01      	subs	r3, #1
 80057e0:	025b      	lsls	r3, r3, #9
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	061b      	lsls	r3, r3, #24
 80057fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005800:	4931      	ldr	r1, [pc, #196]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005806:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	492d      	ldr	r1, [pc, #180]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005814:	4313      	orrs	r3, r2
 8005816:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005818:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	f023 0220 	bic.w	r2, r3, #32
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	4928      	ldr	r1, [pc, #160]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800582a:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	4a26      	ldr	r2, [pc, #152]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005830:	f023 0310 	bic.w	r3, r3, #16
 8005834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005836:	4b24      	ldr	r3, [pc, #144]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800583a:	4b24      	ldr	r3, [pc, #144]	; (80058cc <RCCEx_PLL2_Config+0x160>)
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	69d2      	ldr	r2, [r2, #28]
 8005842:	00d2      	lsls	r2, r2, #3
 8005844:	4920      	ldr	r1, [pc, #128]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800584a:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005850:	f043 0310 	orr.w	r3, r3, #16
 8005854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800585c:	4b1a      	ldr	r3, [pc, #104]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005868:	e00f      	b.n	800588a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d106      	bne.n	800587e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005870:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800587a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800587c:	e005      	b.n	800588a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	4a11      	ldr	r2, [pc, #68]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005888:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800588a:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a0e      	ldr	r2, [pc, #56]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 8005890:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005896:	f7fc fc29 	bl	80020ec <HAL_GetTick>
 800589a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800589c:	e008      	b.n	80058b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800589e:	f7fc fc25 	bl	80020ec <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e006      	b.n	80058be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <RCCEx_PLL2_Config+0x15c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0f0      	beq.n	800589e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
 80058cc:	ffff0007 	.word	0xffff0007

080058d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058de:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d101      	bne.n	80058ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e099      	b.n	8005a22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80058ee:	4b4f      	ldr	r3, [pc, #316]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a4e      	ldr	r2, [pc, #312]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80058f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fa:	f7fc fbf7 	bl	80020ec <HAL_GetTick>
 80058fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005900:	e008      	b.n	8005914 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005902:	f7fc fbf3 	bl	80020ec <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e086      	b.n	8005a22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005914:	4b45      	ldr	r3, [pc, #276]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f0      	bne.n	8005902 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005920:	4b42      	ldr	r3, [pc, #264]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	051b      	lsls	r3, r3, #20
 800592e:	493f      	ldr	r1, [pc, #252]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 8005930:	4313      	orrs	r3, r2
 8005932:	628b      	str	r3, [r1, #40]	; 0x28
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	3b01      	subs	r3, #1
 800593a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	3b01      	subs	r3, #1
 8005944:	025b      	lsls	r3, r3, #9
 8005946:	b29b      	uxth	r3, r3
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	3b01      	subs	r3, #1
 8005950:	041b      	lsls	r3, r3, #16
 8005952:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	3b01      	subs	r3, #1
 800595e:	061b      	lsls	r3, r3, #24
 8005960:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005964:	4931      	ldr	r1, [pc, #196]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800596a:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	492d      	ldr	r1, [pc, #180]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 8005978:	4313      	orrs	r3, r2
 800597a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800597c:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	4928      	ldr	r1, [pc, #160]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 800598a:	4313      	orrs	r3, r2
 800598c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800598e:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	4a26      	ldr	r2, [pc, #152]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 8005994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800599a:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 800599c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800599e:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <RCCEx_PLL3_Config+0x160>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	69d2      	ldr	r2, [r2, #28]
 80059a6:	00d2      	lsls	r2, r2, #3
 80059a8:	4920      	ldr	r1, [pc, #128]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80059ae:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d106      	bne.n	80059ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80059c0:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059cc:	e00f      	b.n	80059ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d106      	bne.n	80059e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80059d4:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	4a14      	ldr	r2, [pc, #80]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059e0:	e005      	b.n	80059ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80059e2:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	4a11      	ldr	r2, [pc, #68]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80059ee:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a0e      	ldr	r2, [pc, #56]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 80059f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059fa:	f7fc fb77 	bl	80020ec <HAL_GetTick>
 80059fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a00:	e008      	b.n	8005a14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a02:	f7fc fb73 	bl	80020ec <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e006      	b.n	8005a22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <RCCEx_PLL3_Config+0x15c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	ffff0007 	.word	0xffff0007

08005a34 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e075      	b.n	8005b32 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d105      	bne.n	8005a5e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fb fd59 	bl	8001510 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2203      	movs	r2, #3
 8005a62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f868 	bl	8005b3c <HAL_SD_InitCard>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e05d      	b.n	8005b32 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fdad 	bl	80065dc <HAL_SD_GetCardStatus>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e052      	b.n	8005b32 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005a8c:	7e3b      	ldrb	r3, [r7, #24]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005a92:	7e7b      	ldrb	r3, [r7, #25]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10a      	bne.n	8005ab6 <HAL_SD_Init+0x82>
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <HAL_SD_Init+0x78>
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ab4:	e00b      	b.n	8005ace <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d104      	bne.n	8005ac8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58
 8005ac6:	e002      	b.n	8005ace <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fe63 	bl	80067a0 <HAL_SD_ConfigWideBusOperation>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e026      	b.n	8005b32 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005ae4:	f7fc fb02 	bl	80020ec <HAL_GetTick>
 8005ae8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005aea:	e011      	b.n	8005b10 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005aec:	f7fc fafe 	bl	80020ec <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005afa:	d109      	bne.n	8005b10 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b02:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e010      	b.n	8005b32 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 ff55 	bl	80069c0 <HAL_SD_GetCardState>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d1e7      	bne.n	8005aec <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3728      	adds	r7, #40	; 0x28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005b3c:	b590      	push	{r4, r7, lr}
 8005b3e:	b08d      	sub	sp, #52	; 0x34
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005b54:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005b58:	f7fe fd26 	bl	80045a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b5c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b72:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e06a      	b.n	8005c4e <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	0a1b      	lsrs	r3, r3, #8
 8005b7c:	4a36      	ldr	r2, [pc, #216]	; (8005c58 <HAL_SD_InitCard+0x11c>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681c      	ldr	r4, [r3, #0]
 8005b8a:	466a      	mov	r2, sp
 8005b8c:	f107 0318 	add.w	r3, r7, #24
 8005b90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b94:	e882 0003 	stmia.w	r2, {r0, r1}
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f003 f86a 	bl	8008c78 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f003 f8ad 	bl	8008d08 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005bba:	4a28      	ldr	r2, [pc, #160]	; (8005c5c <HAL_SD_InitCard+0x120>)
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fc fa9d 	bl	8002104 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 ffd4 	bl	8006b78 <SD_PowerON>
 8005bd0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e02e      	b.n	8005c4e <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 ff05 	bl	8006a00 <SD_InitCard>
 8005bf6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00b      	beq.n	8005c16 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e01b      	b.n	8005c4e <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f003 f908 	bl	8008e34 <SDMMC_CmdBlockLength>
 8005c24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00f      	beq.n	8005c4c <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0b      	ldr	r2, [pc, #44]	; (8005c60 <HAL_SD_InitCard+0x124>)
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	372c      	adds	r7, #44	; 0x2c
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd90      	pop	{r4, r7, pc}
 8005c56:	bf00      	nop
 8005c58:	014f8b59 	.word	0x014f8b59
 8005c5c:	00012110 	.word	0x00012110
 8005c60:	1fe00fff 	.word	0x1fe00fff

08005c64 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b092      	sub	sp, #72	; 0x48
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c72:	f7fc fa3b 	bl	80020ec <HAL_GetTick>
 8005c76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d107      	bne.n	8005c96 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e167      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	f040 815a 	bne.w	8005f58 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	441a      	add	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d907      	bls.n	8005cc8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e14e      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2203      	movs	r2, #3
 8005ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d002      	beq.n	8005ce6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	025b      	lsls	r3, r3, #9
 8005ce4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cea:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	025b      	lsls	r3, r3, #9
 8005cf0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005cf2:	2390      	movs	r3, #144	; 0x90
 8005cf4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f107 0214 	add.w	r2, r7, #20
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f003 f865 	bl	8008ddc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d20:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d90a      	bls.n	8005d3e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d34:	4618      	mov	r0, r3
 8005d36:	f003 f8c3 	bl	8008ec0 <SDMMC_CmdReadMultiBlock>
 8005d3a:	6478      	str	r0, [r7, #68]	; 0x44
 8005d3c:	e009      	b.n	8005d52 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f003 f895 	bl	8008e7a <SDMMC_CmdReadSingleBlock>
 8005d50:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a84      	ldr	r2, [pc, #528]	; (8005f70 <HAL_SD_ReadBlocks+0x30c>)
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d66:	431a      	orrs	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e0f3      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d82:	e058      	b.n	8005e36 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d033      	beq.n	8005dfa <HAL_SD_ReadBlocks+0x196>
 8005d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d94:	2b1f      	cmp	r3, #31
 8005d96:	d930      	bls.n	8005dfa <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d9c:	e027      	b.n	8005dee <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f002 ff92 	bl	8008ccc <SDMMC_ReadFIFO>
 8005da8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	3301      	adds	r3, #1
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	0c1b      	lsrs	r3, r3, #16
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	0e1b      	lsrs	r3, r3, #24
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de4:	3301      	adds	r3, #1
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dea:	3301      	adds	r3, #1
 8005dec:	643b      	str	r3, [r7, #64]	; 0x40
 8005dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	d9d4      	bls.n	8005d9e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df6:	3b20      	subs	r3, #32
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005dfa:	f7fc f977 	bl	80020ec <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d902      	bls.n	8005e10 <HAL_SD_ReadBlocks+0x1ac>
 8005e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d112      	bne.n	8005e36 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a56      	ldr	r2, [pc, #344]	; (8005f70 <HAL_SD_ReadBlocks+0x30c>)
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e097      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d09f      	beq.n	8005d84 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e52:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d022      	beq.n	8005ea8 <HAL_SD_ReadBlocks+0x244>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d91f      	bls.n	8005ea8 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d01b      	beq.n	8005ea8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f003 f88d 	bl	8008f94 <SDMMC_CmdStopTransfer>
 8005e7a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d012      	beq.n	8005ea8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3a      	ldr	r2, [pc, #232]	; (8005f70 <HAL_SD_ReadBlocks+0x30c>)
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e05e      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d012      	beq.n	8005edc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2d      	ldr	r2, [pc, #180]	; (8005f70 <HAL_SD_ReadBlocks+0x30c>)
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	f043 0208 	orr.w	r2, r3, #8
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e044      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d012      	beq.n	8005f10 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a20      	ldr	r2, [pc, #128]	; (8005f70 <HAL_SD_ReadBlocks+0x30c>)
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	f043 0202 	orr.w	r2, r3, #2
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e02a      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d012      	beq.n	8005f44 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a13      	ldr	r2, [pc, #76]	; (8005f70 <HAL_SD_ReadBlocks+0x30c>)
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e010      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a0a      	ldr	r2, [pc, #40]	; (8005f74 <HAL_SD_ReadBlocks+0x310>)
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e006      	b.n	8005f66 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3748      	adds	r7, #72	; 0x48
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	1fe00fff 	.word	0x1fe00fff
 8005f74:	18000f3a 	.word	0x18000f3a

08005f78 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b092      	sub	sp, #72	; 0x48
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f86:	f7fc f8b1 	bl	80020ec <HAL_GetTick>
 8005f8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e16b      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	f040 815e 	bne.w	8006274 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	441a      	add	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d907      	bls.n	8005fdc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e152      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d002      	beq.n	8005ffa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	025b      	lsls	r3, r3, #9
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ffe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	025b      	lsls	r3, r3, #9
 8006004:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006006:	2390      	movs	r3, #144	; 0x90
 8006008:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800600e:	2300      	movs	r3, #0
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006012:	2300      	movs	r3, #0
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f107 0218 	add.w	r2, r7, #24
 800601e:	4611      	mov	r1, r2
 8006020:	4618      	mov	r0, r3
 8006022:	f002 fedb 	bl	8008ddc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006034:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d90a      	bls.n	8006052 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006048:	4618      	mov	r0, r3
 800604a:	f002 ff7f 	bl	8008f4c <SDMMC_CmdWriteMultiBlock>
 800604e:	6478      	str	r0, [r7, #68]	; 0x44
 8006050:	e009      	b.n	8006066 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2210      	movs	r2, #16
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800605e:	4618      	mov	r0, r3
 8006060:	f002 ff51 	bl	8008f06 <SDMMC_CmdWriteSingleBlock>
 8006064:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006068:	2b00      	cmp	r3, #0
 800606a:	d012      	beq.n	8006092 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a86      	ldr	r2, [pc, #536]	; (800628c <HAL_SD_WriteBlocks+0x314>)
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607a:	431a      	orrs	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0f7      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006096:	e05c      	b.n	8006152 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d037      	beq.n	8006116 <HAL_SD_WriteBlocks+0x19e>
 80060a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a8:	2b1f      	cmp	r3, #31
 80060aa:	d934      	bls.n	8006116 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80060ac:	2300      	movs	r3, #0
 80060ae:	643b      	str	r3, [r7, #64]	; 0x40
 80060b0:	e02b      	b.n	800610a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	3301      	adds	r3, #1
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80060ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060cc:	3301      	adds	r3, #1
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	041a      	lsls	r2, r3, #16
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	3301      	adds	r3, #1
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80060e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	061a      	lsls	r2, r3, #24
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	3301      	adds	r3, #1
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f107 0214 	add.w	r2, r7, #20
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 fdf1 	bl	8008ce6 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006106:	3301      	adds	r3, #1
 8006108:	643b      	str	r3, [r7, #64]	; 0x40
 800610a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610c:	2b07      	cmp	r3, #7
 800610e:	d9d0      	bls.n	80060b2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006112:	3b20      	subs	r3, #32
 8006114:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006116:	f7fb ffe9 	bl	80020ec <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006122:	429a      	cmp	r2, r3
 8006124:	d902      	bls.n	800612c <HAL_SD_WriteBlocks+0x1b4>
 8006126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006128:	2b00      	cmp	r3, #0
 800612a:	d112      	bne.n	8006152 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a56      	ldr	r2, [pc, #344]	; (800628c <HAL_SD_WriteBlocks+0x314>)
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800613a:	431a      	orrs	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e097      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800615c:	2b00      	cmp	r3, #0
 800615e:	d09b      	beq.n	8006098 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800616e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d022      	beq.n	80061c4 <HAL_SD_WriteBlocks+0x24c>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d91f      	bls.n	80061c4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	2b03      	cmp	r3, #3
 800618a:	d01b      	beq.n	80061c4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f002 feff 	bl	8008f94 <SDMMC_CmdStopTransfer>
 8006196:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800619a:	2b00      	cmp	r3, #0
 800619c:	d012      	beq.n	80061c4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a3a      	ldr	r2, [pc, #232]	; (800628c <HAL_SD_WriteBlocks+0x314>)
 80061a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e05e      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d012      	beq.n	80061f8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2d      	ldr	r2, [pc, #180]	; (800628c <HAL_SD_WriteBlocks+0x314>)
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	f043 0208 	orr.w	r2, r3, #8
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e044      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d012      	beq.n	800622c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a20      	ldr	r2, [pc, #128]	; (800628c <HAL_SD_WriteBlocks+0x314>)
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006212:	f043 0202 	orr.w	r2, r3, #2
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e02a      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b00      	cmp	r3, #0
 8006238:	d012      	beq.n	8006260 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <HAL_SD_WriteBlocks+0x314>)
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006246:	f043 0210 	orr.w	r2, r3, #16
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e010      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0a      	ldr	r2, [pc, #40]	; (8006290 <HAL_SD_WriteBlocks+0x318>)
 8006266:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e006      	b.n	8006282 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006278:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3748      	adds	r7, #72	; 0x48
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	1fe00fff 	.word	0x1fe00fff
 8006290:	18000f3a 	.word	0x18000f3a

08006294 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a2:	0f9b      	lsrs	r3, r3, #30
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ae:	0e9b      	lsrs	r3, r3, #26
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c0:	0e1b      	lsrs	r3, r3, #24
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 0303 	and.w	r3, r3, #3
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d2:	0c1b      	lsrs	r3, r3, #16
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f4:	0d1b      	lsrs	r3, r3, #20
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	b2da      	uxtb	r2, r3
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006312:	0bdb      	lsrs	r3, r3, #15
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006324:	0b9b      	lsrs	r3, r3, #14
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	b2da      	uxtb	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006336:	0b5b      	lsrs	r3, r3, #13
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006348:	0b1b      	lsrs	r3, r3, #12
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	b2da      	uxtb	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2200      	movs	r2, #0
 800635a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	2b00      	cmp	r3, #0
 8006362:	d163      	bne.n	800642c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006368:	009a      	lsls	r2, r3, #2
 800636a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800636e:	4013      	ands	r3, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006374:	0f92      	lsrs	r2, r2, #30
 8006376:	431a      	orrs	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006380:	0edb      	lsrs	r3, r3, #27
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	b2da      	uxtb	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006392:	0e1b      	lsrs	r3, r3, #24
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a4:	0d5b      	lsrs	r3, r3, #21
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b6:	0c9b      	lsrs	r3, r3, #18
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063c8:	0bdb      	lsrs	r3, r3, #15
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	7e1b      	ldrb	r3, [r3, #24]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	3302      	adds	r3, #2
 80063ec:	2201      	movs	r2, #1
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063f6:	fb02 f203 	mul.w	r2, r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	7a1b      	ldrb	r3, [r3, #8]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2201      	movs	r2, #1
 800640a:	409a      	lsls	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006418:	0a52      	lsrs	r2, r2, #9
 800641a:	fb02 f203 	mul.w	r2, r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006428:	655a      	str	r2, [r3, #84]	; 0x54
 800642a:	e031      	b.n	8006490 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	2b01      	cmp	r3, #1
 8006432:	d11d      	bne.n	8006470 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006442:	0c1b      	lsrs	r3, r3, #16
 8006444:	431a      	orrs	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	3301      	adds	r3, #1
 8006450:	029a      	lsls	r2, r3, #10
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006464:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	655a      	str	r2, [r3, #84]	; 0x54
 800646e:	e00f      	b.n	8006490 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a58      	ldr	r2, [pc, #352]	; (80065d8 <HAL_SD_GetCardCSD+0x344>)
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e09d      	b.n	80065cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006494:	0b9b      	lsrs	r3, r3, #14
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a6:	09db      	lsrs	r3, r3, #7
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	0fdb      	lsrs	r3, r3, #31
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d4:	0f5b      	lsrs	r3, r3, #29
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e6:	0e9b      	lsrs	r3, r3, #26
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f8:	0d9b      	lsrs	r3, r3, #22
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	b2da      	uxtb	r2, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800650a:	0d5b      	lsrs	r3, r3, #21
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	b2da      	uxtb	r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006526:	0c1b      	lsrs	r3, r3, #16
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	b2da      	uxtb	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800653a:	0bdb      	lsrs	r3, r3, #15
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	b2da      	uxtb	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654e:	0b9b      	lsrs	r3, r3, #14
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	b2da      	uxtb	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006562:	0b5b      	lsrs	r3, r3, #13
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006576:	0b1b      	lsrs	r3, r3, #12
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658a:	0a9b      	lsrs	r3, r3, #10
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	b2da      	uxtb	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	1fe00fff 	.word	0x1fe00fff

080065dc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b094      	sub	sp, #80	; 0x50
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80065ec:	f107 0308 	add.w	r3, r7, #8
 80065f0:	4619      	mov	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fb4a 	bl	8006c8c <SD_SendSDStatus>
 80065f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80065fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d011      	beq.n	8006624 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a4f      	ldr	r2, [pc, #316]	; (8006744 <HAL_SD_GetCardStatus+0x168>)
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800660c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006622:	e070      	b.n	8006706 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	099b      	lsrs	r3, r3, #6
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	b2da      	uxtb	r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	b2da      	uxtb	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	b29b      	uxth	r3, r3
 800664a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800664e:	b29a      	uxth	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	0e1b      	lsrs	r3, r3, #24
 8006654:	b29b      	uxth	r3, r3
 8006656:	4313      	orrs	r3, r2
 8006658:	b29a      	uxth	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	061a      	lsls	r2, r3, #24
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800666a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	0a1b      	lsrs	r3, r3, #8
 8006670:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006674:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	0e1b      	lsrs	r3, r3, #24
 800667a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b2da      	uxtb	r2, r3
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	0d1b      	lsrs	r3, r3, #20
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	b2da      	uxtb	r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	4313      	orrs	r3, r2
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	0a9b      	lsrs	r3, r3, #10
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	0a1b      	lsrs	r3, r3, #8
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	0e1b      	lsrs	r3, r3, #24
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800670e:	4618      	mov	r0, r3
 8006710:	f002 fb90 	bl	8008e34 <SDMMC_CmdBlockLength>
 8006714:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00d      	beq.n	8006738 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a08      	ldr	r2, [pc, #32]	; (8006744 <HAL_SD_GetCardStatus+0x168>)
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006728:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8006738:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800673c:	4618      	mov	r0, r3
 800673e:	3750      	adds	r7, #80	; 0x50
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	1fe00fff 	.word	0x1fe00fff

08006748 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80067a0:	b590      	push	{r4, r7, lr}
 80067a2:	b08d      	sub	sp, #52	; 0x34
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2203      	movs	r2, #3
 80067b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d02e      	beq.n	800681e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c6:	d106      	bne.n	80067d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	635a      	str	r2, [r3, #52]	; 0x34
 80067d4:	e029      	b.n	800682a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067dc:	d10a      	bne.n	80067f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fb4c 	bl	8006e7c <SD_WideBus_Enable>
 80067e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	635a      	str	r2, [r3, #52]	; 0x34
 80067f2:	e01a      	b.n	800682a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fb89 	bl	8006f12 <SD_WideBus_Disable>
 8006800:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	635a      	str	r2, [r3, #52]	; 0x34
 800680e:	e00c      	b.n	800682a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006814:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	635a      	str	r2, [r3, #52]	; 0x34
 800681c:	e005      	b.n	800682a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006822:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a5e      	ldr	r2, [pc, #376]	; (80069b0 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006838:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006840:	e094      	b.n	800696c <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006842:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006846:	f7fd feaf 	bl	80045a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800684a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8083 	beq.w	800695a <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4950      	ldr	r1, [pc, #320]	; (80069b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006872:	fba1 1303 	umull	r1, r3, r1, r3
 8006876:	0e1b      	lsrs	r3, r3, #24
 8006878:	429a      	cmp	r2, r3
 800687a:	d303      	bcc.n	8006884 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e05a      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688c:	d103      	bne.n	8006896 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	e051      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800689e:	d126      	bne.n	80068ee <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10e      	bne.n	80068c6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4a43      	ldr	r2, [pc, #268]	; (80069b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d906      	bls.n	80068be <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4a40      	ldr	r2, [pc, #256]	; (80069b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	0e5b      	lsrs	r3, r3, #25
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	e03d      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e039      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d2:	4a39      	ldr	r2, [pc, #228]	; (80069b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d906      	bls.n	80068e6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4a36      	ldr	r2, [pc, #216]	; (80069b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 80068dc:	fba2 2303 	umull	r2, r3, r2, r3
 80068e0:	0e5b      	lsrs	r3, r3, #25
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e029      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	e025      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10e      	bne.n	8006914 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4a30      	ldr	r2, [pc, #192]	; (80069bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d906      	bls.n	800690c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	0e1b      	lsrs	r3, r3, #24
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e016      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	e012      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006920:	4a26      	ldr	r2, [pc, #152]	; (80069bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d906      	bls.n	8006934 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4a22      	ldr	r2, [pc, #136]	; (80069b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	0e1b      	lsrs	r3, r3, #24
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	e002      	b.n	800693a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681c      	ldr	r4, [r3, #0]
 800693e:	466a      	mov	r2, sp
 8006940:	f107 0314 	add.w	r3, r7, #20
 8006944:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006948:	e882 0003 	stmia.w	r2, {r0, r1}
 800694c:	f107 0308 	add.w	r3, r7, #8
 8006950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006952:	4620      	mov	r0, r4
 8006954:	f002 f990 	bl	8008c78 <SDMMC_Init>
 8006958:	e008      	b.n	800696c <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006974:	4618      	mov	r0, r3
 8006976:	f002 fa5d 	bl	8008e34 <SDMMC_CmdBlockLength>
 800697a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006988:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80069a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	372c      	adds	r7, #44	; 0x2c
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}
 80069b0:	1fe00fff 	.word	0x1fe00fff
 80069b4:	55e63b89 	.word	0x55e63b89
 80069b8:	02faf080 	.word	0x02faf080
 80069bc:	017d7840 	.word	0x017d7840

080069c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80069cc:	f107 030c 	add.w	r3, r7, #12
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa2a 	bl	8006e2c <SD_SendStatus>
 80069d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	0a5b      	lsrs	r3, r3, #9
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80069f6:	693b      	ldr	r3, [r7, #16]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b090      	sub	sp, #64	; 0x40
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f002 f98a 	bl	8008d2a <SDMMC_GetPowerState>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a20:	e0a5      	b.n	8006b6e <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d02e      	beq.n	8006a88 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f002 fbd5 	bl	80091de <SDMMC_CmdSendCID>
 8006a34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <SD_InitCard+0x40>
    {
      return errorstate;
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	e096      	b.n	8006b6e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2100      	movs	r1, #0
 8006a46:	4618      	mov	r0, r3
 8006a48:	f002 f9b5 	bl	8008db6 <SDMMC_GetResponse>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2104      	movs	r1, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f002 f9ac 	bl	8008db6 <SDMMC_GetResponse>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2108      	movs	r1, #8
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f002 f9a3 	bl	8008db6 <SDMMC_GetResponse>
 8006a70:	4602      	mov	r2, r0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	210c      	movs	r1, #12
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f002 f99a 	bl	8008db6 <SDMMC_GetResponse>
 8006a82:	4602      	mov	r2, r0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d00d      	beq.n	8006aac <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f107 020e 	add.w	r2, r7, #14
 8006a98:	4611      	mov	r1, r2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f002 fbde 	bl	800925c <SDMMC_CmdSetRelAdd>
 8006aa0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <SD_InitCard+0xac>
    {
      return errorstate;
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aaa:	e060      	b.n	8006b6e <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d036      	beq.n	8006b22 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac4:	041b      	lsls	r3, r3, #16
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f002 fba7 	bl	800921c <SDMMC_CmdSendCSD>
 8006ace:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <SD_InitCard+0xda>
    {
      return errorstate;
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad8:	e049      	b.n	8006b6e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f002 f968 	bl	8008db6 <SDMMC_GetResponse>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2104      	movs	r1, #4
 8006af2:	4618      	mov	r0, r3
 8006af4:	f002 f95f 	bl	8008db6 <SDMMC_GetResponse>
 8006af8:	4602      	mov	r2, r0
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2108      	movs	r1, #8
 8006b04:	4618      	mov	r0, r3
 8006b06:	f002 f956 	bl	8008db6 <SDMMC_GetResponse>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	210c      	movs	r1, #12
 8006b16:	4618      	mov	r0, r3
 8006b18:	f002 f94d 	bl	8008db6 <SDMMC_GetResponse>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2104      	movs	r1, #4
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f002 f944 	bl	8008db6 <SDMMC_GetResponse>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	0d1a      	lsrs	r2, r3, #20
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006b36:	f107 0310 	add.w	r3, r7, #16
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff fba9 	bl	8006294 <HAL_SD_GetCardCSD>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b4c:	e00f      	b.n	8006b6e <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b56:	041b      	lsls	r3, r3, #16
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f002 fa56 	bl	800900c <SDMMC_CmdSelDesel>
 8006b60:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <SD_InitCard+0x16c>
  {
    return errorstate;
 8006b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6a:	e000      	b.n	8006b6e <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3740      	adds	r7, #64	; 0x40
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f002 fa5e 	bl	8009052 <SDMMC_CmdGoIdleState>
 8006b96:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	e06e      	b.n	8006c80 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 fa71 	bl	800908e <SDMMC_CmdOperCond>
 8006bac:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00d      	beq.n	8006bd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f002 fa47 	bl	8009052 <SDMMC_CmdGoIdleState>
 8006bc4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d004      	beq.n	8006bd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	e057      	b.n	8006c80 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d137      	bne.n	8006c4e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f002 fa72 	bl	80090ce <SDMMC_CmdAppCommand>
 8006bea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d02d      	beq.n	8006c4e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bf6:	e043      	b.n	8006c80 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 fa65 	bl	80090ce <SDMMC_CmdAppCommand>
 8006c04:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <SD_PowerON+0x98>
    {
      return errorstate;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	e037      	b.n	8006c80 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	491c      	ldr	r1, [pc, #112]	; (8006c88 <SD_PowerON+0x110>)
 8006c16:	4618      	mov	r0, r3
 8006c18:	f002 fa7c 	bl	8009114 <SDMMC_CmdAppOperCommand>
 8006c1c:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c28:	e02a      	b.n	8006c80 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f002 f8c0 	bl	8008db6 <SDMMC_GetResponse>
 8006c36:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	0fdb      	lsrs	r3, r3, #31
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <SD_PowerON+0xcc>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <SD_PowerON+0xce>
 8006c44:	2300      	movs	r3, #0
 8006c46:	613b      	str	r3, [r7, #16]

    count++;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d802      	bhi.n	8006c5e <SD_PowerON+0xe6>
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0cc      	beq.n	8006bf8 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d902      	bls.n	8006c6e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c6c:	e008      	b.n	8006c80 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	c1100000 	.word	0xc1100000

08006c8c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08c      	sub	sp, #48	; 0x30
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c96:	f7fb fa29 	bl	80020ec <HAL_GetTick>
 8006c9a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f002 f885 	bl	8008db6 <SDMMC_GetResponse>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cb6:	d102      	bne.n	8006cbe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cbc:	e0b0      	b.n	8006e20 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2140      	movs	r1, #64	; 0x40
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f002 f8b5 	bl	8008e34 <SDMMC_CmdBlockLength>
 8006cca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	e0a0      	b.n	8006e20 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce6:	041b      	lsls	r3, r3, #16
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f002 f9ef 	bl	80090ce <SDMMC_CmdAppCommand>
 8006cf0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	e08d      	b.n	8006e20 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d08:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006d0a:	2340      	movs	r3, #64	; 0x40
 8006d0c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006d0e:	2360      	movs	r3, #96	; 0x60
 8006d10:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006d12:	2302      	movs	r3, #2
 8006d14:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f107 0208 	add.w	r2, r7, #8
 8006d26:	4611      	mov	r1, r2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f002 f857 	bl	8008ddc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 fad7 	bl	80092e6 <SDMMC_CmdStatusRegister>
 8006d38:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d02b      	beq.n	8006d98 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	e069      	b.n	8006e20 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d013      	beq.n	8006d82 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d5e:	e00d      	b.n	8006d7c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 ffb1 	bl	8008ccc <SDMMC_ReadFIFO>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	601a      	str	r2, [r3, #0]
        pData++;
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	3304      	adds	r3, #4
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	3301      	adds	r3, #1
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	2b07      	cmp	r3, #7
 8006d80:	d9ee      	bls.n	8006d60 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d82:	f7fb f9b3 	bl	80020ec <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d90:	d102      	bne.n	8006d98 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d96:	e043      	b.n	8006e20 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0d2      	beq.n	8006d4c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006db4:	2308      	movs	r3, #8
 8006db6:	e033      	b.n	8006e20 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e02a      	b.n	8006e20 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d017      	beq.n	8006e08 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006dd8:	2320      	movs	r3, #32
 8006dda:	e021      	b.n	8006e20 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 ff73 	bl	8008ccc <SDMMC_ReadFIFO>
 8006de6:	4602      	mov	r2, r0
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	601a      	str	r2, [r3, #0]
    pData++;
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	3304      	adds	r3, #4
 8006df0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006df2:	f7fb f97b 	bl	80020ec <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e00:	d102      	bne.n	8006e08 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e06:	e00b      	b.n	8006e20 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e2      	bne.n	8006ddc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a03      	ldr	r2, [pc, #12]	; (8006e28 <SD_SendSDStatus+0x19c>)
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3730      	adds	r7, #48	; 0x30
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	18000f3a 	.word	0x18000f3a

08006e2c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e40:	e018      	b.n	8006e74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4a:	041b      	lsls	r3, r3, #16
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f002 fa26 	bl	80092a0 <SDMMC_CmdSendStatus>
 8006e54:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	e009      	b.n	8006e74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 ffa5 	bl	8008db6 <SDMMC_GetResponse>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 ff8f 	bl	8008db6 <SDMMC_GetResponse>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea2:	d102      	bne.n	8006eaa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ea8:	e02f      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006eaa:	f107 030c 	add.w	r3, r7, #12
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f879 	bl	8006fa8 <SD_FindSCR>
 8006eb6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	e023      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01c      	beq.n	8006f06 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f002 f8f8 	bl	80090ce <SDMMC_CmdAppCommand>
 8006ede:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	e00f      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2102      	movs	r1, #2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f002 f92f 	bl	8009154 <SDMMC_CmdBusWidth>
 8006ef6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	e003      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e001      	b.n	8006f0a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 ff44 	bl	8008db6 <SDMMC_GetResponse>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f38:	d102      	bne.n	8006f40 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f3e:	e02f      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f40:	f107 030c 	add.w	r3, r7, #12
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f82e 	bl	8006fa8 <SD_FindSCR>
 8006f4c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	e023      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01c      	beq.n	8006f9c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f002 f8ad 	bl	80090ce <SDMMC_CmdAppCommand>
 8006f74:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	e00f      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f002 f8e4 	bl	8009154 <SDMMC_CmdBusWidth>
 8006f8c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	e003      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e001      	b.n	8006fa0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08e      	sub	sp, #56	; 0x38
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006fb2:	f7fb f89b 	bl	80020ec <HAL_GetTick>
 8006fb6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2108      	movs	r1, #8
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 ff30 	bl	8008e34 <SDMMC_CmdBlockLength>
 8006fd4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	e0ad      	b.n	800713c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	041b      	lsls	r3, r3, #16
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f002 f86e 	bl	80090ce <SDMMC_CmdAppCommand>
 8006ff2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <SD_FindSCR+0x56>
  {
    return errorstate;
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	e09e      	b.n	800713c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007002:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007004:	2308      	movs	r3, #8
 8007006:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007008:	2330      	movs	r3, #48	; 0x30
 800700a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800700c:	2302      	movs	r3, #2
 800700e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007010:	2300      	movs	r3, #0
 8007012:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007014:	2301      	movs	r3, #1
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f107 0210 	add.w	r2, r7, #16
 8007020:	4611      	mov	r1, r2
 8007022:	4618      	mov	r0, r3
 8007024:	f001 feda 	bl	8008ddc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f002 f8b4 	bl	800919a <SDMMC_CmdSendSCR>
 8007032:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	d027      	beq.n	800708a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	e07e      	b.n	800713c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d113      	bne.n	8007074 <SD_FindSCR+0xcc>
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	2b00      	cmp	r3, #0
 8007050:	d110      	bne.n	8007074 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f001 fe38 	bl	8008ccc <SDMMC_ReadFIFO>
 800705c:	4603      	mov	r3, r0
 800705e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f001 fe31 	bl	8008ccc <SDMMC_ReadFIFO>
 800706a:	4603      	mov	r3, r0
 800706c:	60fb      	str	r3, [r7, #12]
      index++;
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	3301      	adds	r3, #1
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007074:	f7fb f83a 	bl	80020ec <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007082:	d102      	bne.n	800708a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007084:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007088:	e058      	b.n	800713c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007090:	f240 532a 	movw	r3, #1322	; 0x52a
 8007094:	4013      	ands	r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0d1      	beq.n	800703e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2208      	movs	r2, #8
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80070b0:	2308      	movs	r3, #8
 80070b2:	e043      	b.n	800713c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2202      	movs	r2, #2
 80070c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80070ca:	2302      	movs	r3, #2
 80070cc:	e036      	b.n	800713c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2220      	movs	r2, #32
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80070e4:	2320      	movs	r3, #32
 80070e6:	e029      	b.n	800713c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a15      	ldr	r2, [pc, #84]	; (8007144 <SD_FindSCR+0x19c>)
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	061a      	lsls	r2, r3, #24
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	0a1b      	lsrs	r3, r3, #8
 8007102:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007106:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	0e1b      	lsrs	r3, r3, #24
 800710c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	601a      	str	r2, [r3, #0]
    scr++;
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	3304      	adds	r3, #4
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	061a      	lsls	r2, r3, #24
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007124:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800712e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	0e1b      	lsrs	r3, r3, #24
 8007134:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3738      	adds	r7, #56	; 0x38
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	18000f3a 	.word	0x18000f3a

08007148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e049      	b.n	80071ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fa fa5a 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3304      	adds	r3, #4
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f000 fae2 	bl	8007750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d001      	beq.n	8007210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e04f      	b.n	80072b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a23      	ldr	r2, [pc, #140]	; (80072bc <HAL_TIM_Base_Start_IT+0xc4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d018      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1e      	ldr	r2, [pc, #120]	; (80072c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1c      	ldr	r2, [pc, #112]	; (80072c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <HAL_TIM_Base_Start_IT+0xd4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_TIM_Base_Start_IT+0x76>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a19      	ldr	r2, [pc, #100]	; (80072d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d115      	bne.n	800729a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007276:	4013      	ands	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b06      	cmp	r3, #6
 800727e:	d015      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0xb4>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007286:	d011      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007298:	e008      	b.n	80072ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e000      	b.n	80072ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40010400 	.word	0x40010400
 80072d0:	40001800 	.word	0x40001800
 80072d4:	00010007 	.word	0x00010007

080072d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d122      	bne.n	8007334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d11b      	bne.n	8007334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0202 	mvn.w	r2, #2
 8007304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9fa 	bl	8007714 <HAL_TIM_IC_CaptureCallback>
 8007320:	e005      	b.n	800732e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f9ec 	bl	8007700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f9fd 	bl	8007728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b04      	cmp	r3, #4
 8007340:	d122      	bne.n	8007388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b04      	cmp	r3, #4
 800734e:	d11b      	bne.n	8007388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0204 	mvn.w	r2, #4
 8007358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f9d0 	bl	8007714 <HAL_TIM_IC_CaptureCallback>
 8007374:	e005      	b.n	8007382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f9c2 	bl	8007700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f9d3 	bl	8007728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b08      	cmp	r3, #8
 8007394:	d122      	bne.n	80073dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d11b      	bne.n	80073dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f06f 0208 	mvn.w	r2, #8
 80073ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2204      	movs	r2, #4
 80073b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f9a6 	bl	8007714 <HAL_TIM_IC_CaptureCallback>
 80073c8:	e005      	b.n	80073d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f998 	bl	8007700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f9a9 	bl	8007728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	2b10      	cmp	r3, #16
 80073e8:	d122      	bne.n	8007430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d11b      	bne.n	8007430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0210 	mvn.w	r2, #16
 8007400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2208      	movs	r2, #8
 8007406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f97c 	bl	8007714 <HAL_TIM_IC_CaptureCallback>
 800741c:	e005      	b.n	800742a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f96e 	bl	8007700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f97f 	bl	8007728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	d10e      	bne.n	800745c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b01      	cmp	r3, #1
 800744a:	d107      	bne.n	800745c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0201 	mvn.w	r2, #1
 8007454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fa f9a8 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007466:	2b80      	cmp	r3, #128	; 0x80
 8007468:	d10e      	bne.n	8007488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007474:	2b80      	cmp	r3, #128	; 0x80
 8007476:	d107      	bne.n	8007488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fb2e 	bl	8007ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007496:	d10e      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d107      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fb21 	bl	8007af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d10e      	bne.n	80074e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d107      	bne.n	80074e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f92d 	bl	800773c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d10e      	bne.n	800750e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d107      	bne.n	800750e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f06f 0220 	mvn.w	r2, #32
 8007506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fae1 	bl	8007ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_TIM_ConfigClockSource+0x18>
 800752c:	2302      	movs	r3, #2
 800752e:	e0db      	b.n	80076e8 <HAL_TIM_ConfigClockSource+0x1d0>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4b69      	ldr	r3, [pc, #420]	; (80076f0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800754c:	4013      	ands	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007556:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a63      	ldr	r2, [pc, #396]	; (80076f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	f000 80a9 	beq.w	80076be <HAL_TIM_ConfigClockSource+0x1a6>
 800756c:	4a61      	ldr	r2, [pc, #388]	; (80076f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800756e:	4293      	cmp	r3, r2
 8007570:	f200 80ae 	bhi.w	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8007574:	4a60      	ldr	r2, [pc, #384]	; (80076f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	f000 80a1 	beq.w	80076be <HAL_TIM_ConfigClockSource+0x1a6>
 800757c:	4a5e      	ldr	r2, [pc, #376]	; (80076f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	f200 80a6 	bhi.w	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8007584:	4a5d      	ldr	r2, [pc, #372]	; (80076fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	f000 8099 	beq.w	80076be <HAL_TIM_ConfigClockSource+0x1a6>
 800758c:	4a5b      	ldr	r2, [pc, #364]	; (80076fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	f200 809e 	bhi.w	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8007594:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007598:	f000 8091 	beq.w	80076be <HAL_TIM_ConfigClockSource+0x1a6>
 800759c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80075a0:	f200 8096 	bhi.w	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a8:	f000 8089 	beq.w	80076be <HAL_TIM_ConfigClockSource+0x1a6>
 80075ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075b0:	f200 808e 	bhi.w	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b8:	d03e      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0x120>
 80075ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075be:	f200 8087 	bhi.w	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c6:	f000 8085 	beq.w	80076d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80075ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ce:	d87f      	bhi.n	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075d0:	2b70      	cmp	r3, #112	; 0x70
 80075d2:	d01a      	beq.n	800760a <HAL_TIM_ConfigClockSource+0xf2>
 80075d4:	2b70      	cmp	r3, #112	; 0x70
 80075d6:	d87b      	bhi.n	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075d8:	2b60      	cmp	r3, #96	; 0x60
 80075da:	d050      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x166>
 80075dc:	2b60      	cmp	r3, #96	; 0x60
 80075de:	d877      	bhi.n	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075e0:	2b50      	cmp	r3, #80	; 0x50
 80075e2:	d03c      	beq.n	800765e <HAL_TIM_ConfigClockSource+0x146>
 80075e4:	2b50      	cmp	r3, #80	; 0x50
 80075e6:	d873      	bhi.n	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	d058      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x186>
 80075ec:	2b40      	cmp	r3, #64	; 0x40
 80075ee:	d86f      	bhi.n	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075f0:	2b30      	cmp	r3, #48	; 0x30
 80075f2:	d064      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x1a6>
 80075f4:	2b30      	cmp	r3, #48	; 0x30
 80075f6:	d86b      	bhi.n	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d060      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x1a6>
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d867      	bhi.n	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d05c      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x1a6>
 8007604:	2b10      	cmp	r3, #16
 8007606:	d05a      	beq.n	80076be <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007608:	e062      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	6899      	ldr	r1, [r3, #8]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f000 f9b1 	bl	8007980 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800762c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	609a      	str	r2, [r3, #8]
      break;
 8007636:	e04e      	b.n	80076d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	6899      	ldr	r1, [r3, #8]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f000 f99a 	bl	8007980 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800765a:	609a      	str	r2, [r3, #8]
      break;
 800765c:	e03b      	b.n	80076d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6859      	ldr	r1, [r3, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	461a      	mov	r2, r3
 800766c:	f000 f90a 	bl	8007884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2150      	movs	r1, #80	; 0x50
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f964 	bl	8007944 <TIM_ITRx_SetConfig>
      break;
 800767c:	e02b      	b.n	80076d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6859      	ldr	r1, [r3, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	461a      	mov	r2, r3
 800768c:	f000 f929 	bl	80078e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2160      	movs	r1, #96	; 0x60
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f954 	bl	8007944 <TIM_ITRx_SetConfig>
      break;
 800769c:	e01b      	b.n	80076d6 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	6859      	ldr	r1, [r3, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f000 f8ea 	bl	8007884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2140      	movs	r1, #64	; 0x40
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f944 	bl	8007944 <TIM_ITRx_SetConfig>
      break;
 80076bc:	e00b      	b.n	80076d6 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	4610      	mov	r0, r2
 80076ca:	f000 f93b 	bl	8007944 <TIM_ITRx_SetConfig>
        break;
 80076ce:	e002      	b.n	80076d6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80076d0:	bf00      	nop
 80076d2:	e000      	b.n	80076d6 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80076d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	ffceff88 	.word	0xffceff88
 80076f4:	00100040 	.word	0x00100040
 80076f8:	00100030 	.word	0x00100030
 80076fc:	00100020 	.word	0x00100020

08007700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a40      	ldr	r2, [pc, #256]	; (8007864 <TIM_Base_SetConfig+0x114>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d013      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d00f      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a3d      	ldr	r2, [pc, #244]	; (8007868 <TIM_Base_SetConfig+0x118>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d00b      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a3c      	ldr	r2, [pc, #240]	; (800786c <TIM_Base_SetConfig+0x11c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d007      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a3b      	ldr	r2, [pc, #236]	; (8007870 <TIM_Base_SetConfig+0x120>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d003      	beq.n	8007790 <TIM_Base_SetConfig+0x40>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a3a      	ldr	r2, [pc, #232]	; (8007874 <TIM_Base_SetConfig+0x124>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d108      	bne.n	80077a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a2f      	ldr	r2, [pc, #188]	; (8007864 <TIM_Base_SetConfig+0x114>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01f      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b0:	d01b      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a2c      	ldr	r2, [pc, #176]	; (8007868 <TIM_Base_SetConfig+0x118>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d017      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a2b      	ldr	r2, [pc, #172]	; (800786c <TIM_Base_SetConfig+0x11c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a2a      	ldr	r2, [pc, #168]	; (8007870 <TIM_Base_SetConfig+0x120>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00f      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a29      	ldr	r2, [pc, #164]	; (8007874 <TIM_Base_SetConfig+0x124>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00b      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a28      	ldr	r2, [pc, #160]	; (8007878 <TIM_Base_SetConfig+0x128>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d007      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a27      	ldr	r2, [pc, #156]	; (800787c <TIM_Base_SetConfig+0x12c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_Base_SetConfig+0x9a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a26      	ldr	r2, [pc, #152]	; (8007880 <TIM_Base_SetConfig+0x130>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d108      	bne.n	80077fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a10      	ldr	r2, [pc, #64]	; (8007864 <TIM_Base_SetConfig+0x114>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00f      	beq.n	8007848 <TIM_Base_SetConfig+0xf8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a12      	ldr	r2, [pc, #72]	; (8007874 <TIM_Base_SetConfig+0x124>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00b      	beq.n	8007848 <TIM_Base_SetConfig+0xf8>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a11      	ldr	r2, [pc, #68]	; (8007878 <TIM_Base_SetConfig+0x128>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d007      	beq.n	8007848 <TIM_Base_SetConfig+0xf8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a10      	ldr	r2, [pc, #64]	; (800787c <TIM_Base_SetConfig+0x12c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d003      	beq.n	8007848 <TIM_Base_SetConfig+0xf8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a0f      	ldr	r2, [pc, #60]	; (8007880 <TIM_Base_SetConfig+0x130>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d103      	bne.n	8007850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	615a      	str	r2, [r3, #20]
}
 8007856:	bf00      	nop
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	40010000 	.word	0x40010000
 8007868:	40000400 	.word	0x40000400
 800786c:	40000800 	.word	0x40000800
 8007870:	40000c00 	.word	0x40000c00
 8007874:	40010400 	.word	0x40010400
 8007878:	40014000 	.word	0x40014000
 800787c:	40014400 	.word	0x40014400
 8007880:	40014800 	.word	0x40014800

08007884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f023 0201 	bic.w	r2, r3, #1
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f023 030a 	bic.w	r3, r3, #10
 80078c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	621a      	str	r2, [r3, #32]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b087      	sub	sp, #28
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f023 0210 	bic.w	r2, r3, #16
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800790c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	031b      	lsls	r3, r3, #12
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800791e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	621a      	str	r2, [r3, #32]
}
 8007936:	bf00      	nop
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	4b09      	ldr	r3, [pc, #36]	; (800797c <TIM_ITRx_SetConfig+0x38>)
 8007958:	4013      	ands	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	f043 0307 	orr.w	r3, r3, #7
 8007966:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	609a      	str	r2, [r3, #8]
}
 800796e:	bf00      	nop
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	ffcfff8f 	.word	0xffcfff8f

08007980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800799a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	021a      	lsls	r2, r3, #8
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	431a      	orrs	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	609a      	str	r2, [r3, #8]
}
 80079b4:	bf00      	nop
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e068      	b.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a2e      	ldr	r2, [pc, #184]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d004      	beq.n	8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a2d      	ldr	r2, [pc, #180]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d108      	bne.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1e      	ldr	r2, [pc, #120]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01d      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4a:	d018      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00e      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a18      	ldr	r2, [pc, #96]	; (8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d009      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a13      	ldr	r2, [pc, #76]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a14      	ldr	r2, [pc, #80]	; (8007acc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d10c      	bne.n	8007a98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	40010000 	.word	0x40010000
 8007abc:	40010400 	.word	0x40010400
 8007ac0:	40000400 	.word	0x40000400
 8007ac4:	40000800 	.word	0x40000800
 8007ac8:	40000c00 	.word	0x40000c00
 8007acc:	40001800 	.word	0x40001800

08007ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e042      	b.n	8007ba4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d106      	bne.n	8007b36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7f9 fda1 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2224      	movs	r2, #36	; 0x24
 8007b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8c2 	bl	8007cd8 <UART_SetConfig>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d101      	bne.n	8007b5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e022      	b.n	8007ba4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fe16 	bl	8008798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0201 	orr.w	r2, r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fe9d 	bl	80088dc <UART_CheckIdleState>
 8007ba2:	4603      	mov	r3, r0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	f040 8083 	bne.w	8007cce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_UART_Transmit+0x28>
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e07b      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_UART_Transmit+0x3a>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e074      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2221      	movs	r2, #33	; 0x21
 8007bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bfe:	f7fa fa75 	bl	80020ec <HAL_GetTick>
 8007c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	88fa      	ldrh	r2, [r7, #6]
 8007c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1c:	d108      	bne.n	8007c30 <HAL_UART_Transmit+0x84>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	e003      	b.n	8007c38 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007c40:	e02c      	b.n	8007c9c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fe90 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e039      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	3302      	adds	r3, #2
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e007      	b.n	8007c8a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	3301      	adds	r3, #1
 8007c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1cc      	bne.n	8007c42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2140      	movs	r1, #64	; 0x40
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fe5d 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e006      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e000      	b.n	8007cd0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007cce:	2302      	movs	r3, #2
  }
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd8:	b5b0      	push	{r4, r5, r7, lr}
 8007cda:	b08e      	sub	sp, #56	; 0x38
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	431a      	orrs	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4bbf      	ldr	r3, [pc, #764]	; (8008004 <UART_SetConfig+0x32c>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6812      	ldr	r2, [r2, #0]
 8007d0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4ab5      	ldr	r2, [pc, #724]	; (8008008 <UART_SetConfig+0x330>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d004      	beq.n	8007d42 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	4bb0      	ldr	r3, [pc, #704]	; (800800c <UART_SetConfig+0x334>)
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	6812      	ldr	r2, [r2, #0]
 8007d50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d52:	430b      	orrs	r3, r1
 8007d54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	f023 010f 	bic.w	r1, r3, #15
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4aa7      	ldr	r2, [pc, #668]	; (8008010 <UART_SetConfig+0x338>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d176      	bne.n	8007e64 <UART_SetConfig+0x18c>
 8007d76:	4ba7      	ldr	r3, [pc, #668]	; (8008014 <UART_SetConfig+0x33c>)
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d7e:	2b28      	cmp	r3, #40	; 0x28
 8007d80:	d86c      	bhi.n	8007e5c <UART_SetConfig+0x184>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <UART_SetConfig+0xb0>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007e2d 	.word	0x08007e2d
 8007d8c:	08007e5d 	.word	0x08007e5d
 8007d90:	08007e5d 	.word	0x08007e5d
 8007d94:	08007e5d 	.word	0x08007e5d
 8007d98:	08007e5d 	.word	0x08007e5d
 8007d9c:	08007e5d 	.word	0x08007e5d
 8007da0:	08007e5d 	.word	0x08007e5d
 8007da4:	08007e5d 	.word	0x08007e5d
 8007da8:	08007e35 	.word	0x08007e35
 8007dac:	08007e5d 	.word	0x08007e5d
 8007db0:	08007e5d 	.word	0x08007e5d
 8007db4:	08007e5d 	.word	0x08007e5d
 8007db8:	08007e5d 	.word	0x08007e5d
 8007dbc:	08007e5d 	.word	0x08007e5d
 8007dc0:	08007e5d 	.word	0x08007e5d
 8007dc4:	08007e5d 	.word	0x08007e5d
 8007dc8:	08007e3d 	.word	0x08007e3d
 8007dcc:	08007e5d 	.word	0x08007e5d
 8007dd0:	08007e5d 	.word	0x08007e5d
 8007dd4:	08007e5d 	.word	0x08007e5d
 8007dd8:	08007e5d 	.word	0x08007e5d
 8007ddc:	08007e5d 	.word	0x08007e5d
 8007de0:	08007e5d 	.word	0x08007e5d
 8007de4:	08007e5d 	.word	0x08007e5d
 8007de8:	08007e45 	.word	0x08007e45
 8007dec:	08007e5d 	.word	0x08007e5d
 8007df0:	08007e5d 	.word	0x08007e5d
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007e5d 	.word	0x08007e5d
 8007dfc:	08007e5d 	.word	0x08007e5d
 8007e00:	08007e5d 	.word	0x08007e5d
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e4d 	.word	0x08007e4d
 8007e0c:	08007e5d 	.word	0x08007e5d
 8007e10:	08007e5d 	.word	0x08007e5d
 8007e14:	08007e5d 	.word	0x08007e5d
 8007e18:	08007e5d 	.word	0x08007e5d
 8007e1c:	08007e5d 	.word	0x08007e5d
 8007e20:	08007e5d 	.word	0x08007e5d
 8007e24:	08007e5d 	.word	0x08007e5d
 8007e28:	08007e55 	.word	0x08007e55
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e32:	e222      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e34:	2304      	movs	r3, #4
 8007e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e3a:	e21e      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e42:	e21a      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e4a:	e216      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e52:	e212      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e54:	2340      	movs	r3, #64	; 0x40
 8007e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e5a:	e20e      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e5c:	2380      	movs	r3, #128	; 0x80
 8007e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e62:	e20a      	b.n	800827a <UART_SetConfig+0x5a2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6b      	ldr	r2, [pc, #428]	; (8008018 <UART_SetConfig+0x340>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d130      	bne.n	8007ed0 <UART_SetConfig+0x1f8>
 8007e6e:	4b69      	ldr	r3, [pc, #420]	; (8008014 <UART_SetConfig+0x33c>)
 8007e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d826      	bhi.n	8007ec8 <UART_SetConfig+0x1f0>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <UART_SetConfig+0x1a8>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007e99 	.word	0x08007e99
 8007e84:	08007ea1 	.word	0x08007ea1
 8007e88:	08007ea9 	.word	0x08007ea9
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e9e:	e1ec      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea6:	e1e8      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eae:	e1e4      	b.n	800827a <UART_SetConfig+0x5a2>
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb6:	e1e0      	b.n	800827a <UART_SetConfig+0x5a2>
 8007eb8:	2320      	movs	r3, #32
 8007eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ebe:	e1dc      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec6:	e1d8      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ec8:	2380      	movs	r3, #128	; 0x80
 8007eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ece:	e1d4      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a51      	ldr	r2, [pc, #324]	; (800801c <UART_SetConfig+0x344>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d130      	bne.n	8007f3c <UART_SetConfig+0x264>
 8007eda:	4b4e      	ldr	r3, [pc, #312]	; (8008014 <UART_SetConfig+0x33c>)
 8007edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	d826      	bhi.n	8007f34 <UART_SetConfig+0x25c>
 8007ee6:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <UART_SetConfig+0x214>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f05 	.word	0x08007f05
 8007ef0:	08007f0d 	.word	0x08007f0d
 8007ef4:	08007f15 	.word	0x08007f15
 8007ef8:	08007f1d 	.word	0x08007f1d
 8007efc:	08007f25 	.word	0x08007f25
 8007f00:	08007f2d 	.word	0x08007f2d
 8007f04:	2300      	movs	r3, #0
 8007f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f0a:	e1b6      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f12:	e1b2      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f14:	2308      	movs	r3, #8
 8007f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f1a:	e1ae      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f22:	e1aa      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f24:	2320      	movs	r3, #32
 8007f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f2a:	e1a6      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f2c:	2340      	movs	r3, #64	; 0x40
 8007f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f32:	e1a2      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f34:	2380      	movs	r3, #128	; 0x80
 8007f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3a:	e19e      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a37      	ldr	r2, [pc, #220]	; (8008020 <UART_SetConfig+0x348>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d130      	bne.n	8007fa8 <UART_SetConfig+0x2d0>
 8007f46:	4b33      	ldr	r3, [pc, #204]	; (8008014 <UART_SetConfig+0x33c>)
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d826      	bhi.n	8007fa0 <UART_SetConfig+0x2c8>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x280>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f71 	.word	0x08007f71
 8007f5c:	08007f79 	.word	0x08007f79
 8007f60:	08007f81 	.word	0x08007f81
 8007f64:	08007f89 	.word	0x08007f89
 8007f68:	08007f91 	.word	0x08007f91
 8007f6c:	08007f99 	.word	0x08007f99
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f76:	e180      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f78:	2304      	movs	r3, #4
 8007f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f7e:	e17c      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f80:	2308      	movs	r3, #8
 8007f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f86:	e178      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f88:	2310      	movs	r3, #16
 8007f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f8e:	e174      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f90:	2320      	movs	r3, #32
 8007f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f96:	e170      	b.n	800827a <UART_SetConfig+0x5a2>
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f9e:	e16c      	b.n	800827a <UART_SetConfig+0x5a2>
 8007fa0:	2380      	movs	r3, #128	; 0x80
 8007fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fa6:	e168      	b.n	800827a <UART_SetConfig+0x5a2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <UART_SetConfig+0x34c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d142      	bne.n	8008038 <UART_SetConfig+0x360>
 8007fb2:	4b18      	ldr	r3, [pc, #96]	; (8008014 <UART_SetConfig+0x33c>)
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b05      	cmp	r3, #5
 8007fbc:	d838      	bhi.n	8008030 <UART_SetConfig+0x358>
 8007fbe:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <UART_SetConfig+0x2ec>)
 8007fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc4:	08007fdd 	.word	0x08007fdd
 8007fc8:	08007fe5 	.word	0x08007fe5
 8007fcc:	08007fed 	.word	0x08007fed
 8007fd0:	08007ff5 	.word	0x08007ff5
 8007fd4:	08007ffd 	.word	0x08007ffd
 8007fd8:	08008029 	.word	0x08008029
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe2:	e14a      	b.n	800827a <UART_SetConfig+0x5a2>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fea:	e146      	b.n	800827a <UART_SetConfig+0x5a2>
 8007fec:	2308      	movs	r3, #8
 8007fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff2:	e142      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ffa:	e13e      	b.n	800827a <UART_SetConfig+0x5a2>
 8007ffc:	2320      	movs	r3, #32
 8007ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008002:	e13a      	b.n	800827a <UART_SetConfig+0x5a2>
 8008004:	cfff69f3 	.word	0xcfff69f3
 8008008:	58000c00 	.word	0x58000c00
 800800c:	11fff4ff 	.word	0x11fff4ff
 8008010:	40011000 	.word	0x40011000
 8008014:	58024400 	.word	0x58024400
 8008018:	40004400 	.word	0x40004400
 800801c:	40004800 	.word	0x40004800
 8008020:	40004c00 	.word	0x40004c00
 8008024:	40005000 	.word	0x40005000
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802e:	e124      	b.n	800827a <UART_SetConfig+0x5a2>
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e120      	b.n	800827a <UART_SetConfig+0x5a2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4acc      	ldr	r2, [pc, #816]	; (8008370 <UART_SetConfig+0x698>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d176      	bne.n	8008130 <UART_SetConfig+0x458>
 8008042:	4bcc      	ldr	r3, [pc, #816]	; (8008374 <UART_SetConfig+0x69c>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800804a:	2b28      	cmp	r3, #40	; 0x28
 800804c:	d86c      	bhi.n	8008128 <UART_SetConfig+0x450>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x37c>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	080080f9 	.word	0x080080f9
 8008058:	08008129 	.word	0x08008129
 800805c:	08008129 	.word	0x08008129
 8008060:	08008129 	.word	0x08008129
 8008064:	08008129 	.word	0x08008129
 8008068:	08008129 	.word	0x08008129
 800806c:	08008129 	.word	0x08008129
 8008070:	08008129 	.word	0x08008129
 8008074:	08008101 	.word	0x08008101
 8008078:	08008129 	.word	0x08008129
 800807c:	08008129 	.word	0x08008129
 8008080:	08008129 	.word	0x08008129
 8008084:	08008129 	.word	0x08008129
 8008088:	08008129 	.word	0x08008129
 800808c:	08008129 	.word	0x08008129
 8008090:	08008129 	.word	0x08008129
 8008094:	08008109 	.word	0x08008109
 8008098:	08008129 	.word	0x08008129
 800809c:	08008129 	.word	0x08008129
 80080a0:	08008129 	.word	0x08008129
 80080a4:	08008129 	.word	0x08008129
 80080a8:	08008129 	.word	0x08008129
 80080ac:	08008129 	.word	0x08008129
 80080b0:	08008129 	.word	0x08008129
 80080b4:	08008111 	.word	0x08008111
 80080b8:	08008129 	.word	0x08008129
 80080bc:	08008129 	.word	0x08008129
 80080c0:	08008129 	.word	0x08008129
 80080c4:	08008129 	.word	0x08008129
 80080c8:	08008129 	.word	0x08008129
 80080cc:	08008129 	.word	0x08008129
 80080d0:	08008129 	.word	0x08008129
 80080d4:	08008119 	.word	0x08008119
 80080d8:	08008129 	.word	0x08008129
 80080dc:	08008129 	.word	0x08008129
 80080e0:	08008129 	.word	0x08008129
 80080e4:	08008129 	.word	0x08008129
 80080e8:	08008129 	.word	0x08008129
 80080ec:	08008129 	.word	0x08008129
 80080f0:	08008129 	.word	0x08008129
 80080f4:	08008121 	.word	0x08008121
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fe:	e0bc      	b.n	800827a <UART_SetConfig+0x5a2>
 8008100:	2304      	movs	r3, #4
 8008102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008106:	e0b8      	b.n	800827a <UART_SetConfig+0x5a2>
 8008108:	2308      	movs	r3, #8
 800810a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810e:	e0b4      	b.n	800827a <UART_SetConfig+0x5a2>
 8008110:	2310      	movs	r3, #16
 8008112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008116:	e0b0      	b.n	800827a <UART_SetConfig+0x5a2>
 8008118:	2320      	movs	r3, #32
 800811a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811e:	e0ac      	b.n	800827a <UART_SetConfig+0x5a2>
 8008120:	2340      	movs	r3, #64	; 0x40
 8008122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008126:	e0a8      	b.n	800827a <UART_SetConfig+0x5a2>
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812e:	e0a4      	b.n	800827a <UART_SetConfig+0x5a2>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a90      	ldr	r2, [pc, #576]	; (8008378 <UART_SetConfig+0x6a0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d130      	bne.n	800819c <UART_SetConfig+0x4c4>
 800813a:	4b8e      	ldr	r3, [pc, #568]	; (8008374 <UART_SetConfig+0x69c>)
 800813c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	2b05      	cmp	r3, #5
 8008144:	d826      	bhi.n	8008194 <UART_SetConfig+0x4bc>
 8008146:	a201      	add	r2, pc, #4	; (adr r2, 800814c <UART_SetConfig+0x474>)
 8008148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814c:	08008165 	.word	0x08008165
 8008150:	0800816d 	.word	0x0800816d
 8008154:	08008175 	.word	0x08008175
 8008158:	0800817d 	.word	0x0800817d
 800815c:	08008185 	.word	0x08008185
 8008160:	0800818d 	.word	0x0800818d
 8008164:	2300      	movs	r3, #0
 8008166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816a:	e086      	b.n	800827a <UART_SetConfig+0x5a2>
 800816c:	2304      	movs	r3, #4
 800816e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008172:	e082      	b.n	800827a <UART_SetConfig+0x5a2>
 8008174:	2308      	movs	r3, #8
 8008176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800817a:	e07e      	b.n	800827a <UART_SetConfig+0x5a2>
 800817c:	2310      	movs	r3, #16
 800817e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008182:	e07a      	b.n	800827a <UART_SetConfig+0x5a2>
 8008184:	2320      	movs	r3, #32
 8008186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800818a:	e076      	b.n	800827a <UART_SetConfig+0x5a2>
 800818c:	2340      	movs	r3, #64	; 0x40
 800818e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008192:	e072      	b.n	800827a <UART_SetConfig+0x5a2>
 8008194:	2380      	movs	r3, #128	; 0x80
 8008196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800819a:	e06e      	b.n	800827a <UART_SetConfig+0x5a2>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a76      	ldr	r2, [pc, #472]	; (800837c <UART_SetConfig+0x6a4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d130      	bne.n	8008208 <UART_SetConfig+0x530>
 80081a6:	4b73      	ldr	r3, [pc, #460]	; (8008374 <UART_SetConfig+0x69c>)
 80081a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	2b05      	cmp	r3, #5
 80081b0:	d826      	bhi.n	8008200 <UART_SetConfig+0x528>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <UART_SetConfig+0x4e0>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081d1 	.word	0x080081d1
 80081bc:	080081d9 	.word	0x080081d9
 80081c0:	080081e1 	.word	0x080081e1
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081f1 	.word	0x080081f1
 80081cc:	080081f9 	.word	0x080081f9
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d6:	e050      	b.n	800827a <UART_SetConfig+0x5a2>
 80081d8:	2304      	movs	r3, #4
 80081da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081de:	e04c      	b.n	800827a <UART_SetConfig+0x5a2>
 80081e0:	2308      	movs	r3, #8
 80081e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081e6:	e048      	b.n	800827a <UART_SetConfig+0x5a2>
 80081e8:	2310      	movs	r3, #16
 80081ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ee:	e044      	b.n	800827a <UART_SetConfig+0x5a2>
 80081f0:	2320      	movs	r3, #32
 80081f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081f6:	e040      	b.n	800827a <UART_SetConfig+0x5a2>
 80081f8:	2340      	movs	r3, #64	; 0x40
 80081fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081fe:	e03c      	b.n	800827a <UART_SetConfig+0x5a2>
 8008200:	2380      	movs	r3, #128	; 0x80
 8008202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008206:	e038      	b.n	800827a <UART_SetConfig+0x5a2>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a5c      	ldr	r2, [pc, #368]	; (8008380 <UART_SetConfig+0x6a8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d130      	bne.n	8008274 <UART_SetConfig+0x59c>
 8008212:	4b58      	ldr	r3, [pc, #352]	; (8008374 <UART_SetConfig+0x69c>)
 8008214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b05      	cmp	r3, #5
 800821c:	d826      	bhi.n	800826c <UART_SetConfig+0x594>
 800821e:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <UART_SetConfig+0x54c>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	0800823d 	.word	0x0800823d
 8008228:	08008245 	.word	0x08008245
 800822c:	0800824d 	.word	0x0800824d
 8008230:	08008255 	.word	0x08008255
 8008234:	0800825d 	.word	0x0800825d
 8008238:	08008265 	.word	0x08008265
 800823c:	2302      	movs	r3, #2
 800823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008242:	e01a      	b.n	800827a <UART_SetConfig+0x5a2>
 8008244:	2304      	movs	r3, #4
 8008246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800824a:	e016      	b.n	800827a <UART_SetConfig+0x5a2>
 800824c:	2308      	movs	r3, #8
 800824e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008252:	e012      	b.n	800827a <UART_SetConfig+0x5a2>
 8008254:	2310      	movs	r3, #16
 8008256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800825a:	e00e      	b.n	800827a <UART_SetConfig+0x5a2>
 800825c:	2320      	movs	r3, #32
 800825e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008262:	e00a      	b.n	800827a <UART_SetConfig+0x5a2>
 8008264:	2340      	movs	r3, #64	; 0x40
 8008266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800826a:	e006      	b.n	800827a <UART_SetConfig+0x5a2>
 800826c:	2380      	movs	r3, #128	; 0x80
 800826e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008272:	e002      	b.n	800827a <UART_SetConfig+0x5a2>
 8008274:	2380      	movs	r3, #128	; 0x80
 8008276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a40      	ldr	r2, [pc, #256]	; (8008380 <UART_SetConfig+0x6a8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	f040 80ef 	bne.w	8008464 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008286:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800828a:	2b20      	cmp	r3, #32
 800828c:	dc46      	bgt.n	800831c <UART_SetConfig+0x644>
 800828e:	2b02      	cmp	r3, #2
 8008290:	f2c0 8081 	blt.w	8008396 <UART_SetConfig+0x6be>
 8008294:	3b02      	subs	r3, #2
 8008296:	2b1e      	cmp	r3, #30
 8008298:	d87d      	bhi.n	8008396 <UART_SetConfig+0x6be>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <UART_SetConfig+0x5c8>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	08008323 	.word	0x08008323
 80082a4:	08008397 	.word	0x08008397
 80082a8:	0800832b 	.word	0x0800832b
 80082ac:	08008397 	.word	0x08008397
 80082b0:	08008397 	.word	0x08008397
 80082b4:	08008397 	.word	0x08008397
 80082b8:	0800833b 	.word	0x0800833b
 80082bc:	08008397 	.word	0x08008397
 80082c0:	08008397 	.word	0x08008397
 80082c4:	08008397 	.word	0x08008397
 80082c8:	08008397 	.word	0x08008397
 80082cc:	08008397 	.word	0x08008397
 80082d0:	08008397 	.word	0x08008397
 80082d4:	08008397 	.word	0x08008397
 80082d8:	0800834b 	.word	0x0800834b
 80082dc:	08008397 	.word	0x08008397
 80082e0:	08008397 	.word	0x08008397
 80082e4:	08008397 	.word	0x08008397
 80082e8:	08008397 	.word	0x08008397
 80082ec:	08008397 	.word	0x08008397
 80082f0:	08008397 	.word	0x08008397
 80082f4:	08008397 	.word	0x08008397
 80082f8:	08008397 	.word	0x08008397
 80082fc:	08008397 	.word	0x08008397
 8008300:	08008397 	.word	0x08008397
 8008304:	08008397 	.word	0x08008397
 8008308:	08008397 	.word	0x08008397
 800830c:	08008397 	.word	0x08008397
 8008310:	08008397 	.word	0x08008397
 8008314:	08008397 	.word	0x08008397
 8008318:	08008389 	.word	0x08008389
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d036      	beq.n	800838e <UART_SetConfig+0x6b6>
 8008320:	e039      	b.n	8008396 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008322:	f7fc fe13 	bl	8004f4c <HAL_RCCEx_GetD3PCLK1Freq>
 8008326:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008328:	e03b      	b.n	80083a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800832a:	f107 0314 	add.w	r3, r7, #20
 800832e:	4618      	mov	r0, r3
 8008330:	f7fc fe22 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008338:	e033      	b.n	80083a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	4618      	mov	r0, r3
 8008340:	f7fc ff6e 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008348:	e02b      	b.n	80083a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800834a:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <UART_SetConfig+0x69c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008356:	4b07      	ldr	r3, [pc, #28]	; (8008374 <UART_SetConfig+0x69c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	08db      	lsrs	r3, r3, #3
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	4a08      	ldr	r2, [pc, #32]	; (8008384 <UART_SetConfig+0x6ac>)
 8008362:	fa22 f303 	lsr.w	r3, r2, r3
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008368:	e01b      	b.n	80083a2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <UART_SetConfig+0x6ac>)
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800836e:	e018      	b.n	80083a2 <UART_SetConfig+0x6ca>
 8008370:	40011400 	.word	0x40011400
 8008374:	58024400 	.word	0x58024400
 8008378:	40007800 	.word	0x40007800
 800837c:	40007c00 	.word	0x40007c00
 8008380:	58000c00 	.word	0x58000c00
 8008384:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008388:	4bc4      	ldr	r3, [pc, #784]	; (800869c <UART_SetConfig+0x9c4>)
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800838c:	e009      	b.n	80083a2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008394:	e005      	b.n	80083a2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80083a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 81da 	beq.w	800875e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	4abc      	ldr	r2, [pc, #752]	; (80086a0 <UART_SetConfig+0x9c8>)
 80083b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b4:	461a      	mov	r2, r3
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083bc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	4413      	add	r3, r2
 80083c8:	6a3a      	ldr	r2, [r7, #32]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d305      	bcc.n	80083da <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083d4:	6a3a      	ldr	r2, [r7, #32]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d903      	bls.n	80083e2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80083e0:	e1bd      	b.n	800875e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	4618      	mov	r0, r3
 80083e6:	f04f 0100 	mov.w	r1, #0
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	4aac      	ldr	r2, [pc, #688]	; (80086a0 <UART_SetConfig+0x9c8>)
 80083f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	f7f7 ffc9 	bl	8000390 <__aeabi_uldivmod>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4610      	mov	r0, r2
 8008404:	4619      	mov	r1, r3
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	020b      	lsls	r3, r1, #8
 8008410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008414:	0202      	lsls	r2, r0, #8
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	6849      	ldr	r1, [r1, #4]
 800841a:	0849      	lsrs	r1, r1, #1
 800841c:	4608      	mov	r0, r1
 800841e:	f04f 0100 	mov.w	r1, #0
 8008422:	1814      	adds	r4, r2, r0
 8008424:	eb43 0501 	adc.w	r5, r3, r1
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	461a      	mov	r2, r3
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	4620      	mov	r0, r4
 8008434:	4629      	mov	r1, r5
 8008436:	f7f7 ffab 	bl	8000390 <__aeabi_uldivmod>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4613      	mov	r3, r2
 8008440:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008448:	d308      	bcc.n	800845c <UART_SetConfig+0x784>
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008450:	d204      	bcs.n	800845c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e180      	b.n	800875e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008462:	e17c      	b.n	800875e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800846c:	f040 80bf 	bne.w	80085ee <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008474:	2b20      	cmp	r3, #32
 8008476:	dc49      	bgt.n	800850c <UART_SetConfig+0x834>
 8008478:	2b00      	cmp	r3, #0
 800847a:	db7c      	blt.n	8008576 <UART_SetConfig+0x89e>
 800847c:	2b20      	cmp	r3, #32
 800847e:	d87a      	bhi.n	8008576 <UART_SetConfig+0x89e>
 8008480:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <UART_SetConfig+0x7b0>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	08008513 	.word	0x08008513
 800848c:	0800851b 	.word	0x0800851b
 8008490:	08008577 	.word	0x08008577
 8008494:	08008577 	.word	0x08008577
 8008498:	08008523 	.word	0x08008523
 800849c:	08008577 	.word	0x08008577
 80084a0:	08008577 	.word	0x08008577
 80084a4:	08008577 	.word	0x08008577
 80084a8:	08008533 	.word	0x08008533
 80084ac:	08008577 	.word	0x08008577
 80084b0:	08008577 	.word	0x08008577
 80084b4:	08008577 	.word	0x08008577
 80084b8:	08008577 	.word	0x08008577
 80084bc:	08008577 	.word	0x08008577
 80084c0:	08008577 	.word	0x08008577
 80084c4:	08008577 	.word	0x08008577
 80084c8:	08008543 	.word	0x08008543
 80084cc:	08008577 	.word	0x08008577
 80084d0:	08008577 	.word	0x08008577
 80084d4:	08008577 	.word	0x08008577
 80084d8:	08008577 	.word	0x08008577
 80084dc:	08008577 	.word	0x08008577
 80084e0:	08008577 	.word	0x08008577
 80084e4:	08008577 	.word	0x08008577
 80084e8:	08008577 	.word	0x08008577
 80084ec:	08008577 	.word	0x08008577
 80084f0:	08008577 	.word	0x08008577
 80084f4:	08008577 	.word	0x08008577
 80084f8:	08008577 	.word	0x08008577
 80084fc:	08008577 	.word	0x08008577
 8008500:	08008577 	.word	0x08008577
 8008504:	08008577 	.word	0x08008577
 8008508:	08008569 	.word	0x08008569
 800850c:	2b40      	cmp	r3, #64	; 0x40
 800850e:	d02e      	beq.n	800856e <UART_SetConfig+0x896>
 8008510:	e031      	b.n	8008576 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008512:	f7fb f8dd 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8008516:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008518:	e033      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800851a:	f7fb f8ef 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 800851e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008520:	e02f      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008522:	f107 0314 	add.w	r3, r7, #20
 8008526:	4618      	mov	r0, r3
 8008528:	f7fc fd26 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008530:	e027      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008532:	f107 0308 	add.w	r3, r7, #8
 8008536:	4618      	mov	r0, r3
 8008538:	f7fc fe72 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008540:	e01f      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008542:	4b58      	ldr	r3, [pc, #352]	; (80086a4 <UART_SetConfig+0x9cc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800854e:	4b55      	ldr	r3, [pc, #340]	; (80086a4 <UART_SetConfig+0x9cc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	08db      	lsrs	r3, r3, #3
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	4a53      	ldr	r2, [pc, #332]	; (80086a8 <UART_SetConfig+0x9d0>)
 800855a:	fa22 f303 	lsr.w	r3, r2, r3
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008560:	e00f      	b.n	8008582 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008562:	4b51      	ldr	r3, [pc, #324]	; (80086a8 <UART_SetConfig+0x9d0>)
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008566:	e00c      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008568:	4b4c      	ldr	r3, [pc, #304]	; (800869c <UART_SetConfig+0x9c4>)
 800856a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800856c:	e009      	b.n	8008582 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800856e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008574:	e005      	b.n	8008582 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80ea 	beq.w	800875e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	4a44      	ldr	r2, [pc, #272]	; (80086a0 <UART_SetConfig+0x9c8>)
 8008590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008594:	461a      	mov	r2, r3
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	fbb3 f3f2 	udiv	r3, r3, r2
 800859c:	005a      	lsls	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	441a      	add	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	2b0f      	cmp	r3, #15
 80085b6:	d916      	bls.n	80085e6 <UART_SetConfig+0x90e>
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085be:	d212      	bcs.n	80085e6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f023 030f 	bic.w	r3, r3, #15
 80085c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085d8:	4313      	orrs	r3, r2
 80085da:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	e0bb      	b.n	800875e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80085ec:	e0b7      	b.n	800875e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	dc4a      	bgt.n	800868c <UART_SetConfig+0x9b4>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f2c0 8086 	blt.w	8008708 <UART_SetConfig+0xa30>
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	f200 8083 	bhi.w	8008708 <UART_SetConfig+0xa30>
 8008602:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x930>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008693 	.word	0x08008693
 800860c:	080086ad 	.word	0x080086ad
 8008610:	08008709 	.word	0x08008709
 8008614:	08008709 	.word	0x08008709
 8008618:	080086b5 	.word	0x080086b5
 800861c:	08008709 	.word	0x08008709
 8008620:	08008709 	.word	0x08008709
 8008624:	08008709 	.word	0x08008709
 8008628:	080086c5 	.word	0x080086c5
 800862c:	08008709 	.word	0x08008709
 8008630:	08008709 	.word	0x08008709
 8008634:	08008709 	.word	0x08008709
 8008638:	08008709 	.word	0x08008709
 800863c:	08008709 	.word	0x08008709
 8008640:	08008709 	.word	0x08008709
 8008644:	08008709 	.word	0x08008709
 8008648:	080086d5 	.word	0x080086d5
 800864c:	08008709 	.word	0x08008709
 8008650:	08008709 	.word	0x08008709
 8008654:	08008709 	.word	0x08008709
 8008658:	08008709 	.word	0x08008709
 800865c:	08008709 	.word	0x08008709
 8008660:	08008709 	.word	0x08008709
 8008664:	08008709 	.word	0x08008709
 8008668:	08008709 	.word	0x08008709
 800866c:	08008709 	.word	0x08008709
 8008670:	08008709 	.word	0x08008709
 8008674:	08008709 	.word	0x08008709
 8008678:	08008709 	.word	0x08008709
 800867c:	08008709 	.word	0x08008709
 8008680:	08008709 	.word	0x08008709
 8008684:	08008709 	.word	0x08008709
 8008688:	080086fb 	.word	0x080086fb
 800868c:	2b40      	cmp	r3, #64	; 0x40
 800868e:	d037      	beq.n	8008700 <UART_SetConfig+0xa28>
 8008690:	e03a      	b.n	8008708 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008692:	f7fb f81d 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8008696:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008698:	e03c      	b.n	8008714 <UART_SetConfig+0xa3c>
 800869a:	bf00      	nop
 800869c:	003d0900 	.word	0x003d0900
 80086a0:	0800f348 	.word	0x0800f348
 80086a4:	58024400 	.word	0x58024400
 80086a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086ac:	f7fb f826 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 80086b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80086b2:	e02f      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086b4:	f107 0314 	add.w	r3, r7, #20
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fc fc5d 	bl	8004f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086c2:	e027      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086c4:	f107 0308 	add.w	r3, r7, #8
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fc fda9 	bl	8005220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086d2:	e01f      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d4:	4b2c      	ldr	r3, [pc, #176]	; (8008788 <UART_SetConfig+0xab0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086e0:	4b29      	ldr	r3, [pc, #164]	; (8008788 <UART_SetConfig+0xab0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	08db      	lsrs	r3, r3, #3
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	4a28      	ldr	r2, [pc, #160]	; (800878c <UART_SetConfig+0xab4>)
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
 80086f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086f2:	e00f      	b.n	8008714 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80086f4:	4b25      	ldr	r3, [pc, #148]	; (800878c <UART_SetConfig+0xab4>)
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086f8:	e00c      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086fa:	4b25      	ldr	r3, [pc, #148]	; (8008790 <UART_SetConfig+0xab8>)
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086fe:	e009      	b.n	8008714 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008706:	e005      	b.n	8008714 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008712:	bf00      	nop
    }

    if (pclk != 0U)
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d021      	beq.n	800875e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	4a1d      	ldr	r2, [pc, #116]	; (8008794 <UART_SetConfig+0xabc>)
 8008720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008724:	461a      	mov	r2, r3
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	fbb3 f2f2 	udiv	r2, r3, r2
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	441a      	add	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	fbb2 f3f3 	udiv	r3, r2, r3
 800873c:	b29b      	uxth	r3, r3
 800873e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	2b0f      	cmp	r3, #15
 8008744:	d908      	bls.n	8008758 <UART_SetConfig+0xa80>
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874c:	d204      	bcs.n	8008758 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	e002      	b.n	800875e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800877a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800877e:	4618      	mov	r0, r3
 8008780:	3738      	adds	r7, #56	; 0x38
 8008782:	46bd      	mov	sp, r7
 8008784:	bdb0      	pop	{r4, r5, r7, pc}
 8008786:	bf00      	nop
 8008788:	58024400 	.word	0x58024400
 800878c:	03d09000 	.word	0x03d09000
 8008790:	003d0900 	.word	0x003d0900
 8008794:	0800f348 	.word	0x0800f348

08008798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01a      	beq.n	80088ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008896:	d10a      	bne.n	80088ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	605a      	str	r2, [r3, #4]
  }
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088ec:	f7f9 fbfe 	bl	80020ec <HAL_GetTick>
 80088f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0308 	and.w	r3, r3, #8
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d10e      	bne.n	800891e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f82f 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e025      	b.n	800896a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d10e      	bne.n	800894a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800892c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f819 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e00f      	b.n	800896a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	603b      	str	r3, [r7, #0]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008982:	e062      	b.n	8008a4a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800898a:	d05e      	beq.n	8008a4a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800898c:	f7f9 fbae 	bl	80020ec <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	429a      	cmp	r2, r3
 800899a:	d302      	bcc.n	80089a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d11d      	bne.n	80089de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0201 	bic.w	r2, r2, #1
 80089c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e045      	b.n	8008a6a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d02e      	beq.n	8008a4a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fa:	d126      	bne.n	8008a4a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a14:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f022 0201 	bic.w	r2, r2, #1
 8008a24:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e00f      	b.n	8008a6a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	bf0c      	ite	eq
 8008a5a:	2301      	moveq	r3, #1
 8008a5c:	2300      	movne	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d08d      	beq.n	8008984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b085      	sub	sp, #20
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d101      	bne.n	8008a88 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a84:	2302      	movs	r3, #2
 8008a86:	e027      	b.n	8008ad8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2224      	movs	r2, #36	; 0x24
 8008a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0201 	bic.w	r2, r2, #1
 8008aae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ab6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e02d      	b.n	8008b58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2224      	movs	r2, #36	; 0x24
 8008b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0201 	bic.w	r2, r2, #1
 8008b22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f84f 	bl	8008bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e02d      	b.n	8008bd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2224      	movs	r2, #36	; 0x24
 8008b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f811 	bl	8008bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d108      	bne.n	8008bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bfc:	e031      	b.n	8008c62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bfe:	2310      	movs	r3, #16
 8008c00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c02:	2310      	movs	r3, #16
 8008c04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	0e5b      	lsrs	r3, r3, #25
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	f003 0307 	and.w	r3, r3, #7
 8008c14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	0f5b      	lsrs	r3, r3, #29
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	7b3a      	ldrb	r2, [r7, #12]
 8008c2a:	4911      	ldr	r1, [pc, #68]	; (8008c70 <UARTEx_SetNbDataToProcess+0x94>)
 8008c2c:	5c8a      	ldrb	r2, [r1, r2]
 8008c2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c32:	7b3a      	ldrb	r2, [r7, #12]
 8008c34:	490f      	ldr	r1, [pc, #60]	; (8008c74 <UARTEx_SetNbDataToProcess+0x98>)
 8008c36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c38:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	7b7a      	ldrb	r2, [r7, #13]
 8008c48:	4909      	ldr	r1, [pc, #36]	; (8008c70 <UARTEx_SetNbDataToProcess+0x94>)
 8008c4a:	5c8a      	ldrb	r2, [r1, r2]
 8008c4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c50:	7b7a      	ldrb	r2, [r7, #13]
 8008c52:	4908      	ldr	r1, [pc, #32]	; (8008c74 <UARTEx_SetNbDataToProcess+0x98>)
 8008c54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c62:	bf00      	nop
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	0800f360 	.word	0x0800f360
 8008c74:	0800f368 	.word	0x0800f368

08008c78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008c78:	b084      	sub	sp, #16
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	f107 001c 	add.w	r0, r7, #28
 8008c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008c8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008c90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008c92:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008c96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008c9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008c9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <SDMMC_Init+0x50>)
 8008cac:	4013      	ands	r3, r2
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	b004      	add	sp, #16
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	ffc02c00 	.word	0xffc02c00

08008ccc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f043 0203 	orr.w	r2, r3, #3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0303 	and.w	r3, r3, #3
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
	...

08008d48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008d66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008d6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008d72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <SDMMC_SendCommand+0x50>)
 8008d80:	4013      	ands	r3, r2
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	431a      	orrs	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	fffee0c0 	.word	0xfffee0c0

08008d9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	b2db      	uxtb	r3, r3
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3314      	adds	r3, #20
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	4413      	add	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e02:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008e08:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008e0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	431a      	orrs	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0

}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e42:	2310      	movs	r3, #16
 8008e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e56:	f107 0308 	add.w	r3, r7, #8
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff ff73 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e66:	2110      	movs	r1, #16
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa5f 	bl	800932c <SDMMC_GetCmdResp1>
 8008e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e70:	69fb      	ldr	r3, [r7, #28]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3720      	adds	r7, #32
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b088      	sub	sp, #32
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e88:	2311      	movs	r3, #17
 8008e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e92:	2300      	movs	r3, #0
 8008e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e9c:	f107 0308 	add.w	r3, r7, #8
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff ff50 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eac:	2111      	movs	r1, #17
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa3c 	bl	800932c <SDMMC_GetCmdResp1>
 8008eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008ece:	2312      	movs	r3, #18
 8008ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ee0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff ff2d 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef2:	2112      	movs	r1, #18
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa19 	bl	800932c <SDMMC_GetCmdResp1>
 8008efa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008efc:	69fb      	ldr	r3, [r7, #28]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3720      	adds	r7, #32
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b088      	sub	sp, #32
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008f14:	2318      	movs	r3, #24
 8008f16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f28:	f107 0308 	add.w	r3, r7, #8
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff ff0a 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f38:	2118      	movs	r1, #24
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f9f6 	bl	800932c <SDMMC_GetCmdResp1>
 8008f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f42:	69fb      	ldr	r3, [r7, #28]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3720      	adds	r7, #32
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008f5a:	2319      	movs	r3, #25
 8008f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f6e:	f107 0308 	add.w	r3, r7, #8
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff fee7 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7e:	2119      	movs	r1, #25
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f9d3 	bl	800932c <SDMMC_GetCmdResp1>
 8008f86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f88:	69fb      	ldr	r3, [r7, #28]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3720      	adds	r7, #32
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008fa0:	230c      	movs	r3, #12
 8008fa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008faa:	2300      	movs	r3, #0
 8008fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fb2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fcc:	f107 0308 	add.w	r3, r7, #8
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff feb8 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008fd8:	4a0b      	ldr	r2, [pc, #44]	; (8009008 <SDMMC_CmdStopTransfer+0x74>)
 8008fda:	210c      	movs	r1, #12
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9a5 	bl	800932c <SDMMC_GetCmdResp1>
 8008fe2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ff6:	d101      	bne.n	8008ffc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3720      	adds	r7, #32
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	05f5e100 	.word	0x05f5e100

0800900c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800901a:	2307      	movs	r3, #7
 800901c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800901e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009024:	2300      	movs	r3, #0
 8009026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800902c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800902e:	f107 0308 	add.w	r3, r7, #8
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff fe87 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800903a:	f241 3288 	movw	r2, #5000	; 0x1388
 800903e:	2107      	movs	r1, #7
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f973 	bl	800932c <SDMMC_GetCmdResp1>
 8009046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009048:	69fb      	ldr	r3, [r7, #28]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b088      	sub	sp, #32
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009062:	2300      	movs	r3, #0
 8009064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009066:	2300      	movs	r3, #0
 8009068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800906a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800906e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009070:	f107 0308 	add.w	r3, r7, #8
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff fe66 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fb97 	bl	80097b0 <SDMMC_GetCmdError>
 8009082:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009084:	69fb      	ldr	r3, [r7, #28]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3720      	adds	r7, #32
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b088      	sub	sp, #32
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009096:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800909a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800909c:	2308      	movs	r3, #8
 800909e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff fe46 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fb29 	bl	8009714 <SDMMC_GetCmdResp7>
 80090c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090c4:	69fb      	ldr	r3, [r7, #28]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3720      	adds	r7, #32
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b088      	sub	sp, #32
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80090dc:	2337      	movs	r3, #55	; 0x37
 80090de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f0:	f107 0308 	add.w	r3, r7, #8
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fe26 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80090fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009100:	2137      	movs	r1, #55	; 0x37
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f912 	bl	800932c <SDMMC_GetCmdResp1>
 8009108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800910a:	69fb      	ldr	r3, [r7, #28]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009122:	2329      	movs	r3, #41	; 0x29
 8009124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800912a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff fe03 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fa2e 	bl	80095a4 <SDMMC_GetCmdResp3>
 8009148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800914a:	69fb      	ldr	r3, [r7, #28]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3720      	adds	r7, #32
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009162:	2306      	movs	r3, #6
 8009164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800916a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800916c:	2300      	movs	r3, #0
 800916e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009176:	f107 0308 	add.w	r3, r7, #8
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff fde3 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009182:	f241 3288 	movw	r2, #5000	; 0x1388
 8009186:	2106      	movs	r1, #6
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f8cf 	bl	800932c <SDMMC_GetCmdResp1>
 800918e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009190:	69fb      	ldr	r3, [r7, #28]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3720      	adds	r7, #32
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b088      	sub	sp, #32
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80091a2:	2300      	movs	r3, #0
 80091a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80091a6:	2333      	movs	r3, #51	; 0x33
 80091a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091ba:	f107 0308 	add.w	r3, r7, #8
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff fdc1 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80091c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ca:	2133      	movs	r1, #51	; 0x33
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f8ad 	bl	800932c <SDMMC_GetCmdResp1>
 80091d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d4:	69fb      	ldr	r3, [r7, #28]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3720      	adds	r7, #32
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b088      	sub	sp, #32
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80091ea:	2302      	movs	r3, #2
 80091ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80091ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80091f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091f4:	2300      	movs	r3, #0
 80091f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091fe:	f107 0308 	add.w	r3, r7, #8
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fd9f 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f980 	bl	8009510 <SDMMC_GetCmdResp2>
 8009210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009212:	69fb      	ldr	r3, [r7, #28]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3720      	adds	r7, #32
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800922a:	2309      	movs	r3, #9
 800922c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800922e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800923c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800923e:	f107 0308 	add.w	r3, r7, #8
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff fd7f 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f960 	bl	8009510 <SDMMC_GetCmdResp2>
 8009250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009252:	69fb      	ldr	r3, [r7, #28]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009266:	2300      	movs	r3, #0
 8009268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800926a:	2303      	movs	r3, #3
 800926c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800926e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009274:	2300      	movs	r3, #0
 8009276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800927c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800927e:	f107 0308 	add.w	r3, r7, #8
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff fd5f 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	2103      	movs	r1, #3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f9c8 	bl	8009624 <SDMMC_GetCmdResp6>
 8009294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009296:	69fb      	ldr	r3, [r7, #28]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3720      	adds	r7, #32
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80092ae:	230d      	movs	r3, #13
 80092b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092b8:	2300      	movs	r3, #0
 80092ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff fd3d 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80092ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d2:	210d      	movs	r1, #13
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f829 	bl	800932c <SDMMC_GetCmdResp1>
 80092da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092dc:	69fb      	ldr	r3, [r7, #28]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3720      	adds	r7, #32
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b088      	sub	sp, #32
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80092f2:	230d      	movs	r3, #13
 80092f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092fc:	2300      	movs	r3, #0
 80092fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009304:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009306:	f107 0308 	add.w	r3, r7, #8
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff fd1b 	bl	8008d48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009312:	f241 3288 	movw	r2, #5000	; 0x1388
 8009316:	210d      	movs	r1, #13
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f807 	bl	800932c <SDMMC_GetCmdResp1>
 800931e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009320:	69fb      	ldr	r3, [r7, #28]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
	...

0800932c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	460b      	mov	r3, r1
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800933a:	4b70      	ldr	r3, [pc, #448]	; (80094fc <SDMMC_GetCmdResp1+0x1d0>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a70      	ldr	r2, [pc, #448]	; (8009500 <SDMMC_GetCmdResp1+0x1d4>)
 8009340:	fba2 2303 	umull	r2, r3, r2, r3
 8009344:	0a5a      	lsrs	r2, r3, #9
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	fb02 f303 	mul.w	r3, r2, r3
 800934c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	1e5a      	subs	r2, r3, #1
 8009352:	61fa      	str	r2, [r7, #28]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800935c:	e0c9      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009362:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	4b67      	ldr	r3, [pc, #412]	; (8009504 <SDMMC_GetCmdResp1+0x1d8>)
 8009368:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0ef      	beq.n	800934e <SDMMC_GetCmdResp1+0x22>
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1ea      	bne.n	800934e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2204      	movs	r2, #4
 8009388:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800938a:	2304      	movs	r3, #4
 800938c:	e0b1      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e0a6      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4a58      	ldr	r2, [pc, #352]	; (8009508 <SDMMC_GetCmdResp1+0x1dc>)
 80093a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff fcf6 	bl	8008d9c <SDMMC_GetCommandResponse>
 80093b0:	4603      	mov	r3, r0
 80093b2:	461a      	mov	r2, r3
 80093b4:	7afb      	ldrb	r3, [r7, #11]
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d001      	beq.n	80093be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e099      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80093be:	2100      	movs	r1, #0
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff fcf8 	bl	8008db6 <SDMMC_GetResponse>
 80093c6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4b50      	ldr	r3, [pc, #320]	; (800950c <SDMMC_GetCmdResp1+0x1e0>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80093d2:	2300      	movs	r3, #0
 80093d4:	e08d      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	da02      	bge.n	80093e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80093dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093e0:	e087      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80093ec:	2340      	movs	r3, #64	; 0x40
 80093ee:	e080      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80093fa:	2380      	movs	r3, #128	; 0x80
 80093fc:	e079      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800940c:	e071      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800941c:	e069      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942c:	e061      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800943c:	e059      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800944c:	e051      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800945c:	e049      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800946c:	e041      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800947c:	e039      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800948c:	e031      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800949c:	e029      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80094a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094ac:	e021      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80094b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80094bc:	e019      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80094c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80094cc:	e011      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80094d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094dc:	e009      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f003 0308 	and.w	r3, r3, #8
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80094e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80094ec:	e001      	b.n	80094f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	24000010 	.word	0x24000010
 8009500:	10624dd3 	.word	0x10624dd3
 8009504:	00200045 	.word	0x00200045
 8009508:	002000c5 	.word	0x002000c5
 800950c:	fdffe008 	.word	0xfdffe008

08009510 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009518:	4b1f      	ldr	r3, [pc, #124]	; (8009598 <SDMMC_GetCmdResp2+0x88>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a1f      	ldr	r2, [pc, #124]	; (800959c <SDMMC_GetCmdResp2+0x8c>)
 800951e:	fba2 2303 	umull	r2, r3, r2, r3
 8009522:	0a5b      	lsrs	r3, r3, #9
 8009524:	f241 3288 	movw	r2, #5000	; 0x1388
 8009528:	fb02 f303 	mul.w	r3, r2, r3
 800952c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	1e5a      	subs	r2, r3, #1
 8009532:	60fa      	str	r2, [r7, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d102      	bne.n	800953e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800953c:	e026      	b.n	800958c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009542:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0ef      	beq.n	800952e <SDMMC_GetCmdResp2+0x1e>
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1ea      	bne.n	800952e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2204      	movs	r2, #4
 8009568:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800956a:	2304      	movs	r3, #4
 800956c:	e00e      	b.n	800958c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009580:	2301      	movs	r3, #1
 8009582:	e003      	b.n	800958c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a06      	ldr	r2, [pc, #24]	; (80095a0 <SDMMC_GetCmdResp2+0x90>)
 8009588:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	24000010 	.word	0x24000010
 800959c:	10624dd3 	.word	0x10624dd3
 80095a0:	002000c5 	.word	0x002000c5

080095a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80095ac:	4b1a      	ldr	r3, [pc, #104]	; (8009618 <SDMMC_GetCmdResp3+0x74>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a1a      	ldr	r2, [pc, #104]	; (800961c <SDMMC_GetCmdResp3+0x78>)
 80095b2:	fba2 2303 	umull	r2, r3, r2, r3
 80095b6:	0a5b      	lsrs	r3, r3, #9
 80095b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095bc:	fb02 f303 	mul.w	r3, r2, r3
 80095c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	1e5a      	subs	r2, r3, #1
 80095c6:	60fa      	str	r2, [r7, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095d0:	e01b      	b.n	800960a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0ef      	beq.n	80095c2 <SDMMC_GetCmdResp3+0x1e>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1ea      	bne.n	80095c2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f0:	f003 0304 	and.w	r3, r3, #4
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2204      	movs	r2, #4
 80095fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095fe:	2304      	movs	r3, #4
 8009600:	e003      	b.n	800960a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a06      	ldr	r2, [pc, #24]	; (8009620 <SDMMC_GetCmdResp3+0x7c>)
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	24000010 	.word	0x24000010
 800961c:	10624dd3 	.word	0x10624dd3
 8009620:	002000c5 	.word	0x002000c5

08009624 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	460b      	mov	r3, r1
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009632:	4b35      	ldr	r3, [pc, #212]	; (8009708 <SDMMC_GetCmdResp6+0xe4>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a35      	ldr	r2, [pc, #212]	; (800970c <SDMMC_GetCmdResp6+0xe8>)
 8009638:	fba2 2303 	umull	r2, r3, r2, r3
 800963c:	0a5b      	lsrs	r3, r3, #9
 800963e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009642:	fb02 f303 	mul.w	r3, r2, r3
 8009646:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	1e5a      	subs	r2, r3, #1
 800964c:	61fa      	str	r2, [r7, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d102      	bne.n	8009658 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009652:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009656:	e052      	b.n	80096fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009664:	2b00      	cmp	r3, #0
 8009666:	d0ef      	beq.n	8009648 <SDMMC_GetCmdResp6+0x24>
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1ea      	bne.n	8009648 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009676:	f003 0304 	and.w	r3, r3, #4
 800967a:	2b00      	cmp	r3, #0
 800967c:	d004      	beq.n	8009688 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2204      	movs	r2, #4
 8009682:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009684:	2304      	movs	r3, #4
 8009686:	e03a      	b.n	80096fe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d004      	beq.n	800969e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800969a:	2301      	movs	r3, #1
 800969c:	e02f      	b.n	80096fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f7ff fb7c 	bl	8008d9c <SDMMC_GetCommandResponse>
 80096a4:	4603      	mov	r3, r0
 80096a6:	461a      	mov	r2, r3
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d001      	beq.n	80096b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e025      	b.n	80096fe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4a16      	ldr	r2, [pc, #88]	; (8009710 <SDMMC_GetCmdResp6+0xec>)
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80096b8:	2100      	movs	r1, #0
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f7ff fb7b 	bl	8008db6 <SDMMC_GetResponse>
 80096c0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d106      	bne.n	80096da <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	0c1b      	lsrs	r3, r3, #16
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	e011      	b.n	80096fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096e8:	e009      	b.n	80096fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f8:	e001      	b.n	80096fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3720      	adds	r7, #32
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	24000010 	.word	0x24000010
 800970c:	10624dd3 	.word	0x10624dd3
 8009710:	002000c5 	.word	0x002000c5

08009714 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800971c:	4b22      	ldr	r3, [pc, #136]	; (80097a8 <SDMMC_GetCmdResp7+0x94>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a22      	ldr	r2, [pc, #136]	; (80097ac <SDMMC_GetCmdResp7+0x98>)
 8009722:	fba2 2303 	umull	r2, r3, r2, r3
 8009726:	0a5b      	lsrs	r3, r3, #9
 8009728:	f241 3288 	movw	r2, #5000	; 0x1388
 800972c:	fb02 f303 	mul.w	r3, r2, r3
 8009730:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	1e5a      	subs	r2, r3, #1
 8009736:	60fa      	str	r2, [r7, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800973c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009740:	e02c      	b.n	800979c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009746:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0ef      	beq.n	8009732 <SDMMC_GetCmdResp7+0x1e>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1ea      	bne.n	8009732 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	d004      	beq.n	8009772 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2204      	movs	r2, #4
 800976c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800976e:	2304      	movs	r3, #4
 8009770:	e014      	b.n	800979c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d004      	beq.n	8009788 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009784:	2301      	movs	r3, #1
 8009786:	e009      	b.n	800979c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2240      	movs	r2, #64	; 0x40
 8009798:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800979a:	2300      	movs	r3, #0

}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	24000010 	.word	0x24000010
 80097ac:	10624dd3 	.word	0x10624dd3

080097b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80097b8:	4b11      	ldr	r3, [pc, #68]	; (8009800 <SDMMC_GetCmdError+0x50>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a11      	ldr	r2, [pc, #68]	; (8009804 <SDMMC_GetCmdError+0x54>)
 80097be:	fba2 2303 	umull	r2, r3, r2, r3
 80097c2:	0a5b      	lsrs	r3, r3, #9
 80097c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c8:	fb02 f303 	mul.w	r3, r2, r3
 80097cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	1e5a      	subs	r2, r3, #1
 80097d2:	60fa      	str	r2, [r7, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097dc:	e009      	b.n	80097f2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0f1      	beq.n	80097ce <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a06      	ldr	r2, [pc, #24]	; (8009808 <SDMMC_GetCmdError+0x58>)
 80097ee:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	24000010 	.word	0x24000010
 8009804:	10624dd3 	.word	0x10624dd3
 8009808:	002000c5 	.word	0x002000c5

0800980c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009810:	4904      	ldr	r1, [pc, #16]	; (8009824 <MX_FATFS_Init+0x18>)
 8009812:	4805      	ldr	r0, [pc, #20]	; (8009828 <MX_FATFS_Init+0x1c>)
 8009814:	f004 fcdc 	bl	800e1d0 <FATFS_LinkDriver>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	4b03      	ldr	r3, [pc, #12]	; (800982c <MX_FATFS_Init+0x20>)
 800981e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009820:	bf00      	nop
 8009822:	bd80      	pop	{r7, pc}
 8009824:	2400177c 	.word	0x2400177c
 8009828:	0800f370 	.word	0x0800f370
 800982c:	24001778 	.word	0x24001778

08009830 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009834:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009836:	4618      	mov	r0, r3
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800984a:	f000 f86b 	bl	8009924 <BSP_SD_IsDetected>
 800984e:	4603      	mov	r3, r0
 8009850:	2b01      	cmp	r3, #1
 8009852:	d001      	beq.n	8009858 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009854:	2302      	movs	r3, #2
 8009856:	e005      	b.n	8009864 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009858:	4804      	ldr	r0, [pc, #16]	; (800986c <BSP_SD_Init+0x2c>)
 800985a:	f7fc f8eb 	bl	8005a34 <HAL_SD_Init>
 800985e:	4603      	mov	r3, r0
 8009860:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009862:	79fb      	ldrb	r3, [r7, #7]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	240000a4 	.word	0x240000a4

08009870 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b088      	sub	sp, #32
 8009874:	af02      	add	r7, sp, #8
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	4806      	ldr	r0, [pc, #24]	; (80098a8 <BSP_SD_ReadBlocks+0x38>)
 800988e:	f7fc f9e9 	bl	8005c64 <HAL_SD_ReadBlocks>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	240000a4 	.word	0x240000a4

080098ac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	4806      	ldr	r0, [pc, #24]	; (80098e4 <BSP_SD_WriteBlocks+0x38>)
 80098ca:	f7fc fb55 	bl	8005f78 <HAL_SD_WriteBlocks>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	240000a4 	.word	0x240000a4

080098e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80098ec:	4805      	ldr	r0, [pc, #20]	; (8009904 <BSP_SD_GetCardState+0x1c>)
 80098ee:	f7fd f867 	bl	80069c0 <HAL_SD_GetCardState>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b04      	cmp	r3, #4
 80098f6:	bf14      	ite	ne
 80098f8:	2301      	movne	r3, #1
 80098fa:	2300      	moveq	r3, #0
 80098fc:	b2db      	uxtb	r3, r3
}
 80098fe:	4618      	mov	r0, r3
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	240000a4 	.word	0x240000a4

08009908 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4803      	ldr	r0, [pc, #12]	; (8009920 <BSP_SD_GetCardInfo+0x18>)
 8009914:	f7fc ff18 	bl	8006748 <HAL_SD_GetCardInfo>
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	240000a4 	.word	0x240000a4

08009924 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800992a:	2301      	movs	r3, #1
 800992c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800992e:	f000 f80b 	bl	8009948 <BSP_PlatformIsDetected>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009938:	2300      	movs	r3, #0
 800993a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	b2db      	uxtb	r3, r3
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800994e:	2301      	movs	r3, #1
 8009950:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009956:	4810      	ldr	r0, [pc, #64]	; (8009998 <BSP_PlatformIsDetected+0x50>)
 8009958:	f7f8 fec4 	bl	80026e4 <HAL_GPIO_ReadPin>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009962:	2300      	movs	r3, #0
 8009964:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */

    //Stupid that the code is duplicated here but the code generator keps overwriting my fix.
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 8009966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800996a:	480b      	ldr	r0, [pc, #44]	; (8009998 <BSP_PlatformIsDetected+0x50>)
 800996c:	f7f8 feba 	bl	80026e4 <HAL_GPIO_ReadPin>
 8009970:	4603      	mov	r3, r0
 8009972:	2b01      	cmp	r3, #1
 8009974:	d001      	beq.n	800997a <BSP_PlatformIsDetected+0x32>
    {
        status = SD_NOT_PRESENT;
 8009976:	2300      	movs	r3, #0
 8009978:	71fb      	strb	r3, [r7, #7]
    }
    return (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET) ? SD_PRESENT : SD_NOT_PRESENT;
 800997a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800997e:	4806      	ldr	r0, [pc, #24]	; (8009998 <BSP_PlatformIsDetected+0x50>)
 8009980:	f7f8 feb0 	bl	80026e4 <HAL_GPIO_ReadPin>
 8009984:	4603      	mov	r3, r0
 8009986:	2b01      	cmp	r3, #1
 8009988:	bf0c      	ite	eq
 800998a:	2301      	moveq	r3, #1
 800998c:	2300      	movne	r3, #0
 800998e:	b2db      	uxtb	r3, r3

    /* USER CODE END 1 */
    return status;
}
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	58020800 	.word	0x58020800

0800999c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80099a6:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <SD_CheckStatus+0x38>)
 80099a8:	2201      	movs	r2, #1
 80099aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80099ac:	f7ff ff9c 	bl	80098e8 <BSP_SD_GetCardState>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d107      	bne.n	80099c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80099b6:	4b07      	ldr	r3, [pc, #28]	; (80099d4 <SD_CheckStatus+0x38>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <SD_CheckStatus+0x38>)
 80099c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80099c6:	4b03      	ldr	r3, [pc, #12]	; (80099d4 <SD_CheckStatus+0x38>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	b2db      	uxtb	r3, r3
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	2400001d 	.word	0x2400001d

080099d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80099e2:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <SD_initialize+0x38>)
 80099e4:	2201      	movs	r2, #1
 80099e6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80099e8:	f7ff ff2a 	bl	8009840 <BSP_SD_Init>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d107      	bne.n	8009a02 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff ffd1 	bl	800999c <SD_CheckStatus>
 80099fa:	4603      	mov	r3, r0
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <SD_initialize+0x38>)
 8009a00:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009a02:	4b03      	ldr	r3, [pc, #12]	; (8009a10 <SD_initialize+0x38>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b2db      	uxtb	r3, r3
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	2400001d 	.word	0x2400001d

08009a14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff ffbb 	bl	800999c <SD_CheckStatus>
 8009a26:	4603      	mov	r3, r0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	68b8      	ldr	r0, [r7, #8]
 8009a4e:	f7ff ff0f 	bl	8009870 <BSP_SD_ReadBlocks>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d107      	bne.n	8009a68 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009a58:	bf00      	nop
 8009a5a:	f7ff ff45 	bl	80098e8 <BSP_SD_GetCardState>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1fa      	bne.n	8009a5a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b086      	sub	sp, #24
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	68b8      	ldr	r0, [r7, #8]
 8009a90:	f7ff ff0c 	bl	80098ac <BSP_SD_WriteBlocks>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d107      	bne.n	8009aaa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009a9a:	bf00      	nop
 8009a9c:	f7ff ff24 	bl	80098e8 <BSP_SD_GetCardState>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1fa      	bne.n	8009a9c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08c      	sub	sp, #48	; 0x30
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	603a      	str	r2, [r7, #0]
 8009abe:	71fb      	strb	r3, [r7, #7]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009aca:	4b25      	ldr	r3, [pc, #148]	; (8009b60 <SD_ioctl+0xac>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <SD_ioctl+0x28>
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e03c      	b.n	8009b56 <SD_ioctl+0xa2>

  switch (cmd)
 8009adc:	79bb      	ldrb	r3, [r7, #6]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d834      	bhi.n	8009b4c <SD_ioctl+0x98>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <SD_ioctl+0x34>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009b01 	.word	0x08009b01
 8009af0:	08009b19 	.word	0x08009b19
 8009af4:	08009b33 	.word	0x08009b33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009afe:	e028      	b.n	8009b52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff feff 	bl	8009908 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009b0a:	6a3a      	ldr	r2, [r7, #32]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b16:	e01c      	b.n	8009b52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b18:	f107 0308 	add.w	r3, r7, #8
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff fef3 	bl	8009908 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b30:	e00f      	b.n	8009b52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009b32:	f107 0308 	add.w	r3, r7, #8
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fee6 	bl	8009908 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	0a5a      	lsrs	r2, r3, #9
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009b4a:	e002      	b.n	8009b52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3730      	adds	r7, #48	; 0x30
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	2400001d 	.word	0x2400001d

08009b64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	4a08      	ldr	r2, [pc, #32]	; (8009b94 <disk_status+0x30>)
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	79fa      	ldrb	r2, [r7, #7]
 8009b7c:	4905      	ldr	r1, [pc, #20]	; (8009b94 <disk_status+0x30>)
 8009b7e:	440a      	add	r2, r1
 8009b80:	7a12      	ldrb	r2, [r2, #8]
 8009b82:	4610      	mov	r0, r2
 8009b84:	4798      	blx	r3
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	24001758 	.word	0x24001758

08009b98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	4a0d      	ldr	r2, [pc, #52]	; (8009be0 <disk_initialize+0x48>)
 8009baa:	5cd3      	ldrb	r3, [r2, r3]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d111      	bne.n	8009bd4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	4a0b      	ldr	r2, [pc, #44]	; (8009be0 <disk_initialize+0x48>)
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	4a09      	ldr	r2, [pc, #36]	; (8009be0 <disk_initialize+0x48>)
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	79fa      	ldrb	r2, [r7, #7]
 8009bc6:	4906      	ldr	r1, [pc, #24]	; (8009be0 <disk_initialize+0x48>)
 8009bc8:	440a      	add	r2, r1
 8009bca:	7a12      	ldrb	r2, [r2, #8]
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	24001758 	.word	0x24001758

08009be4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	4a0a      	ldr	r2, [pc, #40]	; (8009c20 <disk_read+0x3c>)
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	689c      	ldr	r4, [r3, #8]
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	4a07      	ldr	r2, [pc, #28]	; (8009c20 <disk_read+0x3c>)
 8009c04:	4413      	add	r3, r2
 8009c06:	7a18      	ldrb	r0, [r3, #8]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	68b9      	ldr	r1, [r7, #8]
 8009c0e:	47a0      	blx	r4
 8009c10:	4603      	mov	r3, r0
 8009c12:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	371c      	adds	r7, #28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd90      	pop	{r4, r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	24001758 	.word	0x24001758

08009c24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	4a0a      	ldr	r2, [pc, #40]	; (8009c60 <disk_write+0x3c>)
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4413      	add	r3, r2
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	68dc      	ldr	r4, [r3, #12]
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	4a07      	ldr	r2, [pc, #28]	; (8009c60 <disk_write+0x3c>)
 8009c44:	4413      	add	r3, r2
 8009c46:	7a18      	ldrb	r0, [r3, #8]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	68b9      	ldr	r1, [r7, #8]
 8009c4e:	47a0      	blx	r4
 8009c50:	4603      	mov	r3, r0
 8009c52:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd90      	pop	{r4, r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	24001758 	.word	0x24001758

08009c64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	603a      	str	r2, [r7, #0]
 8009c6e:	71fb      	strb	r3, [r7, #7]
 8009c70:	460b      	mov	r3, r1
 8009c72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	4a09      	ldr	r2, [pc, #36]	; (8009c9c <disk_ioctl+0x38>)
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	79fa      	ldrb	r2, [r7, #7]
 8009c82:	4906      	ldr	r1, [pc, #24]	; (8009c9c <disk_ioctl+0x38>)
 8009c84:	440a      	add	r2, r1
 8009c86:	7a10      	ldrb	r0, [r2, #8]
 8009c88:	79b9      	ldrb	r1, [r7, #6]
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	4798      	blx	r3
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	24001758 	.word	0x24001758

08009ca0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3301      	adds	r3, #1
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009cb0:	89fb      	ldrh	r3, [r7, #14]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	b21a      	sxth	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	b21b      	sxth	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b21b      	sxth	r3, r3
 8009cc0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009cc2:	89fb      	ldrh	r3, [r7, #14]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3303      	adds	r3, #3
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	021b      	lsls	r3, r3, #8
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	3202      	adds	r2, #2
 8009ce8:	7812      	ldrb	r2, [r2, #0]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	3201      	adds	r2, #1
 8009cf6:	7812      	ldrb	r2, [r2, #0]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	021b      	lsls	r3, r3, #8
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	7812      	ldrb	r2, [r2, #0]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
	return rv;
 8009d08:	68fb      	ldr	r3, [r7, #12]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009d16:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009d1a:	b08d      	sub	sp, #52	; 0x34
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	3307      	adds	r3, #7
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 8009d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d34:	f04f 0000 	mov.w	r0, #0
 8009d38:	f04f 0100 	mov.w	r1, #0
 8009d3c:	0219      	lsls	r1, r3, #8
 8009d3e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d42:	0210      	lsls	r0, r2, #8
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	3306      	adds	r3, #6
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	ea40 0402 	orr.w	r4, r0, r2
 8009d54:	ea41 0503 	orr.w	r5, r1, r3
 8009d58:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 8009d5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d60:	f04f 0000 	mov.w	r0, #0
 8009d64:	f04f 0100 	mov.w	r1, #0
 8009d68:	0219      	lsls	r1, r3, #8
 8009d6a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d6e:	0210      	lsls	r0, r2, #8
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	3305      	adds	r3, #5
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	f04f 0300 	mov.w	r3, #0
 8009d7c:	ea40 0802 	orr.w	r8, r0, r2
 8009d80:	ea41 0903 	orr.w	r9, r1, r3
 8009d84:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 8009d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d8c:	f04f 0000 	mov.w	r0, #0
 8009d90:	f04f 0100 	mov.w	r1, #0
 8009d94:	0219      	lsls	r1, r3, #8
 8009d96:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d9a:	0210      	lsls	r0, r2, #8
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	3304      	adds	r3, #4
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	ea40 0402 	orr.w	r4, r0, r2
 8009dac:	61bc      	str	r4, [r7, #24]
 8009dae:	430b      	orrs	r3, r1
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009db6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 8009dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009dbe:	f04f 0200 	mov.w	r2, #0
 8009dc2:	f04f 0300 	mov.w	r3, #0
 8009dc6:	020b      	lsls	r3, r1, #8
 8009dc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dcc:	0202      	lsls	r2, r0, #8
 8009dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dd0:	3103      	adds	r1, #3
 8009dd2:	7809      	ldrb	r1, [r1, #0]
 8009dd4:	b2c8      	uxtb	r0, r1
 8009dd6:	f04f 0100 	mov.w	r1, #0
 8009dda:	ea42 0400 	orr.w	r4, r2, r0
 8009dde:	613c      	str	r4, [r7, #16]
 8009de0:	430b      	orrs	r3, r1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009de8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 8009dec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	020b      	lsls	r3, r1, #8
 8009dfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dfe:	0202      	lsls	r2, r0, #8
 8009e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e02:	3102      	adds	r1, #2
 8009e04:	7809      	ldrb	r1, [r1, #0]
 8009e06:	b2c8      	uxtb	r0, r1
 8009e08:	f04f 0100 	mov.w	r1, #0
 8009e0c:	ea42 0400 	orr.w	r4, r2, r0
 8009e10:	60bc      	str	r4, [r7, #8]
 8009e12:	430b      	orrs	r3, r1
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009e1a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 8009e1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009e22:	f04f 0200 	mov.w	r2, #0
 8009e26:	f04f 0300 	mov.w	r3, #0
 8009e2a:	020b      	lsls	r3, r1, #8
 8009e2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e30:	0202      	lsls	r2, r0, #8
 8009e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e34:	3101      	adds	r1, #1
 8009e36:	7809      	ldrb	r1, [r1, #0]
 8009e38:	b2c8      	uxtb	r0, r1
 8009e3a:	f04f 0100 	mov.w	r1, #0
 8009e3e:	ea42 0400 	orr.w	r4, r2, r0
 8009e42:	603c      	str	r4, [r7, #0]
 8009e44:	430b      	orrs	r3, r1
 8009e46:	607b      	str	r3, [r7, #4]
 8009e48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009e4c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 8009e50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	020b      	lsls	r3, r1, #8
 8009e5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e62:	0202      	lsls	r2, r0, #8
 8009e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e66:	7809      	ldrb	r1, [r1, #0]
 8009e68:	b2c8      	uxtb	r0, r1
 8009e6a:	f04f 0100 	mov.w	r1, #0
 8009e6e:	ea42 0a00 	orr.w	sl, r2, r0
 8009e72:	ea43 0b01 	orr.w	fp, r3, r1
 8009e76:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 8009e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8009e7e:	4610      	mov	r0, r2
 8009e80:	4619      	mov	r1, r3
 8009e82:	3734      	adds	r7, #52	; 0x34
 8009e84:	46bd      	mov	sp, r7
 8009e86:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009e8a:	4770      	bx	lr

08009e8c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	607a      	str	r2, [r7, #4]
 8009e9e:	887a      	ldrh	r2, [r7, #2]
 8009ea0:	b2d2      	uxtb	r2, r2
 8009ea2:	701a      	strb	r2, [r3, #0]
 8009ea4:	887b      	ldrh	r3, [r7, #2]
 8009ea6:	0a1b      	lsrs	r3, r3, #8
 8009ea8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	887a      	ldrh	r2, [r7, #2]
 8009eb2:	b2d2      	uxtb	r2, r2
 8009eb4:	701a      	strb	r2, [r3, #0]
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	683a      	ldr	r2, [r7, #0]
 8009ed4:	b2d2      	uxtb	r2, r2
 8009ed6:	701a      	strb	r2, [r3, #0]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	0a1b      	lsrs	r3, r3, #8
 8009edc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	b2d2      	uxtb	r2, r2
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	0a1b      	lsrs	r3, r3, #8
 8009eee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	607a      	str	r2, [r7, #4]
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	b2d2      	uxtb	r2, r2
 8009f0c:	701a      	strb	r2, [r3, #0]
}
 8009f0e:	bf00      	nop
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b085      	sub	sp, #20
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	60f8      	str	r0, [r7, #12]
 8009f22:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	60fa      	str	r2, [r7, #12]
 8009f2c:	783a      	ldrb	r2, [r7, #0]
 8009f2e:	701a      	strb	r2, [r3, #0]
 8009f30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f34:	f04f 0200 	mov.w	r2, #0
 8009f38:	f04f 0300 	mov.w	r3, #0
 8009f3c:	0a02      	lsrs	r2, r0, #8
 8009f3e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f42:	0a0b      	lsrs	r3, r1, #8
 8009f44:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	60fa      	str	r2, [r7, #12]
 8009f4e:	783a      	ldrb	r2, [r7, #0]
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	0a02      	lsrs	r2, r0, #8
 8009f60:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f64:	0a0b      	lsrs	r3, r1, #8
 8009f66:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	60fa      	str	r2, [r7, #12]
 8009f70:	783a      	ldrb	r2, [r7, #0]
 8009f72:	701a      	strb	r2, [r3, #0]
 8009f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f78:	f04f 0200 	mov.w	r2, #0
 8009f7c:	f04f 0300 	mov.w	r3, #0
 8009f80:	0a02      	lsrs	r2, r0, #8
 8009f82:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f86:	0a0b      	lsrs	r3, r1, #8
 8009f88:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	60fa      	str	r2, [r7, #12]
 8009f92:	783a      	ldrb	r2, [r7, #0]
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f9a:	f04f 0200 	mov.w	r2, #0
 8009f9e:	f04f 0300 	mov.w	r3, #0
 8009fa2:	0a02      	lsrs	r2, r0, #8
 8009fa4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009fa8:	0a0b      	lsrs	r3, r1, #8
 8009faa:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	60fa      	str	r2, [r7, #12]
 8009fb4:	783a      	ldrb	r2, [r7, #0]
 8009fb6:	701a      	strb	r2, [r3, #0]
 8009fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fbc:	f04f 0200 	mov.w	r2, #0
 8009fc0:	f04f 0300 	mov.w	r3, #0
 8009fc4:	0a02      	lsrs	r2, r0, #8
 8009fc6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009fca:	0a0b      	lsrs	r3, r1, #8
 8009fcc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	60fa      	str	r2, [r7, #12]
 8009fd6:	783a      	ldrb	r2, [r7, #0]
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fde:	f04f 0200 	mov.w	r2, #0
 8009fe2:	f04f 0300 	mov.w	r3, #0
 8009fe6:	0a02      	lsrs	r2, r0, #8
 8009fe8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009fec:	0a0b      	lsrs	r3, r1, #8
 8009fee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1c5a      	adds	r2, r3, #1
 8009ff6:	60fa      	str	r2, [r7, #12]
 8009ff8:	783a      	ldrb	r2, [r7, #0]
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a000:	f04f 0200 	mov.w	r2, #0
 800a004:	f04f 0300 	mov.w	r3, #0
 800a008:	0a02      	lsrs	r2, r0, #8
 800a00a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a00e:	0a0b      	lsrs	r3, r1, #8
 800a010:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	60fa      	str	r2, [r7, #12]
 800a01a:	783a      	ldrb	r2, [r7, #0]
 800a01c:	701a      	strb	r2, [r3, #0]
}
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a02a:	b480      	push	{r7}
 800a02c:	b087      	sub	sp, #28
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00d      	beq.n	800a060 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	1c53      	adds	r3, r2, #1
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	1c59      	adds	r1, r3, #1
 800a04e:	6179      	str	r1, [r7, #20]
 800a050:	7812      	ldrb	r2, [r2, #0]
 800a052:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3b01      	subs	r3, #1
 800a058:	607b      	str	r3, [r7, #4]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1f1      	bne.n	800a044 <mem_cpy+0x1a>
	}
}
 800a060:	bf00      	nop
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	617a      	str	r2, [r7, #20]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	b2d2      	uxtb	r2, r2
 800a086:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	607b      	str	r3, [r7, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1f3      	bne.n	800a07c <mem_set+0x10>
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	371c      	adds	r7, #28
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a0a2:	b480      	push	{r7}
 800a0a4:	b089      	sub	sp, #36	; 0x24
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	61fb      	str	r3, [r7, #28]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	61fa      	str	r2, [r7, #28]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	61ba      	str	r2, [r7, #24]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	1acb      	subs	r3, r1, r3
 800a0ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	607b      	str	r3, [r7, #4]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <mem_cmp+0x40>
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d0eb      	beq.n	800a0ba <mem_cmp+0x18>

	return r;
 800a0e2:	697b      	ldr	r3, [r7, #20]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3724      	adds	r7, #36	; 0x24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a0fa:	e002      	b.n	800a102 <chk_chr+0x12>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3301      	adds	r3, #1
 800a100:	607b      	str	r3, [r7, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <chk_chr+0x26>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	4293      	cmp	r3, r2
 800a114:	d1f2      	bne.n	800a0fc <chk_chr+0xc>
	return *str;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	781b      	ldrb	r3, [r3, #0]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
	...

0800a128 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a132:	2300      	movs	r3, #0
 800a134:	60bb      	str	r3, [r7, #8]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	e029      	b.n	800a190 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a13c:	4a27      	ldr	r2, [pc, #156]	; (800a1dc <chk_lock+0xb4>)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	4413      	add	r3, r2
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d01d      	beq.n	800a186 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a14a:	4a24      	ldr	r2, [pc, #144]	; (800a1dc <chk_lock+0xb4>)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	4413      	add	r3, r2
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d116      	bne.n	800a18a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a15c:	4a1f      	ldr	r2, [pc, #124]	; (800a1dc <chk_lock+0xb4>)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	011b      	lsls	r3, r3, #4
 800a162:	4413      	add	r3, r2
 800a164:	3304      	adds	r3, #4
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d10c      	bne.n	800a18a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a170:	4a1a      	ldr	r2, [pc, #104]	; (800a1dc <chk_lock+0xb4>)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	011b      	lsls	r3, r3, #4
 800a176:	4413      	add	r3, r2
 800a178:	3308      	adds	r3, #8
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800a180:	429a      	cmp	r2, r3
 800a182:	d102      	bne.n	800a18a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a184:	e007      	b.n	800a196 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a186:	2301      	movs	r3, #1
 800a188:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3301      	adds	r3, #1
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2bfe      	cmp	r3, #254	; 0xfe
 800a194:	d9d2      	bls.n	800a13c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2bff      	cmp	r3, #255	; 0xff
 800a19a:	d109      	bne.n	800a1b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d102      	bne.n	800a1a8 <chk_lock+0x80>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d101      	bne.n	800a1ac <chk_lock+0x84>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	e010      	b.n	800a1ce <chk_lock+0xa6>
 800a1ac:	2312      	movs	r3, #18
 800a1ae:	e00e      	b.n	800a1ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d108      	bne.n	800a1c8 <chk_lock+0xa0>
 800a1b6:	4a09      	ldr	r2, [pc, #36]	; (800a1dc <chk_lock+0xb4>)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	4413      	add	r3, r2
 800a1be:	330c      	adds	r3, #12
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c6:	d101      	bne.n	800a1cc <chk_lock+0xa4>
 800a1c8:	2310      	movs	r3, #16
 800a1ca:	e000      	b.n	800a1ce <chk_lock+0xa6>
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	24000308 	.word	0x24000308

0800a1e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	607b      	str	r3, [r7, #4]
 800a1ea:	e002      	b.n	800a1f2 <enq_lock+0x12>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2bfe      	cmp	r3, #254	; 0xfe
 800a1f6:	d806      	bhi.n	800a206 <enq_lock+0x26>
 800a1f8:	4a09      	ldr	r2, [pc, #36]	; (800a220 <enq_lock+0x40>)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	4413      	add	r3, r2
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1f2      	bne.n	800a1ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2bff      	cmp	r3, #255	; 0xff
 800a20a:	bf14      	ite	ne
 800a20c:	2301      	movne	r3, #1
 800a20e:	2300      	moveq	r3, #0
 800a210:	b2db      	uxtb	r3, r3
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	24000308 	.word	0x24000308

0800a224 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a22e:	2300      	movs	r3, #0
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	e01f      	b.n	800a274 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a234:	4a41      	ldr	r2, [pc, #260]	; (800a33c <inc_lock+0x118>)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	4413      	add	r3, r2
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	429a      	cmp	r2, r3
 800a244:	d113      	bne.n	800a26e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a246:	4a3d      	ldr	r2, [pc, #244]	; (800a33c <inc_lock+0x118>)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	4413      	add	r3, r2
 800a24e:	3304      	adds	r3, #4
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a256:	429a      	cmp	r2, r3
 800a258:	d109      	bne.n	800a26e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a25a:	4a38      	ldr	r2, [pc, #224]	; (800a33c <inc_lock+0x118>)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	4413      	add	r3, r2
 800a262:	3308      	adds	r3, #8
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d006      	beq.n	800a27c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3301      	adds	r3, #1
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2bfe      	cmp	r3, #254	; 0xfe
 800a278:	d9dc      	bls.n	800a234 <inc_lock+0x10>
 800a27a:	e000      	b.n	800a27e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a27c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2bff      	cmp	r3, #255	; 0xff
 800a282:	d132      	bne.n	800a2ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	e002      	b.n	800a290 <inc_lock+0x6c>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3301      	adds	r3, #1
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2bfe      	cmp	r3, #254	; 0xfe
 800a294:	d806      	bhi.n	800a2a4 <inc_lock+0x80>
 800a296:	4a29      	ldr	r2, [pc, #164]	; (800a33c <inc_lock+0x118>)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	4413      	add	r3, r2
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1f2      	bne.n	800a28a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2bff      	cmp	r3, #255	; 0xff
 800a2a8:	d101      	bne.n	800a2ae <inc_lock+0x8a>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e040      	b.n	800a330 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	4922      	ldr	r1, [pc, #136]	; (800a33c <inc_lock+0x118>)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	440b      	add	r3, r1
 800a2ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689a      	ldr	r2, [r3, #8]
 800a2c0:	491e      	ldr	r1, [pc, #120]	; (800a33c <inc_lock+0x118>)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	011b      	lsls	r3, r3, #4
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2d0:	491a      	ldr	r1, [pc, #104]	; (800a33c <inc_lock+0x118>)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	440b      	add	r3, r1
 800a2d8:	3308      	adds	r3, #8
 800a2da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a2dc:	4a17      	ldr	r2, [pc, #92]	; (800a33c <inc_lock+0x118>)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	4413      	add	r3, r2
 800a2e4:	330c      	adds	r3, #12
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d009      	beq.n	800a304 <inc_lock+0xe0>
 800a2f0:	4a12      	ldr	r2, [pc, #72]	; (800a33c <inc_lock+0x118>)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	011b      	lsls	r3, r3, #4
 800a2f6:	4413      	add	r3, r2
 800a2f8:	330c      	adds	r3, #12
 800a2fa:	881b      	ldrh	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d001      	beq.n	800a304 <inc_lock+0xe0>
 800a300:	2300      	movs	r3, #0
 800a302:	e015      	b.n	800a330 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d108      	bne.n	800a31c <inc_lock+0xf8>
 800a30a:	4a0c      	ldr	r2, [pc, #48]	; (800a33c <inc_lock+0x118>)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	4413      	add	r3, r2
 800a312:	330c      	adds	r3, #12
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	3301      	adds	r3, #1
 800a318:	b29a      	uxth	r2, r3
 800a31a:	e001      	b.n	800a320 <inc_lock+0xfc>
 800a31c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a320:	4906      	ldr	r1, [pc, #24]	; (800a33c <inc_lock+0x118>)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	011b      	lsls	r3, r3, #4
 800a326:	440b      	add	r3, r1
 800a328:	330c      	adds	r3, #12
 800a32a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3301      	adds	r3, #1
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	24000308 	.word	0x24000308

0800a340 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	607b      	str	r3, [r7, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2bfe      	cmp	r3, #254	; 0xfe
 800a352:	d825      	bhi.n	800a3a0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a354:	4a17      	ldr	r2, [pc, #92]	; (800a3b4 <dec_lock+0x74>)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	011b      	lsls	r3, r3, #4
 800a35a:	4413      	add	r3, r2
 800a35c:	330c      	adds	r3, #12
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a362:	89fb      	ldrh	r3, [r7, #14]
 800a364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a368:	d101      	bne.n	800a36e <dec_lock+0x2e>
 800a36a:	2300      	movs	r3, #0
 800a36c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a36e:	89fb      	ldrh	r3, [r7, #14]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <dec_lock+0x3a>
 800a374:	89fb      	ldrh	r3, [r7, #14]
 800a376:	3b01      	subs	r3, #1
 800a378:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a37a:	4a0e      	ldr	r2, [pc, #56]	; (800a3b4 <dec_lock+0x74>)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	011b      	lsls	r3, r3, #4
 800a380:	4413      	add	r3, r2
 800a382:	330c      	adds	r3, #12
 800a384:	89fa      	ldrh	r2, [r7, #14]
 800a386:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a388:	89fb      	ldrh	r3, [r7, #14]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d105      	bne.n	800a39a <dec_lock+0x5a>
 800a38e:	4a09      	ldr	r2, [pc, #36]	; (800a3b4 <dec_lock+0x74>)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	4413      	add	r3, r2
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	737b      	strb	r3, [r7, #13]
 800a39e:	e001      	b.n	800a3a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a3a4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	24000308 	.word	0x24000308

0800a3b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	e010      	b.n	800a3e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a3c6:	4a0d      	ldr	r2, [pc, #52]	; (800a3fc <clear_lock+0x44>)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	4413      	add	r3, r2
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d105      	bne.n	800a3e2 <clear_lock+0x2a>
 800a3d6:	4a09      	ldr	r2, [pc, #36]	; (800a3fc <clear_lock+0x44>)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	011b      	lsls	r3, r3, #4
 800a3dc:	4413      	add	r3, r2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2bfe      	cmp	r3, #254	; 0xfe
 800a3ec:	d9eb      	bls.n	800a3c6 <clear_lock+0xe>
	}
}
 800a3ee:	bf00      	nop
 800a3f0:	bf00      	nop
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	24000308 	.word	0x24000308

0800a400 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	78db      	ldrb	r3, [r3, #3]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d034      	beq.n	800a47e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a418:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	7858      	ldrb	r0, [r3, #1]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a424:	2301      	movs	r3, #1
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	f7ff fbfc 	bl	8009c24 <disk_write>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a432:	2301      	movs	r3, #1
 800a434:	73fb      	strb	r3, [r7, #15]
 800a436:	e022      	b.n	800a47e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	1ad2      	subs	r2, r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d217      	bcs.n	800a47e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	789b      	ldrb	r3, [r3, #2]
 800a452:	613b      	str	r3, [r7, #16]
 800a454:	e010      	b.n	800a478 <sync_window+0x78>
					wsect += fs->fsize;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	4413      	add	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	7858      	ldrb	r0, [r3, #1]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a46a:	2301      	movs	r3, #1
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	f7ff fbd9 	bl	8009c24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	3b01      	subs	r3, #1
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d8eb      	bhi.n	800a456 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3718      	adds	r7, #24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d01b      	beq.n	800a4d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ffad 	bl	800a400 <sync_window>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d113      	bne.n	800a4d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7858      	ldrb	r0, [r3, #1]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	683a      	ldr	r2, [r7, #0]
 800a4be:	f7ff fb91 	bl	8009be4 <disk_read>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
	return res;
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
	...

0800a4e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ff87 	bl	800a400 <sync_window>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d158      	bne.n	800a5ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b03      	cmp	r3, #3
 800a502:	d148      	bne.n	800a596 <sync_fs+0xb2>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	791b      	ldrb	r3, [r3, #4]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d144      	bne.n	800a596 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3348      	adds	r3, #72	; 0x48
 800a510:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a514:	2100      	movs	r1, #0
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fda8 	bl	800a06c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3348      	adds	r3, #72	; 0x48
 800a520:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a524:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff fcaf 	bl	8009e8c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3348      	adds	r3, #72	; 0x48
 800a532:	4921      	ldr	r1, [pc, #132]	; (800a5b8 <sync_fs+0xd4>)
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fcc4 	bl	8009ec2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3348      	adds	r3, #72	; 0x48
 800a53e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a542:	491e      	ldr	r1, [pc, #120]	; (800a5bc <sync_fs+0xd8>)
 800a544:	4618      	mov	r0, r3
 800a546:	f7ff fcbc 	bl	8009ec2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3348      	adds	r3, #72	; 0x48
 800a54e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	4619      	mov	r1, r3
 800a558:	4610      	mov	r0, r2
 800a55a:	f7ff fcb2 	bl	8009ec2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3348      	adds	r3, #72	; 0x48
 800a562:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	4619      	mov	r1, r3
 800a56c:	4610      	mov	r0, r2
 800a56e:	f7ff fca8 	bl	8009ec2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	645a      	str	r2, [r3, #68]	; 0x44
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7858      	ldrb	r0, [r3, #1]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a58a:	2301      	movs	r3, #1
 800a58c:	f7ff fb4a 	bl	8009c24 <disk_write>
			fs->fsi_flag = 0;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	2200      	movs	r2, #0
 800a59c:	2100      	movs	r1, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fb60 	bl	8009c64 <disk_ioctl>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <sync_fs+0xca>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	41615252 	.word	0x41615252
 800a5bc:	61417272 	.word	0x61417272

0800a5c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	3b02      	subs	r3, #2
 800a5ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	3b02      	subs	r3, #2
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d301      	bcc.n	800a5e0 <clust2sect+0x20>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e008      	b.n	800a5f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	895b      	ldrh	r3, [r3, #10]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	fb03 f202 	mul.w	r2, r3, r2
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f0:	4413      	add	r3, r2
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
	...

0800a600 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b088      	sub	sp, #32
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	6809      	ldr	r1, [r1, #0]
 800a60e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	2901      	cmp	r1, #1
 800a614:	d904      	bls.n	800a620 <get_fat+0x20>
 800a616:	69b9      	ldr	r1, [r7, #24]
 800a618:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a61a:	6838      	ldr	r0, [r7, #0]
 800a61c:	4288      	cmp	r0, r1
 800a61e:	d302      	bcc.n	800a626 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a620:	2301      	movs	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
 800a624:	e102      	b.n	800a82c <get_fat+0x22c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a626:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a62a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800a62c:	69b9      	ldr	r1, [r7, #24]
 800a62e:	7809      	ldrb	r1, [r1, #0]
 800a630:	3901      	subs	r1, #1
 800a632:	2903      	cmp	r1, #3
 800a634:	f200 80ee 	bhi.w	800a814 <get_fat+0x214>
 800a638:	a001      	add	r0, pc, #4	; (adr r0, 800a640 <get_fat+0x40>)
 800a63a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a63e:	bf00      	nop
 800a640:	0800a651 	.word	0x0800a651
 800a644:	0800a6d9 	.word	0x0800a6d9
 800a648:	0800a70f 	.word	0x0800a70f
 800a64c:	0800a747 	.word	0x0800a747
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	085b      	lsrs	r3, r3, #1
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	0a5b      	lsrs	r3, r3, #9
 800a666:	4413      	add	r3, r2
 800a668:	4619      	mov	r1, r3
 800a66a:	69b8      	ldr	r0, [r7, #24]
 800a66c:	f7ff ff0c 	bl	800a488 <move_window>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	f040 80d1 	bne.w	800a81a <get_fat+0x21a>
			wc = fs->win[bc++ % SS(fs)];
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	60fa      	str	r2, [r7, #12]
 800a67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	4413      	add	r3, r2
 800a686:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a68a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	0a5b      	lsrs	r3, r3, #9
 800a694:	4413      	add	r3, r2
 800a696:	4619      	mov	r1, r3
 800a698:	69b8      	ldr	r0, [r7, #24]
 800a69a:	f7ff fef5 	bl	800a488 <move_window>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f040 80bc 	bne.w	800a81e <get_fat+0x21e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ac:	69ba      	ldr	r2, [r7, #24]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a6b4:	021b      	lsls	r3, r3, #8
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d002      	beq.n	800a6ce <get_fat+0xce>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	091b      	lsrs	r3, r3, #4
 800a6cc:	e002      	b.n	800a6d4 <get_fat+0xd4>
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6d4:	61fb      	str	r3, [r7, #28]
			break;
 800a6d6:	e0a9      	b.n	800a82c <get_fat+0x22c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	0a1b      	lsrs	r3, r3, #8
 800a6e0:	4413      	add	r3, r2
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	69b8      	ldr	r0, [r7, #24]
 800a6e6:	f7ff fecf 	bl	800a488 <move_window>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f040 8098 	bne.w	800a822 <get_fat+0x222>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a700:	4413      	add	r3, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff facc 	bl	8009ca0 <ld_word>
 800a708:	4603      	mov	r3, r0
 800a70a:	61fb      	str	r3, [r7, #28]
			break;
 800a70c:	e08e      	b.n	800a82c <get_fat+0x22c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	09db      	lsrs	r3, r3, #7
 800a716:	4413      	add	r3, r2
 800a718:	4619      	mov	r1, r3
 800a71a:	69b8      	ldr	r0, [r7, #24]
 800a71c:	f7ff feb4 	bl	800a488 <move_window>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d17f      	bne.n	800a826 <get_fat+0x226>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a734:	4413      	add	r3, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff faca 	bl	8009cd0 <ld_dword>
 800a73c:	4603      	mov	r3, r0
 800a73e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a742:	61fb      	str	r3, [r7, #28]
			break;
 800a744:	e072      	b.n	800a82c <get_fat+0x22c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a746:	6879      	ldr	r1, [r7, #4]
 800a748:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800a74c:	4301      	orrs	r1, r0
 800a74e:	d061      	beq.n	800a814 <get_fat+0x214>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	6889      	ldr	r1, [r1, #8]
 800a754:	6838      	ldr	r0, [r7, #0]
 800a756:	1a41      	subs	r1, r0, r1
 800a758:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800a760:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
 800a764:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 800a768:	f04f 0000 	mov.w	r0, #0
 800a76c:	f04f 0100 	mov.w	r1, #0
 800a770:	0a50      	lsrs	r0, r2, #9
 800a772:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800a776:	0a59      	lsrs	r1, r3, #9
 800a778:	4602      	mov	r2, r0
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	895b      	ldrh	r3, [r3, #10]
 800a77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a782:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	79db      	ldrb	r3, [r3, #7]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d10e      	bne.n	800a7aa <get_fat+0x1aa>
					if (cofs <= clen) {
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	429a      	cmp	r2, r3
 800a792:	d80a      	bhi.n	800a7aa <get_fat+0x1aa>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d002      	beq.n	800a7a2 <get_fat+0x1a2>
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	e001      	b.n	800a7a6 <get_fat+0x1a6>
 800a7a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a7a6:	61fb      	str	r3, [r7, #28]
						break;
 800a7a8:	e040      	b.n	800a82c <get_fat+0x22c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	79db      	ldrb	r3, [r3, #7]
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	d108      	bne.n	800a7c4 <get_fat+0x1c4>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d203      	bcs.n	800a7c4 <get_fat+0x1c4>
					val = clst + 1; 	/* Generate the value */
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	61fb      	str	r3, [r7, #28]
					break;
 800a7c2:	e033      	b.n	800a82c <get_fat+0x22c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	79db      	ldrb	r3, [r3, #7]
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d023      	beq.n	800a814 <get_fat+0x214>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <get_fat+0x1dc>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a7d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a7d8:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a7da:	e027      	b.n	800a82c <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	09db      	lsrs	r3, r3, #7
 800a7e4:	4413      	add	r3, r2
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	69b8      	ldr	r0, [r7, #24]
 800a7ea:	f7ff fe4d 	bl	800a488 <move_window>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d11a      	bne.n	800a82a <get_fat+0x22a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a802:	4413      	add	r3, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff fa63 	bl	8009cd0 <ld_dword>
 800a80a:	4603      	mov	r3, r0
 800a80c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a810:	61fb      	str	r3, [r7, #28]
					break;
 800a812:	e00b      	b.n	800a82c <get_fat+0x22c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a814:	2301      	movs	r3, #1
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	e008      	b.n	800a82c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a81a:	bf00      	nop
 800a81c:	e006      	b.n	800a82c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a81e:	bf00      	nop
 800a820:	e004      	b.n	800a82c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a822:	bf00      	nop
 800a824:	e002      	b.n	800a82c <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a826:	bf00      	nop
 800a828:	e000      	b.n	800a82c <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a82a:	bf00      	nop
		}
	}

	return val;
 800a82c:	69fb      	ldr	r3, [r7, #28]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3720      	adds	r7, #32
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop

0800a838 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a838:	b590      	push	{r4, r7, lr}
 800a83a:	b089      	sub	sp, #36	; 0x24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a844:	2302      	movs	r3, #2
 800a846:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	f240 80d6 	bls.w	800a9fc <put_fat+0x1c4>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	429a      	cmp	r2, r3
 800a858:	f080 80d0 	bcs.w	800a9fc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	2b04      	cmp	r3, #4
 800a862:	f300 80d4 	bgt.w	800aa0e <put_fat+0x1d6>
 800a866:	2b03      	cmp	r3, #3
 800a868:	f280 8093 	bge.w	800a992 <put_fat+0x15a>
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d002      	beq.n	800a876 <put_fat+0x3e>
 800a870:	2b02      	cmp	r3, #2
 800a872:	d06e      	beq.n	800a952 <put_fat+0x11a>
 800a874:	e0cb      	b.n	800aa0e <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	61bb      	str	r3, [r7, #24]
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	085b      	lsrs	r3, r3, #1
 800a87e:	69ba      	ldr	r2, [r7, #24]
 800a880:	4413      	add	r3, r2
 800a882:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	0a5b      	lsrs	r3, r3, #9
 800a88c:	4413      	add	r3, r2
 800a88e:	4619      	mov	r1, r3
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff fdf9 	bl	800a488 <move_window>
 800a896:	4603      	mov	r3, r0
 800a898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a89a:	7ffb      	ldrb	r3, [r7, #31]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f040 80af 	bne.w	800aa00 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	1c59      	adds	r1, r3, #1
 800a8ac:	61b9      	str	r1, [r7, #24]
 800a8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b2:	4413      	add	r3, r2
 800a8b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00d      	beq.n	800a8dc <put_fat+0xa4>
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	b25b      	sxtb	r3, r3
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	b25a      	sxtb	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	011b      	lsls	r3, r3, #4
 800a8d2:	b25b      	sxtb	r3, r3
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	b25b      	sxtb	r3, r3
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	e001      	b.n	800a8e0 <put_fat+0xa8>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	0a5b      	lsrs	r3, r3, #9
 800a8f2:	4413      	add	r3, r2
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff fdc6 	bl	800a488 <move_window>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a900:	7ffb      	ldrb	r3, [r7, #31]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d17e      	bne.n	800aa04 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a912:	4413      	add	r3, r2
 800a914:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <put_fat+0xf0>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	091b      	lsrs	r3, r3, #4
 800a924:	b2db      	uxtb	r3, r3
 800a926:	e00e      	b.n	800a946 <put_fat+0x10e>
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	b25b      	sxtb	r3, r3
 800a92e:	f023 030f 	bic.w	r3, r3, #15
 800a932:	b25a      	sxtb	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	f003 030f 	and.w	r3, r3, #15
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	4313      	orrs	r3, r2
 800a942:	b25b      	sxtb	r3, r3
 800a944:	b2db      	uxtb	r3, r3
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	70da      	strb	r2, [r3, #3]
			break;
 800a950:	e05d      	b.n	800aa0e <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	4413      	add	r3, r2
 800a95c:	4619      	mov	r1, r3
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f7ff fd92 	bl	800a488 <move_window>
 800a964:	4603      	mov	r3, r0
 800a966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a968:	7ffb      	ldrb	r3, [r7, #31]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d14c      	bne.n	800aa08 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a97c:	4413      	add	r3, r2
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	b292      	uxth	r2, r2
 800a982:	4611      	mov	r1, r2
 800a984:	4618      	mov	r0, r3
 800a986:	f7ff fa81 	bl	8009e8c <st_word>
			fs->wflag = 1;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2201      	movs	r2, #1
 800a98e:	70da      	strb	r2, [r3, #3]
			break;
 800a990:	e03d      	b.n	800aa0e <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	09db      	lsrs	r3, r3, #7
 800a99a:	4413      	add	r3, r2
 800a99c:	4619      	mov	r1, r3
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f7ff fd72 	bl	800a488 <move_window>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9a8:	7ffb      	ldrb	r3, [r7, #31]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d12e      	bne.n	800aa0c <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d012      	beq.n	800a9dc <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a9ca:	4413      	add	r3, r2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7ff f97f 	bl	8009cd0 <ld_dword>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9d8:	4323      	orrs	r3, r4
 800a9da:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a9ea:	4413      	add	r3, r2
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7ff fa67 	bl	8009ec2 <st_dword>
			fs->wflag = 1;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	70da      	strb	r2, [r3, #3]
			break;
 800a9fa:	e008      	b.n	800aa0e <put_fat+0x1d6>
		}
	}
 800a9fc:	bf00      	nop
 800a9fe:	e006      	b.n	800aa0e <put_fat+0x1d6>
			if (res != FR_OK) break;
 800aa00:	bf00      	nop
 800aa02:	e004      	b.n	800aa0e <put_fat+0x1d6>
			if (res != FR_OK) break;
 800aa04:	bf00      	nop
 800aa06:	e002      	b.n	800aa0e <put_fat+0x1d6>
			if (res != FR_OK) break;
 800aa08:	bf00      	nop
 800aa0a:	e000      	b.n	800aa0e <put_fat+0x1d6>
			if (res != FR_OK) break;
 800aa0c:	bf00      	nop
	return res;
 800aa0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3724      	adds	r7, #36	; 0x24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd90      	pop	{r4, r7, pc}

0800aa18 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08a      	sub	sp, #40	; 0x28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	3b02      	subs	r3, #2
 800aa28:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2e:	3b02      	subs	r3, #2
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d301      	bcc.n	800aa3a <find_bitmap+0x22>
 800aa36:	2300      	movs	r3, #0
 800aa38:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	61fb      	str	r3, [r7, #28]
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	61bb      	str	r3, [r7, #24]
 800aa42:	2300      	movs	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	0b1b      	lsrs	r3, r3, #12
 800aa4e:	4413      	add	r3, r2
 800aa50:	4619      	mov	r1, r3
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fd18 	bl	800a488 <move_window>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <find_bitmap+0x4c>
 800aa5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa62:	e051      	b.n	800ab08 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	08db      	lsrs	r3, r3, #3
 800aa68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6c:	623b      	str	r3, [r7, #32]
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	f003 0307 	and.w	r3, r3, #7
 800aa74:	2201      	movs	r2, #1
 800aa76:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	4413      	add	r3, r2
 800aa84:	3348      	adds	r3, #72	; 0x48
 800aa86:	781a      	ldrb	r2, [r3, #0]
 800aa88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	74fb      	strb	r3, [r7, #19]
 800aa90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	61fb      	str	r3, [r7, #28]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa4:	3b02      	subs	r3, #2
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d307      	bcc.n	800aabc <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800aaac:	2300      	movs	r3, #0
 800aaae:	61fb      	str	r3, [r7, #28]
 800aab0:	2300      	movs	r3, #0
 800aab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaba:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800aabc:	7cfb      	ldrb	r3, [r7, #19]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	3301      	adds	r3, #1
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d106      	bne.n	800aade <find_bitmap+0xc6>
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	3302      	adds	r3, #2
 800aad4:	e018      	b.n	800ab08 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	61bb      	str	r3, [r7, #24]
 800aada:	2300      	movs	r3, #0
 800aadc:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800aade:	69fa      	ldr	r2, [r7, #28]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d101      	bne.n	800aaea <find_bitmap+0xd2>
 800aae6:	2300      	movs	r3, #0
 800aae8:	e00e      	b.n	800ab08 <find_bitmap+0xf0>
			} while (bm);
 800aaea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1c5      	bne.n	800aa7e <find_bitmap+0x66>
			bm = 1;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	3301      	adds	r3, #1
 800aafc:	623b      	str	r3, [r7, #32]
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab04:	d3bb      	bcc.n	800aa7e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ab06:	e79e      	b.n	800aa46 <find_bitmap+0x2e>
	}
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3728      	adds	r7, #40	; 0x28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	3b02      	subs	r3, #2
 800ab22:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	0b1b      	lsrs	r3, r3, #12
 800ab2c:	4413      	add	r3, r2
 800ab2e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	08db      	lsrs	r3, r3, #3
 800ab34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab38:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f003 0307 	and.w	r3, r3, #7
 800ab40:	2201      	movs	r2, #1
 800ab42:	fa02 f303 	lsl.w	r3, r2, r3
 800ab46:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	617a      	str	r2, [r7, #20]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7ff fc99 	bl	800a488 <move_window>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <change_bitmap+0x50>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e03d      	b.n	800abdc <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	4413      	add	r3, r2
 800ab66:	3348      	adds	r3, #72	; 0x48
 800ab68:	781a      	ldrb	r2, [r3, #0]
 800ab6a:	7ffb      	ldrb	r3, [r7, #31]
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bf14      	ite	ne
 800ab74:	2301      	movne	r3, #1
 800ab76:	2300      	moveq	r3, #0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d101      	bne.n	800ab86 <change_bitmap+0x76>
 800ab82:	2302      	movs	r3, #2
 800ab84:	e02a      	b.n	800abdc <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	3348      	adds	r3, #72	; 0x48
 800ab8e:	781a      	ldrb	r2, [r3, #0]
 800ab90:	7ffb      	ldrb	r3, [r7, #31]
 800ab92:	4053      	eors	r3, r2
 800ab94:	b2d9      	uxtb	r1, r3
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	3348      	adds	r3, #72	; 0x48
 800ab9e:	460a      	mov	r2, r1
 800aba0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2201      	movs	r2, #1
 800aba6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3b01      	subs	r3, #1
 800abac:	607b      	str	r3, [r7, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <change_bitmap+0xa8>
 800abb4:	2300      	movs	r3, #0
 800abb6:	e011      	b.n	800abdc <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800abb8:	7ffb      	ldrb	r3, [r7, #31]
 800abba:	005b      	lsls	r3, r3, #1
 800abbc:	77fb      	strb	r3, [r7, #31]
 800abbe:	7ffb      	ldrb	r3, [r7, #31]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1cd      	bne.n	800ab60 <change_bitmap+0x50>
			bm = 1;
 800abc4:	2301      	movs	r3, #1
 800abc6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	3301      	adds	r3, #1
 800abcc:	61bb      	str	r3, [r7, #24]
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abd4:	d3c4      	bcc.n	800ab60 <change_bitmap+0x50>
		i = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800abda:	e7b5      	b.n	800ab48 <change_bitmap+0x38>
	}
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	79db      	ldrb	r3, [r3, #7]
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	d121      	bne.n	800ac38 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	617b      	str	r3, [r7, #20]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	613b      	str	r3, [r7, #16]
 800ac00:	e014      	b.n	800ac2c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6979      	ldr	r1, [r7, #20]
 800ac0e:	f7ff fe13 	bl	800a838 <put_fat>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <fill_first_frag+0x3c>
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	e00c      	b.n	800ac3a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	3301      	adds	r3, #1
 800ac24:	617b      	str	r3, [r7, #20]
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	613b      	str	r3, [r7, #16]
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e7      	bne.n	800ac02 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b086      	sub	sp, #24
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ac4e:	e020      	b.n	800ac92 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	1c59      	adds	r1, r3, #1
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d905      	bls.n	800ac72 <fill_last_frag+0x30>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	3302      	adds	r3, #2
 800ac70:	e000      	b.n	800ac74 <fill_last_frag+0x32>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	461a      	mov	r2, r3
 800ac76:	f7ff fddf 	bl	800a838 <put_fat>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d001      	beq.n	800ac88 <fill_last_frag+0x46>
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	e009      	b.n	800ac9c <fill_last_frag+0x5a>
		obj->n_frag--;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	69db      	ldr	r3, [r3, #28]
 800ac8c:	1e5a      	subs	r2, r3, #1
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1da      	bne.n	800ac50 <fill_last_frag+0xe>
	}
	return FR_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08a      	sub	sp, #40	; 0x28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d904      	bls.n	800acd2 <remove_chain+0x2e>
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d301      	bcc.n	800acd6 <remove_chain+0x32>
 800acd2:	2302      	movs	r3, #2
 800acd4:	e096      	b.n	800ae04 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d014      	beq.n	800ad06 <remove_chain+0x62>
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b04      	cmp	r3, #4
 800ace2:	d103      	bne.n	800acec <remove_chain+0x48>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	79db      	ldrb	r3, [r3, #7]
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d00c      	beq.n	800ad06 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800acec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	69b8      	ldr	r0, [r7, #24]
 800acf4:	f7ff fda0 	bl	800a838 <put_fat>
 800acf8:	4603      	mov	r3, r0
 800acfa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800acfc:	7ffb      	ldrb	r3, [r7, #31]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <remove_chain+0x62>
 800ad02:	7ffb      	ldrb	r3, [r7, #31]
 800ad04:	e07e      	b.n	800ae04 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ad06:	68b9      	ldr	r1, [r7, #8]
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f7ff fc79 	bl	800a600 <get_fat>
 800ad0e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d055      	beq.n	800adc2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d101      	bne.n	800ad20 <remove_chain+0x7c>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e071      	b.n	800ae04 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad26:	d101      	bne.n	800ad2c <remove_chain+0x88>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e06b      	b.n	800ae04 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b04      	cmp	r3, #4
 800ad32:	d00b      	beq.n	800ad4c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ad34:	2200      	movs	r2, #0
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	69b8      	ldr	r0, [r7, #24]
 800ad3a:	f7ff fd7d 	bl	800a838 <put_fat>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ad42:	7ffb      	ldrb	r3, [r7, #31]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <remove_chain+0xa8>
 800ad48:	7ffb      	ldrb	r3, [r7, #31]
 800ad4a:	e05b      	b.n	800ae04 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	3b02      	subs	r3, #2
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d20b      	bcs.n	800ad72 <remove_chain+0xce>
			fs->free_clst++;
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	791b      	ldrb	r3, [r3, #4]
 800ad68:	f043 0301 	orr.w	r3, r3, #1
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800ad72:	6a3b      	ldr	r3, [r7, #32]
 800ad74:	3301      	adds	r3, #1
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d102      	bne.n	800ad82 <remove_chain+0xde>
			ecl = nxt;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	623b      	str	r3, [r7, #32]
 800ad80:	e017      	b.n	800adb2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b04      	cmp	r3, #4
 800ad88:	d10f      	bne.n	800adaa <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800ad8a:	6a3a      	ldr	r2, [r7, #32]
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	2300      	movs	r3, #0
 800ad94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad96:	69b8      	ldr	r0, [r7, #24]
 800ad98:	f7ff feba 	bl	800ab10 <change_bitmap>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800ada0:	7ffb      	ldrb	r3, [r7, #31]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <remove_chain+0x106>
 800ada6:	7ffb      	ldrb	r3, [r7, #31]
 800ada8:	e02c      	b.n	800ae04 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	623b      	str	r3, [r7, #32]
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adba:	68ba      	ldr	r2, [r7, #8]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d3a2      	bcc.n	800ad06 <remove_chain+0x62>
 800adc0:	e000      	b.n	800adc4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800adc2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b04      	cmp	r3, #4
 800adca:	d11a      	bne.n	800ae02 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d103      	bne.n	800adda <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	71da      	strb	r2, [r3, #7]
 800add8:	e013      	b.n	800ae02 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	79db      	ldrb	r3, [r3, #7]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d10f      	bne.n	800ae02 <remove_chain+0x15e>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d30a      	bcc.n	800ae02 <remove_chain+0x15e>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	4413      	add	r3, r2
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d802      	bhi.n	800ae02 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2202      	movs	r2, #2
 800ae00:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3728      	adds	r7, #40	; 0x28
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10d      	bne.n	800ae3e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d004      	beq.n	800ae38 <create_chain+0x2c>
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	69ba      	ldr	r2, [r7, #24]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d31b      	bcc.n	800ae70 <create_chain+0x64>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	61bb      	str	r3, [r7, #24]
 800ae3c:	e018      	b.n	800ae70 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff fbdd 	bl	800a600 <get_fat>
 800ae46:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d801      	bhi.n	800ae52 <create_chain+0x46>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e0d9      	b.n	800b006 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae58:	d101      	bne.n	800ae5e <create_chain+0x52>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	e0d3      	b.n	800b006 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d201      	bcs.n	800ae6c <create_chain+0x60>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	e0cc      	b.n	800b006 <create_chain+0x1fa>
		scl = clst;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d164      	bne.n	800af42 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800ae78:	2201      	movs	r2, #1
 800ae7a:	69b9      	ldr	r1, [r7, #24]
 800ae7c:	6938      	ldr	r0, [r7, #16]
 800ae7e:	f7ff fdcb 	bl	800aa18 <find_bitmap>
 800ae82:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d003      	beq.n	800ae92 <create_chain+0x86>
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae90:	d101      	bne.n	800ae96 <create_chain+0x8a>
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	e0b7      	b.n	800b006 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800ae96:	2301      	movs	r3, #1
 800ae98:	2201      	movs	r2, #1
 800ae9a:	69f9      	ldr	r1, [r7, #28]
 800ae9c:	6938      	ldr	r0, [r7, #16]
 800ae9e:	f7ff fe37 	bl	800ab10 <change_bitmap>
 800aea2:	4603      	mov	r3, r0
 800aea4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d101      	bne.n	800aeb0 <create_chain+0xa4>
 800aeac:	2301      	movs	r3, #1
 800aeae:	e0aa      	b.n	800b006 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d102      	bne.n	800aebc <create_chain+0xb0>
 800aeb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeba:	e0a4      	b.n	800b006 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d103      	bne.n	800aeca <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2202      	movs	r2, #2
 800aec6:	71da      	strb	r2, [r3, #7]
 800aec8:	e011      	b.n	800aeee <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	79db      	ldrb	r3, [r3, #7]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d10d      	bne.n	800aeee <create_chain+0xe2>
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	3301      	adds	r3, #1
 800aed6:	69fa      	ldr	r2, [r7, #28]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d008      	beq.n	800aeee <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	1ad2      	subs	r2, r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2203      	movs	r2, #3
 800aeec:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	79db      	ldrb	r3, [r3, #7]
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d064      	beq.n	800afc0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	3301      	adds	r3, #1
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d10b      	bne.n	800af18 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <create_chain+0x104>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	3301      	adds	r3, #1
 800af0e:	e000      	b.n	800af12 <create_chain+0x106>
 800af10:	2302      	movs	r3, #2
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	61d3      	str	r3, [r2, #28]
 800af16:	e053      	b.n	800afc0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	69db      	ldr	r3, [r3, #28]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d102      	bne.n	800af26 <create_chain+0x11a>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7ff fe89 	bl	800ac42 <fill_last_frag>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800af34:	7dfb      	ldrb	r3, [r7, #23]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d142      	bne.n	800afc0 <create_chain+0x1b4>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	61da      	str	r2, [r3, #28]
 800af40:	e03e      	b.n	800afc0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	3301      	adds	r3, #1
 800af4a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	69fa      	ldr	r2, [r7, #28]
 800af52:	429a      	cmp	r2, r3
 800af54:	d307      	bcc.n	800af66 <create_chain+0x15a>
				ncl = 2;
 800af56:	2302      	movs	r3, #2
 800af58:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800af5a:	69fa      	ldr	r2, [r7, #28]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d901      	bls.n	800af66 <create_chain+0x15a>
 800af62:	2300      	movs	r3, #0
 800af64:	e04f      	b.n	800b006 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800af66:	69f9      	ldr	r1, [r7, #28]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff fb49 	bl	800a600 <get_fat>
 800af6e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00e      	beq.n	800af94 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d003      	beq.n	800af84 <create_chain+0x178>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af82:	d101      	bne.n	800af88 <create_chain+0x17c>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	e03e      	b.n	800b006 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800af88:	69fa      	ldr	r2, [r7, #28]
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d1da      	bne.n	800af46 <create_chain+0x13a>
 800af90:	2300      	movs	r3, #0
 800af92:	e038      	b.n	800b006 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800af94:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800af96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af9a:	69f9      	ldr	r1, [r7, #28]
 800af9c:	6938      	ldr	r0, [r7, #16]
 800af9e:	f7ff fc4b 	bl	800a838 <put_fat>
 800afa2:	4603      	mov	r3, r0
 800afa4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800afa6:	7dfb      	ldrb	r3, [r7, #23]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d109      	bne.n	800afc0 <create_chain+0x1b4>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d006      	beq.n	800afc0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800afb2:	69fa      	ldr	r2, [r7, #28]
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6938      	ldr	r0, [r7, #16]
 800afb8:	f7ff fc3e 	bl	800a838 <put_fat>
 800afbc:	4603      	mov	r3, r0
 800afbe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800afc0:	7dfb      	ldrb	r3, [r7, #23]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d116      	bne.n	800aff4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	69fa      	ldr	r2, [r7, #28]
 800afca:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	699a      	ldr	r2, [r3, #24]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	3b02      	subs	r3, #2
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d804      	bhi.n	800afe4 <create_chain+0x1d8>
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	1e5a      	subs	r2, r3, #1
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	791b      	ldrb	r3, [r3, #4]
 800afe8:	f043 0301 	orr.w	r3, r3, #1
 800afec:	b2da      	uxtb	r2, r3
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	711a      	strb	r2, [r3, #4]
 800aff2:	e007      	b.n	800b004 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d102      	bne.n	800b000 <create_chain+0x1f4>
 800affa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800affe:	e000      	b.n	800b002 <create_chain+0x1f6>
 800b000:	2301      	movs	r3, #1
 800b002:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b004:	69fb      	ldr	r3, [r7, #28]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3720      	adds	r7, #32
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b088      	sub	sp, #32
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b024:	3304      	adds	r3, #4
 800b026:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b02c:	f04f 0000 	mov.w	r0, #0
 800b030:	f04f 0100 	mov.w	r1, #0
 800b034:	0a50      	lsrs	r0, r2, #9
 800b036:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b03a:	0a59      	lsrs	r1, r3, #9
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	895b      	ldrh	r3, [r3, #10]
 800b040:	b29a      	uxth	r2, r3
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	f7f5 f9a3 	bl	8000390 <__aeabi_uldivmod>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	4613      	mov	r3, r2
 800b050:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	1d1a      	adds	r2, r3, #4
 800b056:	61ba      	str	r2, [r7, #24]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <clmt_clust+0x58>
 800b062:	2300      	movs	r3, #0
 800b064:	e010      	b.n	800b088 <clmt_clust+0x7a>
		if (cl < ncl) break;	/* In this fragment? */
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d307      	bcc.n	800b07e <clmt_clust+0x70>
		cl -= ncl; tbl++;		/* Next fragment */
 800b06e:	69fa      	ldr	r2, [r7, #28]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	3304      	adds	r3, #4
 800b07a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b07c:	e7e9      	b.n	800b052 <clmt_clust+0x44>
		if (cl < ncl) break;	/* In this fragment? */
 800b07e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	4413      	add	r3, r2
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3720      	adds	r7, #32
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	d102      	bne.n	800b0ae <dir_sdi+0x1e>
 800b0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ac:	e001      	b.n	800b0b2 <dir_sdi+0x22>
 800b0ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d904      	bls.n	800b0c2 <dir_sdi+0x32>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	f003 031f 	and.w	r3, r3, #31
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e066      	b.n	800b194 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d109      	bne.n	800b0ec <dir_sdi+0x5c>
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d905      	bls.n	800b0ec <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10c      	bne.n	800b10c <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	095b      	lsrs	r3, r3, #5
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	8912      	ldrh	r2, [r2, #8]
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d301      	bcc.n	800b102 <dir_sdi+0x72>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e048      	b.n	800b194 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	639a      	str	r2, [r3, #56]	; 0x38
 800b10a:	e029      	b.n	800b160 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	895b      	ldrh	r3, [r3, #10]
 800b110:	025b      	lsls	r3, r3, #9
 800b112:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b114:	e019      	b.n	800b14a <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6979      	ldr	r1, [r7, #20]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff fa70 	bl	800a600 <get_fat>
 800b120:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b128:	d101      	bne.n	800b12e <dir_sdi+0x9e>
 800b12a:	2301      	movs	r3, #1
 800b12c:	e032      	b.n	800b194 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d904      	bls.n	800b13e <dir_sdi+0xae>
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d301      	bcc.n	800b142 <dir_sdi+0xb2>
 800b13e:	2302      	movs	r3, #2
 800b140:	e028      	b.n	800b194 <dir_sdi+0x104>
			ofs -= csz;
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d2e1      	bcs.n	800b116 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800b152:	6979      	ldr	r1, [r7, #20]
 800b154:	6938      	ldr	r0, [r7, #16]
 800b156:	f7ff fa33 	bl	800a5c0 <clust2sect>
 800b15a:	4602      	mov	r2, r0
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <dir_sdi+0xe2>
 800b16e:	2302      	movs	r3, #2
 800b170:	e010      	b.n	800b194 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	0a5b      	lsrs	r3, r3, #9
 800b17a:	441a      	add	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18c:	441a      	add	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b0:	3320      	adds	r3, #32
 800b1b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <dir_next+0x38>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d102      	bne.n	800b1ca <dir_next+0x2e>
 800b1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c8:	e001      	b.n	800b1ce <dir_next+0x32>
 800b1ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d801      	bhi.n	800b1d8 <dir_next+0x3c>
 800b1d4:	2304      	movs	r3, #4
 800b1d6:	e0b2      	b.n	800b33e <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f040 80a0 	bne.w	800b324 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10b      	bne.n	800b20e <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	095b      	lsrs	r3, r3, #5
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	8912      	ldrh	r2, [r2, #8]
 800b1fe:	4293      	cmp	r3, r2
 800b200:	f0c0 8090 	bcc.w	800b324 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	639a      	str	r2, [r3, #56]	; 0x38
 800b20a:	2304      	movs	r3, #4
 800b20c:	e097      	b.n	800b33e <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	0a5b      	lsrs	r3, r3, #9
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	8952      	ldrh	r2, [r2, #10]
 800b216:	3a01      	subs	r2, #1
 800b218:	4013      	ands	r3, r2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f040 8082 	bne.w	800b324 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b226:	4619      	mov	r1, r3
 800b228:	4610      	mov	r0, r2
 800b22a:	f7ff f9e9 	bl	800a600 <get_fat>
 800b22e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d801      	bhi.n	800b23a <dir_next+0x9e>
 800b236:	2302      	movs	r3, #2
 800b238:	e081      	b.n	800b33e <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b240:	d101      	bne.n	800b246 <dir_next+0xaa>
 800b242:	2301      	movs	r3, #1
 800b244:	e07b      	b.n	800b33e <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d35f      	bcc.n	800b310 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d104      	bne.n	800b260 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
 800b25c:	2304      	movs	r3, #4
 800b25e:	e06e      	b.n	800b33e <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b266:	4619      	mov	r1, r3
 800b268:	4610      	mov	r0, r2
 800b26a:	f7ff fdcf 	bl	800ae0c <create_chain>
 800b26e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d101      	bne.n	800b27a <dir_next+0xde>
 800b276:	2307      	movs	r3, #7
 800b278:	e061      	b.n	800b33e <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d101      	bne.n	800b284 <dir_next+0xe8>
 800b280:	2302      	movs	r3, #2
 800b282:	e05c      	b.n	800b33e <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b28a:	d101      	bne.n	800b290 <dir_next+0xf4>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e056      	b.n	800b33e <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	79db      	ldrb	r3, [r3, #7]
 800b294:	f043 0304 	orr.w	r3, r3, #4
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f7ff f8ae 	bl	800a400 <sync_window>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <dir_next+0x112>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e047      	b.n	800b33e <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3348      	adds	r3, #72	; 0x48
 800b2b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fe fed7 	bl	800a06c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b2be:	2300      	movs	r3, #0
 800b2c0:	613b      	str	r3, [r7, #16]
 800b2c2:	6979      	ldr	r1, [r7, #20]
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff f97b 	bl	800a5c0 <clust2sect>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	645a      	str	r2, [r3, #68]	; 0x44
 800b2d0:	e012      	b.n	800b2f8 <dir_next+0x15c>
						fs->wflag = 1;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff f891 	bl	800a400 <sync_window>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <dir_next+0x14c>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e02a      	b.n	800b33e <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	613b      	str	r3, [r7, #16]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	645a      	str	r2, [r3, #68]	; 0x44
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	895b      	ldrh	r3, [r3, #10]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	4293      	cmp	r3, r2
 800b302:	d3e6      	bcc.n	800b2d2 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	1ad2      	subs	r2, r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	645a      	str	r2, [r3, #68]	; 0x44
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b316:	6979      	ldr	r1, [r7, #20]
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f7ff f951 	bl	800a5c0 <clust2sect>
 800b31e:	4602      	mov	r2, r0
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b336:	441a      	add	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b356:	2100      	movs	r1, #0
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff fe99 	bl	800b090 <dir_sdi>
 800b35e:	4603      	mov	r3, r0
 800b360:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b362:	7dfb      	ldrb	r3, [r7, #23]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d140      	bne.n	800b3ea <dir_alloc+0xa4>
		n = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b370:	4619      	mov	r1, r3
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f7ff f888 	bl	800a488 <move_window>
 800b378:	4603      	mov	r3, r0
 800b37a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d132      	bne.n	800b3e8 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b04      	cmp	r3, #4
 800b388:	d108      	bne.n	800b39c <dir_alloc+0x56>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	b25b      	sxtb	r3, r3
 800b392:	43db      	mvns	r3, r3
 800b394:	b2db      	uxtb	r3, r3
 800b396:	09db      	lsrs	r3, r3, #7
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	e00f      	b.n	800b3bc <dir_alloc+0x76>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2be5      	cmp	r3, #229	; 0xe5
 800b3a4:	d004      	beq.n	800b3b0 <dir_alloc+0x6a>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <dir_alloc+0x6e>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e000      	b.n	800b3b6 <dir_alloc+0x70>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d007      	beq.n	800b3d0 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	613b      	str	r3, [r7, #16]
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d102      	bne.n	800b3d4 <dir_alloc+0x8e>
 800b3ce:	e00c      	b.n	800b3ea <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff fee0 	bl	800b19c <dir_next>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b3e0:	7dfb      	ldrb	r3, [r7, #23]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0c2      	beq.n	800b36c <dir_alloc+0x26>
 800b3e6:	e000      	b.n	800b3ea <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b3e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d101      	bne.n	800b3f4 <dir_alloc+0xae>
 800b3f0:	2307      	movs	r3, #7
 800b3f2:	75fb      	strb	r3, [r7, #23]
	return res;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	331a      	adds	r3, #26
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fe fc47 	bl	8009ca0 <ld_word>
 800b412:	4603      	mov	r3, r0
 800b414:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b03      	cmp	r3, #3
 800b41c:	d109      	bne.n	800b432 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	3314      	adds	r3, #20
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fc3c 	bl	8009ca0 <ld_word>
 800b428:	4603      	mov	r3, r0
 800b42a:	041b      	lsls	r3, r3, #16
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b432:	68fb      	ldr	r3, [r7, #12]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	331a      	adds	r3, #26
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	b292      	uxth	r2, r2
 800b450:	4611      	mov	r1, r2
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fd1a 	bl	8009e8c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d109      	bne.n	800b474 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f103 0214 	add.w	r2, r3, #20
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	0c1b      	lsrs	r3, r3, #16
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	4619      	mov	r1, r3
 800b46e:	4610      	mov	r0, r2
 800b470:	f7fe fd0c 	bl	8009e8c <st_word>
	}
}
 800b474:	bf00      	nop
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b087      	sub	sp, #28
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	331a      	adds	r3, #26
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fe fc08 	bl	8009ca0 <ld_word>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <cmp_lfn+0x1e>
 800b496:	2300      	movs	r3, #0
 800b498:	e059      	b.n	800b54e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4a2:	1e5a      	subs	r2, r3, #1
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4413      	add	r3, r2
 800b4ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	81fb      	strh	r3, [r7, #14]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	613b      	str	r3, [r7, #16]
 800b4b8:	e033      	b.n	800b522 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b4ba:	4a27      	ldr	r2, [pc, #156]	; (800b558 <cmp_lfn+0xdc>)
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	4413      	add	r3, r2
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe fbe9 	bl	8009ca0 <ld_word>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b4d2:	89fb      	ldrh	r3, [r7, #14]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d01a      	beq.n	800b50e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2bfe      	cmp	r3, #254	; 0xfe
 800b4dc:	d812      	bhi.n	800b504 <cmp_lfn+0x88>
 800b4de:	89bb      	ldrh	r3, [r7, #12]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f002 fec1 	bl	800e268 <ff_wtoupper>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	461c      	mov	r4, r3
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	617a      	str	r2, [r7, #20]
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	881b      	ldrh	r3, [r3, #0]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f002 feb5 	bl	800e268 <ff_wtoupper>
 800b4fe:	4603      	mov	r3, r0
 800b500:	429c      	cmp	r4, r3
 800b502:	d001      	beq.n	800b508 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b504:	2300      	movs	r3, #0
 800b506:	e022      	b.n	800b54e <cmp_lfn+0xd2>
			}
			wc = uc;
 800b508:	89bb      	ldrh	r3, [r7, #12]
 800b50a:	81fb      	strh	r3, [r7, #14]
 800b50c:	e006      	b.n	800b51c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b50e:	89bb      	ldrh	r3, [r7, #12]
 800b510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b514:	4293      	cmp	r3, r2
 800b516:	d001      	beq.n	800b51c <cmp_lfn+0xa0>
 800b518:	2300      	movs	r3, #0
 800b51a:	e018      	b.n	800b54e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	3301      	adds	r3, #1
 800b520:	613b      	str	r3, [r7, #16]
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b0c      	cmp	r3, #12
 800b526:	d9c8      	bls.n	800b4ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00b      	beq.n	800b54c <cmp_lfn+0xd0>
 800b534:	89fb      	ldrh	r3, [r7, #14]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d008      	beq.n	800b54c <cmp_lfn+0xd0>
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	4413      	add	r3, r2
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <cmp_lfn+0xd0>
 800b548:	2300      	movs	r3, #0
 800b54a:	e000      	b.n	800b54e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b54c:	2301      	movs	r3, #1
}
 800b54e:	4618      	mov	r0, r3
 800b550:	371c      	adds	r7, #28
 800b552:	46bd      	mov	sp, r7
 800b554:	bd90      	pop	{r4, r7, pc}
 800b556:	bf00      	nop
 800b558:	0800f404 	.word	0x0800f404

0800b55c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	331a      	adds	r3, #26
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe fb98 	bl	8009ca0 <ld_word>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <pick_lfn+0x1e>
 800b576:	2300      	movs	r3, #0
 800b578:	e04d      	b.n	800b616 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b582:	1e5a      	subs	r2, r3, #1
 800b584:	4613      	mov	r3, r2
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	4413      	add	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4413      	add	r3, r2
 800b58e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b590:	2301      	movs	r3, #1
 800b592:	81fb      	strh	r3, [r7, #14]
 800b594:	2300      	movs	r3, #0
 800b596:	613b      	str	r3, [r7, #16]
 800b598:	e028      	b.n	800b5ec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b59a:	4a21      	ldr	r2, [pc, #132]	; (800b620 <pick_lfn+0xc4>)
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	4413      	add	r3, r2
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7fe fb79 	bl	8009ca0 <ld_word>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b5b2:	89fb      	ldrh	r3, [r7, #14]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00f      	beq.n	800b5d8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2bfe      	cmp	r3, #254	; 0xfe
 800b5bc:	d901      	bls.n	800b5c2 <pick_lfn+0x66>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	e029      	b.n	800b616 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b5c2:	89bb      	ldrh	r3, [r7, #12]
 800b5c4:	81fb      	strh	r3, [r7, #14]
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	617a      	str	r2, [r7, #20]
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	89fa      	ldrh	r2, [r7, #14]
 800b5d4:	801a      	strh	r2, [r3, #0]
 800b5d6:	e006      	b.n	800b5e6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b5d8:	89bb      	ldrh	r3, [r7, #12]
 800b5da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d001      	beq.n	800b5e6 <pick_lfn+0x8a>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e017      	b.n	800b616 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	613b      	str	r3, [r7, #16]
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b0c      	cmp	r3, #12
 800b5f0:	d9d3      	bls.n	800b59a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2bfe      	cmp	r3, #254	; 0xfe
 800b602:	d901      	bls.n	800b608 <pick_lfn+0xac>
 800b604:	2300      	movs	r3, #0
 800b606:	e006      	b.n	800b616 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	4413      	add	r3, r2
 800b610:	2200      	movs	r2, #0
 800b612:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b614:	2301      	movs	r3, #1
}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	0800f404 	.word	0x0800f404

0800b624 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b088      	sub	sp, #32
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4611      	mov	r1, r2
 800b630:	461a      	mov	r2, r3
 800b632:	460b      	mov	r3, r1
 800b634:	71fb      	strb	r3, [r7, #7]
 800b636:	4613      	mov	r3, r2
 800b638:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	330d      	adds	r3, #13
 800b63e:	79ba      	ldrb	r2, [r7, #6]
 800b640:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	330b      	adds	r3, #11
 800b646:	220f      	movs	r2, #15
 800b648:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	330c      	adds	r3, #12
 800b64e:	2200      	movs	r2, #0
 800b650:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	331a      	adds	r3, #26
 800b656:	2100      	movs	r1, #0
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fe fc17 	bl	8009e8c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b65e:	79fb      	ldrb	r3, [r7, #7]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	4613      	mov	r3, r2
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	4413      	add	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	82fb      	strh	r3, [r7, #22]
 800b672:	2300      	movs	r3, #0
 800b674:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b676:	8afb      	ldrh	r3, [r7, #22]
 800b678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d007      	beq.n	800b690 <put_lfn+0x6c>
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	61fa      	str	r2, [r7, #28]
 800b686:	005b      	lsls	r3, r3, #1
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	4413      	add	r3, r2
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b690:	4a17      	ldr	r2, [pc, #92]	; (800b6f0 <put_lfn+0xcc>)
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	4413      	add	r3, r2
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	4413      	add	r3, r2
 800b69e:	8afa      	ldrh	r2, [r7, #22]
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fe fbf2 	bl	8009e8c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b6a8:	8afb      	ldrh	r3, [r7, #22]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d102      	bne.n	800b6b4 <put_lfn+0x90>
 800b6ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	61bb      	str	r3, [r7, #24]
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	2b0c      	cmp	r3, #12
 800b6be:	d9da      	bls.n	800b676 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b6c0:	8afb      	ldrh	r3, [r7, #22]
 800b6c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d006      	beq.n	800b6d8 <put_lfn+0xb4>
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d103      	bne.n	800b6e0 <put_lfn+0xbc>
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	79fa      	ldrb	r2, [r7, #7]
 800b6e4:	701a      	strb	r2, [r3, #0]
}
 800b6e6:	bf00      	nop
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	0800f404 	.word	0x0800f404

0800b6f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08c      	sub	sp, #48	; 0x30
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b702:	220b      	movs	r2, #11
 800b704:	68b9      	ldr	r1, [r7, #8]
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7fe fc8f 	bl	800a02a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	2b05      	cmp	r3, #5
 800b710:	d929      	bls.n	800b766 <gen_numname+0x72>
		sr = seq;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b716:	e020      	b.n	800b75a <gen_numname+0x66>
			wc = *lfn++;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	1c9a      	adds	r2, r3, #2
 800b71c:	607a      	str	r2, [r7, #4]
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b722:	2300      	movs	r3, #0
 800b724:	62bb      	str	r3, [r7, #40]	; 0x28
 800b726:	e015      	b.n	800b754 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	005a      	lsls	r2, r3, #1
 800b72c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	4413      	add	r3, r2
 800b734:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b736:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b738:	085b      	lsrs	r3, r3, #1
 800b73a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <gen_numname+0x5a>
 800b746:	69fa      	ldr	r2, [r7, #28]
 800b748:	4b31      	ldr	r3, [pc, #196]	; (800b810 <gen_numname+0x11c>)
 800b74a:	4053      	eors	r3, r2
 800b74c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	3301      	adds	r3, #1
 800b752:	62bb      	str	r3, [r7, #40]	; 0x28
 800b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b756:	2b0f      	cmp	r3, #15
 800b758:	d9e6      	bls.n	800b728 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	881b      	ldrh	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1da      	bne.n	800b718 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b766:	2307      	movs	r3, #7
 800b768:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	f003 030f 	and.w	r3, r3, #15
 800b772:	b2db      	uxtb	r3, r3
 800b774:	3330      	adds	r3, #48	; 0x30
 800b776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b77a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b77e:	2b39      	cmp	r3, #57	; 0x39
 800b780:	d904      	bls.n	800b78c <gen_numname+0x98>
 800b782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b786:	3307      	adds	r3, #7
 800b788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	1e5a      	subs	r2, r3, #1
 800b790:	62ba      	str	r2, [r7, #40]	; 0x28
 800b792:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b796:	4413      	add	r3, r2
 800b798:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b79c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	091b      	lsrs	r3, r3, #4
 800b7a4:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1de      	bne.n	800b76a <gen_numname+0x76>
	ns[i] = '~';
 800b7ac:	f107 0214 	add.w	r2, r7, #20
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	4413      	add	r3, r2
 800b7b4:	227e      	movs	r2, #126	; 0x7e
 800b7b6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	627b      	str	r3, [r7, #36]	; 0x24
 800b7bc:	e002      	b.n	800b7c4 <gen_numname+0xd0>
 800b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d205      	bcs.n	800b7d8 <gen_numname+0xe4>
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	4413      	add	r3, r2
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b20      	cmp	r3, #32
 800b7d6:	d1f2      	bne.n	800b7be <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7da:	2b07      	cmp	r3, #7
 800b7dc:	d808      	bhi.n	800b7f0 <gen_numname+0xfc>
 800b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	62ba      	str	r2, [r7, #40]	; 0x28
 800b7e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b7ee:	e000      	b.n	800b7f2 <gen_numname+0xfe>
 800b7f0:	2120      	movs	r1, #32
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	627a      	str	r2, [r7, #36]	; 0x24
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	460a      	mov	r2, r1
 800b7fe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	2b07      	cmp	r3, #7
 800b804:	d9e8      	bls.n	800b7d8 <gen_numname+0xe4>
}
 800b806:	bf00      	nop
 800b808:	bf00      	nop
 800b80a:	3730      	adds	r7, #48	; 0x30
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	00011021 	.word	0x00011021

0800b814 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b820:	230b      	movs	r3, #11
 800b822:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	b2da      	uxtb	r2, r3
 800b828:	0852      	lsrs	r2, r2, #1
 800b82a:	01db      	lsls	r3, r3, #7
 800b82c:	4313      	orrs	r3, r2
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	1c59      	adds	r1, r3, #1
 800b834:	6079      	str	r1, [r7, #4]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	4413      	add	r3, r2
 800b83a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	3b01      	subs	r3, #1
 800b840:	60bb      	str	r3, [r7, #8]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1ed      	bne.n	800b824 <sum_sfn+0x10>
	return sum;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b856:	b480      	push	{r7}
 800b858:	b087      	sub	sp, #28
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3301      	adds	r3, #1
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	3301      	adds	r3, #1
 800b866:	015b      	lsls	r3, r3, #5
 800b868:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b86a:	2300      	movs	r3, #0
 800b86c:	827b      	strh	r3, [r7, #18]
 800b86e:	2300      	movs	r3, #0
 800b870:	617b      	str	r3, [r7, #20]
 800b872:	e018      	b.n	800b8a6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	2b02      	cmp	r3, #2
 800b878:	d103      	bne.n	800b882 <xdir_sum+0x2c>
			i++;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	3301      	adds	r3, #1
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	e00e      	b.n	800b8a0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b882:	8a7b      	ldrh	r3, [r7, #18]
 800b884:	03db      	lsls	r3, r3, #15
 800b886:	b29a      	uxth	r2, r3
 800b888:	8a7b      	ldrh	r3, [r7, #18]
 800b88a:	085b      	lsrs	r3, r3, #1
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	4413      	add	r3, r2
 800b890:	b29a      	uxth	r2, r3
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	440b      	add	r3, r1
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	4413      	add	r3, r2
 800b89e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	617b      	str	r3, [r7, #20]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d3e2      	bcc.n	800b874 <xdir_sum+0x1e>
		}
	}
	return sum;
 800b8ae:	8a7b      	ldrh	r3, [r7, #18]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	371c      	adds	r7, #28
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800b8c8:	e01f      	b.n	800b90a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b8ca:	89bb      	ldrh	r3, [r7, #12]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f002 fccb 	bl	800e268 <ff_wtoupper>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b8d6:	89fb      	ldrh	r3, [r7, #14]
 800b8d8:	03db      	lsls	r3, r3, #15
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	89fb      	ldrh	r3, [r7, #14]
 800b8de:	085b      	lsrs	r3, r3, #1
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	4413      	add	r3, r2
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	89bb      	ldrh	r3, [r7, #12]
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	4413      	add	r3, r2
 800b8ee:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b8f0:	89fb      	ldrh	r3, [r7, #14]
 800b8f2:	03db      	lsls	r3, r3, #15
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	89fb      	ldrh	r3, [r7, #14]
 800b8f8:	085b      	lsrs	r3, r3, #1
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	89bb      	ldrh	r3, [r7, #12]
 800b902:	0a1b      	lsrs	r3, r3, #8
 800b904:	b29b      	uxth	r3, r3
 800b906:	4413      	add	r3, r2
 800b908:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	1c9a      	adds	r2, r3, #2
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	81bb      	strh	r3, [r7, #12]
 800b914:	89bb      	ldrh	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1d7      	bne.n	800b8ca <xname_sum+0xe>
	}
	return sum;
 800b91a:	89fb      	ldrh	r3, [r7, #14]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800b924:	b590      	push	{r4, r7, lr}
 800b926:	b087      	sub	sp, #28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93c:	4619      	mov	r1, r3
 800b93e:	4610      	mov	r0, r2
 800b940:	f7fe fda2 	bl	800a488 <move_window>
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <load_xdir+0x2e>
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
 800b950:	e09f      	b.n	800ba92 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b85      	cmp	r3, #133	; 0x85
 800b95a:	d001      	beq.n	800b960 <load_xdir+0x3c>
 800b95c:	2302      	movs	r3, #2
 800b95e:	e098      	b.n	800ba92 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b964:	2220      	movs	r2, #32
 800b966:	4619      	mov	r1, r3
 800b968:	6938      	ldr	r0, [r7, #16]
 800b96a:	f7fe fb5e 	bl	800a02a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3301      	adds	r3, #1
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	015b      	lsls	r3, r3, #5
 800b978:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b5f      	cmp	r3, #95	; 0x5f
 800b97e:	d903      	bls.n	800b988 <load_xdir+0x64>
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b986:	d901      	bls.n	800b98c <load_xdir+0x68>
 800b988:	2302      	movs	r3, #2
 800b98a:	e082      	b.n	800ba92 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800b98c:	2100      	movs	r1, #0
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff fc04 	bl	800b19c <dir_next>
 800b994:	4603      	mov	r3, r0
 800b996:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <load_xdir+0x7e>
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
 800b9a0:	e077      	b.n	800ba92 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	f7fe fd6b 	bl	800a488 <move_window>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <load_xdir+0x9c>
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	e068      	b.n	800ba92 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2bc0      	cmp	r3, #192	; 0xc0
 800b9c8:	d001      	beq.n	800b9ce <load_xdir+0xaa>
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	e061      	b.n	800ba92 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f103 0020 	add.w	r0, r3, #32
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d8:	2220      	movs	r2, #32
 800b9da:	4619      	mov	r1, r3
 800b9dc:	f7fe fb25 	bl	800a02a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	3323      	adds	r3, #35	; 0x23
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	332c      	adds	r3, #44	; 0x2c
 800b9e8:	4a2c      	ldr	r2, [pc, #176]	; (800ba9c <load_xdir+0x178>)
 800b9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ee:	08db      	lsrs	r3, r3, #3
 800b9f0:	015b      	lsls	r3, r3, #5
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d201      	bcs.n	800b9fc <load_xdir+0xd8>
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	e04a      	b.n	800ba92 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800b9fc:	2340      	movs	r3, #64	; 0x40
 800b9fe:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800ba00:	2100      	movs	r1, #0
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7ff fbca 	bl	800b19c <dir_next>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <load_xdir+0xf2>
 800ba12:	7bfb      	ldrb	r3, [r7, #15]
 800ba14:	e03d      	b.n	800ba92 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4610      	mov	r0, r2
 800ba22:	f7fe fd31 	bl	800a488 <move_window>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <load_xdir+0x110>
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	e02e      	b.n	800ba92 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2bc1      	cmp	r3, #193	; 0xc1
 800ba3c:	d001      	beq.n	800ba42 <load_xdir+0x11e>
 800ba3e:	2302      	movs	r3, #2
 800ba40:	e027      	b.n	800ba92 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ba48:	d208      	bcs.n	800ba5c <load_xdir+0x138>
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	18d0      	adds	r0, r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba54:	2220      	movs	r2, #32
 800ba56:	4619      	mov	r1, r3
 800ba58:	f7fe fae7 	bl	800a02a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	3320      	adds	r3, #32
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d3ca      	bcc.n	800ba00 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ba70:	d80e      	bhi.n	800ba90 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ba72:	6938      	ldr	r0, [r7, #16]
 800ba74:	f7ff feef 	bl	800b856 <xdir_sum>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	461c      	mov	r4, r3
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	3302      	adds	r3, #2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe f90d 	bl	8009ca0 <ld_word>
 800ba86:	4603      	mov	r3, r0
 800ba88:	429c      	cmp	r4, r3
 800ba8a:	d001      	beq.n	800ba90 <load_xdir+0x16c>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e000      	b.n	800ba92 <load_xdir+0x16e>
	}
	return FR_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd90      	pop	{r4, r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	88888889 	.word	0x88888889

0800baa0 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800baa0:	b5b0      	push	{r4, r5, r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6808      	ldr	r0, [r1, #0]
 800baae:	6879      	ldr	r1, [r7, #4]
 800bab0:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6a08      	ldr	r0, [r1, #32]
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800babe:	b2c8      	uxtb	r0, r1
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800bac4:	6839      	ldr	r1, [r7, #0]
 800bac6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800bac8:	4608      	mov	r0, r1
 800baca:	f04f 0100 	mov.w	r1, #0
 800bace:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 800bad2:	f04f 0500 	mov.w	r5, #0
 800bad6:	ea00 0204 	and.w	r2, r0, r4
 800bada:	ea01 0305 	and.w	r3, r1, r5
 800bade:	6879      	ldr	r1, [r7, #4]
 800bae0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff facc 	bl	800b090 <dir_sdi>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d104      	bne.n	800bb0c <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7ff ff0e 	bl	800b924 <load_xdir>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bdb0      	pop	{r4, r5, r7, pc}

0800bb16 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800bb16:	b590      	push	{r4, r7, lr}
 800bb18:	b087      	sub	sp, #28
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	1c9c      	adds	r4, r3, #2
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff fe93 	bl	800b856 <xdir_sum>
 800bb30:	4603      	mov	r3, r0
 800bb32:	4619      	mov	r1, r3
 800bb34:	4620      	mov	r0, r4
 800bb36:	f7fe f9a9 	bl	8009e8c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	3301      	adds	r3, #1
 800bb42:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff faa0 	bl	800b090 <dir_sdi>
 800bb50:	4603      	mov	r3, r0
 800bb52:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bb54:	e026      	b.n	800bba4 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5e:	4619      	mov	r1, r3
 800bb60:	4610      	mov	r0, r2
 800bb62:	f7fe fc91 	bl	800a488 <move_window>
 800bb66:	4603      	mov	r3, r0
 800bb68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d11d      	bne.n	800bbac <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb74:	2220      	movs	r2, #32
 800bb76:	68f9      	ldr	r1, [r7, #12]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fe fa56 	bl	800a02a <mem_cpy>
		dp->obj.fs->wflag = 1;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2201      	movs	r2, #1
 800bb84:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	613b      	str	r3, [r7, #16]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00e      	beq.n	800bbb0 <store_xdir+0x9a>
		dirb += SZDIRE;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3320      	adds	r3, #32
 800bb96:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800bb98:	2100      	movs	r1, #0
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7ff fafe 	bl	800b19c <dir_next>
 800bba0:	4603      	mov	r3, r0
 800bba2:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bba4:	7dfb      	ldrb	r3, [r7, #23]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d0d5      	beq.n	800bb56 <store_xdir+0x40>
 800bbaa:	e002      	b.n	800bbb2 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800bbac:	bf00      	nop
 800bbae:	e000      	b.n	800bbb2 <store_xdir+0x9c>
		if (--nent == 0) break;
 800bbb0:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800bbb2:	7dfb      	ldrb	r3, [r7, #23]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <store_xdir+0xa8>
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d101      	bne.n	800bbc2 <store_xdir+0xac>
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	e000      	b.n	800bbc4 <store_xdir+0xae>
 800bbc2:	2302      	movs	r3, #2
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	371c      	adds	r7, #28
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd90      	pop	{r4, r7, pc}

0800bbcc <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800bbcc:	b590      	push	{r4, r7, lr}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800bbd6:	2240      	movs	r2, #64	; 0x40
 800bbd8:	2100      	movs	r1, #0
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7fe fa46 	bl	800a06c <mem_set>
	dirb[XDIR_Type] = 0x85;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2285      	movs	r2, #133	; 0x85
 800bbe4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3320      	adds	r3, #32
 800bbea:	22c0      	movs	r2, #192	; 0xc0
 800bbec:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	72bb      	strb	r3, [r7, #10]
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	72fb      	strb	r3, [r7, #11]
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	813b      	strh	r3, [r7, #8]
 800bbfa:	2340      	movs	r3, #64	; 0x40
 800bbfc:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	60fa      	str	r2, [r7, #12]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	4413      	add	r3, r2
 800bc08:	22c1      	movs	r2, #193	; 0xc1
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	60fa      	str	r2, [r7, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	4413      	add	r3, r2
 800bc16:	2200      	movs	r2, #0
 800bc18:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800bc1a:	893b      	ldrh	r3, [r7, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <create_xdir+0x6c>
 800bc20:	7abb      	ldrb	r3, [r7, #10]
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	683a      	ldr	r2, [r7, #0]
 800bc26:	4413      	add	r3, r2
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	813b      	strh	r3, [r7, #8]
 800bc2c:	893b      	ldrh	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <create_xdir+0x6c>
 800bc32:	7abb      	ldrb	r3, [r7, #10]
 800bc34:	3301      	adds	r3, #1
 800bc36:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	893a      	ldrh	r2, [r7, #8]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fe f922 	bl	8009e8c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	3302      	adds	r3, #2
 800bc4c:	60fb      	str	r3, [r7, #12]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f003 031f 	and.w	r3, r3, #31
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e0      	bne.n	800bc1a <create_xdir+0x4e>
		nb++;
 800bc58:	7afb      	ldrb	r3, [r7, #11]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800bc5e:	7abb      	ldrb	r3, [r7, #10]
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	4413      	add	r3, r2
 800bc66:	881b      	ldrh	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1c8      	bne.n	800bbfe <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3323      	adds	r3, #35	; 0x23
 800bc70:	7aba      	ldrb	r2, [r7, #10]
 800bc72:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	3301      	adds	r3, #1
 800bc78:	7afa      	ldrb	r2, [r7, #11]
 800bc7a:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800bc82:	6838      	ldr	r0, [r7, #0]
 800bc84:	f7ff fe1a 	bl	800b8bc <xname_sum>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f7fe f8fd 	bl	8009e8c <st_word>
}
 800bc92:	bf00      	nop
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd90      	pop	{r4, r7, pc}

0800bc9a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b086      	sub	sp, #24
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bca4:	2304      	movs	r3, #4
 800bca6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bcae:	23ff      	movs	r3, #255	; 0xff
 800bcb0:	757b      	strb	r3, [r7, #21]
 800bcb2:	23ff      	movs	r3, #255	; 0xff
 800bcb4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bcb6:	e09f      	b.n	800bdf8 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	6938      	ldr	r0, [r7, #16]
 800bcc0:	f7fe fbe2 	bl	800a488 <move_window>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f040 809a 	bne.w	800be04 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bcd8:	7dbb      	ldrb	r3, [r7, #22]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d102      	bne.n	800bce4 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bcde:	2304      	movs	r3, #4
 800bce0:	75fb      	strb	r3, [r7, #23]
 800bce2:	e096      	b.n	800be12 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b04      	cmp	r3, #4
 800bcea:	d118      	bne.n	800bd1e <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800bcec:	7dbb      	ldrb	r3, [r7, #22]
 800bcee:	2b85      	cmp	r3, #133	; 0x85
 800bcf0:	d179      	bne.n	800bde6 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff fe12 	bl	800b924 <load_xdir>
 800bd00:	4603      	mov	r3, r0
 800bd02:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d17e      	bne.n	800be08 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	719a      	strb	r2, [r3, #6]
					}
					break;
 800bd1c:	e074      	b.n	800be08 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd22:	330b      	adds	r3, #11
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd2a:	73fb      	strb	r3, [r7, #15]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	7bfa      	ldrb	r2, [r7, #15]
 800bd30:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bd32:	7dbb      	ldrb	r3, [r7, #22]
 800bd34:	2be5      	cmp	r3, #229	; 0xe5
 800bd36:	d00e      	beq.n	800bd56 <dir_read+0xbc>
 800bd38:	7dbb      	ldrb	r3, [r7, #22]
 800bd3a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd3c:	d00b      	beq.n	800bd56 <dir_read+0xbc>
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	f023 0320 	bic.w	r3, r3, #32
 800bd44:	2b08      	cmp	r3, #8
 800bd46:	bf0c      	ite	eq
 800bd48:	2301      	moveq	r3, #1
 800bd4a:	2300      	movne	r3, #0
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	461a      	mov	r2, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d002      	beq.n	800bd5c <dir_read+0xc2>
				ord = 0xFF;
 800bd56:	23ff      	movs	r3, #255	; 0xff
 800bd58:	757b      	strb	r3, [r7, #21]
 800bd5a:	e044      	b.n	800bde6 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
 800bd5e:	2b0f      	cmp	r3, #15
 800bd60:	d12f      	bne.n	800bdc2 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bd62:	7dbb      	ldrb	r3, [r7, #22]
 800bd64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00d      	beq.n	800bd88 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd70:	7b5b      	ldrb	r3, [r3, #13]
 800bd72:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800bd74:	7dbb      	ldrb	r3, [r7, #22]
 800bd76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd7a:	75bb      	strb	r3, [r7, #22]
 800bd7c:	7dbb      	ldrb	r3, [r7, #22]
 800bd7e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd88:	7dba      	ldrb	r2, [r7, #22]
 800bd8a:	7d7b      	ldrb	r3, [r7, #21]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d115      	bne.n	800bdbc <dir_read+0x122>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd94:	330d      	adds	r3, #13
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	7d3a      	ldrb	r2, [r7, #20]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d10e      	bne.n	800bdbc <dir_read+0x122>
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	68da      	ldr	r2, [r3, #12]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda6:	4619      	mov	r1, r3
 800bda8:	4610      	mov	r0, r2
 800bdaa:	f7ff fbd7 	bl	800b55c <pick_lfn>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d003      	beq.n	800bdbc <dir_read+0x122>
 800bdb4:	7d7b      	ldrb	r3, [r7, #21]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	e000      	b.n	800bdbe <dir_read+0x124>
 800bdbc:	23ff      	movs	r3, #255	; 0xff
 800bdbe:	757b      	strb	r3, [r7, #21]
 800bdc0:	e011      	b.n	800bde6 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bdc2:	7d7b      	ldrb	r3, [r7, #21]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d109      	bne.n	800bddc <dir_read+0x142>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7ff fd21 	bl	800b814 <sum_sfn>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	7d3b      	ldrb	r3, [r7, #20]
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d017      	beq.n	800be0c <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bde2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800bde4:	e012      	b.n	800be0c <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bde6:	2100      	movs	r1, #0
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7ff f9d7 	bl	800b19c <dir_next>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10b      	bne.n	800be10 <dir_read+0x176>
	while (dp->sect) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f47f af5b 	bne.w	800bcb8 <dir_read+0x1e>
 800be02:	e006      	b.n	800be12 <dir_read+0x178>
		if (res != FR_OK) break;
 800be04:	bf00      	nop
 800be06:	e004      	b.n	800be12 <dir_read+0x178>
					break;
 800be08:	bf00      	nop
 800be0a:	e002      	b.n	800be12 <dir_read+0x178>
					break;
 800be0c:	bf00      	nop
 800be0e:	e000      	b.n	800be12 <dir_read+0x178>
		if (res != FR_OK) break;
 800be10:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800be12:	7dfb      	ldrb	r3, [r7, #23]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <dir_read+0x184>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800be1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800be28:	b590      	push	{r4, r7, lr}
 800be2a:	b089      	sub	sp, #36	; 0x24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800be36:	2100      	movs	r1, #0
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff f929 	bl	800b090 <dir_sdi>
 800be3e:	4603      	mov	r3, r0
 800be40:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800be42:	7ffb      	ldrb	r3, [r7, #31]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d001      	beq.n	800be4c <dir_find+0x24>
 800be48:	7ffb      	ldrb	r3, [r7, #31]
 800be4a:	e112      	b.n	800c072 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2b04      	cmp	r3, #4
 800be52:	d164      	bne.n	800bf1e <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff fd2f 	bl	800b8bc <xname_sum>
 800be5e:	4603      	mov	r3, r0
 800be60:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800be62:	e04f      	b.n	800bf04 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	3324      	adds	r3, #36	; 0x24
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fd ff18 	bl	8009ca0 <ld_word>
 800be70:	4603      	mov	r3, r0
 800be72:	461a      	mov	r2, r3
 800be74:	893b      	ldrh	r3, [r7, #8]
 800be76:	4293      	cmp	r3, r2
 800be78:	d000      	beq.n	800be7c <dir_find+0x54>
 800be7a:	e043      	b.n	800bf04 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800be84:	76fb      	strb	r3, [r7, #27]
 800be86:	2340      	movs	r3, #64	; 0x40
 800be88:	617b      	str	r3, [r7, #20]
 800be8a:	2300      	movs	r3, #0
 800be8c:	613b      	str	r3, [r7, #16]
 800be8e:	e029      	b.n	800bee4 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	f003 031f 	and.w	r3, r3, #31
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <dir_find+0x78>
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	3302      	adds	r3, #2
 800be9e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	4413      	add	r3, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fd fef9 	bl	8009ca0 <ld_word>
 800beae:	4603      	mov	r3, r0
 800beb0:	4618      	mov	r0, r3
 800beb2:	f002 f9d9 	bl	800e268 <ff_wtoupper>
 800beb6:	4603      	mov	r3, r0
 800beb8:	461c      	mov	r4, r3
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	68da      	ldr	r2, [r3, #12]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	4413      	add	r3, r2
 800bec4:	881b      	ldrh	r3, [r3, #0]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f002 f9ce 	bl	800e268 <ff_wtoupper>
 800becc:	4603      	mov	r3, r0
 800bece:	429c      	cmp	r4, r3
 800bed0:	d10c      	bne.n	800beec <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bed2:	7efb      	ldrb	r3, [r7, #27]
 800bed4:	3b01      	subs	r3, #1
 800bed6:	76fb      	strb	r3, [r7, #27]
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	3302      	adds	r3, #2
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	3301      	adds	r3, #1
 800bee2:	613b      	str	r3, [r7, #16]
 800bee4:	7efb      	ldrb	r3, [r7, #27]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1d2      	bne.n	800be90 <dir_find+0x68>
 800beea:	e000      	b.n	800beee <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800beec:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800beee:	7efb      	ldrb	r3, [r7, #27]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d107      	bne.n	800bf04 <dir_find+0xdc>
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	4413      	add	r3, r2
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d009      	beq.n	800bf18 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bf04:	2100      	movs	r1, #0
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff fec7 	bl	800bc9a <dir_read>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	77fb      	strb	r3, [r7, #31]
 800bf10:	7ffb      	ldrb	r3, [r7, #31]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0a6      	beq.n	800be64 <dir_find+0x3c>
 800bf16:	e000      	b.n	800bf1a <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bf18:	bf00      	nop
		}
		return res;
 800bf1a:	7ffb      	ldrb	r3, [r7, #31]
 800bf1c:	e0a9      	b.n	800c072 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf1e:	23ff      	movs	r3, #255	; 0xff
 800bf20:	773b      	strb	r3, [r7, #28]
 800bf22:	7f3b      	ldrb	r3, [r7, #28]
 800bf24:	777b      	strb	r3, [r7, #29]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf2c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf32:	4619      	mov	r1, r3
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f7fe faa7 	bl	800a488 <move_window>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800bf3e:	7ffb      	ldrb	r3, [r7, #31]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f040 8090 	bne.w	800c066 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bf4e:	7fbb      	ldrb	r3, [r7, #30]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d102      	bne.n	800bf5a <dir_find+0x132>
 800bf54:	2304      	movs	r3, #4
 800bf56:	77fb      	strb	r3, [r7, #31]
 800bf58:	e08a      	b.n	800c070 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5e:	330b      	adds	r3, #11
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf66:	72fb      	strb	r3, [r7, #11]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	7afa      	ldrb	r2, [r7, #11]
 800bf6c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bf6e:	7fbb      	ldrb	r3, [r7, #30]
 800bf70:	2be5      	cmp	r3, #229	; 0xe5
 800bf72:	d007      	beq.n	800bf84 <dir_find+0x15c>
 800bf74:	7afb      	ldrb	r3, [r7, #11]
 800bf76:	f003 0308 	and.w	r3, r3, #8
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d009      	beq.n	800bf92 <dir_find+0x16a>
 800bf7e:	7afb      	ldrb	r3, [r7, #11]
 800bf80:	2b0f      	cmp	r3, #15
 800bf82:	d006      	beq.n	800bf92 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf84:	23ff      	movs	r3, #255	; 0xff
 800bf86:	777b      	strb	r3, [r7, #29]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf8e:	64da      	str	r2, [r3, #76]	; 0x4c
 800bf90:	e05e      	b.n	800c050 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bf92:	7afb      	ldrb	r3, [r7, #11]
 800bf94:	2b0f      	cmp	r3, #15
 800bf96:	d136      	bne.n	800c006 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800bf9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d154      	bne.n	800c050 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bfa6:	7fbb      	ldrb	r3, [r7, #30]
 800bfa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00d      	beq.n	800bfcc <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb4:	7b5b      	ldrb	r3, [r3, #13]
 800bfb6:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bfb8:	7fbb      	ldrb	r3, [r7, #30]
 800bfba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfbe:	77bb      	strb	r3, [r7, #30]
 800bfc0:	7fbb      	ldrb	r3, [r7, #30]
 800bfc2:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bfcc:	7fba      	ldrb	r2, [r7, #30]
 800bfce:	7f7b      	ldrb	r3, [r7, #29]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d115      	bne.n	800c000 <dir_find+0x1d8>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd8:	330d      	adds	r3, #13
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	7f3a      	ldrb	r2, [r7, #28]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d10e      	bne.n	800c000 <dir_find+0x1d8>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfea:	4619      	mov	r1, r3
 800bfec:	4610      	mov	r0, r2
 800bfee:	f7ff fa45 	bl	800b47c <cmp_lfn>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d003      	beq.n	800c000 <dir_find+0x1d8>
 800bff8:	7f7b      	ldrb	r3, [r7, #29]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	e000      	b.n	800c002 <dir_find+0x1da>
 800c000:	23ff      	movs	r3, #255	; 0xff
 800c002:	777b      	strb	r3, [r7, #29]
 800c004:	e024      	b.n	800c050 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c006:	7f7b      	ldrb	r3, [r7, #29]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d109      	bne.n	800c020 <dir_find+0x1f8>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff fbff 	bl	800b814 <sum_sfn>
 800c016:	4603      	mov	r3, r0
 800c018:	461a      	mov	r2, r3
 800c01a:	7f3b      	ldrb	r3, [r7, #28]
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d024      	beq.n	800c06a <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c026:	f003 0301 	and.w	r3, r3, #1
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <dir_find+0x21c>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	3340      	adds	r3, #64	; 0x40
 800c036:	220b      	movs	r2, #11
 800c038:	4619      	mov	r1, r3
 800c03a:	f7fe f832 	bl	800a0a2 <mem_cmp>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d014      	beq.n	800c06e <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c044:	23ff      	movs	r3, #255	; 0xff
 800c046:	777b      	strb	r3, [r7, #29]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c04e:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c050:	2100      	movs	r1, #0
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7ff f8a2 	bl	800b19c <dir_next>
 800c058:	4603      	mov	r3, r0
 800c05a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c05c:	7ffb      	ldrb	r3, [r7, #31]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f43f af65 	beq.w	800bf2e <dir_find+0x106>
 800c064:	e004      	b.n	800c070 <dir_find+0x248>
		if (res != FR_OK) break;
 800c066:	bf00      	nop
 800c068:	e002      	b.n	800c070 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c06a:	bf00      	nop
 800c06c:	e000      	b.n	800c070 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c06e:	bf00      	nop

	return res;
 800c070:	7ffb      	ldrb	r3, [r7, #31]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3724      	adds	r7, #36	; 0x24
 800c076:	46bd      	mov	sp, r7
 800c078:	bd90      	pop	{r4, r7, pc}
	...

0800c07c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c07c:	b5b0      	push	{r4, r5, r7, lr}
 800c07e:	b0a2      	sub	sp, #136	; 0x88
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	677b      	str	r3, [r7, #116]	; 0x74
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c090:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <dir_register+0x20>
 800c098:	2306      	movs	r3, #6
 800c09a:	e18e      	b.n	800c3ba <dir_register+0x33e>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c09c:	2300      	movs	r3, #0
 800c09e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0a0:	e002      	b.n	800c0a8 <dir_register+0x2c>
 800c0a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0aa:	68da      	ldr	r2, [r3, #12]
 800c0ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1f4      	bne.n	800c0a2 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c0b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	2b04      	cmp	r3, #4
 800c0be:	f040 809e 	bne.w	800c1fe <dir_register+0x182>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c0c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0c4:	330e      	adds	r3, #14
 800c0c6:	4abf      	ldr	r2, [pc, #764]	; (800c3c4 <dir_register+0x348>)
 800c0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0cc:	08db      	lsrs	r3, r3, #3
 800c0ce:	3302      	adds	r3, #2
 800c0d0:	67bb      	str	r3, [r7, #120]	; 0x78
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c0d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7ff f936 	bl	800b346 <dir_alloc>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res != FR_OK) return res;
 800c0e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <dir_register+0x72>
 800c0e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c0ec:	e165      	b.n	800c3ba <dir_register+0x33e>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	015b      	lsls	r3, r3, #5
 800c0f8:	1ad2      	subs	r2, r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d071      	beq.n	800c1ea <dir_register+0x16e>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	79db      	ldrb	r3, [r3, #7]
 800c10a:	f003 0304 	and.w	r3, r3, #4
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d06b      	beq.n	800c1ea <dir_register+0x16e>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c11a:	895b      	ldrh	r3, [r3, #10]
 800c11c:	025b      	lsls	r3, r3, #9
 800c11e:	461a      	mov	r2, r3
 800c120:	f04f 0300 	mov.w	r3, #0
 800c124:	1884      	adds	r4, r0, r2
 800c126:	eb41 0503 	adc.w	r5, r1, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4618      	mov	r0, r3
 800c134:	f7fe fd56 	bl	800abe4 <fill_first_frag>
 800c138:	4603      	mov	r3, r0
 800c13a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c13e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c142:	2b00      	cmp	r3, #0
 800c144:	d002      	beq.n	800c14c <dir_register+0xd0>
 800c146:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c14a:	e136      	b.n	800c3ba <dir_register+0x33e>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c156:	4619      	mov	r1, r3
 800c158:	f7fe fd73 	bl	800ac42 <fill_last_frag>
 800c15c:	4603      	mov	r3, r0
 800c15e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c162:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c166:	2b00      	cmp	r3, #0
 800c168:	d002      	beq.n	800c170 <dir_register+0xf4>
 800c16a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c16e:	e124      	b.n	800c3ba <dir_register+0x33e>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	f107 0308 	add.w	r3, r7, #8
 800c176:	4611      	mov	r1, r2
 800c178:	4618      	mov	r0, r3
 800c17a:	f7ff fc91 	bl	800baa0 <load_obj_dir>
 800c17e:	4603      	mov	r3, r0
 800c180:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c184:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d002      	beq.n	800c192 <dir_register+0x116>
 800c18c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c190:	e113      	b.n	800c3ba <dir_register+0x33e>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c1a0:	4608      	mov	r0, r1
 800c1a2:	f7fd feba 	bl	8009f1a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c1a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c1b4:	4608      	mov	r0, r1
 800c1b6:	f7fd feb0 	bl	8009f1a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	79da      	ldrb	r2, [r3, #7]
 800c1be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	3321      	adds	r3, #33	; 0x21
 800c1c4:	f042 0201 	orr.w	r2, r2, #1
 800c1c8:	b2d2      	uxtb	r2, r2
 800c1ca:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c1cc:	f107 0308 	add.w	r3, r7, #8
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff fca0 	bl	800bb16 <store_xdir>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) return res;
 800c1dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <dir_register+0x16e>
 800c1e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c1e8:	e0e7      	b.n	800c3ba <dir_register+0x33e>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c1ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1ec:	691a      	ldr	r2, [r3, #16]
 800c1ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	f7ff fce9 	bl	800bbcc <create_xdir>
		return FR_OK;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e0dd      	b.n	800c3ba <dir_register+0x33e>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c204:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c208:	220c      	movs	r2, #12
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fd ff0d 	bl	800a02a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c210:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c214:	f003 0301 	and.w	r3, r3, #1
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d039      	beq.n	800c290 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2240      	movs	r2, #64	; 0x40
 800c220:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800c224:	2301      	movs	r3, #1
 800c226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c22a:	e019      	b.n	800c260 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c234:	68da      	ldr	r2, [r3, #12]
 800c236:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800c23a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c23e:	f7ff fa59 	bl	800b6f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff fdf0 	bl	800be28 <dir_find>
 800c248:	4603      	mov	r3, r0
 800c24a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if (res != FR_OK) break;
 800c24e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c252:	2b00      	cmp	r3, #0
 800c254:	d109      	bne.n	800c26a <dir_register+0x1ee>
		for (n = 1; n < 100; n++) {
 800c256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c25a:	3301      	adds	r3, #1
 800c25c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c264:	2b63      	cmp	r3, #99	; 0x63
 800c266:	d9e1      	bls.n	800c22c <dir_register+0x1b0>
 800c268:	e000      	b.n	800c26c <dir_register+0x1f0>
			if (res != FR_OK) break;
 800c26a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c26c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c270:	2b64      	cmp	r3, #100	; 0x64
 800c272:	d101      	bne.n	800c278 <dir_register+0x1fc>
 800c274:	2307      	movs	r3, #7
 800c276:	e0a0      	b.n	800c3ba <dir_register+0x33e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c278:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d002      	beq.n	800c286 <dir_register+0x20a>
 800c280:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c284:	e099      	b.n	800c3ba <dir_register+0x33e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c286:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c290:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d007      	beq.n	800c2ac <dir_register+0x230>
 800c29c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c29e:	330c      	adds	r3, #12
 800c2a0:	4a49      	ldr	r2, [pc, #292]	; (800c3c8 <dir_register+0x34c>)
 800c2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a6:	089b      	lsrs	r3, r3, #2
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	e000      	b.n	800c2ae <dir_register+0x232>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	67bb      	str	r3, [r7, #120]	; 0x78
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c2b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff f847 	bl	800b346 <dir_alloc>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c2be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d14a      	bne.n	800c35c <dir_register+0x2e0>
 800c2c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800c2cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d044      	beq.n	800c35c <dir_register+0x2e0>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2d8:	015b      	lsls	r3, r3, #5
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7fe fed6 	bl	800b090 <dir_sdi>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 800c2ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d134      	bne.n	800c35c <dir_register+0x2e0>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	3340      	adds	r3, #64	; 0x40
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff fa8c 	bl	800b814 <sum_sfn>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c306:	4619      	mov	r1, r3
 800c308:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c30a:	f7fe f8bd 	bl	800a488 <move_window>
 800c30e:	4603      	mov	r3, r0
 800c310:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				if (res != FR_OK) break;
 800c314:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d11e      	bne.n	800c35a <dir_register+0x2de>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c31c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c31e:	68d8      	ldr	r0, [r3, #12]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c326:	b2da      	uxtb	r2, r3
 800c328:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800c32c:	f7ff f97a 	bl	800b624 <put_lfn>
				fs->wflag = 1;
 800c330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c332:	2201      	movs	r2, #1
 800c334:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c336:	2100      	movs	r1, #0
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7fe ff2f 	bl	800b19c <dir_next>
 800c33e:	4603      	mov	r3, r0
 800c340:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			} while (res == FR_OK && --nent);
 800c344:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d107      	bne.n	800c35c <dir_register+0x2e0>
 800c34c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c34e:	3b01      	subs	r3, #1
 800c350:	67bb      	str	r3, [r7, #120]	; 0x78
 800c352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1d4      	bne.n	800c302 <dir_register+0x286>
 800c358:	e000      	b.n	800c35c <dir_register+0x2e0>
				if (res != FR_OK) break;
 800c35a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c35c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c360:	2b00      	cmp	r3, #0
 800c362:	d128      	bne.n	800c3b6 <dir_register+0x33a>
		res = move_window(fs, dp->sect);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c368:	4619      	mov	r1, r3
 800c36a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c36c:	f7fe f88c 	bl	800a488 <move_window>
 800c370:	4603      	mov	r3, r0
 800c372:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		if (res == FR_OK) {
 800c376:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d11b      	bne.n	800c3b6 <dir_register+0x33a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c382:	2220      	movs	r2, #32
 800c384:	2100      	movs	r1, #0
 800c386:	4618      	mov	r0, r3
 800c388:	f7fd fe70 	bl	800a06c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	3340      	adds	r3, #64	; 0x40
 800c394:	220b      	movs	r2, #11
 800c396:	4619      	mov	r1, r3
 800c398:	f7fd fe47 	bl	800a02a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a6:	330c      	adds	r3, #12
 800c3a8:	f002 0218 	and.w	r2, r2, #24
 800c3ac:	b2d2      	uxtb	r2, r2
 800c3ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c3b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c3b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3788      	adds	r7, #136	; 0x88
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bdb0      	pop	{r4, r5, r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	88888889 	.word	0x88888889
 800c3c8:	4ec4ec4f 	.word	0x4ec4ec4f

0800c3cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	613b      	str	r3, [r7, #16]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	60fb      	str	r3, [r7, #12]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	617b      	str	r3, [r7, #20]
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	61ba      	str	r2, [r7, #24]
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c3fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fc:	2b1f      	cmp	r3, #31
 800c3fe:	d940      	bls.n	800c482 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c402:	2b2f      	cmp	r3, #47	; 0x2f
 800c404:	d006      	beq.n	800c414 <create_name+0x48>
 800c406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c408:	2b5c      	cmp	r3, #92	; 0x5c
 800c40a:	d110      	bne.n	800c42e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c40c:	e002      	b.n	800c414 <create_name+0x48>
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	3301      	adds	r3, #1
 800c412:	61bb      	str	r3, [r7, #24]
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	4413      	add	r3, r2
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	2b2f      	cmp	r3, #47	; 0x2f
 800c41e:	d0f6      	beq.n	800c40e <create_name+0x42>
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	4413      	add	r3, r2
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	2b5c      	cmp	r3, #92	; 0x5c
 800c42a:	d0f0      	beq.n	800c40e <create_name+0x42>
			break;
 800c42c:	e02a      	b.n	800c484 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2bfe      	cmp	r3, #254	; 0xfe
 800c432:	d901      	bls.n	800c438 <create_name+0x6c>
 800c434:	2306      	movs	r3, #6
 800c436:	e1cb      	b.n	800c7d0 <create_name+0x404>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c440:	2101      	movs	r1, #1
 800c442:	4618      	mov	r0, r3
 800c444:	f001 fed4 	bl	800e1f0 <ff_convert>
 800c448:	4603      	mov	r3, r0
 800c44a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c44c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <create_name+0x8a>
 800c452:	2306      	movs	r3, #6
 800c454:	e1bc      	b.n	800c7d0 <create_name+0x404>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c456:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c458:	2b7f      	cmp	r3, #127	; 0x7f
 800c45a:	d809      	bhi.n	800c470 <create_name+0xa4>
 800c45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c45e:	4619      	mov	r1, r3
 800c460:	48a5      	ldr	r0, [pc, #660]	; (800c6f8 <create_name+0x32c>)
 800c462:	f7fd fe45 	bl	800a0f0 <chk_chr>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <create_name+0xa4>
 800c46c:	2306      	movs	r3, #6
 800c46e:	e1af      	b.n	800c7d0 <create_name+0x404>
		lfn[di++] = w;					/* Store the Unicode character */
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	617a      	str	r2, [r7, #20]
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	4413      	add	r3, r2
 800c47c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c47e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c480:	e7b4      	b.n	800c3ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c482:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c484:	693a      	ldr	r2, [r7, #16]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	441a      	add	r2, r3
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c48e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c490:	2b1f      	cmp	r3, #31
 800c492:	d801      	bhi.n	800c498 <create_name+0xcc>
 800c494:	2304      	movs	r3, #4
 800c496:	e000      	b.n	800c49a <create_name+0xce>
 800c498:	2300      	movs	r3, #0
 800c49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d109      	bne.n	800c4b8 <create_name+0xec>
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c4aa:	4413      	add	r3, r2
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	2b2e      	cmp	r3, #46	; 0x2e
 800c4b6:	d015      	beq.n	800c4e4 <create_name+0x118>
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d14d      	bne.n	800c55a <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c4c4:	4413      	add	r3, r2
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c4d0:	d143      	bne.n	800c55a <create_name+0x18e>
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	4b89      	ldr	r3, [pc, #548]	; (800c6fc <create_name+0x330>)
 800c4d6:	4413      	add	r3, r2
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	4413      	add	r3, r2
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c4e2:	d13a      	bne.n	800c55a <create_name+0x18e>
		lfn[di] = 0;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	623b      	str	r3, [r7, #32]
 800c4f4:	e00f      	b.n	800c516 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800c4f6:	6a3a      	ldr	r2, [r7, #32]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d201      	bcs.n	800c502 <create_name+0x136>
 800c4fe:	212e      	movs	r1, #46	; 0x2e
 800c500:	e000      	b.n	800c504 <create_name+0x138>
 800c502:	2120      	movs	r1, #32
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	6a3b      	ldr	r3, [r7, #32]
 800c508:	4413      	add	r3, r2
 800c50a:	3340      	adds	r3, #64	; 0x40
 800c50c:	460a      	mov	r2, r1
 800c50e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	3301      	adds	r3, #1
 800c514:	623b      	str	r3, [r7, #32]
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	2b0a      	cmp	r3, #10
 800c51a:	d9ec      	bls.n	800c4f6 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800c51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c520:	f043 0320 	orr.w	r3, r3, #32
 800c524:	b2d9      	uxtb	r1, r3
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	4413      	add	r3, r2
 800c52c:	3340      	adds	r3, #64	; 0x40
 800c52e:	460a      	mov	r2, r1
 800c530:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	e14c      	b.n	800c7d0 <create_name+0x404>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c53c:	4413      	add	r3, r2
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4413      	add	r3, r2
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c54a:	2b20      	cmp	r3, #32
 800c54c:	d002      	beq.n	800c554 <create_name+0x188>
 800c54e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c550:	2b2e      	cmp	r3, #46	; 0x2e
 800c552:	d106      	bne.n	800c562 <create_name+0x196>
		di--;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	3b01      	subs	r3, #1
 800c558:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1ea      	bne.n	800c536 <create_name+0x16a>
 800c560:	e000      	b.n	800c564 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 800c562:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4413      	add	r3, r2
 800c56c:	2200      	movs	r2, #0
 800c56e:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <create_name+0x1ae>
 800c576:	2306      	movs	r3, #6
 800c578:	e12a      	b.n	800c7d0 <create_name+0x404>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3340      	adds	r3, #64	; 0x40
 800c57e:	220b      	movs	r2, #11
 800c580:	2120      	movs	r1, #32
 800c582:	4618      	mov	r0, r3
 800c584:	f7fd fd72 	bl	800a06c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c588:	2300      	movs	r3, #0
 800c58a:	61bb      	str	r3, [r7, #24]
 800c58c:	e002      	b.n	800c594 <create_name+0x1c8>
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	3301      	adds	r3, #1
 800c592:	61bb      	str	r3, [r7, #24]
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	4413      	add	r3, r2
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	2b20      	cmp	r3, #32
 800c5a0:	d0f5      	beq.n	800c58e <create_name+0x1c2>
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	005b      	lsls	r3, r3, #1
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c5ae:	d0ee      	beq.n	800c58e <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d009      	beq.n	800c5ca <create_name+0x1fe>
 800c5b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ba:	f043 0303 	orr.w	r3, r3, #3
 800c5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c5c2:	e002      	b.n	800c5ca <create_name+0x1fe>
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	617b      	str	r3, [r7, #20]
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d009      	beq.n	800c5e4 <create_name+0x218>
 800c5d0:	697a      	ldr	r2, [r7, #20]
 800c5d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c5d6:	4413      	add	r3, r2
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	4413      	add	r3, r2
 800c5de:	881b      	ldrh	r3, [r3, #0]
 800c5e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5e2:	d1ef      	bne.n	800c5c4 <create_name+0x1f8>

	i = b = 0; ni = 8;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	623b      	str	r3, [r7, #32]
 800c5ee:	2308      	movs	r3, #8
 800c5f0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	1c5a      	adds	r2, r3, #1
 800c5f6:	61ba      	str	r2, [r7, #24]
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	f000 8099 	beq.w	800c73c <create_name+0x370>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c60a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c60c:	2b20      	cmp	r3, #32
 800c60e:	d006      	beq.n	800c61e <create_name+0x252>
 800c610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c612:	2b2e      	cmp	r3, #46	; 0x2e
 800c614:	d10a      	bne.n	800c62c <create_name+0x260>
 800c616:	69ba      	ldr	r2, [r7, #24]
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d006      	beq.n	800c62c <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 800c61e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c622:	f043 0303 	orr.w	r3, r3, #3
 800c626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c62a:	e086      	b.n	800c73a <create_name+0x36e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c62c:	6a3a      	ldr	r2, [r7, #32]
 800c62e:	69fb      	ldr	r3, [r7, #28]
 800c630:	429a      	cmp	r2, r3
 800c632:	d203      	bcs.n	800c63c <create_name+0x270>
 800c634:	69ba      	ldr	r2, [r7, #24]
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d123      	bne.n	800c684 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	2b0b      	cmp	r3, #11
 800c640:	d106      	bne.n	800c650 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 800c642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c646:	f043 0303 	orr.w	r3, r3, #3
 800c64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c64e:	e078      	b.n	800c742 <create_name+0x376>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c650:	69ba      	ldr	r2, [r7, #24]
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	429a      	cmp	r2, r3
 800c656:	d005      	beq.n	800c664 <create_name+0x298>
 800c658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c65c:	f043 0303 	orr.w	r3, r3, #3
 800c660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c664:	69ba      	ldr	r2, [r7, #24]
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d869      	bhi.n	800c740 <create_name+0x374>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	61bb      	str	r3, [r7, #24]
 800c670:	2308      	movs	r3, #8
 800c672:	623b      	str	r3, [r7, #32]
 800c674:	230b      	movs	r3, #11
 800c676:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c678:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c682:	e05a      	b.n	800c73a <create_name+0x36e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c686:	2b7f      	cmp	r3, #127	; 0x7f
 800c688:	d914      	bls.n	800c6b4 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c68a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c68c:	2100      	movs	r1, #0
 800c68e:	4618      	mov	r0, r3
 800c690:	f001 fdae 	bl	800e1f0 <ff_convert>
 800c694:	4603      	mov	r3, r0
 800c696:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d004      	beq.n	800c6a8 <create_name+0x2dc>
 800c69e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6a0:	3b80      	subs	r3, #128	; 0x80
 800c6a2:	4a17      	ldr	r2, [pc, #92]	; (800c700 <create_name+0x334>)
 800c6a4:	5cd3      	ldrb	r3, [r2, r3]
 800c6a6:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6ac:	f043 0302 	orr.w	r3, r3, #2
 800c6b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d007      	beq.n	800c6ca <create_name+0x2fe>
 800c6ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6bc:	4619      	mov	r1, r3
 800c6be:	4811      	ldr	r0, [pc, #68]	; (800c704 <create_name+0x338>)
 800c6c0:	f7fd fd16 	bl	800a0f0 <chk_chr>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d008      	beq.n	800c6dc <create_name+0x310>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c6ca:	235f      	movs	r3, #95	; 0x5f
 800c6cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6d2:	f043 0303 	orr.w	r3, r3, #3
 800c6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6da:	e024      	b.n	800c726 <create_name+0x35a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c6dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6de:	2b40      	cmp	r3, #64	; 0x40
 800c6e0:	d912      	bls.n	800c708 <create_name+0x33c>
 800c6e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6e4:	2b5a      	cmp	r3, #90	; 0x5a
 800c6e6:	d80f      	bhi.n	800c708 <create_name+0x33c>
					b |= 2;
 800c6e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6ec:	f043 0302 	orr.w	r3, r3, #2
 800c6f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c6f4:	e017      	b.n	800c726 <create_name+0x35a>
 800c6f6:	bf00      	nop
 800c6f8:	0800f2e4 	.word	0x0800f2e4
 800c6fc:	7ffffffe 	.word	0x7ffffffe
 800c700:	0800f384 	.word	0x0800f384
 800c704:	0800f2f0 	.word	0x0800f2f0
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c708:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c70a:	2b60      	cmp	r3, #96	; 0x60
 800c70c:	d90b      	bls.n	800c726 <create_name+0x35a>
 800c70e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c710:	2b7a      	cmp	r3, #122	; 0x7a
 800c712:	d808      	bhi.n	800c726 <create_name+0x35a>
						b |= 1; w -= 0x20;
 800c714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c718:	f043 0301 	orr.w	r3, r3, #1
 800c71c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c722:	3b20      	subs	r3, #32
 800c724:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c726:	6a3b      	ldr	r3, [r7, #32]
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	623a      	str	r2, [r7, #32]
 800c72c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c72e:	b2d1      	uxtb	r1, r2
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	4413      	add	r3, r2
 800c734:	460a      	mov	r2, r1
 800c736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c73a:	e75a      	b.n	800c5f2 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 800c73c:	bf00      	nop
 800c73e:	e000      	b.n	800c742 <create_name+0x376>
			if (si > di) break;			/* No extension */
 800c740:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c748:	2be5      	cmp	r3, #229	; 0xe5
 800c74a:	d103      	bne.n	800c754 <create_name+0x388>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2205      	movs	r2, #5
 800c750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	2b08      	cmp	r3, #8
 800c758:	d104      	bne.n	800c764 <create_name+0x398>
 800c75a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c764:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c768:	f003 030c 	and.w	r3, r3, #12
 800c76c:	2b0c      	cmp	r3, #12
 800c76e:	d005      	beq.n	800c77c <create_name+0x3b0>
 800c770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c774:	f003 0303 	and.w	r3, r3, #3
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d105      	bne.n	800c788 <create_name+0x3bc>
 800c77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c780:	f043 0302 	orr.w	r3, r3, #2
 800c784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c78c:	f003 0302 	and.w	r3, r3, #2
 800c790:	2b00      	cmp	r3, #0
 800c792:	d117      	bne.n	800c7c4 <create_name+0x3f8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c794:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c798:	f003 0303 	and.w	r3, r3, #3
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d105      	bne.n	800c7ac <create_name+0x3e0>
 800c7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7a4:	f043 0310 	orr.w	r3, r3, #16
 800c7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c7ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c7b0:	f003 030c 	and.w	r3, r3, #12
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	d105      	bne.n	800c7c4 <create_name+0x3f8>
 800c7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7bc:	f043 0308 	orr.w	r3, r3, #8
 800c7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c7ca:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800c7ce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3728      	adds	r7, #40	; 0x28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b09c      	sub	sp, #112	; 0x70
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	66bb      	str	r3, [r7, #104]	; 0x68
	FATFS *fs = obj->fs;
 800c7e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	667b      	str	r3, [r7, #100]	; 0x64


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	2b2f      	cmp	r3, #47	; 0x2f
 800c7f2:	d00b      	beq.n	800c80c <follow_path+0x34>
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	2b5c      	cmp	r3, #92	; 0x5c
 800c7fa:	d007      	beq.n	800c80c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800c7fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7fe:	69da      	ldr	r2, [r3, #28]
 800c800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c802:	609a      	str	r2, [r3, #8]
 800c804:	e00d      	b.n	800c822 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	3301      	adds	r3, #1
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b2f      	cmp	r3, #47	; 0x2f
 800c812:	d0f8      	beq.n	800c806 <follow_path+0x2e>
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b5c      	cmp	r3, #92	; 0x5c
 800c81a:	d0f4      	beq.n	800c806 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800c81c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c81e:	2200      	movs	r2, #0
 800c820:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c824:	2200      	movs	r2, #0
 800c826:	61da      	str	r2, [r3, #28]
#if _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
 800c828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b04      	cmp	r3, #4
 800c82e:	d135      	bne.n	800c89c <follow_path+0xc4>
 800c830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d031      	beq.n	800c89c <follow_path+0xc4>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
 800c838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c83a:	6a1a      	ldr	r2, [r3, #32]
 800c83c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c83e:	621a      	str	r2, [r3, #32]
		obj->c_size = fs->cdc_size;
 800c840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c846:	625a      	str	r2, [r3, #36]	; 0x24
		obj->c_ofs = fs->cdc_ofs;
 800c848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c84a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c84c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c84e:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_dir(&dj, obj);
 800c850:	f107 0308 	add.w	r3, r7, #8
 800c854:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff f922 	bl	800baa0 <load_obj_dir>
 800c85c:	4603      	mov	r3, r0
 800c85e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (res != FR_OK) return res;
 800c862:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <follow_path+0x98>
 800c86a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c86e:	e0c1      	b.n	800c9f4 <follow_path+0x21c>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 800c870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	3338      	adds	r3, #56	; 0x38
 800c876:	4618      	mov	r0, r3
 800c878:	f7fd fa2a 	bl	8009cd0 <ld_dword>
 800c87c:	4603      	mov	r3, r0
 800c87e:	461a      	mov	r2, r3
 800c880:	f04f 0300 	mov.w	r3, #0
 800c884:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c886:	e9c1 2304 	strd	r2, r3, [r1, #16]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c88a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	3321      	adds	r3, #33	; 0x21
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	b2da      	uxtb	r2, r3
 800c898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c89a:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	2b1f      	cmp	r3, #31
 800c8a2:	d80b      	bhi.n	800c8bc <follow_path+0xe4>
		dp->fn[NSFLAG] = NS_NONAME;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2280      	movs	r2, #128	; 0x80
 800c8a8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7fe fbee 	bl	800b090 <dir_sdi>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800c8ba:	e099      	b.n	800c9f0 <follow_path+0x218>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8bc:	463b      	mov	r3, r7
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7ff fd83 	bl	800c3cc <create_name>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if (res != FR_OK) break;
 800c8cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f040 8088 	bne.w	800c9e6 <follow_path+0x20e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7ff faa6 	bl	800be28 <dir_find>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			ns = dp->fn[NSFLAG];
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c8e8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			if (res != FR_OK) {				/* Failed to find the object */
 800c8ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d021      	beq.n	800c938 <follow_path+0x160>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c8f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c8f8:	2b04      	cmp	r3, #4
 800c8fa:	d176      	bne.n	800c9ea <follow_path+0x212>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800c8fc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800c900:	f003 0320 	and.w	r3, r3, #32
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00d      	beq.n	800c924 <follow_path+0x14c>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800c908:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800c90c:	f003 0304 	and.w	r3, r3, #4
 800c910:	2b00      	cmp	r3, #0
 800c912:	d066      	beq.n	800c9e2 <follow_path+0x20a>
						dp->fn[NSFLAG] = NS_NONAME;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2280      	movs	r2, #128	; 0x80
 800c918:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800c922:	e062      	b.n	800c9ea <follow_path+0x212>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c924:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800c928:	f003 0304 	and.w	r3, r3, #4
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d15c      	bne.n	800c9ea <follow_path+0x212>
 800c930:	2305      	movs	r3, #5
 800c932:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				break;
 800c936:	e058      	b.n	800c9ea <follow_path+0x212>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c938:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800c93c:	f003 0304 	and.w	r3, r3, #4
 800c940:	2b00      	cmp	r3, #0
 800c942:	d154      	bne.n	800c9ee <follow_path+0x216>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c946:	799b      	ldrb	r3, [r3, #6]
 800c948:	f003 0310 	and.w	r3, r3, #16
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d103      	bne.n	800c958 <follow_path+0x180>
				res = FR_NO_PATH; break;
 800c950:	2305      	movs	r3, #5
 800c952:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800c956:	e04b      	b.n	800c9f0 <follow_path+0x218>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800c958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b04      	cmp	r3, #4
 800c95e:	d130      	bne.n	800c9c2 <follow_path+0x1ea>
				obj->c_scl = obj->sclust;
 800c960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c962:	689a      	ldr	r2, [r3, #8]
 800c964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c966:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c96a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c96e:	4613      	mov	r3, r2
 800c970:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c974:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c976:	79d2      	ldrb	r2, [r2, #7]
 800c978:	431a      	orrs	r2, r3
 800c97a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c97c:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c984:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800c986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c988:	691b      	ldr	r3, [r3, #16]
 800c98a:	3334      	adds	r3, #52	; 0x34
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fd f99f 	bl	8009cd0 <ld_dword>
 800c992:	4602      	mov	r2, r0
 800c994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c996:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	3321      	adds	r3, #33	; 0x21
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	f003 0302 	and.w	r3, r3, #2
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9a8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c9aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	3338      	adds	r3, #56	; 0x38
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fd f9b0 	bl	8009d16 <ld_qword>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c9c0:	e77c      	b.n	800c8bc <follow_path+0xe4>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c9c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9c4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d0:	4413      	add	r3, r2
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c9d6:	f7fe fd12 	bl	800b3fe <ld_clust>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c9de:	609a      	str	r2, [r3, #8]
 800c9e0:	e76c      	b.n	800c8bc <follow_path+0xe4>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800c9e2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9e4:	e76a      	b.n	800c8bc <follow_path+0xe4>
			if (res != FR_OK) break;
 800c9e6:	bf00      	nop
 800c9e8:	e002      	b.n	800c9f0 <follow_path+0x218>
				break;
 800c9ea:	bf00      	nop
 800c9ec:	e000      	b.n	800c9f0 <follow_path+0x218>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9ee:	bf00      	nop
			}
		}
	}

	return res;
 800c9f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3770      	adds	r7, #112	; 0x70
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b087      	sub	sp, #28
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ca04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca08:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d031      	beq.n	800ca76 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	617b      	str	r3, [r7, #20]
 800ca18:	e002      	b.n	800ca20 <get_ldnumber+0x24>
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	617b      	str	r3, [r7, #20]
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b1f      	cmp	r3, #31
 800ca26:	d903      	bls.n	800ca30 <get_ldnumber+0x34>
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b3a      	cmp	r3, #58	; 0x3a
 800ca2e:	d1f4      	bne.n	800ca1a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	2b3a      	cmp	r3, #58	; 0x3a
 800ca36:	d11c      	bne.n	800ca72 <get_ldnumber+0x76>
			tp = *path;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1c5a      	adds	r2, r3, #1
 800ca42:	60fa      	str	r2, [r7, #12]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	3b30      	subs	r3, #48	; 0x30
 800ca48:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	2b09      	cmp	r3, #9
 800ca4e:	d80e      	bhi.n	800ca6e <get_ldnumber+0x72>
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d10a      	bne.n	800ca6e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d107      	bne.n	800ca6e <get_ldnumber+0x72>
					vol = (int)i;
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	3301      	adds	r3, #1
 800ca66:	617b      	str	r3, [r7, #20]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	e002      	b.n	800ca78 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca72:	2300      	movs	r3, #0
 800ca74:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca76:	693b      	ldr	r3, [r7, #16]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	70da      	strb	r2, [r3, #3]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca9a:	645a      	str	r2, [r3, #68]	; 0x44
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca9c:	6839      	ldr	r1, [r7, #0]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7fd fcf2 	bl	800a488 <move_window>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d001      	beq.n	800caae <check_fs+0x2a>
 800caaa:	2304      	movs	r3, #4
 800caac:	e044      	b.n	800cb38 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	3348      	adds	r3, #72	; 0x48
 800cab2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fd f8f2 	bl	8009ca0 <ld_word>
 800cabc:	4603      	mov	r3, r0
 800cabe:	461a      	mov	r2, r3
 800cac0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d001      	beq.n	800cacc <check_fs+0x48>
 800cac8:	2303      	movs	r3, #3
 800caca:	e035      	b.n	800cb38 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cad2:	2be9      	cmp	r3, #233	; 0xe9
 800cad4:	d009      	beq.n	800caea <check_fs+0x66>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cadc:	2beb      	cmp	r3, #235	; 0xeb
 800cade:	d11e      	bne.n	800cb1e <check_fs+0x9a>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800cae6:	2b90      	cmp	r3, #144	; 0x90
 800cae8:	d119      	bne.n	800cb1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3348      	adds	r3, #72	; 0x48
 800caee:	3336      	adds	r3, #54	; 0x36
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fd f8ed 	bl	8009cd0 <ld_dword>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cafc:	4a10      	ldr	r2, [pc, #64]	; (800cb40 <check_fs+0xbc>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d101      	bne.n	800cb06 <check_fs+0x82>
 800cb02:	2300      	movs	r3, #0
 800cb04:	e018      	b.n	800cb38 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	3348      	adds	r3, #72	; 0x48
 800cb0a:	3352      	adds	r3, #82	; 0x52
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fd f8df 	bl	8009cd0 <ld_dword>
 800cb12:	4603      	mov	r3, r0
 800cb14:	4a0b      	ldr	r2, [pc, #44]	; (800cb44 <check_fs+0xc0>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d101      	bne.n	800cb1e <check_fs+0x9a>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e00c      	b.n	800cb38 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	3348      	adds	r3, #72	; 0x48
 800cb22:	220b      	movs	r2, #11
 800cb24:	4908      	ldr	r1, [pc, #32]	; (800cb48 <check_fs+0xc4>)
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fd fabb 	bl	800a0a2 <mem_cmp>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <check_fs+0xb2>
 800cb32:	2301      	movs	r3, #1
 800cb34:	e000      	b.n	800cb38 <check_fs+0xb4>
#endif
	return 2;
 800cb36:	2302      	movs	r3, #2
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	00544146 	.word	0x00544146
 800cb44:	33544146 	.word	0x33544146
 800cb48:	0800f2f8 	.word	0x0800f2f8

0800cb4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cb50:	b098      	sub	sp, #96	; 0x60
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	60b9      	str	r1, [r7, #8]
 800cb58:	4613      	mov	r3, r2
 800cb5a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f7ff ff4a 	bl	800c9fc <get_ldnumber>
 800cb68:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	da01      	bge.n	800cb74 <find_volume+0x28>
 800cb70:	230b      	movs	r3, #11
 800cb72:	e32e      	b.n	800d1d2 <find_volume+0x686>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb74:	4ab0      	ldr	r2, [pc, #704]	; (800ce38 <find_volume+0x2ec>)
 800cb76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb7c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <find_volume+0x3c>
 800cb84:	230c      	movs	r3, #12
 800cb86:	e324      	b.n	800d1d2 <find_volume+0x686>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb8c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	f023 0301 	bic.w	r3, r3, #1
 800cb94:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d01a      	beq.n	800cbd4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800cb9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba0:	785b      	ldrb	r3, [r3, #1]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fc ffde 	bl	8009b64 <disk_status>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cbae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbb2:	f003 0301 	and.w	r3, r3, #1
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d10c      	bne.n	800cbd4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cbba:	79fb      	ldrb	r3, [r7, #7]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d007      	beq.n	800cbd0 <find_volume+0x84>
 800cbc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbc4:	f003 0304 	and.w	r3, r3, #4
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800cbcc:	230a      	movs	r3, #10
 800cbce:	e300      	b.n	800d1d2 <find_volume+0x686>
			}
			return FR_OK;				/* The file system object is valid */
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	e2fe      	b.n	800d1d2 <find_volume+0x686>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cbd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cbda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe4:	785b      	ldrb	r3, [r3, #1]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fc ffd6 	bl	8009b98 <disk_initialize>
 800cbec:	4603      	mov	r3, r0
 800cbee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cbf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbf6:	f003 0301 	and.w	r3, r3, #1
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e2e7      	b.n	800d1d2 <find_volume+0x686>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cc02:	79fb      	ldrb	r3, [r7, #7]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d007      	beq.n	800cc18 <find_volume+0xcc>
 800cc08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc0c:	f003 0304 	and.w	r3, r3, #4
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800cc14:	230a      	movs	r3, #10
 800cc16:	e2dc      	b.n	800d1d2 <find_volume+0x686>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cc1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cc20:	f7ff ff30 	bl	800ca84 <check_fs>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cc2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d14b      	bne.n	800ccca <find_volume+0x17e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc32:	2300      	movs	r3, #0
 800cc34:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc36:	e01f      	b.n	800cc78 <find_volume+0x12c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc3a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800cc3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc40:	011b      	lsls	r3, r3, #4
 800cc42:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cc46:	4413      	add	r3, r2
 800cc48:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d006      	beq.n	800cc62 <find_volume+0x116>
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	3308      	adds	r3, #8
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fd f839 	bl	8009cd0 <ld_dword>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	e000      	b.n	800cc64 <find_volume+0x118>
 800cc62:	2200      	movs	r2, #0
 800cc64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800cc6c:	440b      	add	r3, r1
 800cc6e:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc74:	3301      	adds	r3, #1
 800cc76:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d9dc      	bls.n	800cc38 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cc7e:	2300      	movs	r3, #0
 800cc80:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800cc82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d002      	beq.n	800cc8e <find_volume+0x142>
 800cc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cc8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cc96:	4413      	add	r3, r2
 800cc98:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800cc9c:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d005      	beq.n	800ccb0 <find_volume+0x164>
 800cca4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cca6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cca8:	f7ff feec 	bl	800ca84 <check_fs>
 800ccac:	4603      	mov	r3, r0
 800ccae:	e000      	b.n	800ccb2 <find_volume+0x166>
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ccb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d905      	bls.n	800ccca <find_volume+0x17e>
 800ccbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d9e1      	bls.n	800cc8e <find_volume+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ccca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccce:	2b04      	cmp	r3, #4
 800ccd0:	d101      	bne.n	800ccd6 <find_volume+0x18a>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e27d      	b.n	800d1d2 <find_volume+0x686>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ccd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d901      	bls.n	800cce2 <find_volume+0x196>
 800ccde:	230d      	movs	r3, #13
 800cce0:	e277      	b.n	800d1d2 <find_volume+0x686>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800cce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	f040 80f4 	bne.w	800ced4 <find_volume+0x388>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ccec:	230b      	movs	r3, #11
 800ccee:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccf0:	e002      	b.n	800ccf8 <find_volume+0x1ac>
 800ccf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccfa:	2b3f      	cmp	r3, #63	; 0x3f
 800ccfc:	d806      	bhi.n	800cd0c <find_volume+0x1c0>
 800ccfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd02:	4413      	add	r3, r2
 800cd04:	3348      	adds	r3, #72	; 0x48
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d0f2      	beq.n	800ccf2 <find_volume+0x1a6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800cd0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd0e:	2b3f      	cmp	r3, #63	; 0x3f
 800cd10:	d801      	bhi.n	800cd16 <find_volume+0x1ca>
 800cd12:	230d      	movs	r3, #13
 800cd14:	e25d      	b.n	800d1d2 <find_volume+0x686>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800cd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd18:	3348      	adds	r3, #72	; 0x48
 800cd1a:	3368      	adds	r3, #104	; 0x68
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fc ffbf 	bl	8009ca0 <ld_word>
 800cd22:	4603      	mov	r3, r0
 800cd24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd28:	d001      	beq.n	800cd2e <find_volume+0x1e2>
 800cd2a:	230d      	movs	r3, #13
 800cd2c:	e251      	b.n	800d1d2 <find_volume+0x686>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800cd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd30:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800cd34:	2b09      	cmp	r3, #9
 800cd36:	d001      	beq.n	800cd3c <find_volume+0x1f0>
			return FR_NO_FILESYSTEM;
 800cd38:	230d      	movs	r3, #13
 800cd3a:	e24a      	b.n	800d1d2 <find_volume+0x686>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800cd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd3e:	3348      	adds	r3, #72	; 0x48
 800cd40:	3348      	adds	r3, #72	; 0x48
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fc ffe7 	bl	8009d16 <ld_qword>
 800cd48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	f04f 0300 	mov.w	r3, #0
 800cd50:	eb10 0802 	adds.w	r8, r0, r2
 800cd54:	eb41 0903 	adc.w	r9, r1, r3
 800cd58:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800cd5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	bf08      	it	eq
 800cd64:	2a00      	cmpeq	r2, #0
 800cd66:	d301      	bcc.n	800cd6c <find_volume+0x220>
 800cd68:	230d      	movs	r3, #13
 800cd6a:	e232      	b.n	800d1d2 <find_volume+0x686>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800cd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd6e:	3348      	adds	r3, #72	; 0x48
 800cd70:	3354      	adds	r3, #84	; 0x54
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fc ffac 	bl	8009cd0 <ld_dword>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd7c:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800cd7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd80:	f893 20b6 	ldrb.w	r2, [r3, #182]	; 0xb6
 800cd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800cd88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd8a:	789b      	ldrb	r3, [r3, #2]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d001      	beq.n	800cd94 <find_volume+0x248>
 800cd90:	230d      	movs	r3, #13
 800cd92:	e21e      	b.n	800d1d2 <find_volume+0x686>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800cd94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd96:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	4093      	lsls	r3, r2
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800cda6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda8:	895b      	ldrh	r3, [r3, #10]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <find_volume+0x266>
 800cdae:	230d      	movs	r3, #13
 800cdb0:	e20f      	b.n	800d1d2 <find_volume+0x686>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdb4:	3348      	adds	r3, #72	; 0x48
 800cdb6:	335c      	adds	r3, #92	; 0x5c
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fc ff89 	bl	8009cd0 <ld_dword>
 800cdbe:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	4a1e      	ldr	r2, [pc, #120]	; (800ce3c <find_volume+0x2f0>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d901      	bls.n	800cdcc <find_volume+0x280>
 800cdc8:	230d      	movs	r3, #13
 800cdca:	e202      	b.n	800d1d2 <find_volume+0x686>
		fs->n_fatent = nclst + 2;
 800cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdce:	1c9a      	adds	r2, r3, #2
 800cdd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdd2:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800cdd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdd8:	635a      	str	r2, [r3, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cdda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cddc:	3348      	adds	r3, #72	; 0x48
 800cdde:	3358      	adds	r3, #88	; 0x58
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fc ff75 	bl	8009cd0 <ld_dword>
 800cde6:	4602      	mov	r2, r0
 800cde8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdea:	441a      	add	r2, r3
 800cdec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdee:	641a      	str	r2, [r3, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800cdf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf2:	3348      	adds	r3, #72	; 0x48
 800cdf4:	3350      	adds	r3, #80	; 0x50
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fc ff6a 	bl	8009cd0 <ld_dword>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce00:	441a      	add	r2, r3
 800ce02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce04:	639a      	str	r2, [r3, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800ce06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f04f 0100 	mov.w	r1, #0
 800ce10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce12:	895b      	ldrh	r3, [r3, #10]
 800ce14:	461a      	mov	r2, r3
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	fb03 f302 	mul.w	r3, r3, r2
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	f04f 0300 	mov.w	r3, #0
 800ce22:	1884      	adds	r4, r0, r2
 800ce24:	eb41 0503 	adc.w	r5, r1, r3
 800ce28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce2c:	42ab      	cmp	r3, r5
 800ce2e:	bf08      	it	eq
 800ce30:	42a2      	cmpeq	r2, r4
 800ce32:	d205      	bcs.n	800ce40 <find_volume+0x2f4>
 800ce34:	230d      	movs	r3, #13
 800ce36:	e1cc      	b.n	800d1d2 <find_volume+0x686>
 800ce38:	24000300 	.word	0x24000300
 800ce3c:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800ce40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce42:	3348      	adds	r3, #72	; 0x48
 800ce44:	3360      	adds	r3, #96	; 0x60
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fc ff42 	bl	8009cd0 <ld_dword>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce50:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800ce52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce56:	4619      	mov	r1, r3
 800ce58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ce5a:	f7fd fbb1 	bl	800a5c0 <clust2sect>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	4619      	mov	r1, r3
 800ce62:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ce64:	f7fd fb10 	bl	800a488 <move_window>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <find_volume+0x326>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e1af      	b.n	800d1d2 <find_volume+0x686>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ce72:	2300      	movs	r3, #0
 800ce74:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce76:	e015      	b.n	800cea4 <find_volume+0x358>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ce78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce7c:	4413      	add	r3, r2
 800ce7e:	3348      	adds	r3, #72	; 0x48
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	2b81      	cmp	r3, #129	; 0x81
 800ce84:	d10b      	bne.n	800ce9e <find_volume+0x352>
 800ce86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce88:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800ce8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce8e:	3314      	adds	r3, #20
 800ce90:	4413      	add	r3, r2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fc ff1c 	bl	8009cd0 <ld_dword>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	d007      	beq.n	800ceae <find_volume+0x362>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ce9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cea0:	3320      	adds	r3, #32
 800cea2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ceaa:	d3e5      	bcc.n	800ce78 <find_volume+0x32c>
 800ceac:	e000      	b.n	800ceb0 <find_volume+0x364>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ceae:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800ceb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ceb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ceb6:	d101      	bne.n	800cebc <find_volume+0x370>
 800ceb8:	230d      	movs	r3, #13
 800ceba:	e18a      	b.n	800d1d2 <find_volume+0x686>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cec2:	619a      	str	r2, [r3, #24]
 800cec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cec6:	699a      	ldr	r2, [r3, #24]
 800cec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceca:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800cecc:	2304      	movs	r3, #4
 800cece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ced2:	e163      	b.n	800d19c <find_volume+0x650>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ced4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced6:	3348      	adds	r3, #72	; 0x48
 800ced8:	330b      	adds	r3, #11
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fc fee0 	bl	8009ca0 <ld_word>
 800cee0:	4603      	mov	r3, r0
 800cee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cee6:	d001      	beq.n	800ceec <find_volume+0x3a0>
 800cee8:	230d      	movs	r3, #13
 800ceea:	e172      	b.n	800d1d2 <find_volume+0x686>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ceec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceee:	3348      	adds	r3, #72	; 0x48
 800cef0:	3316      	adds	r3, #22
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fc fed4 	bl	8009ca0 <ld_word>
 800cef8:	4603      	mov	r3, r0
 800cefa:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cefc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d106      	bne.n	800cf10 <find_volume+0x3c4>
 800cf02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf04:	3348      	adds	r3, #72	; 0x48
 800cf06:	3324      	adds	r3, #36	; 0x24
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fc fee1 	bl	8009cd0 <ld_dword>
 800cf0e:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800cf10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf14:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf18:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800cf1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf22:	789b      	ldrb	r3, [r3, #2]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d005      	beq.n	800cf34 <find_volume+0x3e8>
 800cf28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf2a:	789b      	ldrb	r3, [r3, #2]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	d001      	beq.n	800cf34 <find_volume+0x3e8>
 800cf30:	230d      	movs	r3, #13
 800cf32:	e14e      	b.n	800d1d2 <find_volume+0x686>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cf34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf36:	789b      	ldrb	r3, [r3, #2]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf3c:	fb02 f303 	mul.w	r3, r2, r3
 800cf40:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cf42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf44:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf48:	b29a      	uxth	r2, r3
 800cf4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cf4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf50:	895b      	ldrh	r3, [r3, #10]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d008      	beq.n	800cf68 <find_volume+0x41c>
 800cf56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf58:	895b      	ldrh	r3, [r3, #10]
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf5e:	895b      	ldrh	r3, [r3, #10]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	4013      	ands	r3, r2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <find_volume+0x420>
 800cf68:	230d      	movs	r3, #13
 800cf6a:	e132      	b.n	800d1d2 <find_volume+0x686>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cf6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6e:	3348      	adds	r3, #72	; 0x48
 800cf70:	3311      	adds	r3, #17
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fc fe94 	bl	8009ca0 <ld_word>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cf80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf82:	891b      	ldrh	r3, [r3, #8]
 800cf84:	f003 030f 	and.w	r3, r3, #15
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <find_volume+0x446>
 800cf8e:	230d      	movs	r3, #13
 800cf90:	e11f      	b.n	800d1d2 <find_volume+0x686>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cf92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf94:	3348      	adds	r3, #72	; 0x48
 800cf96:	3313      	adds	r3, #19
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fc fe81 	bl	8009ca0 <ld_word>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cfa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d106      	bne.n	800cfb6 <find_volume+0x46a>
 800cfa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfaa:	3348      	adds	r3, #72	; 0x48
 800cfac:	3320      	adds	r3, #32
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fc fe8e 	bl	8009cd0 <ld_dword>
 800cfb4:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cfb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfb8:	3348      	adds	r3, #72	; 0x48
 800cfba:	330e      	adds	r3, #14
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fc fe6f 	bl	8009ca0 <ld_word>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cfc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d101      	bne.n	800cfd0 <find_volume+0x484>
 800cfcc:	230d      	movs	r3, #13
 800cfce:	e100      	b.n	800d1d2 <find_volume+0x686>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cfd0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cfd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfd4:	4413      	add	r3, r2
 800cfd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfd8:	8912      	ldrh	r2, [r2, #8]
 800cfda:	0912      	lsrs	r2, r2, #4
 800cfdc:	b292      	uxth	r2, r2
 800cfde:	4413      	add	r3, r2
 800cfe0:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cfe2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d201      	bcs.n	800cfee <find_volume+0x4a2>
 800cfea:	230d      	movs	r3, #13
 800cfec:	e0f1      	b.n	800d1d2 <find_volume+0x686>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cfee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cff6:	8952      	ldrh	r2, [r2, #10]
 800cff8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cffc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <find_volume+0x4bc>
 800d004:	230d      	movs	r3, #13
 800d006:	e0e4      	b.n	800d1d2 <find_volume+0x686>
		fmt = FS_FAT32;
 800d008:	2303      	movs	r3, #3
 800d00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d010:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d014:	4293      	cmp	r3, r2
 800d016:	d802      	bhi.n	800d01e <find_volume+0x4d2>
 800d018:	2302      	movs	r3, #2
 800d01a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d020:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d024:	4293      	cmp	r3, r2
 800d026:	d802      	bhi.n	800d02e <find_volume+0x4e2>
 800d028:	2301      	movs	r3, #1
 800d02a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d030:	1c9a      	adds	r2, r3, #2
 800d032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d034:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800d036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d03a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d03c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d03e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d040:	441a      	add	r2, r3
 800d042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d044:	639a      	str	r2, [r3, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 800d046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	441a      	add	r2, r3
 800d04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d04e:	641a      	str	r2, [r3, #64]	; 0x40
		if (fmt == FS_FAT32) {
 800d050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d054:	2b03      	cmp	r3, #3
 800d056:	d11e      	bne.n	800d096 <find_volume+0x54a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d05a:	3348      	adds	r3, #72	; 0x48
 800d05c:	332a      	adds	r3, #42	; 0x2a
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fc fe1e 	bl	8009ca0 <ld_word>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <find_volume+0x522>
 800d06a:	230d      	movs	r3, #13
 800d06c:	e0b1      	b.n	800d1d2 <find_volume+0x686>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d06e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d070:	891b      	ldrh	r3, [r3, #8]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <find_volume+0x52e>
 800d076:	230d      	movs	r3, #13
 800d078:	e0ab      	b.n	800d1d2 <find_volume+0x686>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d07c:	3348      	adds	r3, #72	; 0x48
 800d07e:	332c      	adds	r3, #44	; 0x2c
 800d080:	4618      	mov	r0, r3
 800d082:	f7fc fe25 	bl	8009cd0 <ld_dword>
 800d086:	4602      	mov	r2, r0
 800d088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08a:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d094:	e01f      	b.n	800d0d6 <find_volume+0x58a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d098:	891b      	ldrh	r3, [r3, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <find_volume+0x556>
 800d09e:	230d      	movs	r3, #13
 800d0a0:	e097      	b.n	800d1d2 <find_volume+0x686>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0a8:	441a      	add	r2, r3
 800d0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ac:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d103      	bne.n	800d0be <find_volume+0x572>
 800d0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ba:	005b      	lsls	r3, r3, #1
 800d0bc:	e00a      	b.n	800d0d4 <find_volume+0x588>
 800d0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	4413      	add	r3, r2
 800d0c8:	085a      	lsrs	r2, r3, #1
 800d0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d0d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d0e0:	0a5b      	lsrs	r3, r3, #9
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d201      	bcs.n	800d0ea <find_volume+0x59e>
 800d0e6:	230d      	movs	r3, #13
 800d0e8:	e073      	b.n	800d1d2 <find_volume+0x686>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d0ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0f0:	619a      	str	r2, [r3, #24]
 800d0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f4:	699a      	ldr	r2, [r3, #24]
 800d0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0fc:	2280      	movs	r2, #128	; 0x80
 800d0fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d100:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d104:	2b03      	cmp	r3, #3
 800d106:	d149      	bne.n	800d19c <find_volume+0x650>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d10a:	3348      	adds	r3, #72	; 0x48
 800d10c:	3330      	adds	r3, #48	; 0x30
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fc fdc6 	bl	8009ca0 <ld_word>
 800d114:	4603      	mov	r3, r0
 800d116:	2b01      	cmp	r3, #1
 800d118:	d140      	bne.n	800d19c <find_volume+0x650>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d11a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d11c:	3301      	adds	r3, #1
 800d11e:	4619      	mov	r1, r3
 800d120:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d122:	f7fd f9b1 	bl	800a488 <move_window>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d137      	bne.n	800d19c <find_volume+0x650>
		{
			fs->fsi_flag = 0;
 800d12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d12e:	2200      	movs	r2, #0
 800d130:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d134:	3348      	adds	r3, #72	; 0x48
 800d136:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fc fdb0 	bl	8009ca0 <ld_word>
 800d140:	4603      	mov	r3, r0
 800d142:	461a      	mov	r2, r3
 800d144:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d148:	429a      	cmp	r2, r3
 800d14a:	d127      	bne.n	800d19c <find_volume+0x650>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d14e:	3348      	adds	r3, #72	; 0x48
 800d150:	4618      	mov	r0, r3
 800d152:	f7fc fdbd 	bl	8009cd0 <ld_dword>
 800d156:	4603      	mov	r3, r0
 800d158:	4a20      	ldr	r2, [pc, #128]	; (800d1dc <find_volume+0x690>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d11e      	bne.n	800d19c <find_volume+0x650>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d160:	3348      	adds	r3, #72	; 0x48
 800d162:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d166:	4618      	mov	r0, r3
 800d168:	f7fc fdb2 	bl	8009cd0 <ld_dword>
 800d16c:	4603      	mov	r3, r0
 800d16e:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <find_volume+0x694>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d113      	bne.n	800d19c <find_volume+0x650>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d176:	3348      	adds	r3, #72	; 0x48
 800d178:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fc fda7 	bl	8009cd0 <ld_dword>
 800d182:	4602      	mov	r2, r0
 800d184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d186:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d18a:	3348      	adds	r3, #72	; 0x48
 800d18c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d190:	4618      	mov	r0, r3
 800d192:	f7fc fd9d 	bl	8009cd0 <ld_dword>
 800d196:	4602      	mov	r2, r0
 800d198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d19a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d19e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d1a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d1a4:	4b0f      	ldr	r3, [pc, #60]	; (800d1e4 <find_volume+0x698>)
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	4b0d      	ldr	r3, [pc, #52]	; (800d1e4 <find_volume+0x698>)
 800d1ae:	801a      	strh	r2, [r3, #0]
 800d1b0:	4b0c      	ldr	r3, [pc, #48]	; (800d1e4 <find_volume+0x698>)
 800d1b2:	881a      	ldrh	r2, [r3, #0]
 800d1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ba:	4a0b      	ldr	r2, [pc, #44]	; (800d1e8 <find_volume+0x69c>)
 800d1bc:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c0:	4a0a      	ldr	r2, [pc, #40]	; (800d1ec <find_volume+0x6a0>)
 800d1c2:	611a      	str	r2, [r3, #16]
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800d1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d1ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d1cc:	f7fd f8f4 	bl	800a3b8 <clear_lock>
#endif
	return FR_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3760      	adds	r7, #96	; 0x60
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d1dc:	41615252 	.word	0x41615252
 800d1e0:	61417272 	.word	0x61417272
 800d1e4:	24000304 	.word	0x24000304
 800d1e8:	24001558 	.word	0x24001558
 800d1ec:	240012f8 	.word	0x240012f8

0800d1f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d1fa:	2309      	movs	r3, #9
 800d1fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d01c      	beq.n	800d23e <validate+0x4e>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d018      	beq.n	800d23e <validate+0x4e>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d013      	beq.n	800d23e <validate+0x4e>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	889a      	ldrh	r2, [r3, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	88db      	ldrh	r3, [r3, #6]
 800d220:	429a      	cmp	r2, r3
 800d222:	d10c      	bne.n	800d23e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	785b      	ldrb	r3, [r3, #1]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fc fc9a 	bl	8009b64 <disk_status>
 800d230:	4603      	mov	r3, r0
 800d232:	f003 0301 	and.w	r3, r3, #1
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <validate+0x4e>
			res = FR_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d102      	bne.n	800d24a <validate+0x5a>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	e000      	b.n	800d24c <validate+0x5c>
 800d24a:	2300      	movs	r3, #0
 800d24c:	683a      	ldr	r2, [r7, #0]
 800d24e:	6013      	str	r3, [r2, #0]
	return res;
 800d250:	7bfb      	ldrb	r3, [r7, #15]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b088      	sub	sp, #32
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	4613      	mov	r3, r2
 800d268:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d26e:	f107 0310 	add.w	r3, r7, #16
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff fbc2 	bl	800c9fc <get_ldnumber>
 800d278:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	da01      	bge.n	800d284 <f_mount+0x28>
 800d280:	230b      	movs	r3, #11
 800d282:	e02b      	b.n	800d2dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d284:	4a17      	ldr	r2, [pc, #92]	; (800d2e4 <f_mount+0x88>)
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d28c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d005      	beq.n	800d2a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d294:	69b8      	ldr	r0, [r7, #24]
 800d296:	f7fd f88f 	bl	800a3b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2200      	movs	r2, #0
 800d29e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	490d      	ldr	r1, [pc, #52]	; (800d2e4 <f_mount+0x88>)
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <f_mount+0x66>
 800d2bc:	79fb      	ldrb	r3, [r7, #7]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d001      	beq.n	800d2c6 <f_mount+0x6a>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e00a      	b.n	800d2dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d2c6:	f107 010c 	add.w	r1, r7, #12
 800d2ca:	f107 0308 	add.w	r3, r7, #8
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fc3b 	bl	800cb4c <find_volume>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3720      	adds	r7, #32
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	24000300 	.word	0x24000300

0800d2e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d2e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d2ec:	b0a4      	sub	sp, #144	; 0x90
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	60b9      	str	r1, [r7, #8]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <f_open+0x1a>
 800d2fe:	2309      	movs	r3, #9
 800d300:	e29e      	b.n	800d840 <f_open+0x558>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d308:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d30a:	79fa      	ldrb	r2, [r7, #7]
 800d30c:	f107 0114 	add.w	r1, r7, #20
 800d310:	f107 0308 	add.w	r3, r7, #8
 800d314:	4618      	mov	r0, r3
 800d316:	f7ff fc19 	bl	800cb4c <find_volume>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800d320:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d324:	2b00      	cmp	r3, #0
 800d326:	f040 8282 	bne.w	800d82e <f_open+0x546>
		dj.obj.fs = fs;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	f107 0318 	add.w	r3, r7, #24
 800d334:	4611      	mov	r1, r2
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff fa4e 	bl	800c7d8 <follow_path>
 800d33c:	4603      	mov	r3, r0
 800d33e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d342:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d346:	2b00      	cmp	r3, #0
 800d348:	d11a      	bne.n	800d380 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d34a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d34e:	b25b      	sxtb	r3, r3
 800d350:	2b00      	cmp	r3, #0
 800d352:	da03      	bge.n	800d35c <f_open+0x74>
				res = FR_INVALID_NAME;
 800d354:	2306      	movs	r3, #6
 800d356:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d35a:	e011      	b.n	800d380 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	f023 0301 	bic.w	r3, r3, #1
 800d362:	2b00      	cmp	r3, #0
 800d364:	bf14      	ite	ne
 800d366:	2301      	movne	r3, #1
 800d368:	2300      	moveq	r3, #0
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	461a      	mov	r2, r3
 800d36e:	f107 0318 	add.w	r3, r7, #24
 800d372:	4611      	mov	r1, r2
 800d374:	4618      	mov	r0, r3
 800d376:	f7fc fed7 	bl	800a128 <chk_lock>
 800d37a:	4603      	mov	r3, r0
 800d37c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d380:	79fb      	ldrb	r3, [r7, #7]
 800d382:	f003 031c 	and.w	r3, r3, #28
 800d386:	2b00      	cmp	r3, #0
 800d388:	f000 8109 	beq.w	800d59e <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 800d38c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d390:	2b00      	cmp	r3, #0
 800d392:	d017      	beq.n	800d3c4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d394:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d398:	2b04      	cmp	r3, #4
 800d39a:	d10e      	bne.n	800d3ba <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d39c:	f7fc ff20 	bl	800a1e0 <enq_lock>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d006      	beq.n	800d3b4 <f_open+0xcc>
 800d3a6:	f107 0318 	add.w	r3, r7, #24
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fe66 	bl	800c07c <dir_register>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	e000      	b.n	800d3b6 <f_open+0xce>
 800d3b4:	2312      	movs	r3, #18
 800d3b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	f043 0308 	orr.w	r3, r3, #8
 800d3c0:	71fb      	strb	r3, [r7, #7]
 800d3c2:	e010      	b.n	800d3e6 <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d3c4:	7fbb      	ldrb	r3, [r7, #30]
 800d3c6:	f003 0311 	and.w	r3, r3, #17
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <f_open+0xee>
					res = FR_DENIED;
 800d3ce:	2307      	movs	r3, #7
 800d3d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d3d4:	e007      	b.n	800d3e6 <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d3d6:	79fb      	ldrb	r3, [r7, #7]
 800d3d8:	f003 0304 	and.w	r3, r3, #4
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <f_open+0xfe>
 800d3e0:	2308      	movs	r3, #8
 800d3e2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d3e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f040 80f1 	bne.w	800d5d2 <f_open+0x2ea>
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	f003 0308 	and.w	r3, r3, #8
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f000 80eb 	beq.w	800d5d2 <f_open+0x2ea>
				dw = GET_FATTIME();
 800d3fc:	f7fc fa18 	bl	8009830 <get_fattime>
 800d400:	67f8      	str	r0, [r7, #124]	; 0x7c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	2b04      	cmp	r3, #4
 800d408:	f040 8082 	bne.w	800d510 <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d40c:	697a      	ldr	r2, [r7, #20]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	3334      	adds	r3, #52	; 0x34
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fc fc59 	bl	8009cd0 <ld_dword>
 800d41e:	4602      	mov	r2, r0
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	3338      	adds	r3, #56	; 0x38
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fc fc73 	bl	8009d16 <ld_qword>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	68f9      	ldr	r1, [r7, #12]
 800d436:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	3321      	adds	r3, #33	; 0x21
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	f003 0302 	and.w	r3, r3, #2
 800d446:	b2da      	uxtb	r2, r3
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	3308      	adds	r3, #8
 800d458:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fc fd31 	bl	8009ec2 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	3314      	adds	r3, #20
 800d466:	2200      	movs	r2, #0
 800d468:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	691b      	ldr	r3, [r3, #16]
 800d46e:	330c      	adds	r3, #12
 800d470:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d472:	4618      	mov	r0, r3
 800d474:	f7fc fd25 	bl	8009ec2 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	691b      	ldr	r3, [r3, #16]
 800d47c:	3315      	adds	r3, #21
 800d47e:	2200      	movs	r2, #0
 800d480:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	3304      	adds	r3, #4
 800d488:	2220      	movs	r2, #32
 800d48a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	3334      	adds	r3, #52	; 0x34
 800d492:	2100      	movs	r1, #0
 800d494:	4618      	mov	r0, r3
 800d496:	f7fc fd14 	bl	8009ec2 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d4a2:	f04f 0200 	mov.w	r2, #0
 800d4a6:	f04f 0300 	mov.w	r3, #0
 800d4aa:	4608      	mov	r0, r1
 800d4ac:	f7fc fd35 	bl	8009f1a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d4b8:	f04f 0200 	mov.w	r2, #0
 800d4bc:	f04f 0300 	mov.w	r3, #0
 800d4c0:	4608      	mov	r0, r1
 800d4c2:	f7fc fd2a 	bl	8009f1a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	3321      	adds	r3, #33	; 0x21
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800d4d0:	f107 0318 	add.w	r3, r7, #24
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fe fb1e 	bl	800bb16 <store_xdir>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d4e0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d174      	bne.n	800d5d2 <f_open+0x2ea>
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	689b      	ldr	r3, [r3, #8]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d070      	beq.n	800d5d2 <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	f7fd fbd3 	bl	800aca4 <remove_chain>
 800d4fe:	4603      	mov	r3, r0
 800d500:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	689a      	ldr	r2, [r3, #8]
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	3a01      	subs	r2, #1
 800d50c:	615a      	str	r2, [r3, #20]
 800d50e:	e060      	b.n	800d5d2 <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d512:	330e      	adds	r3, #14
 800d514:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d516:	4618      	mov	r0, r3
 800d518:	f7fc fcd3 	bl	8009ec2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d51c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d51e:	3316      	adds	r3, #22
 800d520:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d522:	4618      	mov	r0, r3
 800d524:	f7fc fccd 	bl	8009ec2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d52a:	330b      	adds	r3, #11
 800d52c:	2220      	movs	r2, #32
 800d52e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d534:	4611      	mov	r1, r2
 800d536:	4618      	mov	r0, r3
 800d538:	f7fd ff61 	bl	800b3fe <ld_clust>
 800d53c:	67b8      	str	r0, [r7, #120]	; 0x78
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d542:	2200      	movs	r2, #0
 800d544:	4618      	mov	r0, r3
 800d546:	f7fd ff79 	bl	800b43c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d54a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d54c:	331c      	adds	r3, #28
 800d54e:	2100      	movs	r1, #0
 800d550:	4618      	mov	r0, r3
 800d552:	f7fc fcb6 	bl	8009ec2 <st_dword>
					fs->wflag = 1;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	2201      	movs	r2, #1
 800d55a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d55c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d037      	beq.n	800d5d2 <f_open+0x2ea>
						dw = fs->winsect;
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d566:	67fb      	str	r3, [r7, #124]	; 0x7c
						res = remove_chain(&dj.obj, cl, 0);
 800d568:	f107 0318 	add.w	r3, r7, #24
 800d56c:	2200      	movs	r2, #0
 800d56e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d570:	4618      	mov	r0, r3
 800d572:	f7fd fb97 	bl	800aca4 <remove_chain>
 800d576:	4603      	mov	r3, r0
 800d578:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 800d57c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d580:	2b00      	cmp	r3, #0
 800d582:	d126      	bne.n	800d5d2 <f_open+0x2ea>
							res = move_window(fs, dw);
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fc ff7d 	bl	800a488 <move_window>
 800d58e:	4603      	mov	r3, r0
 800d590:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d598:	3a01      	subs	r2, #1
 800d59a:	615a      	str	r2, [r3, #20]
 800d59c:	e019      	b.n	800d5d2 <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d59e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d115      	bne.n	800d5d2 <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d5a6:	7fbb      	ldrb	r3, [r7, #30]
 800d5a8:	f003 0310 	and.w	r3, r3, #16
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d003      	beq.n	800d5b8 <f_open+0x2d0>
					res = FR_NO_FILE;
 800d5b0:	2304      	movs	r3, #4
 800d5b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d5b6:	e00c      	b.n	800d5d2 <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	f003 0302 	and.w	r3, r3, #2
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d007      	beq.n	800d5d2 <f_open+0x2ea>
 800d5c2:	7fbb      	ldrb	r3, [r7, #30]
 800d5c4:	f003 0301 	and.w	r3, r3, #1
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d002      	beq.n	800d5d2 <f_open+0x2ea>
						res = FR_DENIED;
 800d5cc:	2307      	movs	r3, #7
 800d5ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d5d2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d128      	bne.n	800d62c <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	f003 0308 	and.w	r3, r3, #8
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d003      	beq.n	800d5ec <f_open+0x304>
				mode |= FA_MODIFIED;
 800d5e4:	79fb      	ldrb	r3, [r7, #7]
 800d5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ea:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800d5f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5fa:	79fb      	ldrb	r3, [r7, #7]
 800d5fc:	f023 0301 	bic.w	r3, r3, #1
 800d600:	2b00      	cmp	r3, #0
 800d602:	bf14      	ite	ne
 800d604:	2301      	movne	r3, #1
 800d606:	2300      	moveq	r3, #0
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	461a      	mov	r2, r3
 800d60c:	f107 0318 	add.w	r3, r7, #24
 800d610:	4611      	mov	r1, r2
 800d612:	4618      	mov	r0, r3
 800d614:	f7fc fe06 	bl	800a224 <inc_lock>
 800d618:	4602      	mov	r2, r0
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d622:	2b00      	cmp	r3, #0
 800d624:	d102      	bne.n	800d62c <f_open+0x344>
 800d626:	2302      	movs	r3, #2
 800d628:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d62c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d630:	2b00      	cmp	r3, #0
 800d632:	f040 80fc 	bne.w	800d82e <f_open+0x546>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b04      	cmp	r3, #4
 800d63c:	d12c      	bne.n	800d698 <f_open+0x3b0>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d63e:	6a3a      	ldr	r2, [r7, #32]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d648:	4613      	mov	r3, r2
 800d64a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d64e:	7ffa      	ldrb	r2, [r7, #31]
 800d650:	431a      	orrs	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d656:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	3334      	adds	r3, #52	; 0x34
 800d662:	4618      	mov	r0, r3
 800d664:	f7fc fb34 	bl	8009cd0 <ld_dword>
 800d668:	4602      	mov	r2, r0
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	3338      	adds	r3, #56	; 0x38
 800d674:	4618      	mov	r0, r3
 800d676:	f7fc fb4e 	bl	8009d16 <ld_qword>
 800d67a:	4602      	mov	r2, r0
 800d67c:	460b      	mov	r3, r1
 800d67e:	68f9      	ldr	r1, [r7, #12]
 800d680:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	3321      	adds	r3, #33	; 0x21
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	f003 0302 	and.w	r3, r3, #2
 800d690:	b2da      	uxtb	r2, r3
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	71da      	strb	r2, [r3, #7]
 800d696:	e014      	b.n	800d6c2 <f_open+0x3da>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fd fead 	bl	800b3fe <ld_clust>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d6aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6ac:	331c      	adds	r3, #28
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fc fb0e 	bl	8009cd0 <ld_dword>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	f04f 0300 	mov.w	r3, #0
 800d6bc:	68f9      	ldr	r1, [r7, #12]
 800d6be:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d6c8:	697a      	ldr	r2, [r7, #20]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	88da      	ldrh	r2, [r3, #6]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	79fa      	ldrb	r2, [r7, #7]
 800d6da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d6ec:	68f9      	ldr	r1, [r7, #12]
 800d6ee:	f04f 0200 	mov.w	r2, #0
 800d6f2:	f04f 0300 	mov.w	r3, #0
 800d6f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	3354      	adds	r3, #84	; 0x54
 800d6fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d702:	2100      	movs	r1, #0
 800d704:	4618      	mov	r0, r3
 800d706:	f7fc fcb1 	bl	800a06c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d70a:	79fb      	ldrb	r3, [r7, #7]
 800d70c:	f003 0320 	and.w	r3, r3, #32
 800d710:	2b00      	cmp	r3, #0
 800d712:	f000 808c 	beq.w	800d82e <f_open+0x546>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	f000 8086 	beq.w	800d82e <f_open+0x546>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d728:	68f9      	ldr	r1, [r7, #12]
 800d72a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	895b      	ldrh	r3, [r3, #10]
 800d732:	025b      	lsls	r3, r3, #9
 800d734:	677b      	str	r3, [r7, #116]	; 0x74
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d744:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 800d748:	e022      	b.n	800d790 <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d750:	4618      	mov	r0, r3
 800d752:	f7fc ff55 	bl	800a600 <get_fat>
 800d756:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 800d75a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d802      	bhi.n	800d768 <f_open+0x480>
 800d762:	2302      	movs	r3, #2
 800d764:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d770:	d102      	bne.n	800d778 <f_open+0x490>
 800d772:	2301      	movs	r3, #1
 800d774:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d77a:	461a      	mov	r2, r3
 800d77c:	f04f 0300 	mov.w	r3, #0
 800d780:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d784:	ebb0 0802 	subs.w	r8, r0, r2
 800d788:	eb61 0903 	sbc.w	r9, r1, r3
 800d78c:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80
 800d790:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d794:	2b00      	cmp	r3, #0
 800d796:	d109      	bne.n	800d7ac <f_open+0x4c4>
 800d798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d79a:	4618      	mov	r0, r3
 800d79c:	f04f 0100 	mov.w	r1, #0
 800d7a0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d7a4:	4299      	cmp	r1, r3
 800d7a6:	bf08      	it	eq
 800d7a8:	4290      	cmpeq	r0, r2
 800d7aa:	d3ce      	bcc.n	800d74a <f_open+0x462>
				}
				fp->clust = clst;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d7b2:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d7b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d138      	bne.n	800d82e <f_open+0x546>
 800d7bc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800d7c0:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d7c4:	f04f 0100 	mov.w	r1, #0
 800d7c8:	ea02 0400 	and.w	r4, r2, r0
 800d7cc:	ea03 0501 	and.w	r5, r3, r1
 800d7d0:	ea54 0305 	orrs.w	r3, r4, r5
 800d7d4:	d02b      	beq.n	800d82e <f_open+0x546>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fc feef 	bl	800a5c0 <clust2sect>
 800d7e2:	6738      	str	r0, [r7, #112]	; 0x70
 800d7e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d103      	bne.n	800d7f2 <f_open+0x50a>
						res = FR_INT_ERR;
 800d7ea:	2302      	movs	r3, #2
 800d7ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800d7f0:	e01d      	b.n	800d82e <f_open+0x546>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d7f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d7f6:	f04f 0200 	mov.w	r2, #0
 800d7fa:	f04f 0300 	mov.w	r3, #0
 800d7fe:	0a42      	lsrs	r2, r0, #9
 800d800:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d804:	0a4b      	lsrs	r3, r1, #9
 800d806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d808:	441a      	add	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	7858      	ldrb	r0, [r3, #1]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d81c:	2301      	movs	r3, #1
 800d81e:	f7fc f9e1 	bl	8009be4 <disk_read>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <f_open+0x546>
 800d828:	2301      	movs	r3, #1
 800d82a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d82e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d832:	2b00      	cmp	r3, #0
 800d834:	d002      	beq.n	800d83c <f_open+0x554>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2200      	movs	r2, #0
 800d83a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d83c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800d840:	4618      	mov	r0, r3
 800d842:	3790      	adds	r7, #144	; 0x90
 800d844:	46bd      	mov	sp, r7
 800d846:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800d84a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d84a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d84e:	b090      	sub	sp, #64	; 0x40
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
 800d858:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2200      	movs	r2, #0
 800d862:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f107 0214 	add.w	r2, r7, #20
 800d86a:	4611      	mov	r1, r2
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7ff fcbf 	bl	800d1f0 <validate>
 800d872:	4603      	mov	r3, r0
 800d874:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d878:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d108      	bne.n	800d892 <f_read+0x48>
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d886:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d88a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d002      	beq.n	800d898 <f_read+0x4e>
 800d892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d896:	e149      	b.n	800db2c <f_read+0x2e2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <f_read+0x60>
 800d8a6:	2307      	movs	r3, #7
 800d8a8:	e140      	b.n	800db2c <f_read+0x2e2>
	remain = fp->obj.objsize - fp->fptr;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d8b6:	ebb0 0a02 	subs.w	sl, r0, r2
 800d8ba:	eb61 0b03 	sbc.w	fp, r1, r3
 800d8be:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	f04f 0300 	mov.w	r3, #0
 800d8ca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d8ce:	4299      	cmp	r1, r3
 800d8d0:	bf08      	it	eq
 800d8d2:	4290      	cmpeq	r0, r2
 800d8d4:	f080 8125 	bcs.w	800db22 <f_read+0x2d8>
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d8dc:	e121      	b.n	800db22 <f_read+0x2d8>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d8e4:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d8e8:	f04f 0100 	mov.w	r1, #0
 800d8ec:	ea02 0400 	and.w	r4, r2, r0
 800d8f0:	ea03 0501 	and.w	r5, r3, r1
 800d8f4:	ea54 0305 	orrs.w	r3, r4, r5
 800d8f8:	f040 80d9 	bne.w	800daae <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d902:	f04f 0200 	mov.w	r2, #0
 800d906:	f04f 0300 	mov.w	r3, #0
 800d90a:	0a42      	lsrs	r2, r0, #9
 800d90c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d910:	0a4b      	lsrs	r3, r1, #9
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	895b      	ldrh	r3, [r3, #10]
 800d916:	3b01      	subs	r3, #1
 800d918:	4013      	ands	r3, r2
 800d91a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d132      	bne.n	800d988 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d928:	4313      	orrs	r3, r2
 800d92a:	d103      	bne.n	800d934 <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	63bb      	str	r3, [r7, #56]	; 0x38
 800d932:	e013      	b.n	800d95c <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d007      	beq.n	800d94c <f_read+0x102>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d942:	68f8      	ldr	r0, [r7, #12]
 800d944:	f7fd fb63 	bl	800b00e <clmt_clust>
 800d948:	63b8      	str	r0, [r7, #56]	; 0x38
 800d94a:	e007      	b.n	800d95c <f_read+0x112>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d952:	4619      	mov	r1, r3
 800d954:	4610      	mov	r0, r2
 800d956:	f7fc fe53 	bl	800a600 <get_fat>
 800d95a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d805      	bhi.n	800d96e <f_read+0x124>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2202      	movs	r2, #2
 800d966:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d96a:	2302      	movs	r3, #2
 800d96c:	e0de      	b.n	800db2c <f_read+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d974:	d105      	bne.n	800d982 <f_read+0x138>
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d97e:	2301      	movs	r3, #1
 800d980:	e0d4      	b.n	800db2c <f_read+0x2e2>
				fp->clust = clst;				/* Update current cluster */
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d986:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d988:	697a      	ldr	r2, [r7, #20]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d98e:	4619      	mov	r1, r3
 800d990:	4610      	mov	r0, r2
 800d992:	f7fc fe15 	bl	800a5c0 <clust2sect>
 800d996:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d105      	bne.n	800d9aa <f_read+0x160>
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	e0c0      	b.n	800db2c <f_read+0x2e2>
			sect += csect;
 800d9aa:	69ba      	ldr	r2, [r7, #24]
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	0a5b      	lsrs	r3, r3, #9
 800d9b6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d03b      	beq.n	800da36 <f_read+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d9be:	69fa      	ldr	r2, [r7, #28]
 800d9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c2:	4413      	add	r3, r2
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	8952      	ldrh	r2, [r2, #10]
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d905      	bls.n	800d9d8 <f_read+0x18e>
					cc = fs->csize - csect;
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	895b      	ldrh	r3, [r3, #10]
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	1ad3      	subs	r3, r2, r3
 800d9d6:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	7858      	ldrb	r0, [r3, #1]
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	69ba      	ldr	r2, [r7, #24]
 800d9e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9e2:	f7fc f8ff 	bl	8009be4 <disk_read>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d005      	beq.n	800d9f8 <f_read+0x1ae>
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e099      	b.n	800db2c <f_read+0x2e2>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9fe:	b25b      	sxtb	r3, r3
 800da00:	2b00      	cmp	r3, #0
 800da02:	da14      	bge.n	800da2e <f_read+0x1e4>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da0e:	429a      	cmp	r2, r3
 800da10:	d90d      	bls.n	800da2e <f_read+0x1e4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	025b      	lsls	r3, r3, #9
 800da1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da1e:	18d0      	adds	r0, r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	3354      	adds	r3, #84	; 0x54
 800da24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da28:	4619      	mov	r1, r3
 800da2a:	f7fc fafe 	bl	800a02a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da30:	025b      	lsls	r3, r3, #9
 800da32:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800da34:	e059      	b.n	800daea <f_read+0x2a0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3a:	69ba      	ldr	r2, [r7, #24]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d033      	beq.n	800daa8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da46:	b25b      	sxtb	r3, r3
 800da48:	2b00      	cmp	r3, #0
 800da4a:	da1b      	bge.n	800da84 <f_read+0x23a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	7858      	ldrb	r0, [r3, #1]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da5a:	2301      	movs	r3, #1
 800da5c:	f7fc f8e2 	bl	8009c24 <disk_write>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d005      	beq.n	800da72 <f_read+0x228>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800da6e:	2301      	movs	r3, #1
 800da70:	e05c      	b.n	800db2c <f_read+0x2e2>
					fp->flag &= (BYTE)~FA_DIRTY;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	7858      	ldrb	r0, [r3, #1]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800da8e:	2301      	movs	r3, #1
 800da90:	69ba      	ldr	r2, [r7, #24]
 800da92:	f7fc f8a7 	bl	8009be4 <disk_read>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <f_read+0x25e>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800daa4:	2301      	movs	r3, #1
 800daa6:	e041      	b.n	800db2c <f_read+0x2e2>
			}
#endif
			fp->sect = sect;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dab4:	4613      	mov	r3, r2
 800dab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dabe:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d901      	bls.n	800dacc <f_read+0x282>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dad8:	4613      	mov	r3, r2
 800dada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dade:	440b      	add	r3, r1
 800dae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dae2:	4619      	mov	r1, r3
 800dae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dae6:	f7fc faa0 	bl	800a02a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800daea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daee:	4413      	add	r3, r2
 800daf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800daf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dafa:	461a      	mov	r2, r3
 800dafc:	f04f 0300 	mov.w	r3, #0
 800db00:	eb10 0802 	adds.w	r8, r0, r2
 800db04:	eb41 0903 	adc.w	r9, r1, r3
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db14:	441a      	add	r2, r3
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	601a      	str	r2, [r3, #0]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	f47f aeda 	bne.w	800d8de <f_read+0x94>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3740      	adds	r7, #64	; 0x40
 800db30:	46bd      	mov	sp, r7
 800db32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db36 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800db36:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800db3a:	b08c      	sub	sp, #48	; 0x30
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
 800db44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	2200      	movs	r2, #0
 800db4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f107 0210 	add.w	r2, r7, #16
 800db56:	4611      	mov	r1, r2
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff fb49 	bl	800d1f0 <validate>
 800db5e:	4603      	mov	r3, r0
 800db60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800db64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d108      	bne.n	800db7e <f_write+0x48>
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800db72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800db76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <f_write+0x4e>
 800db7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db82:	e18c      	b.n	800de9e <f_write+0x368>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db8a:	f003 0302 	and.w	r3, r3, #2
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d101      	bne.n	800db96 <f_write+0x60>
 800db92:	2307      	movs	r3, #7
 800db94:	e183      	b.n	800de9e <f_write+0x368>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	2b04      	cmp	r3, #4
 800db9c:	f000 816f 	beq.w	800de7e <f_write+0x348>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	18d1      	adds	r1, r2, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	4299      	cmp	r1, r3
 800dbb4:	f080 8163 	bcs.w	800de7e <f_write+0x348>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	43db      	mvns	r3, r3
 800dbc2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dbc4:	e15b      	b.n	800de7e <f_write+0x348>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dbcc:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dbd0:	f04f 0100 	mov.w	r1, #0
 800dbd4:	ea02 0400 	and.w	r4, r2, r0
 800dbd8:	ea03 0501 	and.w	r5, r3, r1
 800dbdc:	ea54 0305 	orrs.w	r3, r4, r5
 800dbe0:	f040 80fb 	bne.w	800ddda <f_write+0x2a4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800dbea:	f04f 0200 	mov.w	r2, #0
 800dbee:	f04f 0300 	mov.w	r3, #0
 800dbf2:	0a42      	lsrs	r2, r0, #9
 800dbf4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800dbf8:	0a4b      	lsrs	r3, r1, #9
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	895b      	ldrh	r3, [r3, #10]
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	4013      	ands	r3, r2
 800dc02:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d146      	bne.n	800dc98 <f_write+0x162>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dc10:	4313      	orrs	r3, r2
 800dc12:	d10c      	bne.n	800dc2e <f_write+0xf8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d11a      	bne.n	800dc56 <f_write+0x120>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2100      	movs	r1, #0
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fd f8f1 	bl	800ae0c <create_chain>
 800dc2a:	62b8      	str	r0, [r7, #40]	; 0x28
 800dc2c:	e013      	b.n	800dc56 <f_write+0x120>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d007      	beq.n	800dc46 <f_write+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f7fd f9e6 	bl	800b00e <clmt_clust>
 800dc42:	62b8      	str	r0, [r7, #40]	; 0x28
 800dc44:	e007      	b.n	800dc56 <f_write+0x120>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4610      	mov	r0, r2
 800dc50:	f7fd f8dc 	bl	800ae0c <create_chain>
 800dc54:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f000 8115 	beq.w	800de88 <f_write+0x352>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d105      	bne.n	800dc70 <f_write+0x13a>
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2202      	movs	r2, #2
 800dc68:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	e116      	b.n	800de9e <f_write+0x368>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc76:	d105      	bne.n	800dc84 <f_write+0x14e>
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dc80:	2301      	movs	r3, #1
 800dc82:	e10c      	b.n	800de9e <f_write+0x368>
				fp->clust = clst;			/* Update current cluster */
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc88:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d102      	bne.n	800dc98 <f_write+0x162>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc9e:	b25b      	sxtb	r3, r3
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	da1b      	bge.n	800dcdc <f_write+0x1a6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	7858      	ldrb	r0, [r3, #1]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	f7fb ffb6 	bl	8009c24 <disk_write>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d005      	beq.n	800dcca <f_write+0x194>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e0e9      	b.n	800de9e <f_write+0x368>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce2:	4619      	mov	r1, r3
 800dce4:	4610      	mov	r0, r2
 800dce6:	f7fc fc6b 	bl	800a5c0 <clust2sect>
 800dcea:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d105      	bne.n	800dcfe <f_write+0x1c8>
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2202      	movs	r2, #2
 800dcf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	e0cf      	b.n	800de9e <f_write+0x368>
			sect += csect;
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	4413      	add	r3, r2
 800dd04:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	0a5b      	lsrs	r3, r3, #9
 800dd0a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dd0c:	6a3b      	ldr	r3, [r7, #32]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d03f      	beq.n	800dd92 <f_write+0x25c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd12:	69ba      	ldr	r2, [r7, #24]
 800dd14:	6a3b      	ldr	r3, [r7, #32]
 800dd16:	4413      	add	r3, r2
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	8952      	ldrh	r2, [r2, #10]
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d905      	bls.n	800dd2c <f_write+0x1f6>
					cc = fs->csize - csect;
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	895b      	ldrh	r3, [r3, #10]
 800dd24:	461a      	mov	r2, r3
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	7858      	ldrb	r0, [r3, #1]
 800dd30:	6a3b      	ldr	r3, [r7, #32]
 800dd32:	697a      	ldr	r2, [r7, #20]
 800dd34:	69f9      	ldr	r1, [r7, #28]
 800dd36:	f7fb ff75 	bl	8009c24 <disk_write>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d005      	beq.n	800dd4c <f_write+0x216>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2201      	movs	r2, #1
 800dd44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e0a8      	b.n	800de9e <f_write+0x368>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	6a3a      	ldr	r2, [r7, #32]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d917      	bls.n	800dd8a <f_write+0x254>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	025b      	lsls	r3, r3, #9
 800dd6a:	69fa      	ldr	r2, [r7, #28]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd72:	4619      	mov	r1, r3
 800dd74:	f7fc f959 	bl	800a02a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	025b      	lsls	r3, r3, #9
 800dd8e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800dd90:	e04a      	b.n	800de28 <f_write+0x2f2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd96:	697a      	ldr	r2, [r7, #20]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d01b      	beq.n	800ddd4 <f_write+0x29e>
				fp->fptr < fp->obj.objsize &&
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dda8:	4299      	cmp	r1, r3
 800ddaa:	bf08      	it	eq
 800ddac:	4290      	cmpeq	r0, r2
 800ddae:	d211      	bcs.n	800ddd4 <f_write+0x29e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	7858      	ldrb	r0, [r3, #1]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ddba:	2301      	movs	r3, #1
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	f7fb ff11 	bl	8009be4 <disk_read>
 800ddc2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d005      	beq.n	800ddd4 <f_write+0x29e>
					ABORT(fs, FR_DISK_ERR);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e064      	b.n	800de9e <f_write+0x368>
			}
#endif
			fp->sect = sect;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dde0:	4613      	mov	r3, r2
 800dde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ddea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ddec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d901      	bls.n	800ddf8 <f_write+0x2c2>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800de04:	4613      	mov	r3, r2
 800de06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de0a:	440b      	add	r3, r1
 800de0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de0e:	69f9      	ldr	r1, [r7, #28]
 800de10:	4618      	mov	r0, r3
 800de12:	f7fc f90a 	bl	800a02a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de20:	b2da      	uxtb	r2, r3
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800de28:	69fa      	ldr	r2, [r7, #28]
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	4413      	add	r3, r2
 800de2e:	61fb      	str	r3, [r7, #28]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	461a      	mov	r2, r3
 800de3a:	f04f 0300 	mov.w	r3, #0
 800de3e:	eb10 0802 	adds.w	r8, r0, r2
 800de42:	eb41 0903 	adc.w	r9, r1, r3
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800de52:	68f9      	ldr	r1, [r7, #12]
 800de54:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800de58:	428b      	cmp	r3, r1
 800de5a:	bf08      	it	eq
 800de5c:	4282      	cmpeq	r2, r0
 800de5e:	d201      	bcs.n	800de64 <f_write+0x32e>
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	68f9      	ldr	r1, [r7, #12]
 800de66:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	441a      	add	r2, r3
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	601a      	str	r2, [r3, #0]
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	f47f aea0 	bne.w	800dbc6 <f_write+0x90>
 800de86:	e000      	b.n	800de8a <f_write+0x354>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de88:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de94:	b2da      	uxtb	r2, r3
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3730      	adds	r7, #48	; 0x30
 800dea2:	46bd      	mov	sp, r7
 800dea4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800dea8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b09c      	sub	sp, #112	; 0x70
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800deb6:	4611      	mov	r1, r2
 800deb8:	4618      	mov	r0, r3
 800deba:	f7ff f999 	bl	800d1f0 <validate>
 800debe:	4603      	mov	r3, r0
 800dec0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800dec4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f040 8105 	bne.w	800e0d8 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ded4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f000 80fd 	beq.w	800e0d8 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dee4:	b25b      	sxtb	r3, r3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	da17      	bge.n	800df1a <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800deea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800deec:	7858      	ldrb	r0, [r3, #1]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800def8:	2301      	movs	r3, #1
 800defa:	f7fb fe93 	bl	8009c24 <disk_write>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d001      	beq.n	800df08 <f_sync+0x60>
 800df04:	2301      	movs	r3, #1
 800df06:	e0e9      	b.n	800e0dc <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df12:	b2da      	uxtb	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800df1a:	f7fb fc89 	bl	8009830 <get_fattime>
 800df1e:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800df20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	2b04      	cmp	r3, #4
 800df26:	f040 808c 	bne.w	800e042 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fc fe59 	bl	800abe4 <fill_first_frag>
 800df32:	4603      	mov	r3, r0
 800df34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800df38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d10a      	bne.n	800df56 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df4a:	4619      	mov	r1, r3
 800df4c:	f7fc fe79 	bl	800ac42 <fill_last_frag>
 800df50:	4603      	mov	r3, r0
 800df52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800df56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f040 80bc 	bne.w	800e0d8 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	f107 0308 	add.w	r3, r7, #8
 800df66:	4611      	mov	r1, r2
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fd fd99 	bl	800baa0 <load_obj_dir>
 800df6e:	4603      	mov	r3, r0
 800df70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800df74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f040 80ad 	bne.w	800e0d8 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800df7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df80:	691b      	ldr	r3, [r3, #16]
 800df82:	3304      	adds	r3, #4
 800df84:	781a      	ldrb	r2, [r3, #0]
 800df86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	3304      	adds	r3, #4
 800df8c:	f042 0220 	orr.w	r2, r2, #32
 800df90:	b2d2      	uxtb	r2, r2
 800df92:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	79da      	ldrb	r2, [r3, #7]
 800df98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	3321      	adds	r3, #33	; 0x21
 800df9e:	f042 0201 	orr.w	r2, r2, #1
 800dfa2:	b2d2      	uxtb	r2, r2
 800dfa4:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800dfa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfa8:	691b      	ldr	r3, [r3, #16]
 800dfaa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	f7fb ff84 	bl	8009ec2 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800dfba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dfc8:	4608      	mov	r0, r1
 800dfca:	f7fb ffa6 	bl	8009f1a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800dfce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfd0:	691b      	ldr	r3, [r3, #16]
 800dfd2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dfdc:	4608      	mov	r0, r1
 800dfde:	f7fb ff9c 	bl	8009f1a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800dfe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	330c      	adds	r3, #12
 800dfe8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fb ff69 	bl	8009ec2 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800dff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	3315      	adds	r3, #21
 800dff6:	2200      	movs	r2, #0
 800dff8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800dffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dffc:	691b      	ldr	r3, [r3, #16]
 800dffe:	3310      	adds	r3, #16
 800e000:	2100      	movs	r1, #0
 800e002:	4618      	mov	r0, r3
 800e004:	f7fb ff5d 	bl	8009ec2 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e008:	f107 0308 	add.w	r3, r7, #8
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fd fd82 	bl	800bb16 <store_xdir>
 800e012:	4603      	mov	r3, r0
 800e014:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800e018:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d15b      	bne.n	800e0d8 <f_sync+0x230>
							res = sync_fs(fs);
 800e020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e022:	4618      	mov	r0, r3
 800e024:	f7fc fa5e 	bl	800a4e4 <sync_fs>
 800e028:	4603      	mov	r3, r0
 800e02a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800e040:	e04a      	b.n	800e0d8 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e048:	4619      	mov	r1, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	f7fc fa1c 	bl	800a488 <move_window>
 800e050:	4603      	mov	r3, r0
 800e052:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e056:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d13c      	bne.n	800e0d8 <f_sync+0x230>
					dir = fp->dir_ptr;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e062:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e066:	330b      	adds	r3, #11
 800e068:	781a      	ldrb	r2, [r3, #0]
 800e06a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e06c:	330b      	adds	r3, #11
 800e06e:	f042 0220 	orr.w	r2, r2, #32
 800e072:	b2d2      	uxtb	r2, r2
 800e074:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6818      	ldr	r0, [r3, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	461a      	mov	r2, r3
 800e080:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e082:	f7fd f9db 	bl	800b43c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e088:	f103 001c 	add.w	r0, r3, #28
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e092:	4613      	mov	r3, r2
 800e094:	4619      	mov	r1, r3
 800e096:	f7fb ff14 	bl	8009ec2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e09a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e09c:	3316      	adds	r3, #22
 800e09e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fb ff0e 	bl	8009ec2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e0a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0a8:	3312      	adds	r3, #18
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fb feed 	bl	8009e8c <st_word>
					fs->wflag = 1;
 800e0b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e0b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fc fa12 	bl	800a4e4 <sync_fs>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e0d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3770      	adds	r7, #112	; 0x70
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7ff fedb 	bl	800dea8 <f_sync>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d118      	bne.n	800e12e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f107 0208 	add.w	r2, r7, #8
 800e102:	4611      	mov	r1, r2
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff f873 	bl	800d1f0 <validate>
 800e10a:	4603      	mov	r3, r0
 800e10c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e10e:	7bfb      	ldrb	r3, [r7, #15]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10c      	bne.n	800e12e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fc f911 	bl	800a340 <dec_lock>
 800e11e:	4603      	mov	r3, r0
 800e120:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e122:	7bfb      	ldrb	r3, [r7, #15]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d102      	bne.n	800e12e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e130:	4618      	mov	r0, r3
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e138:	b480      	push	{r7}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e146:	2301      	movs	r3, #1
 800e148:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e14e:	4b1f      	ldr	r3, [pc, #124]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e150:	7a5b      	ldrb	r3, [r3, #9]
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b00      	cmp	r3, #0
 800e156:	d131      	bne.n	800e1bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e158:	4b1c      	ldr	r3, [pc, #112]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e15a:	7a5b      	ldrb	r3, [r3, #9]
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	461a      	mov	r2, r3
 800e160:	4b1a      	ldr	r3, [pc, #104]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e162:	2100      	movs	r1, #0
 800e164:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e166:	4b19      	ldr	r3, [pc, #100]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e168:	7a5b      	ldrb	r3, [r3, #9]
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	4a17      	ldr	r2, [pc, #92]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	4413      	add	r3, r2
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e176:	4b15      	ldr	r3, [pc, #84]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e178:	7a5b      	ldrb	r3, [r3, #9]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	461a      	mov	r2, r3
 800e17e:	4b13      	ldr	r3, [pc, #76]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e180:	4413      	add	r3, r2
 800e182:	79fa      	ldrb	r2, [r7, #7]
 800e184:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e186:	4b11      	ldr	r3, [pc, #68]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e188:	7a5b      	ldrb	r3, [r3, #9]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	1c5a      	adds	r2, r3, #1
 800e18e:	b2d1      	uxtb	r1, r2
 800e190:	4a0e      	ldr	r2, [pc, #56]	; (800e1cc <FATFS_LinkDriverEx+0x94>)
 800e192:	7251      	strb	r1, [r2, #9]
 800e194:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e196:	7dbb      	ldrb	r3, [r7, #22]
 800e198:	3330      	adds	r3, #48	; 0x30
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	223a      	movs	r2, #58	; 0x3a
 800e1a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	3302      	adds	r3, #2
 800e1ac:	222f      	movs	r2, #47	; 0x2f
 800e1ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	3303      	adds	r3, #3
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	371c      	adds	r7, #28
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	24001758 	.word	0x24001758

0800e1d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e1da:	2200      	movs	r2, #0
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f7ff ffaa 	bl	800e138 <FATFS_LinkDriverEx>
 800e1e4:	4603      	mov	r3, r0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
	...

0800e1f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	6039      	str	r1, [r7, #0]
 800e1fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e1fc:	88fb      	ldrh	r3, [r7, #6]
 800e1fe:	2b7f      	cmp	r3, #127	; 0x7f
 800e200:	d802      	bhi.n	800e208 <ff_convert+0x18>
		c = chr;
 800e202:	88fb      	ldrh	r3, [r7, #6]
 800e204:	81fb      	strh	r3, [r7, #14]
 800e206:	e025      	b.n	800e254 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00b      	beq.n	800e226 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e20e:	88fb      	ldrh	r3, [r7, #6]
 800e210:	2bff      	cmp	r3, #255	; 0xff
 800e212:	d805      	bhi.n	800e220 <ff_convert+0x30>
 800e214:	88fb      	ldrh	r3, [r7, #6]
 800e216:	3b80      	subs	r3, #128	; 0x80
 800e218:	4a12      	ldr	r2, [pc, #72]	; (800e264 <ff_convert+0x74>)
 800e21a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e21e:	e000      	b.n	800e222 <ff_convert+0x32>
 800e220:	2300      	movs	r3, #0
 800e222:	81fb      	strh	r3, [r7, #14]
 800e224:	e016      	b.n	800e254 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e226:	2300      	movs	r3, #0
 800e228:	81fb      	strh	r3, [r7, #14]
 800e22a:	e009      	b.n	800e240 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e22c:	89fb      	ldrh	r3, [r7, #14]
 800e22e:	4a0d      	ldr	r2, [pc, #52]	; (800e264 <ff_convert+0x74>)
 800e230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e234:	88fa      	ldrh	r2, [r7, #6]
 800e236:	429a      	cmp	r2, r3
 800e238:	d006      	beq.n	800e248 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e23a:	89fb      	ldrh	r3, [r7, #14]
 800e23c:	3301      	adds	r3, #1
 800e23e:	81fb      	strh	r3, [r7, #14]
 800e240:	89fb      	ldrh	r3, [r7, #14]
 800e242:	2b7f      	cmp	r3, #127	; 0x7f
 800e244:	d9f2      	bls.n	800e22c <ff_convert+0x3c>
 800e246:	e000      	b.n	800e24a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e248:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e24a:	89fb      	ldrh	r3, [r7, #14]
 800e24c:	3380      	adds	r3, #128	; 0x80
 800e24e:	b29b      	uxth	r3, r3
 800e250:	b2db      	uxtb	r3, r3
 800e252:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e254:	89fb      	ldrh	r3, [r7, #14]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3714      	adds	r7, #20
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	0800f414 	.word	0x0800f414

0800e268 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e272:	88fb      	ldrh	r3, [r7, #6]
 800e274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e278:	d201      	bcs.n	800e27e <ff_wtoupper+0x16>
 800e27a:	4b3e      	ldr	r3, [pc, #248]	; (800e374 <ff_wtoupper+0x10c>)
 800e27c:	e000      	b.n	800e280 <ff_wtoupper+0x18>
 800e27e:	4b3e      	ldr	r3, [pc, #248]	; (800e378 <ff_wtoupper+0x110>)
 800e280:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	1c9a      	adds	r2, r3, #2
 800e286:	617a      	str	r2, [r7, #20]
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e28c:	8a7b      	ldrh	r3, [r7, #18]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d068      	beq.n	800e364 <ff_wtoupper+0xfc>
 800e292:	88fa      	ldrh	r2, [r7, #6]
 800e294:	8a7b      	ldrh	r3, [r7, #18]
 800e296:	429a      	cmp	r2, r3
 800e298:	d364      	bcc.n	800e364 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	1c9a      	adds	r2, r3, #2
 800e29e:	617a      	str	r2, [r7, #20]
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	823b      	strh	r3, [r7, #16]
 800e2a4:	8a3b      	ldrh	r3, [r7, #16]
 800e2a6:	0a1b      	lsrs	r3, r3, #8
 800e2a8:	81fb      	strh	r3, [r7, #14]
 800e2aa:	8a3b      	ldrh	r3, [r7, #16]
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e2b0:	88fa      	ldrh	r2, [r7, #6]
 800e2b2:	8a79      	ldrh	r1, [r7, #18]
 800e2b4:	8a3b      	ldrh	r3, [r7, #16]
 800e2b6:	440b      	add	r3, r1
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	da49      	bge.n	800e350 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e2bc:	89fb      	ldrh	r3, [r7, #14]
 800e2be:	2b08      	cmp	r3, #8
 800e2c0:	d84f      	bhi.n	800e362 <ff_wtoupper+0xfa>
 800e2c2:	a201      	add	r2, pc, #4	; (adr r2, 800e2c8 <ff_wtoupper+0x60>)
 800e2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c8:	0800e2ed 	.word	0x0800e2ed
 800e2cc:	0800e2ff 	.word	0x0800e2ff
 800e2d0:	0800e315 	.word	0x0800e315
 800e2d4:	0800e31d 	.word	0x0800e31d
 800e2d8:	0800e325 	.word	0x0800e325
 800e2dc:	0800e32d 	.word	0x0800e32d
 800e2e0:	0800e335 	.word	0x0800e335
 800e2e4:	0800e33d 	.word	0x0800e33d
 800e2e8:	0800e345 	.word	0x0800e345
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e2ec:	88fa      	ldrh	r2, [r7, #6]
 800e2ee:	8a7b      	ldrh	r3, [r7, #18]
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	005b      	lsls	r3, r3, #1
 800e2f4:	697a      	ldr	r2, [r7, #20]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	881b      	ldrh	r3, [r3, #0]
 800e2fa:	80fb      	strh	r3, [r7, #6]
 800e2fc:	e027      	b.n	800e34e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e2fe:	88fa      	ldrh	r2, [r7, #6]
 800e300:	8a7b      	ldrh	r3, [r7, #18]
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	b29b      	uxth	r3, r3
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	88fa      	ldrh	r2, [r7, #6]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	80fb      	strh	r3, [r7, #6]
 800e312:	e01c      	b.n	800e34e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e314:	88fb      	ldrh	r3, [r7, #6]
 800e316:	3b10      	subs	r3, #16
 800e318:	80fb      	strh	r3, [r7, #6]
 800e31a:	e018      	b.n	800e34e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e31c:	88fb      	ldrh	r3, [r7, #6]
 800e31e:	3b20      	subs	r3, #32
 800e320:	80fb      	strh	r3, [r7, #6]
 800e322:	e014      	b.n	800e34e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e324:	88fb      	ldrh	r3, [r7, #6]
 800e326:	3b30      	subs	r3, #48	; 0x30
 800e328:	80fb      	strh	r3, [r7, #6]
 800e32a:	e010      	b.n	800e34e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e32c:	88fb      	ldrh	r3, [r7, #6]
 800e32e:	3b1a      	subs	r3, #26
 800e330:	80fb      	strh	r3, [r7, #6]
 800e332:	e00c      	b.n	800e34e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e334:	88fb      	ldrh	r3, [r7, #6]
 800e336:	3308      	adds	r3, #8
 800e338:	80fb      	strh	r3, [r7, #6]
 800e33a:	e008      	b.n	800e34e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e33c:	88fb      	ldrh	r3, [r7, #6]
 800e33e:	3b50      	subs	r3, #80	; 0x50
 800e340:	80fb      	strh	r3, [r7, #6]
 800e342:	e004      	b.n	800e34e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e344:	88fb      	ldrh	r3, [r7, #6]
 800e346:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e34a:	80fb      	strh	r3, [r7, #6]
 800e34c:	bf00      	nop
			}
			break;
 800e34e:	e008      	b.n	800e362 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e350:	89fb      	ldrh	r3, [r7, #14]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d195      	bne.n	800e282 <ff_wtoupper+0x1a>
 800e356:	8a3b      	ldrh	r3, [r7, #16]
 800e358:	005b      	lsls	r3, r3, #1
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	4413      	add	r3, r2
 800e35e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e360:	e78f      	b.n	800e282 <ff_wtoupper+0x1a>
			break;
 800e362:	bf00      	nop
	}

	return chr;
 800e364:	88fb      	ldrh	r3, [r7, #6]
}
 800e366:	4618      	mov	r0, r3
 800e368:	371c      	adds	r7, #28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	0800f514 	.word	0x0800f514
 800e378:	0800f708 	.word	0x0800f708

0800e37c <_Znwj>:
 800e37c:	2801      	cmp	r0, #1
 800e37e:	bf38      	it	cc
 800e380:	2001      	movcc	r0, #1
 800e382:	b510      	push	{r4, lr}
 800e384:	4604      	mov	r4, r0
 800e386:	4620      	mov	r0, r4
 800e388:	f000 f844 	bl	800e414 <malloc>
 800e38c:	b930      	cbnz	r0, 800e39c <_Znwj+0x20>
 800e38e:	f000 f807 	bl	800e3a0 <_ZSt15get_new_handlerv>
 800e392:	b908      	cbnz	r0, 800e398 <_Znwj+0x1c>
 800e394:	f000 f80c 	bl	800e3b0 <abort>
 800e398:	4780      	blx	r0
 800e39a:	e7f4      	b.n	800e386 <_Znwj+0xa>
 800e39c:	bd10      	pop	{r4, pc}
	...

0800e3a0 <_ZSt15get_new_handlerv>:
 800e3a0:	4b02      	ldr	r3, [pc, #8]	; (800e3ac <_ZSt15get_new_handlerv+0xc>)
 800e3a2:	6818      	ldr	r0, [r3, #0]
 800e3a4:	f3bf 8f5b 	dmb	ish
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	24001764 	.word	0x24001764

0800e3b0 <abort>:
 800e3b0:	b508      	push	{r3, lr}
 800e3b2:	2006      	movs	r0, #6
 800e3b4:	f000 f948 	bl	800e648 <raise>
 800e3b8:	2001      	movs	r0, #1
 800e3ba:	f7f3 fd1b 	bl	8001df4 <_exit>
	...

0800e3c0 <__errno>:
 800e3c0:	4b01      	ldr	r3, [pc, #4]	; (800e3c8 <__errno+0x8>)
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	24000020 	.word	0x24000020

0800e3cc <__libc_init_array>:
 800e3cc:	b570      	push	{r4, r5, r6, lr}
 800e3ce:	4d0d      	ldr	r5, [pc, #52]	; (800e404 <__libc_init_array+0x38>)
 800e3d0:	4c0d      	ldr	r4, [pc, #52]	; (800e408 <__libc_init_array+0x3c>)
 800e3d2:	1b64      	subs	r4, r4, r5
 800e3d4:	10a4      	asrs	r4, r4, #2
 800e3d6:	2600      	movs	r6, #0
 800e3d8:	42a6      	cmp	r6, r4
 800e3da:	d109      	bne.n	800e3f0 <__libc_init_array+0x24>
 800e3dc:	4d0b      	ldr	r5, [pc, #44]	; (800e40c <__libc_init_array+0x40>)
 800e3de:	4c0c      	ldr	r4, [pc, #48]	; (800e410 <__libc_init_array+0x44>)
 800e3e0:	f000 fcd4 	bl	800ed8c <_init>
 800e3e4:	1b64      	subs	r4, r4, r5
 800e3e6:	10a4      	asrs	r4, r4, #2
 800e3e8:	2600      	movs	r6, #0
 800e3ea:	42a6      	cmp	r6, r4
 800e3ec:	d105      	bne.n	800e3fa <__libc_init_array+0x2e>
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3f4:	4798      	blx	r3
 800e3f6:	3601      	adds	r6, #1
 800e3f8:	e7ee      	b.n	800e3d8 <__libc_init_array+0xc>
 800e3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3fe:	4798      	blx	r3
 800e400:	3601      	adds	r6, #1
 800e402:	e7f2      	b.n	800e3ea <__libc_init_array+0x1e>
 800e404:	0800f800 	.word	0x0800f800
 800e408:	0800f800 	.word	0x0800f800
 800e40c:	0800f800 	.word	0x0800f800
 800e410:	0800f804 	.word	0x0800f804

0800e414 <malloc>:
 800e414:	4b02      	ldr	r3, [pc, #8]	; (800e420 <malloc+0xc>)
 800e416:	4601      	mov	r1, r0
 800e418:	6818      	ldr	r0, [r3, #0]
 800e41a:	f000 b883 	b.w	800e524 <_malloc_r>
 800e41e:	bf00      	nop
 800e420:	24000020 	.word	0x24000020

0800e424 <memcpy>:
 800e424:	440a      	add	r2, r1
 800e426:	4291      	cmp	r1, r2
 800e428:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e42c:	d100      	bne.n	800e430 <memcpy+0xc>
 800e42e:	4770      	bx	lr
 800e430:	b510      	push	{r4, lr}
 800e432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e43a:	4291      	cmp	r1, r2
 800e43c:	d1f9      	bne.n	800e432 <memcpy+0xe>
 800e43e:	bd10      	pop	{r4, pc}

0800e440 <memmove>:
 800e440:	4288      	cmp	r0, r1
 800e442:	b510      	push	{r4, lr}
 800e444:	eb01 0402 	add.w	r4, r1, r2
 800e448:	d902      	bls.n	800e450 <memmove+0x10>
 800e44a:	4284      	cmp	r4, r0
 800e44c:	4623      	mov	r3, r4
 800e44e:	d807      	bhi.n	800e460 <memmove+0x20>
 800e450:	1e43      	subs	r3, r0, #1
 800e452:	42a1      	cmp	r1, r4
 800e454:	d008      	beq.n	800e468 <memmove+0x28>
 800e456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e45a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e45e:	e7f8      	b.n	800e452 <memmove+0x12>
 800e460:	4402      	add	r2, r0
 800e462:	4601      	mov	r1, r0
 800e464:	428a      	cmp	r2, r1
 800e466:	d100      	bne.n	800e46a <memmove+0x2a>
 800e468:	bd10      	pop	{r4, pc}
 800e46a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e46e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e472:	e7f7      	b.n	800e464 <memmove+0x24>

0800e474 <memset>:
 800e474:	4402      	add	r2, r0
 800e476:	4603      	mov	r3, r0
 800e478:	4293      	cmp	r3, r2
 800e47a:	d100      	bne.n	800e47e <memset+0xa>
 800e47c:	4770      	bx	lr
 800e47e:	f803 1b01 	strb.w	r1, [r3], #1
 800e482:	e7f9      	b.n	800e478 <memset+0x4>

0800e484 <_free_r>:
 800e484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e486:	2900      	cmp	r1, #0
 800e488:	d048      	beq.n	800e51c <_free_r+0x98>
 800e48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e48e:	9001      	str	r0, [sp, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	f1a1 0404 	sub.w	r4, r1, #4
 800e496:	bfb8      	it	lt
 800e498:	18e4      	addlt	r4, r4, r3
 800e49a:	f000 f94b 	bl	800e734 <__malloc_lock>
 800e49e:	4a20      	ldr	r2, [pc, #128]	; (800e520 <_free_r+0x9c>)
 800e4a0:	9801      	ldr	r0, [sp, #4]
 800e4a2:	6813      	ldr	r3, [r2, #0]
 800e4a4:	4615      	mov	r5, r2
 800e4a6:	b933      	cbnz	r3, 800e4b6 <_free_r+0x32>
 800e4a8:	6063      	str	r3, [r4, #4]
 800e4aa:	6014      	str	r4, [r2, #0]
 800e4ac:	b003      	add	sp, #12
 800e4ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4b2:	f000 b945 	b.w	800e740 <__malloc_unlock>
 800e4b6:	42a3      	cmp	r3, r4
 800e4b8:	d90b      	bls.n	800e4d2 <_free_r+0x4e>
 800e4ba:	6821      	ldr	r1, [r4, #0]
 800e4bc:	1862      	adds	r2, r4, r1
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	bf04      	itt	eq
 800e4c2:	681a      	ldreq	r2, [r3, #0]
 800e4c4:	685b      	ldreq	r3, [r3, #4]
 800e4c6:	6063      	str	r3, [r4, #4]
 800e4c8:	bf04      	itt	eq
 800e4ca:	1852      	addeq	r2, r2, r1
 800e4cc:	6022      	streq	r2, [r4, #0]
 800e4ce:	602c      	str	r4, [r5, #0]
 800e4d0:	e7ec      	b.n	800e4ac <_free_r+0x28>
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	b10b      	cbz	r3, 800e4dc <_free_r+0x58>
 800e4d8:	42a3      	cmp	r3, r4
 800e4da:	d9fa      	bls.n	800e4d2 <_free_r+0x4e>
 800e4dc:	6811      	ldr	r1, [r2, #0]
 800e4de:	1855      	adds	r5, r2, r1
 800e4e0:	42a5      	cmp	r5, r4
 800e4e2:	d10b      	bne.n	800e4fc <_free_r+0x78>
 800e4e4:	6824      	ldr	r4, [r4, #0]
 800e4e6:	4421      	add	r1, r4
 800e4e8:	1854      	adds	r4, r2, r1
 800e4ea:	42a3      	cmp	r3, r4
 800e4ec:	6011      	str	r1, [r2, #0]
 800e4ee:	d1dd      	bne.n	800e4ac <_free_r+0x28>
 800e4f0:	681c      	ldr	r4, [r3, #0]
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	6053      	str	r3, [r2, #4]
 800e4f6:	4421      	add	r1, r4
 800e4f8:	6011      	str	r1, [r2, #0]
 800e4fa:	e7d7      	b.n	800e4ac <_free_r+0x28>
 800e4fc:	d902      	bls.n	800e504 <_free_r+0x80>
 800e4fe:	230c      	movs	r3, #12
 800e500:	6003      	str	r3, [r0, #0]
 800e502:	e7d3      	b.n	800e4ac <_free_r+0x28>
 800e504:	6825      	ldr	r5, [r4, #0]
 800e506:	1961      	adds	r1, r4, r5
 800e508:	428b      	cmp	r3, r1
 800e50a:	bf04      	itt	eq
 800e50c:	6819      	ldreq	r1, [r3, #0]
 800e50e:	685b      	ldreq	r3, [r3, #4]
 800e510:	6063      	str	r3, [r4, #4]
 800e512:	bf04      	itt	eq
 800e514:	1949      	addeq	r1, r1, r5
 800e516:	6021      	streq	r1, [r4, #0]
 800e518:	6054      	str	r4, [r2, #4]
 800e51a:	e7c7      	b.n	800e4ac <_free_r+0x28>
 800e51c:	b003      	add	sp, #12
 800e51e:	bd30      	pop	{r4, r5, pc}
 800e520:	24001768 	.word	0x24001768

0800e524 <_malloc_r>:
 800e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e526:	1ccd      	adds	r5, r1, #3
 800e528:	f025 0503 	bic.w	r5, r5, #3
 800e52c:	3508      	adds	r5, #8
 800e52e:	2d0c      	cmp	r5, #12
 800e530:	bf38      	it	cc
 800e532:	250c      	movcc	r5, #12
 800e534:	2d00      	cmp	r5, #0
 800e536:	4606      	mov	r6, r0
 800e538:	db01      	blt.n	800e53e <_malloc_r+0x1a>
 800e53a:	42a9      	cmp	r1, r5
 800e53c:	d903      	bls.n	800e546 <_malloc_r+0x22>
 800e53e:	230c      	movs	r3, #12
 800e540:	6033      	str	r3, [r6, #0]
 800e542:	2000      	movs	r0, #0
 800e544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e546:	f000 f8f5 	bl	800e734 <__malloc_lock>
 800e54a:	4921      	ldr	r1, [pc, #132]	; (800e5d0 <_malloc_r+0xac>)
 800e54c:	680a      	ldr	r2, [r1, #0]
 800e54e:	4614      	mov	r4, r2
 800e550:	b99c      	cbnz	r4, 800e57a <_malloc_r+0x56>
 800e552:	4f20      	ldr	r7, [pc, #128]	; (800e5d4 <_malloc_r+0xb0>)
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	b923      	cbnz	r3, 800e562 <_malloc_r+0x3e>
 800e558:	4621      	mov	r1, r4
 800e55a:	4630      	mov	r0, r6
 800e55c:	f000 f83c 	bl	800e5d8 <_sbrk_r>
 800e560:	6038      	str	r0, [r7, #0]
 800e562:	4629      	mov	r1, r5
 800e564:	4630      	mov	r0, r6
 800e566:	f000 f837 	bl	800e5d8 <_sbrk_r>
 800e56a:	1c43      	adds	r3, r0, #1
 800e56c:	d123      	bne.n	800e5b6 <_malloc_r+0x92>
 800e56e:	230c      	movs	r3, #12
 800e570:	6033      	str	r3, [r6, #0]
 800e572:	4630      	mov	r0, r6
 800e574:	f000 f8e4 	bl	800e740 <__malloc_unlock>
 800e578:	e7e3      	b.n	800e542 <_malloc_r+0x1e>
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	1b5b      	subs	r3, r3, r5
 800e57e:	d417      	bmi.n	800e5b0 <_malloc_r+0x8c>
 800e580:	2b0b      	cmp	r3, #11
 800e582:	d903      	bls.n	800e58c <_malloc_r+0x68>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	441c      	add	r4, r3
 800e588:	6025      	str	r5, [r4, #0]
 800e58a:	e004      	b.n	800e596 <_malloc_r+0x72>
 800e58c:	6863      	ldr	r3, [r4, #4]
 800e58e:	42a2      	cmp	r2, r4
 800e590:	bf0c      	ite	eq
 800e592:	600b      	streq	r3, [r1, #0]
 800e594:	6053      	strne	r3, [r2, #4]
 800e596:	4630      	mov	r0, r6
 800e598:	f000 f8d2 	bl	800e740 <__malloc_unlock>
 800e59c:	f104 000b 	add.w	r0, r4, #11
 800e5a0:	1d23      	adds	r3, r4, #4
 800e5a2:	f020 0007 	bic.w	r0, r0, #7
 800e5a6:	1ac2      	subs	r2, r0, r3
 800e5a8:	d0cc      	beq.n	800e544 <_malloc_r+0x20>
 800e5aa:	1a1b      	subs	r3, r3, r0
 800e5ac:	50a3      	str	r3, [r4, r2]
 800e5ae:	e7c9      	b.n	800e544 <_malloc_r+0x20>
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	6864      	ldr	r4, [r4, #4]
 800e5b4:	e7cc      	b.n	800e550 <_malloc_r+0x2c>
 800e5b6:	1cc4      	adds	r4, r0, #3
 800e5b8:	f024 0403 	bic.w	r4, r4, #3
 800e5bc:	42a0      	cmp	r0, r4
 800e5be:	d0e3      	beq.n	800e588 <_malloc_r+0x64>
 800e5c0:	1a21      	subs	r1, r4, r0
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f000 f808 	bl	800e5d8 <_sbrk_r>
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	d1dd      	bne.n	800e588 <_malloc_r+0x64>
 800e5cc:	e7cf      	b.n	800e56e <_malloc_r+0x4a>
 800e5ce:	bf00      	nop
 800e5d0:	24001768 	.word	0x24001768
 800e5d4:	2400176c 	.word	0x2400176c

0800e5d8 <_sbrk_r>:
 800e5d8:	b538      	push	{r3, r4, r5, lr}
 800e5da:	4d06      	ldr	r5, [pc, #24]	; (800e5f4 <_sbrk_r+0x1c>)
 800e5dc:	2300      	movs	r3, #0
 800e5de:	4604      	mov	r4, r0
 800e5e0:	4608      	mov	r0, r1
 800e5e2:	602b      	str	r3, [r5, #0]
 800e5e4:	f7f3 fc10 	bl	8001e08 <_sbrk>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	d102      	bne.n	800e5f2 <_sbrk_r+0x1a>
 800e5ec:	682b      	ldr	r3, [r5, #0]
 800e5ee:	b103      	cbz	r3, 800e5f2 <_sbrk_r+0x1a>
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	bd38      	pop	{r3, r4, r5, pc}
 800e5f4:	24001c20 	.word	0x24001c20

0800e5f8 <_raise_r>:
 800e5f8:	291f      	cmp	r1, #31
 800e5fa:	b538      	push	{r3, r4, r5, lr}
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	460d      	mov	r5, r1
 800e600:	d904      	bls.n	800e60c <_raise_r+0x14>
 800e602:	2316      	movs	r3, #22
 800e604:	6003      	str	r3, [r0, #0]
 800e606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
 800e60c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e60e:	b112      	cbz	r2, 800e616 <_raise_r+0x1e>
 800e610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e614:	b94b      	cbnz	r3, 800e62a <_raise_r+0x32>
 800e616:	4620      	mov	r0, r4
 800e618:	f000 f830 	bl	800e67c <_getpid_r>
 800e61c:	462a      	mov	r2, r5
 800e61e:	4601      	mov	r1, r0
 800e620:	4620      	mov	r0, r4
 800e622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e626:	f000 b817 	b.w	800e658 <_kill_r>
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d00a      	beq.n	800e644 <_raise_r+0x4c>
 800e62e:	1c59      	adds	r1, r3, #1
 800e630:	d103      	bne.n	800e63a <_raise_r+0x42>
 800e632:	2316      	movs	r3, #22
 800e634:	6003      	str	r3, [r0, #0]
 800e636:	2001      	movs	r0, #1
 800e638:	e7e7      	b.n	800e60a <_raise_r+0x12>
 800e63a:	2400      	movs	r4, #0
 800e63c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e640:	4628      	mov	r0, r5
 800e642:	4798      	blx	r3
 800e644:	2000      	movs	r0, #0
 800e646:	e7e0      	b.n	800e60a <_raise_r+0x12>

0800e648 <raise>:
 800e648:	4b02      	ldr	r3, [pc, #8]	; (800e654 <raise+0xc>)
 800e64a:	4601      	mov	r1, r0
 800e64c:	6818      	ldr	r0, [r3, #0]
 800e64e:	f7ff bfd3 	b.w	800e5f8 <_raise_r>
 800e652:	bf00      	nop
 800e654:	24000020 	.word	0x24000020

0800e658 <_kill_r>:
 800e658:	b538      	push	{r3, r4, r5, lr}
 800e65a:	4d07      	ldr	r5, [pc, #28]	; (800e678 <_kill_r+0x20>)
 800e65c:	2300      	movs	r3, #0
 800e65e:	4604      	mov	r4, r0
 800e660:	4608      	mov	r0, r1
 800e662:	4611      	mov	r1, r2
 800e664:	602b      	str	r3, [r5, #0]
 800e666:	f7f3 fbb5 	bl	8001dd4 <_kill>
 800e66a:	1c43      	adds	r3, r0, #1
 800e66c:	d102      	bne.n	800e674 <_kill_r+0x1c>
 800e66e:	682b      	ldr	r3, [r5, #0]
 800e670:	b103      	cbz	r3, 800e674 <_kill_r+0x1c>
 800e672:	6023      	str	r3, [r4, #0]
 800e674:	bd38      	pop	{r3, r4, r5, pc}
 800e676:	bf00      	nop
 800e678:	24001c20 	.word	0x24001c20

0800e67c <_getpid_r>:
 800e67c:	f7f3 bba2 	b.w	8001dc4 <_getpid>

0800e680 <siprintf>:
 800e680:	b40e      	push	{r1, r2, r3}
 800e682:	b500      	push	{lr}
 800e684:	b09c      	sub	sp, #112	; 0x70
 800e686:	ab1d      	add	r3, sp, #116	; 0x74
 800e688:	9002      	str	r0, [sp, #8]
 800e68a:	9006      	str	r0, [sp, #24]
 800e68c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e690:	4809      	ldr	r0, [pc, #36]	; (800e6b8 <siprintf+0x38>)
 800e692:	9107      	str	r1, [sp, #28]
 800e694:	9104      	str	r1, [sp, #16]
 800e696:	4909      	ldr	r1, [pc, #36]	; (800e6bc <siprintf+0x3c>)
 800e698:	f853 2b04 	ldr.w	r2, [r3], #4
 800e69c:	9105      	str	r1, [sp, #20]
 800e69e:	6800      	ldr	r0, [r0, #0]
 800e6a0:	9301      	str	r3, [sp, #4]
 800e6a2:	a902      	add	r1, sp, #8
 800e6a4:	f000 f8ae 	bl	800e804 <_svfiprintf_r>
 800e6a8:	9b02      	ldr	r3, [sp, #8]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	701a      	strb	r2, [r3, #0]
 800e6ae:	b01c      	add	sp, #112	; 0x70
 800e6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6b4:	b003      	add	sp, #12
 800e6b6:	4770      	bx	lr
 800e6b8:	24000020 	.word	0x24000020
 800e6bc:	ffff0208 	.word	0xffff0208

0800e6c0 <_vsniprintf_r>:
 800e6c0:	b530      	push	{r4, r5, lr}
 800e6c2:	1e14      	subs	r4, r2, #0
 800e6c4:	4605      	mov	r5, r0
 800e6c6:	b09b      	sub	sp, #108	; 0x6c
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	da05      	bge.n	800e6d8 <_vsniprintf_r+0x18>
 800e6cc:	238b      	movs	r3, #139	; 0x8b
 800e6ce:	602b      	str	r3, [r5, #0]
 800e6d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6d4:	b01b      	add	sp, #108	; 0x6c
 800e6d6:	bd30      	pop	{r4, r5, pc}
 800e6d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e6dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e6e0:	bf14      	ite	ne
 800e6e2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e6e6:	4623      	moveq	r3, r4
 800e6e8:	9302      	str	r3, [sp, #8]
 800e6ea:	9305      	str	r3, [sp, #20]
 800e6ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6f0:	9100      	str	r1, [sp, #0]
 800e6f2:	9104      	str	r1, [sp, #16]
 800e6f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e6fc:	4669      	mov	r1, sp
 800e6fe:	4628      	mov	r0, r5
 800e700:	f000 f880 	bl	800e804 <_svfiprintf_r>
 800e704:	1c43      	adds	r3, r0, #1
 800e706:	bfbc      	itt	lt
 800e708:	238b      	movlt	r3, #139	; 0x8b
 800e70a:	602b      	strlt	r3, [r5, #0]
 800e70c:	2c00      	cmp	r4, #0
 800e70e:	d0e1      	beq.n	800e6d4 <_vsniprintf_r+0x14>
 800e710:	9b00      	ldr	r3, [sp, #0]
 800e712:	2200      	movs	r2, #0
 800e714:	701a      	strb	r2, [r3, #0]
 800e716:	e7dd      	b.n	800e6d4 <_vsniprintf_r+0x14>

0800e718 <vsniprintf>:
 800e718:	b507      	push	{r0, r1, r2, lr}
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	4613      	mov	r3, r2
 800e71e:	460a      	mov	r2, r1
 800e720:	4601      	mov	r1, r0
 800e722:	4803      	ldr	r0, [pc, #12]	; (800e730 <vsniprintf+0x18>)
 800e724:	6800      	ldr	r0, [r0, #0]
 800e726:	f7ff ffcb 	bl	800e6c0 <_vsniprintf_r>
 800e72a:	b003      	add	sp, #12
 800e72c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e730:	24000020 	.word	0x24000020

0800e734 <__malloc_lock>:
 800e734:	4801      	ldr	r0, [pc, #4]	; (800e73c <__malloc_lock+0x8>)
 800e736:	f000 baf9 	b.w	800ed2c <__retarget_lock_acquire_recursive>
 800e73a:	bf00      	nop
 800e73c:	24001c28 	.word	0x24001c28

0800e740 <__malloc_unlock>:
 800e740:	4801      	ldr	r0, [pc, #4]	; (800e748 <__malloc_unlock+0x8>)
 800e742:	f000 baf4 	b.w	800ed2e <__retarget_lock_release_recursive>
 800e746:	bf00      	nop
 800e748:	24001c28 	.word	0x24001c28

0800e74c <__ssputs_r>:
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	688e      	ldr	r6, [r1, #8]
 800e752:	429e      	cmp	r6, r3
 800e754:	4682      	mov	sl, r0
 800e756:	460c      	mov	r4, r1
 800e758:	4690      	mov	r8, r2
 800e75a:	461f      	mov	r7, r3
 800e75c:	d838      	bhi.n	800e7d0 <__ssputs_r+0x84>
 800e75e:	898a      	ldrh	r2, [r1, #12]
 800e760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e764:	d032      	beq.n	800e7cc <__ssputs_r+0x80>
 800e766:	6825      	ldr	r5, [r4, #0]
 800e768:	6909      	ldr	r1, [r1, #16]
 800e76a:	eba5 0901 	sub.w	r9, r5, r1
 800e76e:	6965      	ldr	r5, [r4, #20]
 800e770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e778:	3301      	adds	r3, #1
 800e77a:	444b      	add	r3, r9
 800e77c:	106d      	asrs	r5, r5, #1
 800e77e:	429d      	cmp	r5, r3
 800e780:	bf38      	it	cc
 800e782:	461d      	movcc	r5, r3
 800e784:	0553      	lsls	r3, r2, #21
 800e786:	d531      	bpl.n	800e7ec <__ssputs_r+0xa0>
 800e788:	4629      	mov	r1, r5
 800e78a:	f7ff fecb 	bl	800e524 <_malloc_r>
 800e78e:	4606      	mov	r6, r0
 800e790:	b950      	cbnz	r0, 800e7a8 <__ssputs_r+0x5c>
 800e792:	230c      	movs	r3, #12
 800e794:	f8ca 3000 	str.w	r3, [sl]
 800e798:	89a3      	ldrh	r3, [r4, #12]
 800e79a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e79e:	81a3      	strh	r3, [r4, #12]
 800e7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7a8:	6921      	ldr	r1, [r4, #16]
 800e7aa:	464a      	mov	r2, r9
 800e7ac:	f7ff fe3a 	bl	800e424 <memcpy>
 800e7b0:	89a3      	ldrh	r3, [r4, #12]
 800e7b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7ba:	81a3      	strh	r3, [r4, #12]
 800e7bc:	6126      	str	r6, [r4, #16]
 800e7be:	6165      	str	r5, [r4, #20]
 800e7c0:	444e      	add	r6, r9
 800e7c2:	eba5 0509 	sub.w	r5, r5, r9
 800e7c6:	6026      	str	r6, [r4, #0]
 800e7c8:	60a5      	str	r5, [r4, #8]
 800e7ca:	463e      	mov	r6, r7
 800e7cc:	42be      	cmp	r6, r7
 800e7ce:	d900      	bls.n	800e7d2 <__ssputs_r+0x86>
 800e7d0:	463e      	mov	r6, r7
 800e7d2:	4632      	mov	r2, r6
 800e7d4:	6820      	ldr	r0, [r4, #0]
 800e7d6:	4641      	mov	r1, r8
 800e7d8:	f7ff fe32 	bl	800e440 <memmove>
 800e7dc:	68a3      	ldr	r3, [r4, #8]
 800e7de:	6822      	ldr	r2, [r4, #0]
 800e7e0:	1b9b      	subs	r3, r3, r6
 800e7e2:	4432      	add	r2, r6
 800e7e4:	60a3      	str	r3, [r4, #8]
 800e7e6:	6022      	str	r2, [r4, #0]
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	e7db      	b.n	800e7a4 <__ssputs_r+0x58>
 800e7ec:	462a      	mov	r2, r5
 800e7ee:	f000 fa9f 	bl	800ed30 <_realloc_r>
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	d1e1      	bne.n	800e7bc <__ssputs_r+0x70>
 800e7f8:	6921      	ldr	r1, [r4, #16]
 800e7fa:	4650      	mov	r0, sl
 800e7fc:	f7ff fe42 	bl	800e484 <_free_r>
 800e800:	e7c7      	b.n	800e792 <__ssputs_r+0x46>
	...

0800e804 <_svfiprintf_r>:
 800e804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e808:	4698      	mov	r8, r3
 800e80a:	898b      	ldrh	r3, [r1, #12]
 800e80c:	061b      	lsls	r3, r3, #24
 800e80e:	b09d      	sub	sp, #116	; 0x74
 800e810:	4607      	mov	r7, r0
 800e812:	460d      	mov	r5, r1
 800e814:	4614      	mov	r4, r2
 800e816:	d50e      	bpl.n	800e836 <_svfiprintf_r+0x32>
 800e818:	690b      	ldr	r3, [r1, #16]
 800e81a:	b963      	cbnz	r3, 800e836 <_svfiprintf_r+0x32>
 800e81c:	2140      	movs	r1, #64	; 0x40
 800e81e:	f7ff fe81 	bl	800e524 <_malloc_r>
 800e822:	6028      	str	r0, [r5, #0]
 800e824:	6128      	str	r0, [r5, #16]
 800e826:	b920      	cbnz	r0, 800e832 <_svfiprintf_r+0x2e>
 800e828:	230c      	movs	r3, #12
 800e82a:	603b      	str	r3, [r7, #0]
 800e82c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e830:	e0d1      	b.n	800e9d6 <_svfiprintf_r+0x1d2>
 800e832:	2340      	movs	r3, #64	; 0x40
 800e834:	616b      	str	r3, [r5, #20]
 800e836:	2300      	movs	r3, #0
 800e838:	9309      	str	r3, [sp, #36]	; 0x24
 800e83a:	2320      	movs	r3, #32
 800e83c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e840:	f8cd 800c 	str.w	r8, [sp, #12]
 800e844:	2330      	movs	r3, #48	; 0x30
 800e846:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e9f0 <_svfiprintf_r+0x1ec>
 800e84a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e84e:	f04f 0901 	mov.w	r9, #1
 800e852:	4623      	mov	r3, r4
 800e854:	469a      	mov	sl, r3
 800e856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e85a:	b10a      	cbz	r2, 800e860 <_svfiprintf_r+0x5c>
 800e85c:	2a25      	cmp	r2, #37	; 0x25
 800e85e:	d1f9      	bne.n	800e854 <_svfiprintf_r+0x50>
 800e860:	ebba 0b04 	subs.w	fp, sl, r4
 800e864:	d00b      	beq.n	800e87e <_svfiprintf_r+0x7a>
 800e866:	465b      	mov	r3, fp
 800e868:	4622      	mov	r2, r4
 800e86a:	4629      	mov	r1, r5
 800e86c:	4638      	mov	r0, r7
 800e86e:	f7ff ff6d 	bl	800e74c <__ssputs_r>
 800e872:	3001      	adds	r0, #1
 800e874:	f000 80aa 	beq.w	800e9cc <_svfiprintf_r+0x1c8>
 800e878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e87a:	445a      	add	r2, fp
 800e87c:	9209      	str	r2, [sp, #36]	; 0x24
 800e87e:	f89a 3000 	ldrb.w	r3, [sl]
 800e882:	2b00      	cmp	r3, #0
 800e884:	f000 80a2 	beq.w	800e9cc <_svfiprintf_r+0x1c8>
 800e888:	2300      	movs	r3, #0
 800e88a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e88e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e892:	f10a 0a01 	add.w	sl, sl, #1
 800e896:	9304      	str	r3, [sp, #16]
 800e898:	9307      	str	r3, [sp, #28]
 800e89a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e89e:	931a      	str	r3, [sp, #104]	; 0x68
 800e8a0:	4654      	mov	r4, sl
 800e8a2:	2205      	movs	r2, #5
 800e8a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a8:	4851      	ldr	r0, [pc, #324]	; (800e9f0 <_svfiprintf_r+0x1ec>)
 800e8aa:	f7f1 fd19 	bl	80002e0 <memchr>
 800e8ae:	9a04      	ldr	r2, [sp, #16]
 800e8b0:	b9d8      	cbnz	r0, 800e8ea <_svfiprintf_r+0xe6>
 800e8b2:	06d0      	lsls	r0, r2, #27
 800e8b4:	bf44      	itt	mi
 800e8b6:	2320      	movmi	r3, #32
 800e8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8bc:	0711      	lsls	r1, r2, #28
 800e8be:	bf44      	itt	mi
 800e8c0:	232b      	movmi	r3, #43	; 0x2b
 800e8c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8c6:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ca:	2b2a      	cmp	r3, #42	; 0x2a
 800e8cc:	d015      	beq.n	800e8fa <_svfiprintf_r+0xf6>
 800e8ce:	9a07      	ldr	r2, [sp, #28]
 800e8d0:	4654      	mov	r4, sl
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	f04f 0c0a 	mov.w	ip, #10
 800e8d8:	4621      	mov	r1, r4
 800e8da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8de:	3b30      	subs	r3, #48	; 0x30
 800e8e0:	2b09      	cmp	r3, #9
 800e8e2:	d94e      	bls.n	800e982 <_svfiprintf_r+0x17e>
 800e8e4:	b1b0      	cbz	r0, 800e914 <_svfiprintf_r+0x110>
 800e8e6:	9207      	str	r2, [sp, #28]
 800e8e8:	e014      	b.n	800e914 <_svfiprintf_r+0x110>
 800e8ea:	eba0 0308 	sub.w	r3, r0, r8
 800e8ee:	fa09 f303 	lsl.w	r3, r9, r3
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	9304      	str	r3, [sp, #16]
 800e8f6:	46a2      	mov	sl, r4
 800e8f8:	e7d2      	b.n	800e8a0 <_svfiprintf_r+0x9c>
 800e8fa:	9b03      	ldr	r3, [sp, #12]
 800e8fc:	1d19      	adds	r1, r3, #4
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	9103      	str	r1, [sp, #12]
 800e902:	2b00      	cmp	r3, #0
 800e904:	bfbb      	ittet	lt
 800e906:	425b      	neglt	r3, r3
 800e908:	f042 0202 	orrlt.w	r2, r2, #2
 800e90c:	9307      	strge	r3, [sp, #28]
 800e90e:	9307      	strlt	r3, [sp, #28]
 800e910:	bfb8      	it	lt
 800e912:	9204      	strlt	r2, [sp, #16]
 800e914:	7823      	ldrb	r3, [r4, #0]
 800e916:	2b2e      	cmp	r3, #46	; 0x2e
 800e918:	d10c      	bne.n	800e934 <_svfiprintf_r+0x130>
 800e91a:	7863      	ldrb	r3, [r4, #1]
 800e91c:	2b2a      	cmp	r3, #42	; 0x2a
 800e91e:	d135      	bne.n	800e98c <_svfiprintf_r+0x188>
 800e920:	9b03      	ldr	r3, [sp, #12]
 800e922:	1d1a      	adds	r2, r3, #4
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	9203      	str	r2, [sp, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	bfb8      	it	lt
 800e92c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e930:	3402      	adds	r4, #2
 800e932:	9305      	str	r3, [sp, #20]
 800e934:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea00 <_svfiprintf_r+0x1fc>
 800e938:	7821      	ldrb	r1, [r4, #0]
 800e93a:	2203      	movs	r2, #3
 800e93c:	4650      	mov	r0, sl
 800e93e:	f7f1 fccf 	bl	80002e0 <memchr>
 800e942:	b140      	cbz	r0, 800e956 <_svfiprintf_r+0x152>
 800e944:	2340      	movs	r3, #64	; 0x40
 800e946:	eba0 000a 	sub.w	r0, r0, sl
 800e94a:	fa03 f000 	lsl.w	r0, r3, r0
 800e94e:	9b04      	ldr	r3, [sp, #16]
 800e950:	4303      	orrs	r3, r0
 800e952:	3401      	adds	r4, #1
 800e954:	9304      	str	r3, [sp, #16]
 800e956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e95a:	4826      	ldr	r0, [pc, #152]	; (800e9f4 <_svfiprintf_r+0x1f0>)
 800e95c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e960:	2206      	movs	r2, #6
 800e962:	f7f1 fcbd 	bl	80002e0 <memchr>
 800e966:	2800      	cmp	r0, #0
 800e968:	d038      	beq.n	800e9dc <_svfiprintf_r+0x1d8>
 800e96a:	4b23      	ldr	r3, [pc, #140]	; (800e9f8 <_svfiprintf_r+0x1f4>)
 800e96c:	bb1b      	cbnz	r3, 800e9b6 <_svfiprintf_r+0x1b2>
 800e96e:	9b03      	ldr	r3, [sp, #12]
 800e970:	3307      	adds	r3, #7
 800e972:	f023 0307 	bic.w	r3, r3, #7
 800e976:	3308      	adds	r3, #8
 800e978:	9303      	str	r3, [sp, #12]
 800e97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e97c:	4433      	add	r3, r6
 800e97e:	9309      	str	r3, [sp, #36]	; 0x24
 800e980:	e767      	b.n	800e852 <_svfiprintf_r+0x4e>
 800e982:	fb0c 3202 	mla	r2, ip, r2, r3
 800e986:	460c      	mov	r4, r1
 800e988:	2001      	movs	r0, #1
 800e98a:	e7a5      	b.n	800e8d8 <_svfiprintf_r+0xd4>
 800e98c:	2300      	movs	r3, #0
 800e98e:	3401      	adds	r4, #1
 800e990:	9305      	str	r3, [sp, #20]
 800e992:	4619      	mov	r1, r3
 800e994:	f04f 0c0a 	mov.w	ip, #10
 800e998:	4620      	mov	r0, r4
 800e99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e99e:	3a30      	subs	r2, #48	; 0x30
 800e9a0:	2a09      	cmp	r2, #9
 800e9a2:	d903      	bls.n	800e9ac <_svfiprintf_r+0x1a8>
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d0c5      	beq.n	800e934 <_svfiprintf_r+0x130>
 800e9a8:	9105      	str	r1, [sp, #20]
 800e9aa:	e7c3      	b.n	800e934 <_svfiprintf_r+0x130>
 800e9ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e7f0      	b.n	800e998 <_svfiprintf_r+0x194>
 800e9b6:	ab03      	add	r3, sp, #12
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	462a      	mov	r2, r5
 800e9bc:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <_svfiprintf_r+0x1f8>)
 800e9be:	a904      	add	r1, sp, #16
 800e9c0:	4638      	mov	r0, r7
 800e9c2:	f3af 8000 	nop.w
 800e9c6:	1c42      	adds	r2, r0, #1
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	d1d6      	bne.n	800e97a <_svfiprintf_r+0x176>
 800e9cc:	89ab      	ldrh	r3, [r5, #12]
 800e9ce:	065b      	lsls	r3, r3, #25
 800e9d0:	f53f af2c 	bmi.w	800e82c <_svfiprintf_r+0x28>
 800e9d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9d6:	b01d      	add	sp, #116	; 0x74
 800e9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9dc:	ab03      	add	r3, sp, #12
 800e9de:	9300      	str	r3, [sp, #0]
 800e9e0:	462a      	mov	r2, r5
 800e9e2:	4b06      	ldr	r3, [pc, #24]	; (800e9fc <_svfiprintf_r+0x1f8>)
 800e9e4:	a904      	add	r1, sp, #16
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	f000 f87a 	bl	800eae0 <_printf_i>
 800e9ec:	e7eb      	b.n	800e9c6 <_svfiprintf_r+0x1c2>
 800e9ee:	bf00      	nop
 800e9f0:	0800f7c4 	.word	0x0800f7c4
 800e9f4:	0800f7ce 	.word	0x0800f7ce
 800e9f8:	00000000 	.word	0x00000000
 800e9fc:	0800e74d 	.word	0x0800e74d
 800ea00:	0800f7ca 	.word	0x0800f7ca

0800ea04 <_printf_common>:
 800ea04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea08:	4616      	mov	r6, r2
 800ea0a:	4699      	mov	r9, r3
 800ea0c:	688a      	ldr	r2, [r1, #8]
 800ea0e:	690b      	ldr	r3, [r1, #16]
 800ea10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea14:	4293      	cmp	r3, r2
 800ea16:	bfb8      	it	lt
 800ea18:	4613      	movlt	r3, r2
 800ea1a:	6033      	str	r3, [r6, #0]
 800ea1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea20:	4607      	mov	r7, r0
 800ea22:	460c      	mov	r4, r1
 800ea24:	b10a      	cbz	r2, 800ea2a <_printf_common+0x26>
 800ea26:	3301      	adds	r3, #1
 800ea28:	6033      	str	r3, [r6, #0]
 800ea2a:	6823      	ldr	r3, [r4, #0]
 800ea2c:	0699      	lsls	r1, r3, #26
 800ea2e:	bf42      	ittt	mi
 800ea30:	6833      	ldrmi	r3, [r6, #0]
 800ea32:	3302      	addmi	r3, #2
 800ea34:	6033      	strmi	r3, [r6, #0]
 800ea36:	6825      	ldr	r5, [r4, #0]
 800ea38:	f015 0506 	ands.w	r5, r5, #6
 800ea3c:	d106      	bne.n	800ea4c <_printf_common+0x48>
 800ea3e:	f104 0a19 	add.w	sl, r4, #25
 800ea42:	68e3      	ldr	r3, [r4, #12]
 800ea44:	6832      	ldr	r2, [r6, #0]
 800ea46:	1a9b      	subs	r3, r3, r2
 800ea48:	42ab      	cmp	r3, r5
 800ea4a:	dc26      	bgt.n	800ea9a <_printf_common+0x96>
 800ea4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea50:	1e13      	subs	r3, r2, #0
 800ea52:	6822      	ldr	r2, [r4, #0]
 800ea54:	bf18      	it	ne
 800ea56:	2301      	movne	r3, #1
 800ea58:	0692      	lsls	r2, r2, #26
 800ea5a:	d42b      	bmi.n	800eab4 <_printf_common+0xb0>
 800ea5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea60:	4649      	mov	r1, r9
 800ea62:	4638      	mov	r0, r7
 800ea64:	47c0      	blx	r8
 800ea66:	3001      	adds	r0, #1
 800ea68:	d01e      	beq.n	800eaa8 <_printf_common+0xa4>
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	68e5      	ldr	r5, [r4, #12]
 800ea6e:	6832      	ldr	r2, [r6, #0]
 800ea70:	f003 0306 	and.w	r3, r3, #6
 800ea74:	2b04      	cmp	r3, #4
 800ea76:	bf08      	it	eq
 800ea78:	1aad      	subeq	r5, r5, r2
 800ea7a:	68a3      	ldr	r3, [r4, #8]
 800ea7c:	6922      	ldr	r2, [r4, #16]
 800ea7e:	bf0c      	ite	eq
 800ea80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea84:	2500      	movne	r5, #0
 800ea86:	4293      	cmp	r3, r2
 800ea88:	bfc4      	itt	gt
 800ea8a:	1a9b      	subgt	r3, r3, r2
 800ea8c:	18ed      	addgt	r5, r5, r3
 800ea8e:	2600      	movs	r6, #0
 800ea90:	341a      	adds	r4, #26
 800ea92:	42b5      	cmp	r5, r6
 800ea94:	d11a      	bne.n	800eacc <_printf_common+0xc8>
 800ea96:	2000      	movs	r0, #0
 800ea98:	e008      	b.n	800eaac <_printf_common+0xa8>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	4652      	mov	r2, sl
 800ea9e:	4649      	mov	r1, r9
 800eaa0:	4638      	mov	r0, r7
 800eaa2:	47c0      	blx	r8
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	d103      	bne.n	800eab0 <_printf_common+0xac>
 800eaa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eaac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eab0:	3501      	adds	r5, #1
 800eab2:	e7c6      	b.n	800ea42 <_printf_common+0x3e>
 800eab4:	18e1      	adds	r1, r4, r3
 800eab6:	1c5a      	adds	r2, r3, #1
 800eab8:	2030      	movs	r0, #48	; 0x30
 800eaba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eabe:	4422      	add	r2, r4
 800eac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eac8:	3302      	adds	r3, #2
 800eaca:	e7c7      	b.n	800ea5c <_printf_common+0x58>
 800eacc:	2301      	movs	r3, #1
 800eace:	4622      	mov	r2, r4
 800ead0:	4649      	mov	r1, r9
 800ead2:	4638      	mov	r0, r7
 800ead4:	47c0      	blx	r8
 800ead6:	3001      	adds	r0, #1
 800ead8:	d0e6      	beq.n	800eaa8 <_printf_common+0xa4>
 800eada:	3601      	adds	r6, #1
 800eadc:	e7d9      	b.n	800ea92 <_printf_common+0x8e>
	...

0800eae0 <_printf_i>:
 800eae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eae4:	460c      	mov	r4, r1
 800eae6:	4691      	mov	r9, r2
 800eae8:	7e27      	ldrb	r7, [r4, #24]
 800eaea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eaec:	2f78      	cmp	r7, #120	; 0x78
 800eaee:	4680      	mov	r8, r0
 800eaf0:	469a      	mov	sl, r3
 800eaf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eaf6:	d807      	bhi.n	800eb08 <_printf_i+0x28>
 800eaf8:	2f62      	cmp	r7, #98	; 0x62
 800eafa:	d80a      	bhi.n	800eb12 <_printf_i+0x32>
 800eafc:	2f00      	cmp	r7, #0
 800eafe:	f000 80d8 	beq.w	800ecb2 <_printf_i+0x1d2>
 800eb02:	2f58      	cmp	r7, #88	; 0x58
 800eb04:	f000 80a3 	beq.w	800ec4e <_printf_i+0x16e>
 800eb08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb10:	e03a      	b.n	800eb88 <_printf_i+0xa8>
 800eb12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb16:	2b15      	cmp	r3, #21
 800eb18:	d8f6      	bhi.n	800eb08 <_printf_i+0x28>
 800eb1a:	a001      	add	r0, pc, #4	; (adr r0, 800eb20 <_printf_i+0x40>)
 800eb1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eb20:	0800eb79 	.word	0x0800eb79
 800eb24:	0800eb8d 	.word	0x0800eb8d
 800eb28:	0800eb09 	.word	0x0800eb09
 800eb2c:	0800eb09 	.word	0x0800eb09
 800eb30:	0800eb09 	.word	0x0800eb09
 800eb34:	0800eb09 	.word	0x0800eb09
 800eb38:	0800eb8d 	.word	0x0800eb8d
 800eb3c:	0800eb09 	.word	0x0800eb09
 800eb40:	0800eb09 	.word	0x0800eb09
 800eb44:	0800eb09 	.word	0x0800eb09
 800eb48:	0800eb09 	.word	0x0800eb09
 800eb4c:	0800ec99 	.word	0x0800ec99
 800eb50:	0800ebbd 	.word	0x0800ebbd
 800eb54:	0800ec7b 	.word	0x0800ec7b
 800eb58:	0800eb09 	.word	0x0800eb09
 800eb5c:	0800eb09 	.word	0x0800eb09
 800eb60:	0800ecbb 	.word	0x0800ecbb
 800eb64:	0800eb09 	.word	0x0800eb09
 800eb68:	0800ebbd 	.word	0x0800ebbd
 800eb6c:	0800eb09 	.word	0x0800eb09
 800eb70:	0800eb09 	.word	0x0800eb09
 800eb74:	0800ec83 	.word	0x0800ec83
 800eb78:	680b      	ldr	r3, [r1, #0]
 800eb7a:	1d1a      	adds	r2, r3, #4
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	600a      	str	r2, [r1, #0]
 800eb80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e0a3      	b.n	800ecd4 <_printf_i+0x1f4>
 800eb8c:	6825      	ldr	r5, [r4, #0]
 800eb8e:	6808      	ldr	r0, [r1, #0]
 800eb90:	062e      	lsls	r6, r5, #24
 800eb92:	f100 0304 	add.w	r3, r0, #4
 800eb96:	d50a      	bpl.n	800ebae <_printf_i+0xce>
 800eb98:	6805      	ldr	r5, [r0, #0]
 800eb9a:	600b      	str	r3, [r1, #0]
 800eb9c:	2d00      	cmp	r5, #0
 800eb9e:	da03      	bge.n	800eba8 <_printf_i+0xc8>
 800eba0:	232d      	movs	r3, #45	; 0x2d
 800eba2:	426d      	negs	r5, r5
 800eba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eba8:	485e      	ldr	r0, [pc, #376]	; (800ed24 <_printf_i+0x244>)
 800ebaa:	230a      	movs	r3, #10
 800ebac:	e019      	b.n	800ebe2 <_printf_i+0x102>
 800ebae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ebb2:	6805      	ldr	r5, [r0, #0]
 800ebb4:	600b      	str	r3, [r1, #0]
 800ebb6:	bf18      	it	ne
 800ebb8:	b22d      	sxthne	r5, r5
 800ebba:	e7ef      	b.n	800eb9c <_printf_i+0xbc>
 800ebbc:	680b      	ldr	r3, [r1, #0]
 800ebbe:	6825      	ldr	r5, [r4, #0]
 800ebc0:	1d18      	adds	r0, r3, #4
 800ebc2:	6008      	str	r0, [r1, #0]
 800ebc4:	0628      	lsls	r0, r5, #24
 800ebc6:	d501      	bpl.n	800ebcc <_printf_i+0xec>
 800ebc8:	681d      	ldr	r5, [r3, #0]
 800ebca:	e002      	b.n	800ebd2 <_printf_i+0xf2>
 800ebcc:	0669      	lsls	r1, r5, #25
 800ebce:	d5fb      	bpl.n	800ebc8 <_printf_i+0xe8>
 800ebd0:	881d      	ldrh	r5, [r3, #0]
 800ebd2:	4854      	ldr	r0, [pc, #336]	; (800ed24 <_printf_i+0x244>)
 800ebd4:	2f6f      	cmp	r7, #111	; 0x6f
 800ebd6:	bf0c      	ite	eq
 800ebd8:	2308      	moveq	r3, #8
 800ebda:	230a      	movne	r3, #10
 800ebdc:	2100      	movs	r1, #0
 800ebde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ebe2:	6866      	ldr	r6, [r4, #4]
 800ebe4:	60a6      	str	r6, [r4, #8]
 800ebe6:	2e00      	cmp	r6, #0
 800ebe8:	bfa2      	ittt	ge
 800ebea:	6821      	ldrge	r1, [r4, #0]
 800ebec:	f021 0104 	bicge.w	r1, r1, #4
 800ebf0:	6021      	strge	r1, [r4, #0]
 800ebf2:	b90d      	cbnz	r5, 800ebf8 <_printf_i+0x118>
 800ebf4:	2e00      	cmp	r6, #0
 800ebf6:	d04d      	beq.n	800ec94 <_printf_i+0x1b4>
 800ebf8:	4616      	mov	r6, r2
 800ebfa:	fbb5 f1f3 	udiv	r1, r5, r3
 800ebfe:	fb03 5711 	mls	r7, r3, r1, r5
 800ec02:	5dc7      	ldrb	r7, [r0, r7]
 800ec04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec08:	462f      	mov	r7, r5
 800ec0a:	42bb      	cmp	r3, r7
 800ec0c:	460d      	mov	r5, r1
 800ec0e:	d9f4      	bls.n	800ebfa <_printf_i+0x11a>
 800ec10:	2b08      	cmp	r3, #8
 800ec12:	d10b      	bne.n	800ec2c <_printf_i+0x14c>
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	07df      	lsls	r7, r3, #31
 800ec18:	d508      	bpl.n	800ec2c <_printf_i+0x14c>
 800ec1a:	6923      	ldr	r3, [r4, #16]
 800ec1c:	6861      	ldr	r1, [r4, #4]
 800ec1e:	4299      	cmp	r1, r3
 800ec20:	bfde      	ittt	le
 800ec22:	2330      	movle	r3, #48	; 0x30
 800ec24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec28:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ec2c:	1b92      	subs	r2, r2, r6
 800ec2e:	6122      	str	r2, [r4, #16]
 800ec30:	f8cd a000 	str.w	sl, [sp]
 800ec34:	464b      	mov	r3, r9
 800ec36:	aa03      	add	r2, sp, #12
 800ec38:	4621      	mov	r1, r4
 800ec3a:	4640      	mov	r0, r8
 800ec3c:	f7ff fee2 	bl	800ea04 <_printf_common>
 800ec40:	3001      	adds	r0, #1
 800ec42:	d14c      	bne.n	800ecde <_printf_i+0x1fe>
 800ec44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec48:	b004      	add	sp, #16
 800ec4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec4e:	4835      	ldr	r0, [pc, #212]	; (800ed24 <_printf_i+0x244>)
 800ec50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	680e      	ldr	r6, [r1, #0]
 800ec58:	061f      	lsls	r7, r3, #24
 800ec5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ec5e:	600e      	str	r6, [r1, #0]
 800ec60:	d514      	bpl.n	800ec8c <_printf_i+0x1ac>
 800ec62:	07d9      	lsls	r1, r3, #31
 800ec64:	bf44      	itt	mi
 800ec66:	f043 0320 	orrmi.w	r3, r3, #32
 800ec6a:	6023      	strmi	r3, [r4, #0]
 800ec6c:	b91d      	cbnz	r5, 800ec76 <_printf_i+0x196>
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	f023 0320 	bic.w	r3, r3, #32
 800ec74:	6023      	str	r3, [r4, #0]
 800ec76:	2310      	movs	r3, #16
 800ec78:	e7b0      	b.n	800ebdc <_printf_i+0xfc>
 800ec7a:	6823      	ldr	r3, [r4, #0]
 800ec7c:	f043 0320 	orr.w	r3, r3, #32
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	2378      	movs	r3, #120	; 0x78
 800ec84:	4828      	ldr	r0, [pc, #160]	; (800ed28 <_printf_i+0x248>)
 800ec86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec8a:	e7e3      	b.n	800ec54 <_printf_i+0x174>
 800ec8c:	065e      	lsls	r6, r3, #25
 800ec8e:	bf48      	it	mi
 800ec90:	b2ad      	uxthmi	r5, r5
 800ec92:	e7e6      	b.n	800ec62 <_printf_i+0x182>
 800ec94:	4616      	mov	r6, r2
 800ec96:	e7bb      	b.n	800ec10 <_printf_i+0x130>
 800ec98:	680b      	ldr	r3, [r1, #0]
 800ec9a:	6826      	ldr	r6, [r4, #0]
 800ec9c:	6960      	ldr	r0, [r4, #20]
 800ec9e:	1d1d      	adds	r5, r3, #4
 800eca0:	600d      	str	r5, [r1, #0]
 800eca2:	0635      	lsls	r5, r6, #24
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	d501      	bpl.n	800ecac <_printf_i+0x1cc>
 800eca8:	6018      	str	r0, [r3, #0]
 800ecaa:	e002      	b.n	800ecb2 <_printf_i+0x1d2>
 800ecac:	0671      	lsls	r1, r6, #25
 800ecae:	d5fb      	bpl.n	800eca8 <_printf_i+0x1c8>
 800ecb0:	8018      	strh	r0, [r3, #0]
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	6123      	str	r3, [r4, #16]
 800ecb6:	4616      	mov	r6, r2
 800ecb8:	e7ba      	b.n	800ec30 <_printf_i+0x150>
 800ecba:	680b      	ldr	r3, [r1, #0]
 800ecbc:	1d1a      	adds	r2, r3, #4
 800ecbe:	600a      	str	r2, [r1, #0]
 800ecc0:	681e      	ldr	r6, [r3, #0]
 800ecc2:	6862      	ldr	r2, [r4, #4]
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	4630      	mov	r0, r6
 800ecc8:	f7f1 fb0a 	bl	80002e0 <memchr>
 800eccc:	b108      	cbz	r0, 800ecd2 <_printf_i+0x1f2>
 800ecce:	1b80      	subs	r0, r0, r6
 800ecd0:	6060      	str	r0, [r4, #4]
 800ecd2:	6863      	ldr	r3, [r4, #4]
 800ecd4:	6123      	str	r3, [r4, #16]
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecdc:	e7a8      	b.n	800ec30 <_printf_i+0x150>
 800ecde:	6923      	ldr	r3, [r4, #16]
 800ece0:	4632      	mov	r2, r6
 800ece2:	4649      	mov	r1, r9
 800ece4:	4640      	mov	r0, r8
 800ece6:	47d0      	blx	sl
 800ece8:	3001      	adds	r0, #1
 800ecea:	d0ab      	beq.n	800ec44 <_printf_i+0x164>
 800ecec:	6823      	ldr	r3, [r4, #0]
 800ecee:	079b      	lsls	r3, r3, #30
 800ecf0:	d413      	bmi.n	800ed1a <_printf_i+0x23a>
 800ecf2:	68e0      	ldr	r0, [r4, #12]
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	4298      	cmp	r0, r3
 800ecf8:	bfb8      	it	lt
 800ecfa:	4618      	movlt	r0, r3
 800ecfc:	e7a4      	b.n	800ec48 <_printf_i+0x168>
 800ecfe:	2301      	movs	r3, #1
 800ed00:	4632      	mov	r2, r6
 800ed02:	4649      	mov	r1, r9
 800ed04:	4640      	mov	r0, r8
 800ed06:	47d0      	blx	sl
 800ed08:	3001      	adds	r0, #1
 800ed0a:	d09b      	beq.n	800ec44 <_printf_i+0x164>
 800ed0c:	3501      	adds	r5, #1
 800ed0e:	68e3      	ldr	r3, [r4, #12]
 800ed10:	9903      	ldr	r1, [sp, #12]
 800ed12:	1a5b      	subs	r3, r3, r1
 800ed14:	42ab      	cmp	r3, r5
 800ed16:	dcf2      	bgt.n	800ecfe <_printf_i+0x21e>
 800ed18:	e7eb      	b.n	800ecf2 <_printf_i+0x212>
 800ed1a:	2500      	movs	r5, #0
 800ed1c:	f104 0619 	add.w	r6, r4, #25
 800ed20:	e7f5      	b.n	800ed0e <_printf_i+0x22e>
 800ed22:	bf00      	nop
 800ed24:	0800f7d5 	.word	0x0800f7d5
 800ed28:	0800f7e6 	.word	0x0800f7e6

0800ed2c <__retarget_lock_acquire_recursive>:
 800ed2c:	4770      	bx	lr

0800ed2e <__retarget_lock_release_recursive>:
 800ed2e:	4770      	bx	lr

0800ed30 <_realloc_r>:
 800ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed32:	4607      	mov	r7, r0
 800ed34:	4614      	mov	r4, r2
 800ed36:	460e      	mov	r6, r1
 800ed38:	b921      	cbnz	r1, 800ed44 <_realloc_r+0x14>
 800ed3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed3e:	4611      	mov	r1, r2
 800ed40:	f7ff bbf0 	b.w	800e524 <_malloc_r>
 800ed44:	b922      	cbnz	r2, 800ed50 <_realloc_r+0x20>
 800ed46:	f7ff fb9d 	bl	800e484 <_free_r>
 800ed4a:	4625      	mov	r5, r4
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed50:	f000 f814 	bl	800ed7c <_malloc_usable_size_r>
 800ed54:	42a0      	cmp	r0, r4
 800ed56:	d20f      	bcs.n	800ed78 <_realloc_r+0x48>
 800ed58:	4621      	mov	r1, r4
 800ed5a:	4638      	mov	r0, r7
 800ed5c:	f7ff fbe2 	bl	800e524 <_malloc_r>
 800ed60:	4605      	mov	r5, r0
 800ed62:	2800      	cmp	r0, #0
 800ed64:	d0f2      	beq.n	800ed4c <_realloc_r+0x1c>
 800ed66:	4631      	mov	r1, r6
 800ed68:	4622      	mov	r2, r4
 800ed6a:	f7ff fb5b 	bl	800e424 <memcpy>
 800ed6e:	4631      	mov	r1, r6
 800ed70:	4638      	mov	r0, r7
 800ed72:	f7ff fb87 	bl	800e484 <_free_r>
 800ed76:	e7e9      	b.n	800ed4c <_realloc_r+0x1c>
 800ed78:	4635      	mov	r5, r6
 800ed7a:	e7e7      	b.n	800ed4c <_realloc_r+0x1c>

0800ed7c <_malloc_usable_size_r>:
 800ed7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed80:	1f18      	subs	r0, r3, #4
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	bfbc      	itt	lt
 800ed86:	580b      	ldrlt	r3, [r1, r0]
 800ed88:	18c0      	addlt	r0, r0, r3
 800ed8a:	4770      	bx	lr

0800ed8c <_init>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	bf00      	nop
 800ed90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed92:	bc08      	pop	{r3}
 800ed94:	469e      	mov	lr, r3
 800ed96:	4770      	bx	lr

0800ed98 <_fini>:
 800ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed9a:	bf00      	nop
 800ed9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed9e:	bc08      	pop	{r3}
 800eda0:	469e      	mov	lr, r3
 800eda2:	4770      	bx	lr
